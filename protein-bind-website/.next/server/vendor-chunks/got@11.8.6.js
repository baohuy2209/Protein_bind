"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/got@11.8.6";
exports.ids = ["vendor-chunks/got@11.8.6"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/create-rejection.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/create-rejection.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/types.js\");\nfunction createRejection(error, ...beforeErrorGroups) {\n    const promise = (async () => {\n        if (error instanceof types_1.RequestError) {\n            try {\n                for (const hooks of beforeErrorGroups) {\n                    if (hooks) {\n                        for (const hook of hooks) {\n                            // eslint-disable-next-line no-await-in-loop\n                            error = await hook(error);\n                        }\n                    }\n                }\n            }\n            catch (error_) {\n                error = error_;\n            }\n        }\n        throw error;\n    })();\n    const returnPromise = () => promise;\n    promise.json = returnPromise;\n    promise.text = returnPromise;\n    promise.buffer = returnPromise;\n    promise.on = returnPromise;\n    return promise;\n}\nexports[\"default\"] = createRejection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvY3JlYXRlLXJlamVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyx1R0FBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3RlaW4tYmluZC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2dvdEAxMS44LjYvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9hcy1wcm9taXNlL2NyZWF0ZS1yZWplY3Rpb24uanM/Y2IyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZVJlamVjdGlvbihlcnJvciwgLi4uYmVmb3JlRXJyb3JHcm91cHMpIHtcbiAgICBjb25zdCBwcm9taXNlID0gKGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgdHlwZXNfMS5SZXF1ZXN0RXJyb3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBob29rcyBvZiBiZWZvcmVFcnJvckdyb3Vwcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaG9vayBvZiBob29rcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBhd2FpdCBob29rKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcl8pIHtcbiAgICAgICAgICAgICAgICBlcnJvciA9IGVycm9yXztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9KSgpO1xuICAgIGNvbnN0IHJldHVyblByb21pc2UgPSAoKSA9PiBwcm9taXNlO1xuICAgIHByb21pc2UuanNvbiA9IHJldHVyblByb21pc2U7XG4gICAgcHJvbWlzZS50ZXh0ID0gcmV0dXJuUHJvbWlzZTtcbiAgICBwcm9taXNlLmJ1ZmZlciA9IHJldHVyblByb21pc2U7XG4gICAgcHJvbWlzZS5vbiA9IHJldHVyblByb21pc2U7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVSZWplY3Rpb247XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/create-rejection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/index.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(ssr)/./node_modules/.pnpm/@sindresorhus+is@4.6.0/node_modules/@sindresorhus/is/dist/index.js\");\nconst PCancelable = __webpack_require__(/*! p-cancelable */ \"(ssr)/./node_modules/.pnpm/p-cancelable@2.1.1/node_modules/p-cancelable/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/types.js\");\nconst parse_body_1 = __webpack_require__(/*! ./parse-body */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/parse-body.js\");\nconst core_1 = __webpack_require__(/*! ../core */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/index.js\");\nconst proxy_events_1 = __webpack_require__(/*! ../core/utils/proxy-events */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/proxy-events.js\");\nconst get_buffer_1 = __webpack_require__(/*! ../core/utils/get-buffer */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/get-buffer.js\");\nconst is_response_ok_1 = __webpack_require__(/*! ../core/utils/is-response-ok */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/is-response-ok.js\");\nconst proxiedRequestEvents = [\n    'request',\n    'response',\n    'redirect',\n    'uploadProgress',\n    'downloadProgress'\n];\nfunction asPromise(normalizedOptions) {\n    let globalRequest;\n    let globalResponse;\n    const emitter = new events_1.EventEmitter();\n    const promise = new PCancelable((resolve, reject, onCancel) => {\n        const makeRequest = (retryCount) => {\n            const request = new core_1.default(undefined, normalizedOptions);\n            request.retryCount = retryCount;\n            request._noPipe = true;\n            onCancel(() => request.destroy());\n            onCancel.shouldReject = false;\n            onCancel(() => reject(new types_1.CancelError(request)));\n            globalRequest = request;\n            request.once('response', async (response) => {\n                var _a;\n                response.retryCount = retryCount;\n                if (response.request.aborted) {\n                    // Canceled while downloading - will throw a `CancelError` or `TimeoutError` error\n                    return;\n                }\n                // Download body\n                let rawBody;\n                try {\n                    rawBody = await get_buffer_1.default(request);\n                    response.rawBody = rawBody;\n                }\n                catch (_b) {\n                    // The same error is caught below.\n                    // See request.once('error')\n                    return;\n                }\n                if (request._isAboutToError) {\n                    return;\n                }\n                // Parse body\n                const contentEncoding = ((_a = response.headers['content-encoding']) !== null && _a !== void 0 ? _a : '').toLowerCase();\n                const isCompressed = ['gzip', 'deflate', 'br'].includes(contentEncoding);\n                const { options } = request;\n                if (isCompressed && !options.decompress) {\n                    response.body = rawBody;\n                }\n                else {\n                    try {\n                        response.body = parse_body_1.default(response, options.responseType, options.parseJson, options.encoding);\n                    }\n                    catch (error) {\n                        // Fallback to `utf8`\n                        response.body = rawBody.toString();\n                        if (is_response_ok_1.isResponseOk(response)) {\n                            request._beforeError(error);\n                            return;\n                        }\n                    }\n                }\n                try {\n                    for (const [index, hook] of options.hooks.afterResponse.entries()) {\n                        // @ts-expect-error TS doesn't notice that CancelableRequest is a Promise\n                        // eslint-disable-next-line no-await-in-loop\n                        response = await hook(response, async (updatedOptions) => {\n                            const typedOptions = core_1.default.normalizeArguments(undefined, {\n                                ...updatedOptions,\n                                retry: {\n                                    calculateDelay: () => 0\n                                },\n                                throwHttpErrors: false,\n                                resolveBodyOnly: false\n                            }, options);\n                            // Remove any further hooks for that request, because we'll call them anyway.\n                            // The loop continues. We don't want duplicates (asPromise recursion).\n                            typedOptions.hooks.afterResponse = typedOptions.hooks.afterResponse.slice(0, index);\n                            for (const hook of typedOptions.hooks.beforeRetry) {\n                                // eslint-disable-next-line no-await-in-loop\n                                await hook(typedOptions);\n                            }\n                            const promise = asPromise(typedOptions);\n                            onCancel(() => {\n                                promise.catch(() => { });\n                                promise.cancel();\n                            });\n                            return promise;\n                        });\n                    }\n                }\n                catch (error) {\n                    request._beforeError(new types_1.RequestError(error.message, error, request));\n                    return;\n                }\n                globalResponse = response;\n                if (!is_response_ok_1.isResponseOk(response)) {\n                    request._beforeError(new types_1.HTTPError(response));\n                    return;\n                }\n                request.destroy();\n                resolve(request.options.resolveBodyOnly ? response.body : response);\n            });\n            const onError = (error) => {\n                if (promise.isCanceled) {\n                    return;\n                }\n                const { options } = request;\n                if (error instanceof types_1.HTTPError && !options.throwHttpErrors) {\n                    const { response } = error;\n                    resolve(request.options.resolveBodyOnly ? response.body : response);\n                    return;\n                }\n                reject(error);\n            };\n            request.once('error', onError);\n            const previousBody = request.options.body;\n            request.once('retry', (newRetryCount, error) => {\n                var _a, _b;\n                if (previousBody === ((_a = error.request) === null || _a === void 0 ? void 0 : _a.options.body) && is_1.default.nodeStream((_b = error.request) === null || _b === void 0 ? void 0 : _b.options.body)) {\n                    onError(error);\n                    return;\n                }\n                makeRequest(newRetryCount);\n            });\n            proxy_events_1.default(request, emitter, proxiedRequestEvents);\n        };\n        makeRequest(0);\n    });\n    promise.on = (event, fn) => {\n        emitter.on(event, fn);\n        return promise;\n    };\n    const shortcut = (responseType) => {\n        const newPromise = (async () => {\n            // Wait until downloading has ended\n            await promise;\n            const { options } = globalResponse.request;\n            return parse_body_1.default(globalResponse, responseType, options.parseJson, options.encoding);\n        })();\n        Object.defineProperties(newPromise, Object.getOwnPropertyDescriptors(promise));\n        return newPromise;\n    };\n    promise.json = () => {\n        const { headers } = globalRequest.options;\n        if (!globalRequest.writableFinished && headers.accept === undefined) {\n            headers.accept = 'application/json';\n        }\n        return shortcut('json');\n    };\n    promise.buffer = () => shortcut('buffer');\n    promise.text = () => shortcut('text');\n    return promise;\n}\nexports[\"default\"] = asPromise;\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/types.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/normalize-arguments.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/normalize-arguments.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(ssr)/./node_modules/.pnpm/@sindresorhus+is@4.6.0/node_modules/@sindresorhus/is/dist/index.js\");\nconst normalizeArguments = (options, defaults) => {\n    if (is_1.default.null_(options.encoding)) {\n        throw new TypeError('To get a Buffer, set `options.responseType` to `buffer` instead');\n    }\n    is_1.assert.any([is_1.default.string, is_1.default.undefined], options.encoding);\n    is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.resolveBodyOnly);\n    is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.methodRewriting);\n    is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.isStream);\n    is_1.assert.any([is_1.default.string, is_1.default.undefined], options.responseType);\n    // `options.responseType`\n    if (options.responseType === undefined) {\n        options.responseType = 'text';\n    }\n    // `options.retry`\n    const { retry } = options;\n    if (defaults) {\n        options.retry = { ...defaults.retry };\n    }\n    else {\n        options.retry = {\n            calculateDelay: retryObject => retryObject.computedValue,\n            limit: 0,\n            methods: [],\n            statusCodes: [],\n            errorCodes: [],\n            maxRetryAfter: undefined\n        };\n    }\n    if (is_1.default.object(retry)) {\n        options.retry = {\n            ...options.retry,\n            ...retry\n        };\n        options.retry.methods = [...new Set(options.retry.methods.map(method => method.toUpperCase()))];\n        options.retry.statusCodes = [...new Set(options.retry.statusCodes)];\n        options.retry.errorCodes = [...new Set(options.retry.errorCodes)];\n    }\n    else if (is_1.default.number(retry)) {\n        options.retry.limit = retry;\n    }\n    if (is_1.default.undefined(options.retry.maxRetryAfter)) {\n        options.retry.maxRetryAfter = Math.min(\n        // TypeScript is not smart enough to handle `.filter(x => is.number(x))`.\n        // eslint-disable-next-line unicorn/no-fn-reference-in-iterator\n        ...[options.timeout.request, options.timeout.connect].filter(is_1.default.number));\n    }\n    // `options.pagination`\n    if (is_1.default.object(options.pagination)) {\n        if (defaults) {\n            options.pagination = {\n                ...defaults.pagination,\n                ...options.pagination\n            };\n        }\n        const { pagination } = options;\n        if (!is_1.default.function_(pagination.transform)) {\n            throw new Error('`options.pagination.transform` must be implemented');\n        }\n        if (!is_1.default.function_(pagination.shouldContinue)) {\n            throw new Error('`options.pagination.shouldContinue` must be implemented');\n        }\n        if (!is_1.default.function_(pagination.filter)) {\n            throw new TypeError('`options.pagination.filter` must be implemented');\n        }\n        if (!is_1.default.function_(pagination.paginate)) {\n            throw new Error('`options.pagination.paginate` must be implemented');\n        }\n    }\n    // JSON mode\n    if (options.responseType === 'json' && options.headers.accept === undefined) {\n        options.headers.accept = 'application/json';\n    }\n    return options;\n};\nexports[\"default\"] = normalizeArguments;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2Uvbm9ybWFsaXplLWFyZ3VtZW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsdUhBQWtCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvdGVpbi1iaW5kLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2Uvbm9ybWFsaXplLWFyZ3VtZW50cy5qcz8wZGVlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaXNfMSA9IHJlcXVpcmUoXCJAc2luZHJlc29yaHVzL2lzXCIpO1xuY29uc3Qgbm9ybWFsaXplQXJndW1lbnRzID0gKG9wdGlvbnMsIGRlZmF1bHRzKSA9PiB7XG4gICAgaWYgKGlzXzEuZGVmYXVsdC5udWxsXyhvcHRpb25zLmVuY29kaW5nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUbyBnZXQgYSBCdWZmZXIsIHNldCBgb3B0aW9ucy5yZXNwb25zZVR5cGVgIHRvIGBidWZmZXJgIGluc3RlYWQnKTtcbiAgICB9XG4gICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuc3RyaW5nLCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5lbmNvZGluZyk7XG4gICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuYm9vbGVhbiwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMucmVzb2x2ZUJvZHlPbmx5KTtcbiAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5ib29sZWFuLCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5tZXRob2RSZXdyaXRpbmcpO1xuICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0LmJvb2xlYW4sIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLmlzU3RyZWFtKTtcbiAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5zdHJpbmcsIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLnJlc3BvbnNlVHlwZSk7XG4gICAgLy8gYG9wdGlvbnMucmVzcG9uc2VUeXBlYFxuICAgIGlmIChvcHRpb25zLnJlc3BvbnNlVHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbnMucmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgIH1cbiAgICAvLyBgb3B0aW9ucy5yZXRyeWBcbiAgICBjb25zdCB7IHJldHJ5IH0gPSBvcHRpb25zO1xuICAgIGlmIChkZWZhdWx0cykge1xuICAgICAgICBvcHRpb25zLnJldHJ5ID0geyAuLi5kZWZhdWx0cy5yZXRyeSB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgb3B0aW9ucy5yZXRyeSA9IHtcbiAgICAgICAgICAgIGNhbGN1bGF0ZURlbGF5OiByZXRyeU9iamVjdCA9PiByZXRyeU9iamVjdC5jb21wdXRlZFZhbHVlLFxuICAgICAgICAgICAgbGltaXQ6IDAsXG4gICAgICAgICAgICBtZXRob2RzOiBbXSxcbiAgICAgICAgICAgIHN0YXR1c0NvZGVzOiBbXSxcbiAgICAgICAgICAgIGVycm9yQ29kZXM6IFtdLFxuICAgICAgICAgICAgbWF4UmV0cnlBZnRlcjogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChpc18xLmRlZmF1bHQub2JqZWN0KHJldHJ5KSkge1xuICAgICAgICBvcHRpb25zLnJldHJ5ID0ge1xuICAgICAgICAgICAgLi4ub3B0aW9ucy5yZXRyeSxcbiAgICAgICAgICAgIC4uLnJldHJ5XG4gICAgICAgIH07XG4gICAgICAgIG9wdGlvbnMucmV0cnkubWV0aG9kcyA9IFsuLi5uZXcgU2V0KG9wdGlvbnMucmV0cnkubWV0aG9kcy5tYXAobWV0aG9kID0+IG1ldGhvZC50b1VwcGVyQ2FzZSgpKSldO1xuICAgICAgICBvcHRpb25zLnJldHJ5LnN0YXR1c0NvZGVzID0gWy4uLm5ldyBTZXQob3B0aW9ucy5yZXRyeS5zdGF0dXNDb2RlcyldO1xuICAgICAgICBvcHRpb25zLnJldHJ5LmVycm9yQ29kZXMgPSBbLi4ubmV3IFNldChvcHRpb25zLnJldHJ5LmVycm9yQ29kZXMpXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNfMS5kZWZhdWx0Lm51bWJlcihyZXRyeSkpIHtcbiAgICAgICAgb3B0aW9ucy5yZXRyeS5saW1pdCA9IHJldHJ5O1xuICAgIH1cbiAgICBpZiAoaXNfMS5kZWZhdWx0LnVuZGVmaW5lZChvcHRpb25zLnJldHJ5Lm1heFJldHJ5QWZ0ZXIpKSB7XG4gICAgICAgIG9wdGlvbnMucmV0cnkubWF4UmV0cnlBZnRlciA9IE1hdGgubWluKFxuICAgICAgICAvLyBUeXBlU2NyaXB0IGlzIG5vdCBzbWFydCBlbm91Z2ggdG8gaGFuZGxlIGAuZmlsdGVyKHggPT4gaXMubnVtYmVyKHgpKWAuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL25vLWZuLXJlZmVyZW5jZS1pbi1pdGVyYXRvclxuICAgICAgICAuLi5bb3B0aW9ucy50aW1lb3V0LnJlcXVlc3QsIG9wdGlvbnMudGltZW91dC5jb25uZWN0XS5maWx0ZXIoaXNfMS5kZWZhdWx0Lm51bWJlcikpO1xuICAgIH1cbiAgICAvLyBgb3B0aW9ucy5wYWdpbmF0aW9uYFxuICAgIGlmIChpc18xLmRlZmF1bHQub2JqZWN0KG9wdGlvbnMucGFnaW5hdGlvbikpIHtcbiAgICAgICAgaWYgKGRlZmF1bHRzKSB7XG4gICAgICAgICAgICBvcHRpb25zLnBhZ2luYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgLi4uZGVmYXVsdHMucGFnaW5hdGlvbixcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLnBhZ2luYXRpb25cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBwYWdpbmF0aW9uIH0gPSBvcHRpb25zO1xuICAgICAgICBpZiAoIWlzXzEuZGVmYXVsdC5mdW5jdGlvbl8ocGFnaW5hdGlvbi50cmFuc2Zvcm0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BvcHRpb25zLnBhZ2luYXRpb24udHJhbnNmb3JtYCBtdXN0IGJlIGltcGxlbWVudGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc18xLmRlZmF1bHQuZnVuY3Rpb25fKHBhZ2luYXRpb24uc2hvdWxkQ29udGludWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BvcHRpb25zLnBhZ2luYXRpb24uc2hvdWxkQ29udGludWVgIG11c3QgYmUgaW1wbGVtZW50ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzXzEuZGVmYXVsdC5mdW5jdGlvbl8ocGFnaW5hdGlvbi5maWx0ZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgb3B0aW9ucy5wYWdpbmF0aW9uLmZpbHRlcmAgbXVzdCBiZSBpbXBsZW1lbnRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNfMS5kZWZhdWx0LmZ1bmN0aW9uXyhwYWdpbmF0aW9uLnBhZ2luYXRlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgb3B0aW9ucy5wYWdpbmF0aW9uLnBhZ2luYXRlYCBtdXN0IGJlIGltcGxlbWVudGVkJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSlNPTiBtb2RlXG4gICAgaWYgKG9wdGlvbnMucmVzcG9uc2VUeXBlID09PSAnanNvbicgJiYgb3B0aW9ucy5oZWFkZXJzLmFjY2VwdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbnMuaGVhZGVycy5hY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IG5vcm1hbGl6ZUFyZ3VtZW50cztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/normalize-arguments.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/parse-body.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/parse-body.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/types.js\");\nconst parseBody = (response, responseType, parseJson, encoding) => {\n    const { rawBody } = response;\n    try {\n        if (responseType === 'text') {\n            return rawBody.toString(encoding);\n        }\n        if (responseType === 'json') {\n            return rawBody.length === 0 ? '' : parseJson(rawBody.toString());\n        }\n        if (responseType === 'buffer') {\n            return rawBody;\n        }\n        throw new types_1.ParseError({\n            message: `Unknown body type '${responseType}'`,\n            name: 'Error'\n        }, response);\n    }\n    catch (error) {\n        throw new types_1.ParseError(error, response);\n    }\n};\nexports[\"default\"] = parseBody;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvcGFyc2UtYm9keS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyx1R0FBUztBQUNqQztBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGFBQWE7QUFDeEQ7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvdGVpbi1iaW5kLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvcGFyc2UtYm9keS5qcz9hYmQ2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgcGFyc2VCb2R5ID0gKHJlc3BvbnNlLCByZXNwb25zZVR5cGUsIHBhcnNlSnNvbiwgZW5jb2RpbmcpID0+IHtcbiAgICBjb25zdCB7IHJhd0JvZHkgfSA9IHJlc3BvbnNlO1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChyZXNwb25zZVR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHJhd0JvZHkudG9TdHJpbmcoZW5jb2RpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNwb25zZVR5cGUgPT09ICdqc29uJykge1xuICAgICAgICAgICAgcmV0dXJuIHJhd0JvZHkubGVuZ3RoID09PSAwID8gJycgOiBwYXJzZUpzb24ocmF3Qm9keS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzcG9uc2VUeXBlID09PSAnYnVmZmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIHJhd0JvZHk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuUGFyc2VFcnJvcih7XG4gICAgICAgICAgICBtZXNzYWdlOiBgVW5rbm93biBib2R5IHR5cGUgJyR7cmVzcG9uc2VUeXBlfSdgLFxuICAgICAgICAgICAgbmFtZTogJ0Vycm9yJ1xuICAgICAgICB9LCByZXNwb25zZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgdHlwZXNfMS5QYXJzZUVycm9yKGVycm9yLCByZXNwb25zZSk7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IHBhcnNlQm9keTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/parse-body.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/types.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/types.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CancelError = exports.ParseError = void 0;\nconst core_1 = __webpack_require__(/*! ../core */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/index.js\");\n/**\nAn error to be thrown when server response code is 2xx, and parsing body fails.\nIncludes a `response` property.\n*/\nclass ParseError extends core_1.RequestError {\n    constructor(error, response) {\n        const { options } = response.request;\n        super(`${error.message} in \"${options.url.toString()}\"`, error, response.request);\n        this.name = 'ParseError';\n        this.code = this.code === 'ERR_GOT_REQUEST_ERROR' ? 'ERR_BODY_PARSE_FAILURE' : this.code;\n    }\n}\nexports.ParseError = ParseError;\n/**\nAn error to be thrown when the request is aborted with `.cancel()`.\n*/\nclass CancelError extends core_1.RequestError {\n    constructor(request) {\n        super('Promise was canceled', {}, request);\n        this.name = 'CancelError';\n        this.code = 'ERR_CANCELED';\n    }\n    get isCanceled() {\n        return true;\n    }\n}\nexports.CancelError = CancelError;\n__exportStar(__webpack_require__(/*! ../core */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2FzLXByb21pc2UvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsbUNBQW1DLG9DQUFvQyxnQkFBZ0I7QUFDdkYsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLGtCQUFrQjtBQUN4QyxlQUFlLG1CQUFPLENBQUMsaUdBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFVBQVU7QUFDMUIsaUJBQWlCLGVBQWUsTUFBTSx1QkFBdUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixhQUFhLG1CQUFPLENBQUMsaUdBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm90ZWluLWJpbmQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9nb3RAMTEuOC42L25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvYXMtcHJvbWlzZS90eXBlcy5qcz9mMjRhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNhbmNlbEVycm9yID0gZXhwb3J0cy5QYXJzZUVycm9yID0gdm9pZCAwO1xuY29uc3QgY29yZV8xID0gcmVxdWlyZShcIi4uL2NvcmVcIik7XG4vKipcbkFuIGVycm9yIHRvIGJlIHRocm93biB3aGVuIHNlcnZlciByZXNwb25zZSBjb2RlIGlzIDJ4eCwgYW5kIHBhcnNpbmcgYm9keSBmYWlscy5cbkluY2x1ZGVzIGEgYHJlc3BvbnNlYCBwcm9wZXJ0eS5cbiovXG5jbGFzcyBQYXJzZUVycm9yIGV4dGVuZHMgY29yZV8xLlJlcXVlc3RFcnJvciB7XG4gICAgY29uc3RydWN0b3IoZXJyb3IsIHJlc3BvbnNlKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gcmVzcG9uc2UucmVxdWVzdDtcbiAgICAgICAgc3VwZXIoYCR7ZXJyb3IubWVzc2FnZX0gaW4gXCIke29wdGlvbnMudXJsLnRvU3RyaW5nKCl9XCJgLCBlcnJvciwgcmVzcG9uc2UucmVxdWVzdCk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdQYXJzZUVycm9yJztcbiAgICAgICAgdGhpcy5jb2RlID0gdGhpcy5jb2RlID09PSAnRVJSX0dPVF9SRVFVRVNUX0VSUk9SJyA/ICdFUlJfQk9EWV9QQVJTRV9GQUlMVVJFJyA6IHRoaXMuY29kZTtcbiAgICB9XG59XG5leHBvcnRzLlBhcnNlRXJyb3IgPSBQYXJzZUVycm9yO1xuLyoqXG5BbiBlcnJvciB0byBiZSB0aHJvd24gd2hlbiB0aGUgcmVxdWVzdCBpcyBhYm9ydGVkIHdpdGggYC5jYW5jZWwoKWAuXG4qL1xuY2xhc3MgQ2FuY2VsRXJyb3IgZXh0ZW5kcyBjb3JlXzEuUmVxdWVzdEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihyZXF1ZXN0KSB7XG4gICAgICAgIHN1cGVyKCdQcm9taXNlIHdhcyBjYW5jZWxlZCcsIHt9LCByZXF1ZXN0KTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0NhbmNlbEVycm9yJztcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9DQU5DRUxFRCc7XG4gICAgfVxuICAgIGdldCBpc0NhbmNlbGVkKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5leHBvcnRzLkNhbmNlbEVycm9yID0gQ2FuY2VsRXJyb3I7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4uL2NvcmVcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/calculate-retry-delay.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/calculate-retry-delay.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.retryAfterStatusCodes = void 0;\nexports.retryAfterStatusCodes = new Set([413, 429, 503]);\nconst calculateRetryDelay = ({ attemptCount, retryOptions, error, retryAfter }) => {\n    if (attemptCount > retryOptions.limit) {\n        return 0;\n    }\n    const hasMethod = retryOptions.methods.includes(error.options.method);\n    const hasErrorCode = retryOptions.errorCodes.includes(error.code);\n    const hasStatusCode = error.response && retryOptions.statusCodes.includes(error.response.statusCode);\n    if (!hasMethod || (!hasErrorCode && !hasStatusCode)) {\n        return 0;\n    }\n    if (error.response) {\n        if (retryAfter) {\n            if (retryOptions.maxRetryAfter === undefined || retryAfter > retryOptions.maxRetryAfter) {\n                return 0;\n            }\n            return retryAfter;\n        }\n        if (error.response.statusCode === 413) {\n            return 0;\n        }\n    }\n    const noise = Math.random() * 100;\n    return ((2 ** (attemptCount - 1)) * 1000) + noise;\n};\nexports[\"default\"] = calculateRetryDelay;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvY2FsY3VsYXRlLXJldHJ5LWRlbGF5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3Qiw2QkFBNkI7QUFDN0IsK0JBQStCLCtDQUErQztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm90ZWluLWJpbmQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9nb3RAMTEuOC42L25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS9jYWxjdWxhdGUtcmV0cnktZGVsYXkuanM/Y2ZjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmV0cnlBZnRlclN0YXR1c0NvZGVzID0gdm9pZCAwO1xuZXhwb3J0cy5yZXRyeUFmdGVyU3RhdHVzQ29kZXMgPSBuZXcgU2V0KFs0MTMsIDQyOSwgNTAzXSk7XG5jb25zdCBjYWxjdWxhdGVSZXRyeURlbGF5ID0gKHsgYXR0ZW1wdENvdW50LCByZXRyeU9wdGlvbnMsIGVycm9yLCByZXRyeUFmdGVyIH0pID0+IHtcbiAgICBpZiAoYXR0ZW1wdENvdW50ID4gcmV0cnlPcHRpb25zLmxpbWl0KSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCBoYXNNZXRob2QgPSByZXRyeU9wdGlvbnMubWV0aG9kcy5pbmNsdWRlcyhlcnJvci5vcHRpb25zLm1ldGhvZCk7XG4gICAgY29uc3QgaGFzRXJyb3JDb2RlID0gcmV0cnlPcHRpb25zLmVycm9yQ29kZXMuaW5jbHVkZXMoZXJyb3IuY29kZSk7XG4gICAgY29uc3QgaGFzU3RhdHVzQ29kZSA9IGVycm9yLnJlc3BvbnNlICYmIHJldHJ5T3B0aW9ucy5zdGF0dXNDb2Rlcy5pbmNsdWRlcyhlcnJvci5yZXNwb25zZS5zdGF0dXNDb2RlKTtcbiAgICBpZiAoIWhhc01ldGhvZCB8fCAoIWhhc0Vycm9yQ29kZSAmJiAhaGFzU3RhdHVzQ29kZSkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChlcnJvci5yZXNwb25zZSkge1xuICAgICAgICBpZiAocmV0cnlBZnRlcikge1xuICAgICAgICAgICAgaWYgKHJldHJ5T3B0aW9ucy5tYXhSZXRyeUFmdGVyID09PSB1bmRlZmluZWQgfHwgcmV0cnlBZnRlciA+IHJldHJ5T3B0aW9ucy5tYXhSZXRyeUFmdGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0cnlBZnRlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gNDEzKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBub2lzZSA9IE1hdGgucmFuZG9tKCkgKiAxMDA7XG4gICAgcmV0dXJuICgoMiAqKiAoYXR0ZW1wdENvdW50IC0gMSkpICogMTAwMCkgKyBub2lzZTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBjYWxjdWxhdGVSZXRyeURlbGF5O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/calculate-retry-delay.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UnsupportedProtocolError = exports.ReadError = exports.TimeoutError = exports.UploadError = exports.CacheError = exports.HTTPError = exports.MaxRedirectsError = exports.RequestError = exports.setNonEnumerableProperties = exports.knownHookEvents = exports.withoutBody = exports.kIsNormalizedAlready = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst http_1 = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst http_timer_1 = __webpack_require__(/*! @szmarczak/http-timer */ \"(ssr)/./node_modules/.pnpm/@szmarczak+http-timer@4.0.6/node_modules/@szmarczak/http-timer/dist/source/index.js\");\nconst cacheable_lookup_1 = __webpack_require__(/*! cacheable-lookup */ \"(ssr)/./node_modules/.pnpm/cacheable-lookup@5.0.4/node_modules/cacheable-lookup/source/index.js\");\nconst CacheableRequest = __webpack_require__(/*! cacheable-request */ \"(ssr)/./node_modules/.pnpm/cacheable-request@7.0.4/node_modules/cacheable-request/src/index.js\");\nconst decompressResponse = __webpack_require__(/*! decompress-response */ \"(ssr)/./node_modules/.pnpm/decompress-response@6.0.0/node_modules/decompress-response/index.js\");\n// @ts-expect-error Missing types\nconst http2wrapper = __webpack_require__(/*! http2-wrapper */ \"(ssr)/./node_modules/.pnpm/http2-wrapper@1.0.3/node_modules/http2-wrapper/source/index.js\");\nconst lowercaseKeys = __webpack_require__(/*! lowercase-keys */ \"(ssr)/./node_modules/.pnpm/lowercase-keys@2.0.0/node_modules/lowercase-keys/index.js\");\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(ssr)/./node_modules/.pnpm/@sindresorhus+is@4.6.0/node_modules/@sindresorhus/is/dist/index.js\");\nconst get_body_size_1 = __webpack_require__(/*! ./utils/get-body-size */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/get-body-size.js\");\nconst is_form_data_1 = __webpack_require__(/*! ./utils/is-form-data */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/is-form-data.js\");\nconst proxy_events_1 = __webpack_require__(/*! ./utils/proxy-events */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/proxy-events.js\");\nconst timed_out_1 = __webpack_require__(/*! ./utils/timed-out */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/timed-out.js\");\nconst url_to_options_1 = __webpack_require__(/*! ./utils/url-to-options */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/url-to-options.js\");\nconst options_to_url_1 = __webpack_require__(/*! ./utils/options-to-url */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/options-to-url.js\");\nconst weakable_map_1 = __webpack_require__(/*! ./utils/weakable-map */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/weakable-map.js\");\nconst get_buffer_1 = __webpack_require__(/*! ./utils/get-buffer */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/get-buffer.js\");\nconst dns_ip_version_1 = __webpack_require__(/*! ./utils/dns-ip-version */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/dns-ip-version.js\");\nconst is_response_ok_1 = __webpack_require__(/*! ./utils/is-response-ok */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/is-response-ok.js\");\nconst deprecation_warning_1 = __webpack_require__(/*! ../utils/deprecation-warning */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/utils/deprecation-warning.js\");\nconst normalize_arguments_1 = __webpack_require__(/*! ../as-promise/normalize-arguments */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/normalize-arguments.js\");\nconst calculate_retry_delay_1 = __webpack_require__(/*! ./calculate-retry-delay */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/calculate-retry-delay.js\");\nlet globalDnsCache;\nconst kRequest = Symbol('request');\nconst kResponse = Symbol('response');\nconst kResponseSize = Symbol('responseSize');\nconst kDownloadedSize = Symbol('downloadedSize');\nconst kBodySize = Symbol('bodySize');\nconst kUploadedSize = Symbol('uploadedSize');\nconst kServerResponsesPiped = Symbol('serverResponsesPiped');\nconst kUnproxyEvents = Symbol('unproxyEvents');\nconst kIsFromCache = Symbol('isFromCache');\nconst kCancelTimeouts = Symbol('cancelTimeouts');\nconst kStartedReading = Symbol('startedReading');\nconst kStopReading = Symbol('stopReading');\nconst kTriggerRead = Symbol('triggerRead');\nconst kBody = Symbol('body');\nconst kJobs = Symbol('jobs');\nconst kOriginalResponse = Symbol('originalResponse');\nconst kRetryTimeout = Symbol('retryTimeout');\nexports.kIsNormalizedAlready = Symbol('isNormalizedAlready');\nconst supportsBrotli = is_1.default.string(process.versions.brotli);\nexports.withoutBody = new Set(['GET', 'HEAD']);\nexports.knownHookEvents = [\n    'init',\n    'beforeRequest',\n    'beforeRedirect',\n    'beforeError',\n    'beforeRetry',\n    // Promise-Only\n    'afterResponse'\n];\nfunction validateSearchParameters(searchParameters) {\n    // eslint-disable-next-line guard-for-in\n    for (const key in searchParameters) {\n        const value = searchParameters[key];\n        if (!is_1.default.string(value) && !is_1.default.number(value) && !is_1.default.boolean(value) && !is_1.default.null_(value) && !is_1.default.undefined(value)) {\n            throw new TypeError(`The \\`searchParams\\` value '${String(value)}' must be a string, number, boolean or null`);\n        }\n    }\n}\nfunction isClientRequest(clientRequest) {\n    return is_1.default.object(clientRequest) && !('statusCode' in clientRequest);\n}\nconst cacheableStore = new weakable_map_1.default();\nconst waitForOpenFile = async (file) => new Promise((resolve, reject) => {\n    const onError = (error) => {\n        reject(error);\n    };\n    // Node.js 12 has incomplete types\n    if (!file.pending) {\n        resolve();\n    }\n    file.once('error', onError);\n    file.once('ready', () => {\n        file.off('error', onError);\n        resolve();\n    });\n});\nconst redirectCodes = new Set([300, 301, 302, 303, 304, 307, 308]);\nconst nonEnumerableProperties = [\n    'context',\n    'body',\n    'json',\n    'form'\n];\nexports.setNonEnumerableProperties = (sources, to) => {\n    // Non enumerable properties shall not be merged\n    const properties = {};\n    for (const source of sources) {\n        if (!source) {\n            continue;\n        }\n        for (const name of nonEnumerableProperties) {\n            if (!(name in source)) {\n                continue;\n            }\n            properties[name] = {\n                writable: true,\n                configurable: true,\n                enumerable: false,\n                // @ts-expect-error TS doesn't see the check above\n                value: source[name]\n            };\n        }\n    }\n    Object.defineProperties(to, properties);\n};\n/**\nAn error to be thrown when a request fails.\nContains a `code` property with error class code, like `ECONNREFUSED`.\n*/\nclass RequestError extends Error {\n    constructor(message, error, self) {\n        var _a, _b;\n        super(message);\n        Error.captureStackTrace(this, this.constructor);\n        this.name = 'RequestError';\n        this.code = (_a = error.code) !== null && _a !== void 0 ? _a : 'ERR_GOT_REQUEST_ERROR';\n        if (self instanceof Request) {\n            Object.defineProperty(this, 'request', {\n                enumerable: false,\n                value: self\n            });\n            Object.defineProperty(this, 'response', {\n                enumerable: false,\n                value: self[kResponse]\n            });\n            Object.defineProperty(this, 'options', {\n                // This fails because of TS 3.7.2 useDefineForClassFields\n                // Ref: https://github.com/microsoft/TypeScript/issues/34972\n                enumerable: false,\n                value: self.options\n            });\n        }\n        else {\n            Object.defineProperty(this, 'options', {\n                // This fails because of TS 3.7.2 useDefineForClassFields\n                // Ref: https://github.com/microsoft/TypeScript/issues/34972\n                enumerable: false,\n                value: self\n            });\n        }\n        this.timings = (_b = this.request) === null || _b === void 0 ? void 0 : _b.timings;\n        // Recover the original stacktrace\n        if (is_1.default.string(error.stack) && is_1.default.string(this.stack)) {\n            const indexOfMessage = this.stack.indexOf(this.message) + this.message.length;\n            const thisStackTrace = this.stack.slice(indexOfMessage).split('\\n').reverse();\n            const errorStackTrace = error.stack.slice(error.stack.indexOf(error.message) + error.message.length).split('\\n').reverse();\n            // Remove duplicated traces\n            while (errorStackTrace.length !== 0 && errorStackTrace[0] === thisStackTrace[0]) {\n                thisStackTrace.shift();\n            }\n            this.stack = `${this.stack.slice(0, indexOfMessage)}${thisStackTrace.reverse().join('\\n')}${errorStackTrace.reverse().join('\\n')}`;\n        }\n    }\n}\nexports.RequestError = RequestError;\n/**\nAn error to be thrown when the server redirects you more than ten times.\nIncludes a `response` property.\n*/\nclass MaxRedirectsError extends RequestError {\n    constructor(request) {\n        super(`Redirected ${request.options.maxRedirects} times. Aborting.`, {}, request);\n        this.name = 'MaxRedirectsError';\n        this.code = 'ERR_TOO_MANY_REDIRECTS';\n    }\n}\nexports.MaxRedirectsError = MaxRedirectsError;\n/**\nAn error to be thrown when the server response code is not 2xx nor 3xx if `options.followRedirect` is `true`, but always except for 304.\nIncludes a `response` property.\n*/\nclass HTTPError extends RequestError {\n    constructor(response) {\n        super(`Response code ${response.statusCode} (${response.statusMessage})`, {}, response.request);\n        this.name = 'HTTPError';\n        this.code = 'ERR_NON_2XX_3XX_RESPONSE';\n    }\n}\nexports.HTTPError = HTTPError;\n/**\nAn error to be thrown when a cache method fails.\nFor example, if the database goes down or there's a filesystem error.\n*/\nclass CacheError extends RequestError {\n    constructor(error, request) {\n        super(error.message, error, request);\n        this.name = 'CacheError';\n        this.code = this.code === 'ERR_GOT_REQUEST_ERROR' ? 'ERR_CACHE_ACCESS' : this.code;\n    }\n}\nexports.CacheError = CacheError;\n/**\nAn error to be thrown when the request body is a stream and an error occurs while reading from that stream.\n*/\nclass UploadError extends RequestError {\n    constructor(error, request) {\n        super(error.message, error, request);\n        this.name = 'UploadError';\n        this.code = this.code === 'ERR_GOT_REQUEST_ERROR' ? 'ERR_UPLOAD' : this.code;\n    }\n}\nexports.UploadError = UploadError;\n/**\nAn error to be thrown when the request is aborted due to a timeout.\nIncludes an `event` and `timings` property.\n*/\nclass TimeoutError extends RequestError {\n    constructor(error, timings, request) {\n        super(error.message, error, request);\n        this.name = 'TimeoutError';\n        this.event = error.event;\n        this.timings = timings;\n    }\n}\nexports.TimeoutError = TimeoutError;\n/**\nAn error to be thrown when reading from response stream fails.\n*/\nclass ReadError extends RequestError {\n    constructor(error, request) {\n        super(error.message, error, request);\n        this.name = 'ReadError';\n        this.code = this.code === 'ERR_GOT_REQUEST_ERROR' ? 'ERR_READING_RESPONSE_STREAM' : this.code;\n    }\n}\nexports.ReadError = ReadError;\n/**\nAn error to be thrown when given an unsupported protocol.\n*/\nclass UnsupportedProtocolError extends RequestError {\n    constructor(options) {\n        super(`Unsupported protocol \"${options.url.protocol}\"`, {}, options);\n        this.name = 'UnsupportedProtocolError';\n        this.code = 'ERR_UNSUPPORTED_PROTOCOL';\n    }\n}\nexports.UnsupportedProtocolError = UnsupportedProtocolError;\nconst proxiedRequestEvents = [\n    'socket',\n    'connect',\n    'continue',\n    'information',\n    'upgrade',\n    'timeout'\n];\nclass Request extends stream_1.Duplex {\n    constructor(url, options = {}, defaults) {\n        super({\n            // This must be false, to enable throwing after destroy\n            // It is used for retry logic in Promise API\n            autoDestroy: false,\n            // It needs to be zero because we're just proxying the data to another stream\n            highWaterMark: 0\n        });\n        this[kDownloadedSize] = 0;\n        this[kUploadedSize] = 0;\n        this.requestInitialized = false;\n        this[kServerResponsesPiped] = new Set();\n        this.redirects = [];\n        this[kStopReading] = false;\n        this[kTriggerRead] = false;\n        this[kJobs] = [];\n        this.retryCount = 0;\n        // TODO: Remove this when targeting Node.js >= 12\n        this._progressCallbacks = [];\n        const unlockWrite = () => this._unlockWrite();\n        const lockWrite = () => this._lockWrite();\n        this.on('pipe', (source) => {\n            source.prependListener('data', unlockWrite);\n            source.on('data', lockWrite);\n            source.prependListener('end', unlockWrite);\n            source.on('end', lockWrite);\n        });\n        this.on('unpipe', (source) => {\n            source.off('data', unlockWrite);\n            source.off('data', lockWrite);\n            source.off('end', unlockWrite);\n            source.off('end', lockWrite);\n        });\n        this.on('pipe', source => {\n            if (source instanceof http_1.IncomingMessage) {\n                this.options.headers = {\n                    ...source.headers,\n                    ...this.options.headers\n                };\n            }\n        });\n        const { json, body, form } = options;\n        if (json || body || form) {\n            this._lockWrite();\n        }\n        if (exports.kIsNormalizedAlready in options) {\n            this.options = options;\n        }\n        else {\n            try {\n                // @ts-expect-error Common TypeScript bug saying that `this.constructor` is not accessible\n                this.options = this.constructor.normalizeArguments(url, options, defaults);\n            }\n            catch (error) {\n                // TODO: Move this to `_destroy()`\n                if (is_1.default.nodeStream(options.body)) {\n                    options.body.destroy();\n                }\n                this.destroy(error);\n                return;\n            }\n        }\n        (async () => {\n            var _a;\n            try {\n                if (this.options.body instanceof fs_1.ReadStream) {\n                    await waitForOpenFile(this.options.body);\n                }\n                const { url: normalizedURL } = this.options;\n                if (!normalizedURL) {\n                    throw new TypeError('Missing `url` property');\n                }\n                this.requestUrl = normalizedURL.toString();\n                decodeURI(this.requestUrl);\n                await this._finalizeBody();\n                await this._makeRequest();\n                if (this.destroyed) {\n                    (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.destroy();\n                    return;\n                }\n                // Queued writes etc.\n                for (const job of this[kJobs]) {\n                    job();\n                }\n                // Prevent memory leak\n                this[kJobs].length = 0;\n                this.requestInitialized = true;\n            }\n            catch (error) {\n                if (error instanceof RequestError) {\n                    this._beforeError(error);\n                    return;\n                }\n                // This is a workaround for https://github.com/nodejs/node/issues/33335\n                if (!this.destroyed) {\n                    this.destroy(error);\n                }\n            }\n        })();\n    }\n    static normalizeArguments(url, options, defaults) {\n        var _a, _b, _c, _d, _e;\n        const rawOptions = options;\n        if (is_1.default.object(url) && !is_1.default.urlInstance(url)) {\n            options = { ...defaults, ...url, ...options };\n        }\n        else {\n            if (url && options && options.url !== undefined) {\n                throw new TypeError('The `url` option is mutually exclusive with the `input` argument');\n            }\n            options = { ...defaults, ...options };\n            if (url !== undefined) {\n                options.url = url;\n            }\n            if (is_1.default.urlInstance(options.url)) {\n                options.url = new url_1.URL(options.url.toString());\n            }\n        }\n        // TODO: Deprecate URL options in Got 12.\n        // Support extend-specific options\n        if (options.cache === false) {\n            options.cache = undefined;\n        }\n        if (options.dnsCache === false) {\n            options.dnsCache = undefined;\n        }\n        // Nice type assertions\n        is_1.assert.any([is_1.default.string, is_1.default.undefined], options.method);\n        is_1.assert.any([is_1.default.object, is_1.default.undefined], options.headers);\n        is_1.assert.any([is_1.default.string, is_1.default.urlInstance, is_1.default.undefined], options.prefixUrl);\n        is_1.assert.any([is_1.default.object, is_1.default.undefined], options.cookieJar);\n        is_1.assert.any([is_1.default.object, is_1.default.string, is_1.default.undefined], options.searchParams);\n        is_1.assert.any([is_1.default.object, is_1.default.string, is_1.default.undefined], options.cache);\n        is_1.assert.any([is_1.default.object, is_1.default.number, is_1.default.undefined], options.timeout);\n        is_1.assert.any([is_1.default.object, is_1.default.undefined], options.context);\n        is_1.assert.any([is_1.default.object, is_1.default.undefined], options.hooks);\n        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.decompress);\n        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.ignoreInvalidCookies);\n        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.followRedirect);\n        is_1.assert.any([is_1.default.number, is_1.default.undefined], options.maxRedirects);\n        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.throwHttpErrors);\n        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.http2);\n        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.allowGetBody);\n        is_1.assert.any([is_1.default.string, is_1.default.undefined], options.localAddress);\n        is_1.assert.any([dns_ip_version_1.isDnsLookupIpVersion, is_1.default.undefined], options.dnsLookupIpVersion);\n        is_1.assert.any([is_1.default.object, is_1.default.undefined], options.https);\n        is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.rejectUnauthorized);\n        if (options.https) {\n            is_1.assert.any([is_1.default.boolean, is_1.default.undefined], options.https.rejectUnauthorized);\n            is_1.assert.any([is_1.default.function_, is_1.default.undefined], options.https.checkServerIdentity);\n            is_1.assert.any([is_1.default.string, is_1.default.object, is_1.default.array, is_1.default.undefined], options.https.certificateAuthority);\n            is_1.assert.any([is_1.default.string, is_1.default.object, is_1.default.array, is_1.default.undefined], options.https.key);\n            is_1.assert.any([is_1.default.string, is_1.default.object, is_1.default.array, is_1.default.undefined], options.https.certificate);\n            is_1.assert.any([is_1.default.string, is_1.default.undefined], options.https.passphrase);\n            is_1.assert.any([is_1.default.string, is_1.default.buffer, is_1.default.array, is_1.default.undefined], options.https.pfx);\n        }\n        is_1.assert.any([is_1.default.object, is_1.default.undefined], options.cacheOptions);\n        // `options.method`\n        if (is_1.default.string(options.method)) {\n            options.method = options.method.toUpperCase();\n        }\n        else {\n            options.method = 'GET';\n        }\n        // `options.headers`\n        if (options.headers === (defaults === null || defaults === void 0 ? void 0 : defaults.headers)) {\n            options.headers = { ...options.headers };\n        }\n        else {\n            options.headers = lowercaseKeys({ ...(defaults === null || defaults === void 0 ? void 0 : defaults.headers), ...options.headers });\n        }\n        // Disallow legacy `url.Url`\n        if ('slashes' in options) {\n            throw new TypeError('The legacy `url.Url` has been deprecated. Use `URL` instead.');\n        }\n        // `options.auth`\n        if ('auth' in options) {\n            throw new TypeError('Parameter `auth` is deprecated. Use `username` / `password` instead.');\n        }\n        // `options.searchParams`\n        if ('searchParams' in options) {\n            if (options.searchParams && options.searchParams !== (defaults === null || defaults === void 0 ? void 0 : defaults.searchParams)) {\n                let searchParameters;\n                if (is_1.default.string(options.searchParams) || (options.searchParams instanceof url_1.URLSearchParams)) {\n                    searchParameters = new url_1.URLSearchParams(options.searchParams);\n                }\n                else {\n                    validateSearchParameters(options.searchParams);\n                    searchParameters = new url_1.URLSearchParams();\n                    // eslint-disable-next-line guard-for-in\n                    for (const key in options.searchParams) {\n                        const value = options.searchParams[key];\n                        if (value === null) {\n                            searchParameters.append(key, '');\n                        }\n                        else if (value !== undefined) {\n                            searchParameters.append(key, value);\n                        }\n                    }\n                }\n                // `normalizeArguments()` is also used to merge options\n                (_a = defaults === null || defaults === void 0 ? void 0 : defaults.searchParams) === null || _a === void 0 ? void 0 : _a.forEach((value, key) => {\n                    // Only use default if one isn't already defined\n                    if (!searchParameters.has(key)) {\n                        searchParameters.append(key, value);\n                    }\n                });\n                options.searchParams = searchParameters;\n            }\n        }\n        // `options.username` & `options.password`\n        options.username = (_b = options.username) !== null && _b !== void 0 ? _b : '';\n        options.password = (_c = options.password) !== null && _c !== void 0 ? _c : '';\n        // `options.prefixUrl` & `options.url`\n        if (is_1.default.undefined(options.prefixUrl)) {\n            options.prefixUrl = (_d = defaults === null || defaults === void 0 ? void 0 : defaults.prefixUrl) !== null && _d !== void 0 ? _d : '';\n        }\n        else {\n            options.prefixUrl = options.prefixUrl.toString();\n            if (options.prefixUrl !== '' && !options.prefixUrl.endsWith('/')) {\n                options.prefixUrl += '/';\n            }\n        }\n        if (is_1.default.string(options.url)) {\n            if (options.url.startsWith('/')) {\n                throw new Error('`input` must not start with a slash when using `prefixUrl`');\n            }\n            options.url = options_to_url_1.default(options.prefixUrl + options.url, options);\n        }\n        else if ((is_1.default.undefined(options.url) && options.prefixUrl !== '') || options.protocol) {\n            options.url = options_to_url_1.default(options.prefixUrl, options);\n        }\n        if (options.url) {\n            if ('port' in options) {\n                delete options.port;\n            }\n            // Make it possible to change `options.prefixUrl`\n            let { prefixUrl } = options;\n            Object.defineProperty(options, 'prefixUrl', {\n                set: (value) => {\n                    const url = options.url;\n                    if (!url.href.startsWith(value)) {\n                        throw new Error(`Cannot change \\`prefixUrl\\` from ${prefixUrl} to ${value}: ${url.href}`);\n                    }\n                    options.url = new url_1.URL(value + url.href.slice(prefixUrl.length));\n                    prefixUrl = value;\n                },\n                get: () => prefixUrl\n            });\n            // Support UNIX sockets\n            let { protocol } = options.url;\n            if (protocol === 'unix:') {\n                protocol = 'http:';\n                options.url = new url_1.URL(`http://unix${options.url.pathname}${options.url.search}`);\n            }\n            // Set search params\n            if (options.searchParams) {\n                // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                options.url.search = options.searchParams.toString();\n            }\n            // Protocol check\n            if (protocol !== 'http:' && protocol !== 'https:') {\n                throw new UnsupportedProtocolError(options);\n            }\n            // Update `username`\n            if (options.username === '') {\n                options.username = options.url.username;\n            }\n            else {\n                options.url.username = options.username;\n            }\n            // Update `password`\n            if (options.password === '') {\n                options.password = options.url.password;\n            }\n            else {\n                options.url.password = options.password;\n            }\n        }\n        // `options.cookieJar`\n        const { cookieJar } = options;\n        if (cookieJar) {\n            let { setCookie, getCookieString } = cookieJar;\n            is_1.assert.function_(setCookie);\n            is_1.assert.function_(getCookieString);\n            /* istanbul ignore next: Horrible `tough-cookie` v3 check */\n            if (setCookie.length === 4 && getCookieString.length === 0) {\n                setCookie = util_1.promisify(setCookie.bind(options.cookieJar));\n                getCookieString = util_1.promisify(getCookieString.bind(options.cookieJar));\n                options.cookieJar = {\n                    setCookie,\n                    getCookieString: getCookieString\n                };\n            }\n        }\n        // `options.cache`\n        const { cache } = options;\n        if (cache) {\n            if (!cacheableStore.has(cache)) {\n                cacheableStore.set(cache, new CacheableRequest(((requestOptions, handler) => {\n                    const result = requestOptions[kRequest](requestOptions, handler);\n                    // TODO: remove this when `cacheable-request` supports async request functions.\n                    if (is_1.default.promise(result)) {\n                        // @ts-expect-error\n                        // We only need to implement the error handler in order to support HTTP2 caching.\n                        // The result will be a promise anyway.\n                        result.once = (event, handler) => {\n                            if (event === 'error') {\n                                result.catch(handler);\n                            }\n                            else if (event === 'abort') {\n                                // The empty catch is needed here in case when\n                                // it rejects before it's `await`ed in `_makeRequest`.\n                                (async () => {\n                                    try {\n                                        const request = (await result);\n                                        request.once('abort', handler);\n                                    }\n                                    catch (_a) { }\n                                })();\n                            }\n                            else {\n                                /* istanbul ignore next: safety check */\n                                throw new Error(`Unknown HTTP2 promise event: ${event}`);\n                            }\n                            return result;\n                        };\n                    }\n                    return result;\n                }), cache));\n            }\n        }\n        // `options.cacheOptions`\n        options.cacheOptions = { ...options.cacheOptions };\n        // `options.dnsCache`\n        if (options.dnsCache === true) {\n            if (!globalDnsCache) {\n                globalDnsCache = new cacheable_lookup_1.default();\n            }\n            options.dnsCache = globalDnsCache;\n        }\n        else if (!is_1.default.undefined(options.dnsCache) && !options.dnsCache.lookup) {\n            throw new TypeError(`Parameter \\`dnsCache\\` must be a CacheableLookup instance or a boolean, got ${is_1.default(options.dnsCache)}`);\n        }\n        // `options.timeout`\n        if (is_1.default.number(options.timeout)) {\n            options.timeout = { request: options.timeout };\n        }\n        else if (defaults && options.timeout !== defaults.timeout) {\n            options.timeout = {\n                ...defaults.timeout,\n                ...options.timeout\n            };\n        }\n        else {\n            options.timeout = { ...options.timeout };\n        }\n        // `options.context`\n        if (!options.context) {\n            options.context = {};\n        }\n        // `options.hooks`\n        const areHooksDefault = options.hooks === (defaults === null || defaults === void 0 ? void 0 : defaults.hooks);\n        options.hooks = { ...options.hooks };\n        for (const event of exports.knownHookEvents) {\n            if (event in options.hooks) {\n                if (is_1.default.array(options.hooks[event])) {\n                    // See https://github.com/microsoft/TypeScript/issues/31445#issuecomment-576929044\n                    options.hooks[event] = [...options.hooks[event]];\n                }\n                else {\n                    throw new TypeError(`Parameter \\`${event}\\` must be an Array, got ${is_1.default(options.hooks[event])}`);\n                }\n            }\n            else {\n                options.hooks[event] = [];\n            }\n        }\n        if (defaults && !areHooksDefault) {\n            for (const event of exports.knownHookEvents) {\n                const defaultHooks = defaults.hooks[event];\n                if (defaultHooks.length > 0) {\n                    // See https://github.com/microsoft/TypeScript/issues/31445#issuecomment-576929044\n                    options.hooks[event] = [\n                        ...defaults.hooks[event],\n                        ...options.hooks[event]\n                    ];\n                }\n            }\n        }\n        // DNS options\n        if ('family' in options) {\n            deprecation_warning_1.default('\"options.family\" was never documented, please use \"options.dnsLookupIpVersion\"');\n        }\n        // HTTPS options\n        if (defaults === null || defaults === void 0 ? void 0 : defaults.https) {\n            options.https = { ...defaults.https, ...options.https };\n        }\n        if ('rejectUnauthorized' in options) {\n            deprecation_warning_1.default('\"options.rejectUnauthorized\" is now deprecated, please use \"options.https.rejectUnauthorized\"');\n        }\n        if ('checkServerIdentity' in options) {\n            deprecation_warning_1.default('\"options.checkServerIdentity\" was never documented, please use \"options.https.checkServerIdentity\"');\n        }\n        if ('ca' in options) {\n            deprecation_warning_1.default('\"options.ca\" was never documented, please use \"options.https.certificateAuthority\"');\n        }\n        if ('key' in options) {\n            deprecation_warning_1.default('\"options.key\" was never documented, please use \"options.https.key\"');\n        }\n        if ('cert' in options) {\n            deprecation_warning_1.default('\"options.cert\" was never documented, please use \"options.https.certificate\"');\n        }\n        if ('passphrase' in options) {\n            deprecation_warning_1.default('\"options.passphrase\" was never documented, please use \"options.https.passphrase\"');\n        }\n        if ('pfx' in options) {\n            deprecation_warning_1.default('\"options.pfx\" was never documented, please use \"options.https.pfx\"');\n        }\n        // Other options\n        if ('followRedirects' in options) {\n            throw new TypeError('The `followRedirects` option does not exist. Use `followRedirect` instead.');\n        }\n        if (options.agent) {\n            for (const key in options.agent) {\n                if (key !== 'http' && key !== 'https' && key !== 'http2') {\n                    throw new TypeError(`Expected the \\`options.agent\\` properties to be \\`http\\`, \\`https\\` or \\`http2\\`, got \\`${key}\\``);\n                }\n            }\n        }\n        options.maxRedirects = (_e = options.maxRedirects) !== null && _e !== void 0 ? _e : 0;\n        // Set non-enumerable properties\n        exports.setNonEnumerableProperties([defaults, rawOptions], options);\n        return normalize_arguments_1.default(options, defaults);\n    }\n    _lockWrite() {\n        const onLockedWrite = () => {\n            throw new TypeError('The payload has been already provided');\n        };\n        this.write = onLockedWrite;\n        this.end = onLockedWrite;\n    }\n    _unlockWrite() {\n        this.write = super.write;\n        this.end = super.end;\n    }\n    async _finalizeBody() {\n        const { options } = this;\n        const { headers } = options;\n        const isForm = !is_1.default.undefined(options.form);\n        const isJSON = !is_1.default.undefined(options.json);\n        const isBody = !is_1.default.undefined(options.body);\n        const hasPayload = isForm || isJSON || isBody;\n        const cannotHaveBody = exports.withoutBody.has(options.method) && !(options.method === 'GET' && options.allowGetBody);\n        this._cannotHaveBody = cannotHaveBody;\n        if (hasPayload) {\n            if (cannotHaveBody) {\n                throw new TypeError(`The \\`${options.method}\\` method cannot be used with a body`);\n            }\n            if ([isBody, isForm, isJSON].filter(isTrue => isTrue).length > 1) {\n                throw new TypeError('The `body`, `json` and `form` options are mutually exclusive');\n            }\n            if (isBody &&\n                !(options.body instanceof stream_1.Readable) &&\n                !is_1.default.string(options.body) &&\n                !is_1.default.buffer(options.body) &&\n                !is_form_data_1.default(options.body)) {\n                throw new TypeError('The `body` option must be a stream.Readable, string or Buffer');\n            }\n            if (isForm && !is_1.default.object(options.form)) {\n                throw new TypeError('The `form` option must be an Object');\n            }\n            {\n                // Serialize body\n                const noContentType = !is_1.default.string(headers['content-type']);\n                if (isBody) {\n                    // Special case for https://github.com/form-data/form-data\n                    if (is_form_data_1.default(options.body) && noContentType) {\n                        headers['content-type'] = `multipart/form-data; boundary=${options.body.getBoundary()}`;\n                    }\n                    this[kBody] = options.body;\n                }\n                else if (isForm) {\n                    if (noContentType) {\n                        headers['content-type'] = 'application/x-www-form-urlencoded';\n                    }\n                    this[kBody] = (new url_1.URLSearchParams(options.form)).toString();\n                }\n                else {\n                    if (noContentType) {\n                        headers['content-type'] = 'application/json';\n                    }\n                    this[kBody] = options.stringifyJson(options.json);\n                }\n                const uploadBodySize = await get_body_size_1.default(this[kBody], options.headers);\n                // See https://tools.ietf.org/html/rfc7230#section-3.3.2\n                // A user agent SHOULD send a Content-Length in a request message when\n                // no Transfer-Encoding is sent and the request method defines a meaning\n                // for an enclosed payload body.  For example, a Content-Length header\n                // field is normally sent in a POST request even when the value is 0\n                // (indicating an empty payload body).  A user agent SHOULD NOT send a\n                // Content-Length header field when the request message does not contain\n                // a payload body and the method semantics do not anticipate such a\n                // body.\n                if (is_1.default.undefined(headers['content-length']) && is_1.default.undefined(headers['transfer-encoding'])) {\n                    if (!cannotHaveBody && !is_1.default.undefined(uploadBodySize)) {\n                        headers['content-length'] = String(uploadBodySize);\n                    }\n                }\n            }\n        }\n        else if (cannotHaveBody) {\n            this._lockWrite();\n        }\n        else {\n            this._unlockWrite();\n        }\n        this[kBodySize] = Number(headers['content-length']) || undefined;\n    }\n    async _onResponseBase(response) {\n        const { options } = this;\n        const { url } = options;\n        this[kOriginalResponse] = response;\n        if (options.decompress) {\n            response = decompressResponse(response);\n        }\n        const statusCode = response.statusCode;\n        const typedResponse = response;\n        typedResponse.statusMessage = typedResponse.statusMessage ? typedResponse.statusMessage : http.STATUS_CODES[statusCode];\n        typedResponse.url = options.url.toString();\n        typedResponse.requestUrl = this.requestUrl;\n        typedResponse.redirectUrls = this.redirects;\n        typedResponse.request = this;\n        typedResponse.isFromCache = response.fromCache || false;\n        typedResponse.ip = this.ip;\n        typedResponse.retryCount = this.retryCount;\n        this[kIsFromCache] = typedResponse.isFromCache;\n        this[kResponseSize] = Number(response.headers['content-length']) || undefined;\n        this[kResponse] = response;\n        response.once('end', () => {\n            this[kResponseSize] = this[kDownloadedSize];\n            this.emit('downloadProgress', this.downloadProgress);\n        });\n        response.once('error', (error) => {\n            // Force clean-up, because some packages don't do this.\n            // TODO: Fix decompress-response\n            response.destroy();\n            this._beforeError(new ReadError(error, this));\n        });\n        response.once('aborted', () => {\n            this._beforeError(new ReadError({\n                name: 'Error',\n                message: 'The server aborted pending request',\n                code: 'ECONNRESET'\n            }, this));\n        });\n        this.emit('downloadProgress', this.downloadProgress);\n        const rawCookies = response.headers['set-cookie'];\n        if (is_1.default.object(options.cookieJar) && rawCookies) {\n            let promises = rawCookies.map(async (rawCookie) => options.cookieJar.setCookie(rawCookie, url.toString()));\n            if (options.ignoreInvalidCookies) {\n                promises = promises.map(async (p) => p.catch(() => { }));\n            }\n            try {\n                await Promise.all(promises);\n            }\n            catch (error) {\n                this._beforeError(error);\n                return;\n            }\n        }\n        if (options.followRedirect && response.headers.location && redirectCodes.has(statusCode)) {\n            // We're being redirected, we don't care about the response.\n            // It'd be best to abort the request, but we can't because\n            // we would have to sacrifice the TCP connection. We don't want that.\n            response.resume();\n            if (this[kRequest]) {\n                this[kCancelTimeouts]();\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete this[kRequest];\n                this[kUnproxyEvents]();\n            }\n            const shouldBeGet = statusCode === 303 && options.method !== 'GET' && options.method !== 'HEAD';\n            if (shouldBeGet || !options.methodRewriting) {\n                // Server responded with \"see other\", indicating that the resource exists at another location,\n                // and the client should request it from that location via GET or HEAD.\n                options.method = 'GET';\n                if ('body' in options) {\n                    delete options.body;\n                }\n                if ('json' in options) {\n                    delete options.json;\n                }\n                if ('form' in options) {\n                    delete options.form;\n                }\n                this[kBody] = undefined;\n                delete options.headers['content-length'];\n            }\n            if (this.redirects.length >= options.maxRedirects) {\n                this._beforeError(new MaxRedirectsError(this));\n                return;\n            }\n            try {\n                // Do not remove. See https://github.com/sindresorhus/got/pull/214\n                const redirectBuffer = Buffer.from(response.headers.location, 'binary').toString();\n                // Handles invalid URLs. See https://github.com/sindresorhus/got/issues/604\n                const redirectUrl = new url_1.URL(redirectBuffer, url);\n                const redirectString = redirectUrl.toString();\n                decodeURI(redirectString);\n                // eslint-disable-next-line no-inner-declarations\n                function isUnixSocketURL(url) {\n                    return url.protocol === 'unix:' || url.hostname === 'unix';\n                }\n                if (!isUnixSocketURL(url) && isUnixSocketURL(redirectUrl)) {\n                    this._beforeError(new RequestError('Cannot redirect to UNIX socket', {}, this));\n                    return;\n                }\n                // Redirecting to a different site, clear sensitive data.\n                if (redirectUrl.hostname !== url.hostname || redirectUrl.port !== url.port) {\n                    if ('host' in options.headers) {\n                        delete options.headers.host;\n                    }\n                    if ('cookie' in options.headers) {\n                        delete options.headers.cookie;\n                    }\n                    if ('authorization' in options.headers) {\n                        delete options.headers.authorization;\n                    }\n                    if (options.username || options.password) {\n                        options.username = '';\n                        options.password = '';\n                    }\n                }\n                else {\n                    redirectUrl.username = options.username;\n                    redirectUrl.password = options.password;\n                }\n                this.redirects.push(redirectString);\n                options.url = redirectUrl;\n                for (const hook of options.hooks.beforeRedirect) {\n                    // eslint-disable-next-line no-await-in-loop\n                    await hook(options, typedResponse);\n                }\n                this.emit('redirect', typedResponse, options);\n                await this._makeRequest();\n            }\n            catch (error) {\n                this._beforeError(error);\n                return;\n            }\n            return;\n        }\n        if (options.isStream && options.throwHttpErrors && !is_response_ok_1.isResponseOk(typedResponse)) {\n            this._beforeError(new HTTPError(typedResponse));\n            return;\n        }\n        response.on('readable', () => {\n            if (this[kTriggerRead]) {\n                this._read();\n            }\n        });\n        this.on('resume', () => {\n            response.resume();\n        });\n        this.on('pause', () => {\n            response.pause();\n        });\n        response.once('end', () => {\n            this.push(null);\n        });\n        this.emit('response', response);\n        for (const destination of this[kServerResponsesPiped]) {\n            if (destination.headersSent) {\n                continue;\n            }\n            // eslint-disable-next-line guard-for-in\n            for (const key in response.headers) {\n                const isAllowed = options.decompress ? key !== 'content-encoding' : true;\n                const value = response.headers[key];\n                if (isAllowed) {\n                    destination.setHeader(key, value);\n                }\n            }\n            destination.statusCode = statusCode;\n        }\n    }\n    async _onResponse(response) {\n        try {\n            await this._onResponseBase(response);\n        }\n        catch (error) {\n            /* istanbul ignore next: better safe than sorry */\n            this._beforeError(error);\n        }\n    }\n    _onRequest(request) {\n        const { options } = this;\n        const { timeout, url } = options;\n        http_timer_1.default(request);\n        this[kCancelTimeouts] = timed_out_1.default(request, timeout, url);\n        const responseEventName = options.cache ? 'cacheableResponse' : 'response';\n        request.once(responseEventName, (response) => {\n            void this._onResponse(response);\n        });\n        request.once('error', (error) => {\n            var _a;\n            // Force clean-up, because some packages (e.g. nock) don't do this.\n            request.destroy();\n            // Node.js <= 12.18.2 mistakenly emits the response `end` first.\n            (_a = request.res) === null || _a === void 0 ? void 0 : _a.removeAllListeners('end');\n            error = error instanceof timed_out_1.TimeoutError ? new TimeoutError(error, this.timings, this) : new RequestError(error.message, error, this);\n            this._beforeError(error);\n        });\n        this[kUnproxyEvents] = proxy_events_1.default(request, this, proxiedRequestEvents);\n        this[kRequest] = request;\n        this.emit('uploadProgress', this.uploadProgress);\n        // Send body\n        const body = this[kBody];\n        const currentRequest = this.redirects.length === 0 ? this : request;\n        if (is_1.default.nodeStream(body)) {\n            body.pipe(currentRequest);\n            body.once('error', (error) => {\n                this._beforeError(new UploadError(error, this));\n            });\n        }\n        else {\n            this._unlockWrite();\n            if (!is_1.default.undefined(body)) {\n                this._writeRequest(body, undefined, () => { });\n                currentRequest.end();\n                this._lockWrite();\n            }\n            else if (this._cannotHaveBody || this._noPipe) {\n                currentRequest.end();\n                this._lockWrite();\n            }\n        }\n        this.emit('request', request);\n    }\n    async _createCacheableRequest(url, options) {\n        return new Promise((resolve, reject) => {\n            // TODO: Remove `utils/url-to-options.ts` when `cacheable-request` is fixed\n            Object.assign(options, url_to_options_1.default(url));\n            // `http-cache-semantics` checks this\n            // TODO: Fix this ignore.\n            // @ts-expect-error\n            delete options.url;\n            let request;\n            // This is ugly\n            const cacheRequest = cacheableStore.get(options.cache)(options, async (response) => {\n                // TODO: Fix `cacheable-response`\n                response._readableState.autoDestroy = false;\n                if (request) {\n                    (await request).emit('cacheableResponse', response);\n                }\n                resolve(response);\n            });\n            // Restore options\n            options.url = url;\n            cacheRequest.once('error', reject);\n            cacheRequest.once('request', async (requestOrPromise) => {\n                request = requestOrPromise;\n                resolve(request);\n            });\n        });\n    }\n    async _makeRequest() {\n        var _a, _b, _c, _d, _e;\n        const { options } = this;\n        const { headers } = options;\n        for (const key in headers) {\n            if (is_1.default.undefined(headers[key])) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete headers[key];\n            }\n            else if (is_1.default.null_(headers[key])) {\n                throw new TypeError(`Use \\`undefined\\` instead of \\`null\\` to delete the \\`${key}\\` header`);\n            }\n        }\n        if (options.decompress && is_1.default.undefined(headers['accept-encoding'])) {\n            headers['accept-encoding'] = supportsBrotli ? 'gzip, deflate, br' : 'gzip, deflate';\n        }\n        // Set cookies\n        if (options.cookieJar) {\n            const cookieString = await options.cookieJar.getCookieString(options.url.toString());\n            if (is_1.default.nonEmptyString(cookieString)) {\n                options.headers.cookie = cookieString;\n            }\n        }\n        for (const hook of options.hooks.beforeRequest) {\n            // eslint-disable-next-line no-await-in-loop\n            const result = await hook(options);\n            if (!is_1.default.undefined(result)) {\n                // @ts-expect-error Skip the type mismatch to support abstract responses\n                options.request = () => result;\n                break;\n            }\n        }\n        if (options.body && this[kBody] !== options.body) {\n            this[kBody] = options.body;\n        }\n        const { agent, request, timeout, url } = options;\n        if (options.dnsCache && !('lookup' in options)) {\n            options.lookup = options.dnsCache.lookup;\n        }\n        // UNIX sockets\n        if (url.hostname === 'unix') {\n            const matches = /(?<socketPath>.+?):(?<path>.+)/.exec(`${url.pathname}${url.search}`);\n            if (matches === null || matches === void 0 ? void 0 : matches.groups) {\n                const { socketPath, path } = matches.groups;\n                Object.assign(options, {\n                    socketPath,\n                    path,\n                    host: ''\n                });\n            }\n        }\n        const isHttps = url.protocol === 'https:';\n        // Fallback function\n        let fallbackFn;\n        if (options.http2) {\n            fallbackFn = http2wrapper.auto;\n        }\n        else {\n            fallbackFn = isHttps ? https.request : http.request;\n        }\n        const realFn = (_a = options.request) !== null && _a !== void 0 ? _a : fallbackFn;\n        // Cache support\n        const fn = options.cache ? this._createCacheableRequest : realFn;\n        // Pass an agent directly when HTTP2 is disabled\n        if (agent && !options.http2) {\n            options.agent = agent[isHttps ? 'https' : 'http'];\n        }\n        // Prepare plain HTTP request options\n        options[kRequest] = realFn;\n        delete options.request;\n        // TODO: Fix this ignore.\n        // @ts-expect-error\n        delete options.timeout;\n        const requestOptions = options;\n        requestOptions.shared = (_b = options.cacheOptions) === null || _b === void 0 ? void 0 : _b.shared;\n        requestOptions.cacheHeuristic = (_c = options.cacheOptions) === null || _c === void 0 ? void 0 : _c.cacheHeuristic;\n        requestOptions.immutableMinTimeToLive = (_d = options.cacheOptions) === null || _d === void 0 ? void 0 : _d.immutableMinTimeToLive;\n        requestOptions.ignoreCargoCult = (_e = options.cacheOptions) === null || _e === void 0 ? void 0 : _e.ignoreCargoCult;\n        // If `dnsLookupIpVersion` is not present do not override `family`\n        if (options.dnsLookupIpVersion !== undefined) {\n            try {\n                requestOptions.family = dns_ip_version_1.dnsLookupIpVersionToFamily(options.dnsLookupIpVersion);\n            }\n            catch (_f) {\n                throw new Error('Invalid `dnsLookupIpVersion` option value');\n            }\n        }\n        // HTTPS options remapping\n        if (options.https) {\n            if ('rejectUnauthorized' in options.https) {\n                requestOptions.rejectUnauthorized = options.https.rejectUnauthorized;\n            }\n            if (options.https.checkServerIdentity) {\n                requestOptions.checkServerIdentity = options.https.checkServerIdentity;\n            }\n            if (options.https.certificateAuthority) {\n                requestOptions.ca = options.https.certificateAuthority;\n            }\n            if (options.https.certificate) {\n                requestOptions.cert = options.https.certificate;\n            }\n            if (options.https.key) {\n                requestOptions.key = options.https.key;\n            }\n            if (options.https.passphrase) {\n                requestOptions.passphrase = options.https.passphrase;\n            }\n            if (options.https.pfx) {\n                requestOptions.pfx = options.https.pfx;\n            }\n        }\n        try {\n            let requestOrResponse = await fn(url, requestOptions);\n            if (is_1.default.undefined(requestOrResponse)) {\n                requestOrResponse = fallbackFn(url, requestOptions);\n            }\n            // Restore options\n            options.request = request;\n            options.timeout = timeout;\n            options.agent = agent;\n            // HTTPS options restore\n            if (options.https) {\n                if ('rejectUnauthorized' in options.https) {\n                    delete requestOptions.rejectUnauthorized;\n                }\n                if (options.https.checkServerIdentity) {\n                    // @ts-expect-error - This one will be removed when we remove the alias.\n                    delete requestOptions.checkServerIdentity;\n                }\n                if (options.https.certificateAuthority) {\n                    delete requestOptions.ca;\n                }\n                if (options.https.certificate) {\n                    delete requestOptions.cert;\n                }\n                if (options.https.key) {\n                    delete requestOptions.key;\n                }\n                if (options.https.passphrase) {\n                    delete requestOptions.passphrase;\n                }\n                if (options.https.pfx) {\n                    delete requestOptions.pfx;\n                }\n            }\n            if (isClientRequest(requestOrResponse)) {\n                this._onRequest(requestOrResponse);\n                // Emit the response after the stream has been ended\n            }\n            else if (this.writable) {\n                this.once('finish', () => {\n                    void this._onResponse(requestOrResponse);\n                });\n                this._unlockWrite();\n                this.end();\n                this._lockWrite();\n            }\n            else {\n                void this._onResponse(requestOrResponse);\n            }\n        }\n        catch (error) {\n            if (error instanceof CacheableRequest.CacheError) {\n                throw new CacheError(error, this);\n            }\n            throw new RequestError(error.message, error, this);\n        }\n    }\n    async _error(error) {\n        try {\n            for (const hook of this.options.hooks.beforeError) {\n                // eslint-disable-next-line no-await-in-loop\n                error = await hook(error);\n            }\n        }\n        catch (error_) {\n            error = new RequestError(error_.message, error_, this);\n        }\n        this.destroy(error);\n    }\n    _beforeError(error) {\n        if (this[kStopReading]) {\n            return;\n        }\n        const { options } = this;\n        const retryCount = this.retryCount + 1;\n        this[kStopReading] = true;\n        if (!(error instanceof RequestError)) {\n            error = new RequestError(error.message, error, this);\n        }\n        const typedError = error;\n        const { response } = typedError;\n        void (async () => {\n            if (response && !response.body) {\n                response.setEncoding(this._readableState.encoding);\n                try {\n                    response.rawBody = await get_buffer_1.default(response);\n                    response.body = response.rawBody.toString();\n                }\n                catch (_a) { }\n            }\n            if (this.listenerCount('retry') !== 0) {\n                let backoff;\n                try {\n                    let retryAfter;\n                    if (response && 'retry-after' in response.headers) {\n                        retryAfter = Number(response.headers['retry-after']);\n                        if (Number.isNaN(retryAfter)) {\n                            retryAfter = Date.parse(response.headers['retry-after']) - Date.now();\n                            if (retryAfter <= 0) {\n                                retryAfter = 1;\n                            }\n                        }\n                        else {\n                            retryAfter *= 1000;\n                        }\n                    }\n                    backoff = await options.retry.calculateDelay({\n                        attemptCount: retryCount,\n                        retryOptions: options.retry,\n                        error: typedError,\n                        retryAfter,\n                        computedValue: calculate_retry_delay_1.default({\n                            attemptCount: retryCount,\n                            retryOptions: options.retry,\n                            error: typedError,\n                            retryAfter,\n                            computedValue: 0\n                        })\n                    });\n                }\n                catch (error_) {\n                    void this._error(new RequestError(error_.message, error_, this));\n                    return;\n                }\n                if (backoff) {\n                    const retry = async () => {\n                        try {\n                            for (const hook of this.options.hooks.beforeRetry) {\n                                // eslint-disable-next-line no-await-in-loop\n                                await hook(this.options, typedError, retryCount);\n                            }\n                        }\n                        catch (error_) {\n                            void this._error(new RequestError(error_.message, error, this));\n                            return;\n                        }\n                        // Something forced us to abort the retry\n                        if (this.destroyed) {\n                            return;\n                        }\n                        this.destroy();\n                        this.emit('retry', retryCount, error);\n                    };\n                    this[kRetryTimeout] = setTimeout(retry, backoff);\n                    return;\n                }\n            }\n            void this._error(typedError);\n        })();\n    }\n    _read() {\n        this[kTriggerRead] = true;\n        const response = this[kResponse];\n        if (response && !this[kStopReading]) {\n            // We cannot put this in the `if` above\n            // because `.read()` also triggers the `end` event\n            if (response.readableLength) {\n                this[kTriggerRead] = false;\n            }\n            let data;\n            while ((data = response.read()) !== null) {\n                this[kDownloadedSize] += data.length;\n                this[kStartedReading] = true;\n                const progress = this.downloadProgress;\n                if (progress.percent < 1) {\n                    this.emit('downloadProgress', progress);\n                }\n                this.push(data);\n            }\n        }\n    }\n    // Node.js 12 has incorrect types, so the encoding must be a string\n    _write(chunk, encoding, callback) {\n        const write = () => {\n            this._writeRequest(chunk, encoding, callback);\n        };\n        if (this.requestInitialized) {\n            write();\n        }\n        else {\n            this[kJobs].push(write);\n        }\n    }\n    _writeRequest(chunk, encoding, callback) {\n        if (this[kRequest].destroyed) {\n            // Probably the `ClientRequest` instance will throw\n            return;\n        }\n        this._progressCallbacks.push(() => {\n            this[kUploadedSize] += Buffer.byteLength(chunk, encoding);\n            const progress = this.uploadProgress;\n            if (progress.percent < 1) {\n                this.emit('uploadProgress', progress);\n            }\n        });\n        // TODO: What happens if it's from cache? Then this[kRequest] won't be defined.\n        this[kRequest].write(chunk, encoding, (error) => {\n            if (!error && this._progressCallbacks.length > 0) {\n                this._progressCallbacks.shift()();\n            }\n            callback(error);\n        });\n    }\n    _final(callback) {\n        const endRequest = () => {\n            // FIX: Node.js 10 calls the write callback AFTER the end callback!\n            while (this._progressCallbacks.length !== 0) {\n                this._progressCallbacks.shift()();\n            }\n            // We need to check if `this[kRequest]` is present,\n            // because it isn't when we use cache.\n            if (!(kRequest in this)) {\n                callback();\n                return;\n            }\n            if (this[kRequest].destroyed) {\n                callback();\n                return;\n            }\n            this[kRequest].end((error) => {\n                if (!error) {\n                    this[kBodySize] = this[kUploadedSize];\n                    this.emit('uploadProgress', this.uploadProgress);\n                    this[kRequest].emit('upload-complete');\n                }\n                callback(error);\n            });\n        };\n        if (this.requestInitialized) {\n            endRequest();\n        }\n        else {\n            this[kJobs].push(endRequest);\n        }\n    }\n    _destroy(error, callback) {\n        var _a;\n        this[kStopReading] = true;\n        // Prevent further retries\n        clearTimeout(this[kRetryTimeout]);\n        if (kRequest in this) {\n            this[kCancelTimeouts]();\n            // TODO: Remove the next `if` when these get fixed:\n            // - https://github.com/nodejs/node/issues/32851\n            if (!((_a = this[kResponse]) === null || _a === void 0 ? void 0 : _a.complete)) {\n                this[kRequest].destroy();\n            }\n        }\n        if (error !== null && !is_1.default.undefined(error) && !(error instanceof RequestError)) {\n            error = new RequestError(error.message, error, this);\n        }\n        callback(error);\n    }\n    get _isAboutToError() {\n        return this[kStopReading];\n    }\n    /**\n    The remote IP address.\n    */\n    get ip() {\n        var _a;\n        return (_a = this.socket) === null || _a === void 0 ? void 0 : _a.remoteAddress;\n    }\n    /**\n    Indicates whether the request has been aborted or not.\n    */\n    get aborted() {\n        var _a, _b, _c;\n        return ((_b = (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.destroyed) !== null && _b !== void 0 ? _b : this.destroyed) && !((_c = this[kOriginalResponse]) === null || _c === void 0 ? void 0 : _c.complete);\n    }\n    get socket() {\n        var _a, _b;\n        return (_b = (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.socket) !== null && _b !== void 0 ? _b : undefined;\n    }\n    /**\n    Progress event for downloading (receiving a response).\n    */\n    get downloadProgress() {\n        let percent;\n        if (this[kResponseSize]) {\n            percent = this[kDownloadedSize] / this[kResponseSize];\n        }\n        else if (this[kResponseSize] === this[kDownloadedSize]) {\n            percent = 1;\n        }\n        else {\n            percent = 0;\n        }\n        return {\n            percent,\n            transferred: this[kDownloadedSize],\n            total: this[kResponseSize]\n        };\n    }\n    /**\n    Progress event for uploading (sending a request).\n    */\n    get uploadProgress() {\n        let percent;\n        if (this[kBodySize]) {\n            percent = this[kUploadedSize] / this[kBodySize];\n        }\n        else if (this[kBodySize] === this[kUploadedSize]) {\n            percent = 1;\n        }\n        else {\n            percent = 0;\n        }\n        return {\n            percent,\n            transferred: this[kUploadedSize],\n            total: this[kBodySize]\n        };\n    }\n    /**\n    The object contains the following properties:\n\n    - `start` - Time when the request started.\n    - `socket` - Time when a socket was assigned to the request.\n    - `lookup` - Time when the DNS lookup finished.\n    - `connect` - Time when the socket successfully connected.\n    - `secureConnect` - Time when the socket securely connected.\n    - `upload` - Time when the request finished uploading.\n    - `response` - Time when the request fired `response` event.\n    - `end` - Time when the response fired `end` event.\n    - `error` - Time when the request fired `error` event.\n    - `abort` - Time when the request fired `abort` event.\n    - `phases`\n        - `wait` - `timings.socket - timings.start`\n        - `dns` - `timings.lookup - timings.socket`\n        - `tcp` - `timings.connect - timings.lookup`\n        - `tls` - `timings.secureConnect - timings.connect`\n        - `request` - `timings.upload - (timings.secureConnect || timings.connect)`\n        - `firstByte` - `timings.response - timings.upload`\n        - `download` - `timings.end - timings.response`\n        - `total` - `(timings.end || timings.error || timings.abort) - timings.start`\n\n    If something has not been measured yet, it will be `undefined`.\n\n    __Note__: The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n    */\n    get timings() {\n        var _a;\n        return (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.timings;\n    }\n    /**\n    Whether the response was retrieved from the cache.\n    */\n    get isFromCache() {\n        return this[kIsFromCache];\n    }\n    pipe(destination, options) {\n        if (this[kStartedReading]) {\n            throw new Error('Failed to pipe. The response has been emitted already.');\n        }\n        if (destination instanceof http_1.ServerResponse) {\n            this[kServerResponsesPiped].add(destination);\n        }\n        return super.pipe(destination, options);\n    }\n    unpipe(destination) {\n        if (destination instanceof http_1.ServerResponse) {\n            this[kServerResponsesPiped].delete(destination);\n        }\n        super.unpipe(destination);\n        return this;\n    }\n}\nexports[\"default\"] = Request;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDLEdBQUcsaUJBQWlCLEdBQUcsb0JBQW9CLEdBQUcsbUJBQW1CLEdBQUcsa0JBQWtCLEdBQUcsaUJBQWlCLEdBQUcseUJBQXlCLEdBQUcsb0JBQW9CLEdBQUcsa0NBQWtDLEdBQUcsdUJBQXVCLEdBQUcsbUJBQW1CLEdBQUcsNEJBQTRCO0FBQ2pULGVBQWUsbUJBQU8sQ0FBQyxrQkFBTTtBQUM3QixpQkFBaUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNqQyxhQUFhLG1CQUFPLENBQUMsY0FBSTtBQUN6QixjQUFjLG1CQUFPLENBQUMsZ0JBQUs7QUFDM0IsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCLGVBQWUsbUJBQU8sQ0FBQyxrQkFBTTtBQUM3QixjQUFjLG1CQUFPLENBQUMsb0JBQU87QUFDN0IscUJBQXFCLG1CQUFPLENBQUMsNklBQXVCO0FBQ3BELDJCQUEyQixtQkFBTyxDQUFDLHlIQUFrQjtBQUNyRCx5QkFBeUIsbUJBQU8sQ0FBQyx5SEFBbUI7QUFDcEQsMkJBQTJCLG1CQUFPLENBQUMsMkhBQXFCO0FBQ3hEO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsZ0hBQWU7QUFDNUMsc0JBQXNCLG1CQUFPLENBQUMsNEdBQWdCO0FBQzlDLGFBQWEsbUJBQU8sQ0FBQyx1SEFBa0I7QUFDdkMsd0JBQXdCLG1CQUFPLENBQUMsNkhBQXVCO0FBQ3ZELHVCQUF1QixtQkFBTyxDQUFDLDJIQUFzQjtBQUNyRCx1QkFBdUIsbUJBQU8sQ0FBQywySEFBc0I7QUFDckQsb0JBQW9CLG1CQUFPLENBQUMscUhBQW1CO0FBQy9DLHlCQUF5QixtQkFBTyxDQUFDLCtIQUF3QjtBQUN6RCx5QkFBeUIsbUJBQU8sQ0FBQywrSEFBd0I7QUFDekQsdUJBQXVCLG1CQUFPLENBQUMsMkhBQXNCO0FBQ3JELHFCQUFxQixtQkFBTyxDQUFDLHVIQUFvQjtBQUNqRCx5QkFBeUIsbUJBQU8sQ0FBQywrSEFBd0I7QUFDekQseUJBQXlCLG1CQUFPLENBQUMsK0hBQXdCO0FBQ3pELDhCQUE4QixtQkFBTyxDQUFDLHFJQUE4QjtBQUNwRSw4QkFBOEIsbUJBQU8sQ0FBQywrSUFBbUM7QUFDekUsZ0NBQWdDLG1CQUFPLENBQUMsaUlBQXlCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBLG1CQUFtQjtBQUNuQix1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsY0FBYztBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsb0NBQW9DLEVBQUUsb0NBQW9DLEVBQUUscUNBQXFDO0FBQzdJO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOEJBQThCLHFCQUFxQjtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IscUJBQXFCLEdBQUcsdUJBQXVCLE1BQU07QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxxQkFBcUIsTUFBTTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULGdCQUFnQixtQkFBbUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxQkFBcUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBLDhDQUE4QywrRkFBK0Y7QUFDN0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixZQUFZO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLFdBQVcsS0FBSyxNQUFNLElBQUksU0FBUztBQUMvRztBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQSxrQkFBa0IsV0FBVztBQUM3QjtBQUNBO0FBQ0EsMERBQTBELHFCQUFxQixFQUFFLG1CQUFtQjtBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFlBQVk7QUFDNUI7QUFDQSxrQkFBa0IsNkJBQTZCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGLE1BQU07QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtHQUErRywrQkFBK0I7QUFDOUk7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsTUFBTSwyQkFBMkIsbUNBQW1DO0FBQzNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUlBQW1JLElBQUk7QUFDdkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsZUFBZTtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLFdBQVcsMkJBQTJCO0FBQzlHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQixnQkFBZ0IsTUFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkZBQTJGO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFVBQVU7QUFDMUIsZ0JBQWdCLGVBQWU7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZGQUE2RixJQUFJO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwrQkFBK0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSxhQUFhLEVBQUUsV0FBVztBQUMvRjtBQUNBLHdCQUF3QixtQkFBbUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsV0FBVztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm90ZWluLWJpbmQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9nb3RAMTEuOC42L25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS9pbmRleC5qcz82MTkyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VbnN1cHBvcnRlZFByb3RvY29sRXJyb3IgPSBleHBvcnRzLlJlYWRFcnJvciA9IGV4cG9ydHMuVGltZW91dEVycm9yID0gZXhwb3J0cy5VcGxvYWRFcnJvciA9IGV4cG9ydHMuQ2FjaGVFcnJvciA9IGV4cG9ydHMuSFRUUEVycm9yID0gZXhwb3J0cy5NYXhSZWRpcmVjdHNFcnJvciA9IGV4cG9ydHMuUmVxdWVzdEVycm9yID0gZXhwb3J0cy5zZXROb25FbnVtZXJhYmxlUHJvcGVydGllcyA9IGV4cG9ydHMua25vd25Ib29rRXZlbnRzID0gZXhwb3J0cy53aXRob3V0Qm9keSA9IGV4cG9ydHMua0lzTm9ybWFsaXplZEFscmVhZHkgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IHN0cmVhbV8xID0gcmVxdWlyZShcInN0cmVhbVwiKTtcbmNvbnN0IGZzXzEgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCB1cmxfMSA9IHJlcXVpcmUoXCJ1cmxcIik7XG5jb25zdCBodHRwID0gcmVxdWlyZShcImh0dHBcIik7XG5jb25zdCBodHRwXzEgPSByZXF1aXJlKFwiaHR0cFwiKTtcbmNvbnN0IGh0dHBzID0gcmVxdWlyZShcImh0dHBzXCIpO1xuY29uc3QgaHR0cF90aW1lcl8xID0gcmVxdWlyZShcIkBzem1hcmN6YWsvaHR0cC10aW1lclwiKTtcbmNvbnN0IGNhY2hlYWJsZV9sb29rdXBfMSA9IHJlcXVpcmUoXCJjYWNoZWFibGUtbG9va3VwXCIpO1xuY29uc3QgQ2FjaGVhYmxlUmVxdWVzdCA9IHJlcXVpcmUoXCJjYWNoZWFibGUtcmVxdWVzdFwiKTtcbmNvbnN0IGRlY29tcHJlc3NSZXNwb25zZSA9IHJlcXVpcmUoXCJkZWNvbXByZXNzLXJlc3BvbnNlXCIpO1xuLy8gQHRzLWV4cGVjdC1lcnJvciBNaXNzaW5nIHR5cGVzXG5jb25zdCBodHRwMndyYXBwZXIgPSByZXF1aXJlKFwiaHR0cDItd3JhcHBlclwiKTtcbmNvbnN0IGxvd2VyY2FzZUtleXMgPSByZXF1aXJlKFwibG93ZXJjYXNlLWtleXNcIik7XG5jb25zdCBpc18xID0gcmVxdWlyZShcIkBzaW5kcmVzb3JodXMvaXNcIik7XG5jb25zdCBnZXRfYm9keV9zaXplXzEgPSByZXF1aXJlKFwiLi91dGlscy9nZXQtYm9keS1zaXplXCIpO1xuY29uc3QgaXNfZm9ybV9kYXRhXzEgPSByZXF1aXJlKFwiLi91dGlscy9pcy1mb3JtLWRhdGFcIik7XG5jb25zdCBwcm94eV9ldmVudHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL3Byb3h5LWV2ZW50c1wiKTtcbmNvbnN0IHRpbWVkX291dF8xID0gcmVxdWlyZShcIi4vdXRpbHMvdGltZWQtb3V0XCIpO1xuY29uc3QgdXJsX3RvX29wdGlvbnNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL3VybC10by1vcHRpb25zXCIpO1xuY29uc3Qgb3B0aW9uc190b191cmxfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL29wdGlvbnMtdG8tdXJsXCIpO1xuY29uc3Qgd2Vha2FibGVfbWFwXzEgPSByZXF1aXJlKFwiLi91dGlscy93ZWFrYWJsZS1tYXBcIik7XG5jb25zdCBnZXRfYnVmZmVyXzEgPSByZXF1aXJlKFwiLi91dGlscy9nZXQtYnVmZmVyXCIpO1xuY29uc3QgZG5zX2lwX3ZlcnNpb25fMSA9IHJlcXVpcmUoXCIuL3V0aWxzL2Rucy1pcC12ZXJzaW9uXCIpO1xuY29uc3QgaXNfcmVzcG9uc2Vfb2tfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL2lzLXJlc3BvbnNlLW9rXCIpO1xuY29uc3QgZGVwcmVjYXRpb25fd2FybmluZ18xID0gcmVxdWlyZShcIi4uL3V0aWxzL2RlcHJlY2F0aW9uLXdhcm5pbmdcIik7XG5jb25zdCBub3JtYWxpemVfYXJndW1lbnRzXzEgPSByZXF1aXJlKFwiLi4vYXMtcHJvbWlzZS9ub3JtYWxpemUtYXJndW1lbnRzXCIpO1xuY29uc3QgY2FsY3VsYXRlX3JldHJ5X2RlbGF5XzEgPSByZXF1aXJlKFwiLi9jYWxjdWxhdGUtcmV0cnktZGVsYXlcIik7XG5sZXQgZ2xvYmFsRG5zQ2FjaGU7XG5jb25zdCBrUmVxdWVzdCA9IFN5bWJvbCgncmVxdWVzdCcpO1xuY29uc3Qga1Jlc3BvbnNlID0gU3ltYm9sKCdyZXNwb25zZScpO1xuY29uc3Qga1Jlc3BvbnNlU2l6ZSA9IFN5bWJvbCgncmVzcG9uc2VTaXplJyk7XG5jb25zdCBrRG93bmxvYWRlZFNpemUgPSBTeW1ib2woJ2Rvd25sb2FkZWRTaXplJyk7XG5jb25zdCBrQm9keVNpemUgPSBTeW1ib2woJ2JvZHlTaXplJyk7XG5jb25zdCBrVXBsb2FkZWRTaXplID0gU3ltYm9sKCd1cGxvYWRlZFNpemUnKTtcbmNvbnN0IGtTZXJ2ZXJSZXNwb25zZXNQaXBlZCA9IFN5bWJvbCgnc2VydmVyUmVzcG9uc2VzUGlwZWQnKTtcbmNvbnN0IGtVbnByb3h5RXZlbnRzID0gU3ltYm9sKCd1bnByb3h5RXZlbnRzJyk7XG5jb25zdCBrSXNGcm9tQ2FjaGUgPSBTeW1ib2woJ2lzRnJvbUNhY2hlJyk7XG5jb25zdCBrQ2FuY2VsVGltZW91dHMgPSBTeW1ib2woJ2NhbmNlbFRpbWVvdXRzJyk7XG5jb25zdCBrU3RhcnRlZFJlYWRpbmcgPSBTeW1ib2woJ3N0YXJ0ZWRSZWFkaW5nJyk7XG5jb25zdCBrU3RvcFJlYWRpbmcgPSBTeW1ib2woJ3N0b3BSZWFkaW5nJyk7XG5jb25zdCBrVHJpZ2dlclJlYWQgPSBTeW1ib2woJ3RyaWdnZXJSZWFkJyk7XG5jb25zdCBrQm9keSA9IFN5bWJvbCgnYm9keScpO1xuY29uc3Qga0pvYnMgPSBTeW1ib2woJ2pvYnMnKTtcbmNvbnN0IGtPcmlnaW5hbFJlc3BvbnNlID0gU3ltYm9sKCdvcmlnaW5hbFJlc3BvbnNlJyk7XG5jb25zdCBrUmV0cnlUaW1lb3V0ID0gU3ltYm9sKCdyZXRyeVRpbWVvdXQnKTtcbmV4cG9ydHMua0lzTm9ybWFsaXplZEFscmVhZHkgPSBTeW1ib2woJ2lzTm9ybWFsaXplZEFscmVhZHknKTtcbmNvbnN0IHN1cHBvcnRzQnJvdGxpID0gaXNfMS5kZWZhdWx0LnN0cmluZyhwcm9jZXNzLnZlcnNpb25zLmJyb3RsaSk7XG5leHBvcnRzLndpdGhvdXRCb2R5ID0gbmV3IFNldChbJ0dFVCcsICdIRUFEJ10pO1xuZXhwb3J0cy5rbm93bkhvb2tFdmVudHMgPSBbXG4gICAgJ2luaXQnLFxuICAgICdiZWZvcmVSZXF1ZXN0JyxcbiAgICAnYmVmb3JlUmVkaXJlY3QnLFxuICAgICdiZWZvcmVFcnJvcicsXG4gICAgJ2JlZm9yZVJldHJ5JyxcbiAgICAvLyBQcm9taXNlLU9ubHlcbiAgICAnYWZ0ZXJSZXNwb25zZSdcbl07XG5mdW5jdGlvbiB2YWxpZGF0ZVNlYXJjaFBhcmFtZXRlcnMoc2VhcmNoUGFyYW1ldGVycykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzZWFyY2hQYXJhbWV0ZXJzKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc2VhcmNoUGFyYW1ldGVyc1trZXldO1xuICAgICAgICBpZiAoIWlzXzEuZGVmYXVsdC5zdHJpbmcodmFsdWUpICYmICFpc18xLmRlZmF1bHQubnVtYmVyKHZhbHVlKSAmJiAhaXNfMS5kZWZhdWx0LmJvb2xlYW4odmFsdWUpICYmICFpc18xLmRlZmF1bHQubnVsbF8odmFsdWUpICYmICFpc18xLmRlZmF1bHQudW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVGhlIFxcYHNlYXJjaFBhcmFtc1xcYCB2YWx1ZSAnJHtTdHJpbmcodmFsdWUpfScgbXVzdCBiZSBhIHN0cmluZywgbnVtYmVyLCBib29sZWFuIG9yIG51bGxgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGlzQ2xpZW50UmVxdWVzdChjbGllbnRSZXF1ZXN0KSB7XG4gICAgcmV0dXJuIGlzXzEuZGVmYXVsdC5vYmplY3QoY2xpZW50UmVxdWVzdCkgJiYgISgnc3RhdHVzQ29kZScgaW4gY2xpZW50UmVxdWVzdCk7XG59XG5jb25zdCBjYWNoZWFibGVTdG9yZSA9IG5ldyB3ZWFrYWJsZV9tYXBfMS5kZWZhdWx0KCk7XG5jb25zdCB3YWl0Rm9yT3BlbkZpbGUgPSBhc3luYyAoZmlsZSkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IG9uRXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9O1xuICAgIC8vIE5vZGUuanMgMTIgaGFzIGluY29tcGxldGUgdHlwZXNcbiAgICBpZiAoIWZpbGUucGVuZGluZykge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgfVxuICAgIGZpbGUub25jZSgnZXJyb3InLCBvbkVycm9yKTtcbiAgICBmaWxlLm9uY2UoJ3JlYWR5JywgKCkgPT4ge1xuICAgICAgICBmaWxlLm9mZignZXJyb3InLCBvbkVycm9yKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xufSk7XG5jb25zdCByZWRpcmVjdENvZGVzID0gbmV3IFNldChbMzAwLCAzMDEsIDMwMiwgMzAzLCAzMDQsIDMwNywgMzA4XSk7XG5jb25zdCBub25FbnVtZXJhYmxlUHJvcGVydGllcyA9IFtcbiAgICAnY29udGV4dCcsXG4gICAgJ2JvZHknLFxuICAgICdqc29uJyxcbiAgICAnZm9ybSdcbl07XG5leHBvcnRzLnNldE5vbkVudW1lcmFibGVQcm9wZXJ0aWVzID0gKHNvdXJjZXMsIHRvKSA9PiB7XG4gICAgLy8gTm9uIGVudW1lcmFibGUgcHJvcGVydGllcyBzaGFsbCBub3QgYmUgbWVyZ2VkXG4gICAgY29uc3QgcHJvcGVydGllcyA9IHt9O1xuICAgIGZvciAoY29uc3Qgc291cmNlIG9mIHNvdXJjZXMpIHtcbiAgICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBub25FbnVtZXJhYmxlUHJvcGVydGllcykge1xuICAgICAgICAgICAgaWYgKCEobmFtZSBpbiBzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9wZXJ0aWVzW25hbWVdID0ge1xuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRTIGRvZXNuJ3Qgc2VlIHRoZSBjaGVjayBhYm92ZVxuICAgICAgICAgICAgICAgIHZhbHVlOiBzb3VyY2VbbmFtZV1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModG8sIHByb3BlcnRpZXMpO1xufTtcbi8qKlxuQW4gZXJyb3IgdG8gYmUgdGhyb3duIHdoZW4gYSByZXF1ZXN0IGZhaWxzLlxuQ29udGFpbnMgYSBgY29kZWAgcHJvcGVydHkgd2l0aCBlcnJvciBjbGFzcyBjb2RlLCBsaWtlIGBFQ09OTlJFRlVTRURgLlxuKi9cbmNsYXNzIFJlcXVlc3RFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBlcnJvciwgc2VsZikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgICAgIHRoaXMubmFtZSA9ICdSZXF1ZXN0RXJyb3InO1xuICAgICAgICB0aGlzLmNvZGUgPSAoX2EgPSBlcnJvci5jb2RlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnRVJSX0dPVF9SRVFVRVNUX0VSUk9SJztcbiAgICAgICAgaWYgKHNlbGYgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3JlcXVlc3QnLCB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHNlbGZcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdyZXNwb25zZScsIHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZltrUmVzcG9uc2VdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnb3B0aW9ucycsIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGZhaWxzIGJlY2F1c2Ugb2YgVFMgMy43LjIgdXNlRGVmaW5lRm9yQ2xhc3NGaWVsZHNcbiAgICAgICAgICAgICAgICAvLyBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzQ5NzJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZi5vcHRpb25zXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnb3B0aW9ucycsIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGZhaWxzIGJlY2F1c2Ugb2YgVFMgMy43LjIgdXNlRGVmaW5lRm9yQ2xhc3NGaWVsZHNcbiAgICAgICAgICAgICAgICAvLyBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzQ5NzJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aW1pbmdzID0gKF9iID0gdGhpcy5yZXF1ZXN0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudGltaW5ncztcbiAgICAgICAgLy8gUmVjb3ZlciB0aGUgb3JpZ2luYWwgc3RhY2t0cmFjZVxuICAgICAgICBpZiAoaXNfMS5kZWZhdWx0LnN0cmluZyhlcnJvci5zdGFjaykgJiYgaXNfMS5kZWZhdWx0LnN0cmluZyh0aGlzLnN0YWNrKSkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXhPZk1lc3NhZ2UgPSB0aGlzLnN0YWNrLmluZGV4T2YodGhpcy5tZXNzYWdlKSArIHRoaXMubWVzc2FnZS5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCB0aGlzU3RhY2tUcmFjZSA9IHRoaXMuc3RhY2suc2xpY2UoaW5kZXhPZk1lc3NhZ2UpLnNwbGl0KCdcXG4nKS5yZXZlcnNlKCk7XG4gICAgICAgICAgICBjb25zdCBlcnJvclN0YWNrVHJhY2UgPSBlcnJvci5zdGFjay5zbGljZShlcnJvci5zdGFjay5pbmRleE9mKGVycm9yLm1lc3NhZ2UpICsgZXJyb3IubWVzc2FnZS5sZW5ndGgpLnNwbGl0KCdcXG4nKS5yZXZlcnNlKCk7XG4gICAgICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRlZCB0cmFjZXNcbiAgICAgICAgICAgIHdoaWxlIChlcnJvclN0YWNrVHJhY2UubGVuZ3RoICE9PSAwICYmIGVycm9yU3RhY2tUcmFjZVswXSA9PT0gdGhpc1N0YWNrVHJhY2VbMF0pIHtcbiAgICAgICAgICAgICAgICB0aGlzU3RhY2tUcmFjZS5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdGFjayA9IGAke3RoaXMuc3RhY2suc2xpY2UoMCwgaW5kZXhPZk1lc3NhZ2UpfSR7dGhpc1N0YWNrVHJhY2UucmV2ZXJzZSgpLmpvaW4oJ1xcbicpfSR7ZXJyb3JTdGFja1RyYWNlLnJldmVyc2UoKS5qb2luKCdcXG4nKX1gO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5SZXF1ZXN0RXJyb3IgPSBSZXF1ZXN0RXJyb3I7XG4vKipcbkFuIGVycm9yIHRvIGJlIHRocm93biB3aGVuIHRoZSBzZXJ2ZXIgcmVkaXJlY3RzIHlvdSBtb3JlIHRoYW4gdGVuIHRpbWVzLlxuSW5jbHVkZXMgYSBgcmVzcG9uc2VgIHByb3BlcnR5LlxuKi9cbmNsYXNzIE1heFJlZGlyZWN0c0Vycm9yIGV4dGVuZHMgUmVxdWVzdEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihyZXF1ZXN0KSB7XG4gICAgICAgIHN1cGVyKGBSZWRpcmVjdGVkICR7cmVxdWVzdC5vcHRpb25zLm1heFJlZGlyZWN0c30gdGltZXMuIEFib3J0aW5nLmAsIHt9LCByZXF1ZXN0KTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ01heFJlZGlyZWN0c0Vycm9yJztcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9UT09fTUFOWV9SRURJUkVDVFMnO1xuICAgIH1cbn1cbmV4cG9ydHMuTWF4UmVkaXJlY3RzRXJyb3IgPSBNYXhSZWRpcmVjdHNFcnJvcjtcbi8qKlxuQW4gZXJyb3IgdG8gYmUgdGhyb3duIHdoZW4gdGhlIHNlcnZlciByZXNwb25zZSBjb2RlIGlzIG5vdCAyeHggbm9yIDN4eCBpZiBgb3B0aW9ucy5mb2xsb3dSZWRpcmVjdGAgaXMgYHRydWVgLCBidXQgYWx3YXlzIGV4Y2VwdCBmb3IgMzA0LlxuSW5jbHVkZXMgYSBgcmVzcG9uc2VgIHByb3BlcnR5LlxuKi9cbmNsYXNzIEhUVFBFcnJvciBleHRlbmRzIFJlcXVlc3RFcnJvciB7XG4gICAgY29uc3RydWN0b3IocmVzcG9uc2UpIHtcbiAgICAgICAgc3VwZXIoYFJlc3BvbnNlIGNvZGUgJHtyZXNwb25zZS5zdGF0dXNDb2RlfSAoJHtyZXNwb25zZS5zdGF0dXNNZXNzYWdlfSlgLCB7fSwgcmVzcG9uc2UucmVxdWVzdCk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdIVFRQRXJyb3InO1xuICAgICAgICB0aGlzLmNvZGUgPSAnRVJSX05PTl8yWFhfM1hYX1JFU1BPTlNFJztcbiAgICB9XG59XG5leHBvcnRzLkhUVFBFcnJvciA9IEhUVFBFcnJvcjtcbi8qKlxuQW4gZXJyb3IgdG8gYmUgdGhyb3duIHdoZW4gYSBjYWNoZSBtZXRob2QgZmFpbHMuXG5Gb3IgZXhhbXBsZSwgaWYgdGhlIGRhdGFiYXNlIGdvZXMgZG93biBvciB0aGVyZSdzIGEgZmlsZXN5c3RlbSBlcnJvci5cbiovXG5jbGFzcyBDYWNoZUVycm9yIGV4dGVuZHMgUmVxdWVzdEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihlcnJvciwgcmVxdWVzdCkge1xuICAgICAgICBzdXBlcihlcnJvci5tZXNzYWdlLCBlcnJvciwgcmVxdWVzdCk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdDYWNoZUVycm9yJztcbiAgICAgICAgdGhpcy5jb2RlID0gdGhpcy5jb2RlID09PSAnRVJSX0dPVF9SRVFVRVNUX0VSUk9SJyA/ICdFUlJfQ0FDSEVfQUNDRVNTJyA6IHRoaXMuY29kZTtcbiAgICB9XG59XG5leHBvcnRzLkNhY2hlRXJyb3IgPSBDYWNoZUVycm9yO1xuLyoqXG5BbiBlcnJvciB0byBiZSB0aHJvd24gd2hlbiB0aGUgcmVxdWVzdCBib2R5IGlzIGEgc3RyZWFtIGFuZCBhbiBlcnJvciBvY2N1cnMgd2hpbGUgcmVhZGluZyBmcm9tIHRoYXQgc3RyZWFtLlxuKi9cbmNsYXNzIFVwbG9hZEVycm9yIGV4dGVuZHMgUmVxdWVzdEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihlcnJvciwgcmVxdWVzdCkge1xuICAgICAgICBzdXBlcihlcnJvci5tZXNzYWdlLCBlcnJvciwgcmVxdWVzdCk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdVcGxvYWRFcnJvcic7XG4gICAgICAgIHRoaXMuY29kZSA9IHRoaXMuY29kZSA9PT0gJ0VSUl9HT1RfUkVRVUVTVF9FUlJPUicgPyAnRVJSX1VQTE9BRCcgOiB0aGlzLmNvZGU7XG4gICAgfVxufVxuZXhwb3J0cy5VcGxvYWRFcnJvciA9IFVwbG9hZEVycm9yO1xuLyoqXG5BbiBlcnJvciB0byBiZSB0aHJvd24gd2hlbiB0aGUgcmVxdWVzdCBpcyBhYm9ydGVkIGR1ZSB0byBhIHRpbWVvdXQuXG5JbmNsdWRlcyBhbiBgZXZlbnRgIGFuZCBgdGltaW5nc2AgcHJvcGVydHkuXG4qL1xuY2xhc3MgVGltZW91dEVycm9yIGV4dGVuZHMgUmVxdWVzdEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihlcnJvciwgdGltaW5ncywgcmVxdWVzdCkge1xuICAgICAgICBzdXBlcihlcnJvci5tZXNzYWdlLCBlcnJvciwgcmVxdWVzdCk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdUaW1lb3V0RXJyb3InO1xuICAgICAgICB0aGlzLmV2ZW50ID0gZXJyb3IuZXZlbnQ7XG4gICAgICAgIHRoaXMudGltaW5ncyA9IHRpbWluZ3M7XG4gICAgfVxufVxuZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSBUaW1lb3V0RXJyb3I7XG4vKipcbkFuIGVycm9yIHRvIGJlIHRocm93biB3aGVuIHJlYWRpbmcgZnJvbSByZXNwb25zZSBzdHJlYW0gZmFpbHMuXG4qL1xuY2xhc3MgUmVhZEVycm9yIGV4dGVuZHMgUmVxdWVzdEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihlcnJvciwgcmVxdWVzdCkge1xuICAgICAgICBzdXBlcihlcnJvci5tZXNzYWdlLCBlcnJvciwgcmVxdWVzdCk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdSZWFkRXJyb3InO1xuICAgICAgICB0aGlzLmNvZGUgPSB0aGlzLmNvZGUgPT09ICdFUlJfR09UX1JFUVVFU1RfRVJST1InID8gJ0VSUl9SRUFESU5HX1JFU1BPTlNFX1NUUkVBTScgOiB0aGlzLmNvZGU7XG4gICAgfVxufVxuZXhwb3J0cy5SZWFkRXJyb3IgPSBSZWFkRXJyb3I7XG4vKipcbkFuIGVycm9yIHRvIGJlIHRocm93biB3aGVuIGdpdmVuIGFuIHVuc3VwcG9ydGVkIHByb3RvY29sLlxuKi9cbmNsYXNzIFVuc3VwcG9ydGVkUHJvdG9jb2xFcnJvciBleHRlbmRzIFJlcXVlc3RFcnJvciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihgVW5zdXBwb3J0ZWQgcHJvdG9jb2wgXCIke29wdGlvbnMudXJsLnByb3RvY29sfVwiYCwge30sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVW5zdXBwb3J0ZWRQcm90b2NvbEVycm9yJztcbiAgICAgICAgdGhpcy5jb2RlID0gJ0VSUl9VTlNVUFBPUlRFRF9QUk9UT0NPTCc7XG4gICAgfVxufVxuZXhwb3J0cy5VbnN1cHBvcnRlZFByb3RvY29sRXJyb3IgPSBVbnN1cHBvcnRlZFByb3RvY29sRXJyb3I7XG5jb25zdCBwcm94aWVkUmVxdWVzdEV2ZW50cyA9IFtcbiAgICAnc29ja2V0JyxcbiAgICAnY29ubmVjdCcsXG4gICAgJ2NvbnRpbnVlJyxcbiAgICAnaW5mb3JtYXRpb24nLFxuICAgICd1cGdyYWRlJyxcbiAgICAndGltZW91dCdcbl07XG5jbGFzcyBSZXF1ZXN0IGV4dGVuZHMgc3RyZWFtXzEuRHVwbGV4IHtcbiAgICBjb25zdHJ1Y3Rvcih1cmwsIG9wdGlvbnMgPSB7fSwgZGVmYXVsdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgLy8gVGhpcyBtdXN0IGJlIGZhbHNlLCB0byBlbmFibGUgdGhyb3dpbmcgYWZ0ZXIgZGVzdHJveVxuICAgICAgICAgICAgLy8gSXQgaXMgdXNlZCBmb3IgcmV0cnkgbG9naWMgaW4gUHJvbWlzZSBBUElcbiAgICAgICAgICAgIGF1dG9EZXN0cm95OiBmYWxzZSxcbiAgICAgICAgICAgIC8vIEl0IG5lZWRzIHRvIGJlIHplcm8gYmVjYXVzZSB3ZSdyZSBqdXN0IHByb3h5aW5nIHRoZSBkYXRhIHRvIGFub3RoZXIgc3RyZWFtXG4gICAgICAgICAgICBoaWdoV2F0ZXJNYXJrOiAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzW2tEb3dubG9hZGVkU2l6ZV0gPSAwO1xuICAgICAgICB0aGlzW2tVcGxvYWRlZFNpemVdID0gMDtcbiAgICAgICAgdGhpcy5yZXF1ZXN0SW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpc1trU2VydmVyUmVzcG9uc2VzUGlwZWRdID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLnJlZGlyZWN0cyA9IFtdO1xuICAgICAgICB0aGlzW2tTdG9wUmVhZGluZ10gPSBmYWxzZTtcbiAgICAgICAgdGhpc1trVHJpZ2dlclJlYWRdID0gZmFsc2U7XG4gICAgICAgIHRoaXNba0pvYnNdID0gW107XG4gICAgICAgIHRoaXMucmV0cnlDb3VudCA9IDA7XG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSB0aGlzIHdoZW4gdGFyZ2V0aW5nIE5vZGUuanMgPj0gMTJcbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3NDYWxsYmFja3MgPSBbXTtcbiAgICAgICAgY29uc3QgdW5sb2NrV3JpdGUgPSAoKSA9PiB0aGlzLl91bmxvY2tXcml0ZSgpO1xuICAgICAgICBjb25zdCBsb2NrV3JpdGUgPSAoKSA9PiB0aGlzLl9sb2NrV3JpdGUoKTtcbiAgICAgICAgdGhpcy5vbigncGlwZScsIChzb3VyY2UpID0+IHtcbiAgICAgICAgICAgIHNvdXJjZS5wcmVwZW5kTGlzdGVuZXIoJ2RhdGEnLCB1bmxvY2tXcml0ZSk7XG4gICAgICAgICAgICBzb3VyY2Uub24oJ2RhdGEnLCBsb2NrV3JpdGUpO1xuICAgICAgICAgICAgc291cmNlLnByZXBlbmRMaXN0ZW5lcignZW5kJywgdW5sb2NrV3JpdGUpO1xuICAgICAgICAgICAgc291cmNlLm9uKCdlbmQnLCBsb2NrV3JpdGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbigndW5waXBlJywgKHNvdXJjZSkgPT4ge1xuICAgICAgICAgICAgc291cmNlLm9mZignZGF0YScsIHVubG9ja1dyaXRlKTtcbiAgICAgICAgICAgIHNvdXJjZS5vZmYoJ2RhdGEnLCBsb2NrV3JpdGUpO1xuICAgICAgICAgICAgc291cmNlLm9mZignZW5kJywgdW5sb2NrV3JpdGUpO1xuICAgICAgICAgICAgc291cmNlLm9mZignZW5kJywgbG9ja1dyaXRlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub24oJ3BpcGUnLCBzb3VyY2UgPT4ge1xuICAgICAgICAgICAgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIGh0dHBfMS5JbmNvbWluZ01lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uc291cmNlLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucy5oZWFkZXJzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHsganNvbiwgYm9keSwgZm9ybSB9ID0gb3B0aW9ucztcbiAgICAgICAgaWYgKGpzb24gfHwgYm9keSB8fCBmb3JtKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NrV3JpdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhwb3J0cy5rSXNOb3JtYWxpemVkQWxyZWFkeSBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIENvbW1vbiBUeXBlU2NyaXB0IGJ1ZyBzYXlpbmcgdGhhdCBgdGhpcy5jb25zdHJ1Y3RvcmAgaXMgbm90IGFjY2Vzc2libGVcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmNvbnN0cnVjdG9yLm5vcm1hbGl6ZUFyZ3VtZW50cyh1cmwsIG9wdGlvbnMsIGRlZmF1bHRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IE1vdmUgdGhpcyB0byBgX2Rlc3Ryb3koKWBcbiAgICAgICAgICAgICAgICBpZiAoaXNfMS5kZWZhdWx0Lm5vZGVTdHJlYW0ob3B0aW9ucy5ib2R5KSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmJvZHkuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJvZHkgaW5zdGFuY2VvZiBmc18xLlJlYWRTdHJlYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgd2FpdEZvck9wZW5GaWxlKHRoaXMub3B0aW9ucy5ib2R5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgeyB1cmw6IG5vcm1hbGl6ZWRVUkwgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgICAgICAgICBpZiAoIW5vcm1hbGl6ZWRVUkwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWlzc2luZyBgdXJsYCBwcm9wZXJ0eScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RVcmwgPSBub3JtYWxpemVkVVJMLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgZGVjb2RlVVJJKHRoaXMucmVxdWVzdFVybCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fZmluYWxpemVCb2R5KCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fbWFrZVJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgKF9hID0gdGhpc1trUmVxdWVzdF0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUXVldWVkIHdyaXRlcyBldGMuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBqb2Igb2YgdGhpc1trSm9ic10pIHtcbiAgICAgICAgICAgICAgICAgICAgam9iKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgbWVtb3J5IGxlYWtcbiAgICAgICAgICAgICAgICB0aGlzW2tKb2JzXS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdEluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFJlcXVlc3RFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iZWZvcmVFcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvMzMzMzVcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveShlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuICAgIH1cbiAgICBzdGF0aWMgbm9ybWFsaXplQXJndW1lbnRzKHVybCwgb3B0aW9ucywgZGVmYXVsdHMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgY29uc3QgcmF3T3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIGlmIChpc18xLmRlZmF1bHQub2JqZWN0KHVybCkgJiYgIWlzXzEuZGVmYXVsdC51cmxJbnN0YW5jZSh1cmwpKSB7XG4gICAgICAgICAgICBvcHRpb25zID0geyAuLi5kZWZhdWx0cywgLi4udXJsLCAuLi5vcHRpb25zIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodXJsICYmIG9wdGlvbnMgJiYgb3B0aW9ucy51cmwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBgdXJsYCBvcHRpb24gaXMgbXV0dWFsbHkgZXhjbHVzaXZlIHdpdGggdGhlIGBpbnB1dGAgYXJndW1lbnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMgPSB7IC4uLmRlZmF1bHRzLCAuLi5vcHRpb25zIH07XG4gICAgICAgICAgICBpZiAodXJsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnVybCA9IHVybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc18xLmRlZmF1bHQudXJsSW5zdGFuY2Uob3B0aW9ucy51cmwpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy51cmwgPSBuZXcgdXJsXzEuVVJMKG9wdGlvbnMudXJsLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IERlcHJlY2F0ZSBVUkwgb3B0aW9ucyBpbiBHb3QgMTIuXG4gICAgICAgIC8vIFN1cHBvcnQgZXh0ZW5kLXNwZWNpZmljIG9wdGlvbnNcbiAgICAgICAgaWYgKG9wdGlvbnMuY2FjaGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBvcHRpb25zLmNhY2hlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmRuc0NhY2hlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgb3B0aW9ucy5kbnNDYWNoZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBOaWNlIHR5cGUgYXNzZXJ0aW9uc1xuICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5zdHJpbmcsIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLm1ldGhvZCk7XG4gICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0Lm9iamVjdCwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0LnN0cmluZywgaXNfMS5kZWZhdWx0LnVybEluc3RhbmNlLCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5wcmVmaXhVcmwpO1xuICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5vYmplY3QsIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLmNvb2tpZUphcik7XG4gICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0Lm9iamVjdCwgaXNfMS5kZWZhdWx0LnN0cmluZywgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuc2VhcmNoUGFyYW1zKTtcbiAgICAgICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQub2JqZWN0LCBpc18xLmRlZmF1bHQuc3RyaW5nLCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5jYWNoZSk7XG4gICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0Lm9iamVjdCwgaXNfMS5kZWZhdWx0Lm51bWJlciwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMudGltZW91dCk7XG4gICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0Lm9iamVjdCwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuY29udGV4dCk7XG4gICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0Lm9iamVjdCwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuaG9va3MpO1xuICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5ib29sZWFuLCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5kZWNvbXByZXNzKTtcbiAgICAgICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuYm9vbGVhbiwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuaWdub3JlSW52YWxpZENvb2tpZXMpO1xuICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5ib29sZWFuLCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5mb2xsb3dSZWRpcmVjdCk7XG4gICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0Lm51bWJlciwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMubWF4UmVkaXJlY3RzKTtcbiAgICAgICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuYm9vbGVhbiwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMudGhyb3dIdHRwRXJyb3JzKTtcbiAgICAgICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuYm9vbGVhbiwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuaHR0cDIpO1xuICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5ib29sZWFuLCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5hbGxvd0dldEJvZHkpO1xuICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5zdHJpbmcsIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLmxvY2FsQWRkcmVzcyk7XG4gICAgICAgIGlzXzEuYXNzZXJ0LmFueShbZG5zX2lwX3ZlcnNpb25fMS5pc0Ruc0xvb2t1cElwVmVyc2lvbiwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuZG5zTG9va3VwSXBWZXJzaW9uKTtcbiAgICAgICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQub2JqZWN0LCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5odHRwcyk7XG4gICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0LmJvb2xlYW4sIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLnJlamVjdFVuYXV0aG9yaXplZCk7XG4gICAgICAgIGlmIChvcHRpb25zLmh0dHBzKSB7XG4gICAgICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5ib29sZWFuLCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5odHRwcy5yZWplY3RVbmF1dGhvcml6ZWQpO1xuICAgICAgICAgICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuZnVuY3Rpb25fLCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5odHRwcy5jaGVja1NlcnZlcklkZW50aXR5KTtcbiAgICAgICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0LnN0cmluZywgaXNfMS5kZWZhdWx0Lm9iamVjdCwgaXNfMS5kZWZhdWx0LmFycmF5LCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5odHRwcy5jZXJ0aWZpY2F0ZUF1dGhvcml0eSk7XG4gICAgICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5zdHJpbmcsIGlzXzEuZGVmYXVsdC5vYmplY3QsIGlzXzEuZGVmYXVsdC5hcnJheSwgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZF0sIG9wdGlvbnMuaHR0cHMua2V5KTtcbiAgICAgICAgICAgIGlzXzEuYXNzZXJ0LmFueShbaXNfMS5kZWZhdWx0LnN0cmluZywgaXNfMS5kZWZhdWx0Lm9iamVjdCwgaXNfMS5kZWZhdWx0LmFycmF5LCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5odHRwcy5jZXJ0aWZpY2F0ZSk7XG4gICAgICAgICAgICBpc18xLmFzc2VydC5hbnkoW2lzXzEuZGVmYXVsdC5zdHJpbmcsIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLmh0dHBzLnBhc3NwaHJhc2UpO1xuICAgICAgICAgICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQuc3RyaW5nLCBpc18xLmRlZmF1bHQuYnVmZmVyLCBpc18xLmRlZmF1bHQuYXJyYXksIGlzXzEuZGVmYXVsdC51bmRlZmluZWRdLCBvcHRpb25zLmh0dHBzLnBmeCk7XG4gICAgICAgIH1cbiAgICAgICAgaXNfMS5hc3NlcnQuYW55KFtpc18xLmRlZmF1bHQub2JqZWN0LCBpc18xLmRlZmF1bHQudW5kZWZpbmVkXSwgb3B0aW9ucy5jYWNoZU9wdGlvbnMpO1xuICAgICAgICAvLyBgb3B0aW9ucy5tZXRob2RgXG4gICAgICAgIGlmIChpc18xLmRlZmF1bHQuc3RyaW5nKG9wdGlvbnMubWV0aG9kKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5tZXRob2QgPSBvcHRpb25zLm1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucy5tZXRob2QgPSAnR0VUJztcbiAgICAgICAgfVxuICAgICAgICAvLyBgb3B0aW9ucy5oZWFkZXJzYFxuICAgICAgICBpZiAob3B0aW9ucy5oZWFkZXJzID09PSAoZGVmYXVsdHMgPT09IG51bGwgfHwgZGVmYXVsdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlZmF1bHRzLmhlYWRlcnMpKSB7XG4gICAgICAgICAgICBvcHRpb25zLmhlYWRlcnMgPSB7IC4uLm9wdGlvbnMuaGVhZGVycyB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucy5oZWFkZXJzID0gbG93ZXJjYXNlS2V5cyh7IC4uLihkZWZhdWx0cyA9PT0gbnVsbCB8fCBkZWZhdWx0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmYXVsdHMuaGVhZGVycyksIC4uLm9wdGlvbnMuaGVhZGVycyB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEaXNhbGxvdyBsZWdhY3kgYHVybC5VcmxgXG4gICAgICAgIGlmICgnc2xhc2hlcycgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGxlZ2FjeSBgdXJsLlVybGAgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIGBVUkxgIGluc3RlYWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYG9wdGlvbnMuYXV0aGBcbiAgICAgICAgaWYgKCdhdXRoJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQYXJhbWV0ZXIgYGF1dGhgIGlzIGRlcHJlY2F0ZWQuIFVzZSBgdXNlcm5hbWVgIC8gYHBhc3N3b3JkYCBpbnN0ZWFkLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGBvcHRpb25zLnNlYXJjaFBhcmFtc2BcbiAgICAgICAgaWYgKCdzZWFyY2hQYXJhbXMnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNlYXJjaFBhcmFtcyAmJiBvcHRpb25zLnNlYXJjaFBhcmFtcyAhPT0gKGRlZmF1bHRzID09PSBudWxsIHx8IGRlZmF1bHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWZhdWx0cy5zZWFyY2hQYXJhbXMpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNlYXJjaFBhcmFtZXRlcnM7XG4gICAgICAgICAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC5zdHJpbmcob3B0aW9ucy5zZWFyY2hQYXJhbXMpIHx8IChvcHRpb25zLnNlYXJjaFBhcmFtcyBpbnN0YW5jZW9mIHVybF8xLlVSTFNlYXJjaFBhcmFtcykpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoUGFyYW1ldGVycyA9IG5ldyB1cmxfMS5VUkxTZWFyY2hQYXJhbXMob3B0aW9ucy5zZWFyY2hQYXJhbXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVTZWFyY2hQYXJhbWV0ZXJzKG9wdGlvbnMuc2VhcmNoUGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoUGFyYW1ldGVycyA9IG5ldyB1cmxfMS5VUkxTZWFyY2hQYXJhbXMoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvcHRpb25zLnNlYXJjaFBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zLnNlYXJjaFBhcmFtc1trZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoUGFyYW1ldGVycy5hcHBlbmQoa2V5LCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoUGFyYW1ldGVycy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYG5vcm1hbGl6ZUFyZ3VtZW50cygpYCBpcyBhbHNvIHVzZWQgdG8gbWVyZ2Ugb3B0aW9uc1xuICAgICAgICAgICAgICAgIChfYSA9IGRlZmF1bHRzID09PSBudWxsIHx8IGRlZmF1bHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWZhdWx0cy5zZWFyY2hQYXJhbXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgdXNlIGRlZmF1bHQgaWYgb25lIGlzbid0IGFscmVhZHkgZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlYXJjaFBhcmFtZXRlcnMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFBhcmFtZXRlcnMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zZWFyY2hQYXJhbXMgPSBzZWFyY2hQYXJhbWV0ZXJzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGBvcHRpb25zLnVzZXJuYW1lYCAmIGBvcHRpb25zLnBhc3N3b3JkYFxuICAgICAgICBvcHRpb25zLnVzZXJuYW1lID0gKF9iID0gb3B0aW9ucy51c2VybmFtZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyc7XG4gICAgICAgIG9wdGlvbnMucGFzc3dvcmQgPSAoX2MgPSBvcHRpb25zLnBhc3N3b3JkKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAnJztcbiAgICAgICAgLy8gYG9wdGlvbnMucHJlZml4VXJsYCAmIGBvcHRpb25zLnVybGBcbiAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC51bmRlZmluZWQob3B0aW9ucy5wcmVmaXhVcmwpKSB7XG4gICAgICAgICAgICBvcHRpb25zLnByZWZpeFVybCA9IChfZCA9IGRlZmF1bHRzID09PSBudWxsIHx8IGRlZmF1bHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWZhdWx0cy5wcmVmaXhVcmwpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6ICcnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucy5wcmVmaXhVcmwgPSBvcHRpb25zLnByZWZpeFVybC50b1N0cmluZygpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucHJlZml4VXJsICE9PSAnJyAmJiAhb3B0aW9ucy5wcmVmaXhVcmwuZW5kc1dpdGgoJy8nKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucHJlZml4VXJsICs9ICcvJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNfMS5kZWZhdWx0LnN0cmluZyhvcHRpb25zLnVybCkpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnVybC5zdGFydHNXaXRoKCcvJykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BpbnB1dGAgbXVzdCBub3Qgc3RhcnQgd2l0aCBhIHNsYXNoIHdoZW4gdXNpbmcgYHByZWZpeFVybGAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMudXJsID0gb3B0aW9uc190b191cmxfMS5kZWZhdWx0KG9wdGlvbnMucHJlZml4VXJsICsgb3B0aW9ucy51cmwsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChpc18xLmRlZmF1bHQudW5kZWZpbmVkKG9wdGlvbnMudXJsKSAmJiBvcHRpb25zLnByZWZpeFVybCAhPT0gJycpIHx8IG9wdGlvbnMucHJvdG9jb2wpIHtcbiAgICAgICAgICAgIG9wdGlvbnMudXJsID0gb3B0aW9uc190b191cmxfMS5kZWZhdWx0KG9wdGlvbnMucHJlZml4VXJsLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy51cmwpIHtcbiAgICAgICAgICAgIGlmICgncG9ydCcgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLnBvcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNYWtlIGl0IHBvc3NpYmxlIHRvIGNoYW5nZSBgb3B0aW9ucy5wcmVmaXhVcmxgXG4gICAgICAgICAgICBsZXQgeyBwcmVmaXhVcmwgfSA9IG9wdGlvbnM7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0aW9ucywgJ3ByZWZpeFVybCcsIHtcbiAgICAgICAgICAgICAgICBzZXQ6ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBvcHRpb25zLnVybDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF1cmwuaHJlZi5zdGFydHNXaXRoKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY2hhbmdlIFxcYHByZWZpeFVybFxcYCBmcm9tICR7cHJlZml4VXJsfSB0byAke3ZhbHVlfTogJHt1cmwuaHJlZn1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnVybCA9IG5ldyB1cmxfMS5VUkwodmFsdWUgKyB1cmwuaHJlZi5zbGljZShwcmVmaXhVcmwubGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgICAgIHByZWZpeFVybCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBwcmVmaXhVcmxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gU3VwcG9ydCBVTklYIHNvY2tldHNcbiAgICAgICAgICAgIGxldCB7IHByb3RvY29sIH0gPSBvcHRpb25zLnVybDtcbiAgICAgICAgICAgIGlmIChwcm90b2NvbCA9PT0gJ3VuaXg6Jykge1xuICAgICAgICAgICAgICAgIHByb3RvY29sID0gJ2h0dHA6JztcbiAgICAgICAgICAgICAgICBvcHRpb25zLnVybCA9IG5ldyB1cmxfMS5VUkwoYGh0dHA6Ly91bml4JHtvcHRpb25zLnVybC5wYXRobmFtZX0ke29wdGlvbnMudXJsLnNlYXJjaH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNldCBzZWFyY2ggcGFyYW1zXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zZWFyY2hQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWJhc2UtdG8tc3RyaW5nXG4gICAgICAgICAgICAgICAgb3B0aW9ucy51cmwuc2VhcmNoID0gb3B0aW9ucy5zZWFyY2hQYXJhbXMudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFByb3RvY29sIGNoZWNrXG4gICAgICAgICAgICBpZiAocHJvdG9jb2wgIT09ICdodHRwOicgJiYgcHJvdG9jb2wgIT09ICdodHRwczonKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuc3VwcG9ydGVkUHJvdG9jb2xFcnJvcihvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBgdXNlcm5hbWVgXG4gICAgICAgICAgICBpZiAob3B0aW9ucy51c2VybmFtZSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnVzZXJuYW1lID0gb3B0aW9ucy51cmwudXNlcm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnVybC51c2VybmFtZSA9IG9wdGlvbnMudXNlcm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVcGRhdGUgYHBhc3N3b3JkYFxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGFzc3dvcmQgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wYXNzd29yZCA9IG9wdGlvbnMudXJsLnBhc3N3b3JkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy51cmwucGFzc3dvcmQgPSBvcHRpb25zLnBhc3N3b3JkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGBvcHRpb25zLmNvb2tpZUphcmBcbiAgICAgICAgY29uc3QgeyBjb29raWVKYXIgfSA9IG9wdGlvbnM7XG4gICAgICAgIGlmIChjb29raWVKYXIpIHtcbiAgICAgICAgICAgIGxldCB7IHNldENvb2tpZSwgZ2V0Q29va2llU3RyaW5nIH0gPSBjb29raWVKYXI7XG4gICAgICAgICAgICBpc18xLmFzc2VydC5mdW5jdGlvbl8oc2V0Q29va2llKTtcbiAgICAgICAgICAgIGlzXzEuYXNzZXJ0LmZ1bmN0aW9uXyhnZXRDb29raWVTdHJpbmcpO1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IEhvcnJpYmxlIGB0b3VnaC1jb29raWVgIHYzIGNoZWNrICovXG4gICAgICAgICAgICBpZiAoc2V0Q29va2llLmxlbmd0aCA9PT0gNCAmJiBnZXRDb29raWVTdHJpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc2V0Q29va2llID0gdXRpbF8xLnByb21pc2lmeShzZXRDb29raWUuYmluZChvcHRpb25zLmNvb2tpZUphcikpO1xuICAgICAgICAgICAgICAgIGdldENvb2tpZVN0cmluZyA9IHV0aWxfMS5wcm9taXNpZnkoZ2V0Q29va2llU3RyaW5nLmJpbmQob3B0aW9ucy5jb29raWVKYXIpKTtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmNvb2tpZUphciA9IHtcbiAgICAgICAgICAgICAgICAgICAgc2V0Q29va2llLFxuICAgICAgICAgICAgICAgICAgICBnZXRDb29raWVTdHJpbmc6IGdldENvb2tpZVN0cmluZ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYG9wdGlvbnMuY2FjaGVgXG4gICAgICAgIGNvbnN0IHsgY2FjaGUgfSA9IG9wdGlvbnM7XG4gICAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICAgICAgaWYgKCFjYWNoZWFibGVTdG9yZS5oYXMoY2FjaGUpKSB7XG4gICAgICAgICAgICAgICAgY2FjaGVhYmxlU3RvcmUuc2V0KGNhY2hlLCBuZXcgQ2FjaGVhYmxlUmVxdWVzdCgoKHJlcXVlc3RPcHRpb25zLCBoYW5kbGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlcXVlc3RPcHRpb25zW2tSZXF1ZXN0XShyZXF1ZXN0T3B0aW9ucywgaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IHJlbW92ZSB0aGlzIHdoZW4gYGNhY2hlYWJsZS1yZXF1ZXN0YCBzdXBwb3J0cyBhc3luYyByZXF1ZXN0IGZ1bmN0aW9ucy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC5wcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgbmVlZCB0byBpbXBsZW1lbnQgdGhlIGVycm9yIGhhbmRsZXIgaW4gb3JkZXIgdG8gc3VwcG9ydCBIVFRQMiBjYWNoaW5nLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJlc3VsdCB3aWxsIGJlIGEgcHJvbWlzZSBhbnl3YXkuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQub25jZSA9IChldmVudCwgaGFuZGxlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudCA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuY2F0Y2goaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50ID09PSAnYWJvcnQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBlbXB0eSBjYXRjaCBpcyBuZWVkZWQgaGVyZSBpbiBjYXNlIHdoZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXQgcmVqZWN0cyBiZWZvcmUgaXQncyBgYXdhaXRgZWQgaW4gYF9tYWtlUmVxdWVzdGAuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSAoYXdhaXQgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Lm9uY2UoJ2Fib3J0JywgaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoX2EpIHsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IHNhZmV0eSBjaGVjayAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gSFRUUDIgcHJvbWlzZSBldmVudDogJHtldmVudH1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9KSwgY2FjaGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBgb3B0aW9ucy5jYWNoZU9wdGlvbnNgXG4gICAgICAgIG9wdGlvbnMuY2FjaGVPcHRpb25zID0geyAuLi5vcHRpb25zLmNhY2hlT3B0aW9ucyB9O1xuICAgICAgICAvLyBgb3B0aW9ucy5kbnNDYWNoZWBcbiAgICAgICAgaWYgKG9wdGlvbnMuZG5zQ2FjaGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmICghZ2xvYmFsRG5zQ2FjaGUpIHtcbiAgICAgICAgICAgICAgICBnbG9iYWxEbnNDYWNoZSA9IG5ldyBjYWNoZWFibGVfbG9va3VwXzEuZGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5kbnNDYWNoZSA9IGdsb2JhbERuc0NhY2hlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpc18xLmRlZmF1bHQudW5kZWZpbmVkKG9wdGlvbnMuZG5zQ2FjaGUpICYmICFvcHRpb25zLmRuc0NhY2hlLmxvb2t1cCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgUGFyYW1ldGVyIFxcYGRuc0NhY2hlXFxgIG11c3QgYmUgYSBDYWNoZWFibGVMb29rdXAgaW5zdGFuY2Ugb3IgYSBib29sZWFuLCBnb3QgJHtpc18xLmRlZmF1bHQob3B0aW9ucy5kbnNDYWNoZSl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYG9wdGlvbnMudGltZW91dGBcbiAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC5udW1iZXIob3B0aW9ucy50aW1lb3V0KSkge1xuICAgICAgICAgICAgb3B0aW9ucy50aW1lb3V0ID0geyByZXF1ZXN0OiBvcHRpb25zLnRpbWVvdXQgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZWZhdWx0cyAmJiBvcHRpb25zLnRpbWVvdXQgIT09IGRlZmF1bHRzLnRpbWVvdXQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMudGltZW91dCA9IHtcbiAgICAgICAgICAgICAgICAuLi5kZWZhdWx0cy50aW1lb3V0LFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMudGltZW91dFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMudGltZW91dCA9IHsgLi4ub3B0aW9ucy50aW1lb3V0IH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gYG9wdGlvbnMuY29udGV4dGBcbiAgICAgICAgaWYgKCFvcHRpb25zLmNvbnRleHQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuY29udGV4dCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIC8vIGBvcHRpb25zLmhvb2tzYFxuICAgICAgICBjb25zdCBhcmVIb29rc0RlZmF1bHQgPSBvcHRpb25zLmhvb2tzID09PSAoZGVmYXVsdHMgPT09IG51bGwgfHwgZGVmYXVsdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlZmF1bHRzLmhvb2tzKTtcbiAgICAgICAgb3B0aW9ucy5ob29rcyA9IHsgLi4ub3B0aW9ucy5ob29rcyB9O1xuICAgICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV4cG9ydHMua25vd25Ib29rRXZlbnRzKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQgaW4gb3B0aW9ucy5ob29rcykge1xuICAgICAgICAgICAgICAgIGlmIChpc18xLmRlZmF1bHQuYXJyYXkob3B0aW9ucy5ob29rc1tldmVudF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzMxNDQ1I2lzc3VlY29tbWVudC01NzY5MjkwNDRcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5ob29rc1tldmVudF0gPSBbLi4ub3B0aW9ucy5ob29rc1tldmVudF1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgUGFyYW1ldGVyIFxcYCR7ZXZlbnR9XFxgIG11c3QgYmUgYW4gQXJyYXksIGdvdCAke2lzXzEuZGVmYXVsdChvcHRpb25zLmhvb2tzW2V2ZW50XSl9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5ob29rc1tldmVudF0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmYXVsdHMgJiYgIWFyZUhvb2tzRGVmYXVsdCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBldmVudCBvZiBleHBvcnRzLmtub3duSG9va0V2ZW50cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRIb29rcyA9IGRlZmF1bHRzLmhvb2tzW2V2ZW50XTtcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdEhvb2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzE0NDUjaXNzdWVjb21tZW50LTU3NjkyOTA0NFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmhvb2tzW2V2ZW50XSA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRlZmF1bHRzLmhvb2tzW2V2ZW50XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMuaG9va3NbZXZlbnRdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEROUyBvcHRpb25zXG4gICAgICAgIGlmICgnZmFtaWx5JyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBkZXByZWNhdGlvbl93YXJuaW5nXzEuZGVmYXVsdCgnXCJvcHRpb25zLmZhbWlseVwiIHdhcyBuZXZlciBkb2N1bWVudGVkLCBwbGVhc2UgdXNlIFwib3B0aW9ucy5kbnNMb29rdXBJcFZlcnNpb25cIicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhUVFBTIG9wdGlvbnNcbiAgICAgICAgaWYgKGRlZmF1bHRzID09PSBudWxsIHx8IGRlZmF1bHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWZhdWx0cy5odHRwcykge1xuICAgICAgICAgICAgb3B0aW9ucy5odHRwcyA9IHsgLi4uZGVmYXVsdHMuaHR0cHMsIC4uLm9wdGlvbnMuaHR0cHMgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ3JlamVjdFVuYXV0aG9yaXplZCcgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgZGVwcmVjYXRpb25fd2FybmluZ18xLmRlZmF1bHQoJ1wib3B0aW9ucy5yZWplY3RVbmF1dGhvcml6ZWRcIiBpcyBub3cgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBcIm9wdGlvbnMuaHR0cHMucmVqZWN0VW5hdXRob3JpemVkXCInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2NoZWNrU2VydmVySWRlbnRpdHknIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGRlcHJlY2F0aW9uX3dhcm5pbmdfMS5kZWZhdWx0KCdcIm9wdGlvbnMuY2hlY2tTZXJ2ZXJJZGVudGl0eVwiIHdhcyBuZXZlciBkb2N1bWVudGVkLCBwbGVhc2UgdXNlIFwib3B0aW9ucy5odHRwcy5jaGVja1NlcnZlcklkZW50aXR5XCInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2NhJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBkZXByZWNhdGlvbl93YXJuaW5nXzEuZGVmYXVsdCgnXCJvcHRpb25zLmNhXCIgd2FzIG5ldmVyIGRvY3VtZW50ZWQsIHBsZWFzZSB1c2UgXCJvcHRpb25zLmh0dHBzLmNlcnRpZmljYXRlQXV0aG9yaXR5XCInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2tleScgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgZGVwcmVjYXRpb25fd2FybmluZ18xLmRlZmF1bHQoJ1wib3B0aW9ucy5rZXlcIiB3YXMgbmV2ZXIgZG9jdW1lbnRlZCwgcGxlYXNlIHVzZSBcIm9wdGlvbnMuaHR0cHMua2V5XCInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2NlcnQnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGRlcHJlY2F0aW9uX3dhcm5pbmdfMS5kZWZhdWx0KCdcIm9wdGlvbnMuY2VydFwiIHdhcyBuZXZlciBkb2N1bWVudGVkLCBwbGVhc2UgdXNlIFwib3B0aW9ucy5odHRwcy5jZXJ0aWZpY2F0ZVwiJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCdwYXNzcGhyYXNlJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBkZXByZWNhdGlvbl93YXJuaW5nXzEuZGVmYXVsdCgnXCJvcHRpb25zLnBhc3NwaHJhc2VcIiB3YXMgbmV2ZXIgZG9jdW1lbnRlZCwgcGxlYXNlIHVzZSBcIm9wdGlvbnMuaHR0cHMucGFzc3BocmFzZVwiJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCdwZngnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGRlcHJlY2F0aW9uX3dhcm5pbmdfMS5kZWZhdWx0KCdcIm9wdGlvbnMucGZ4XCIgd2FzIG5ldmVyIGRvY3VtZW50ZWQsIHBsZWFzZSB1c2UgXCJvcHRpb25zLmh0dHBzLnBmeFwiJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3RoZXIgb3B0aW9uc1xuICAgICAgICBpZiAoJ2ZvbGxvd1JlZGlyZWN0cycgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGBmb2xsb3dSZWRpcmVjdHNgIG9wdGlvbiBkb2VzIG5vdCBleGlzdC4gVXNlIGBmb2xsb3dSZWRpcmVjdGAgaW5zdGVhZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5hZ2VudCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb3B0aW9ucy5hZ2VudCkge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgIT09ICdodHRwJyAmJiBrZXkgIT09ICdodHRwcycgJiYga2V5ICE9PSAnaHR0cDInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIHRoZSBcXGBvcHRpb25zLmFnZW50XFxgIHByb3BlcnRpZXMgdG8gYmUgXFxgaHR0cFxcYCwgXFxgaHR0cHNcXGAgb3IgXFxgaHR0cDJcXGAsIGdvdCBcXGAke2tleX1cXGBgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5tYXhSZWRpcmVjdHMgPSAoX2UgPSBvcHRpb25zLm1heFJlZGlyZWN0cykgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogMDtcbiAgICAgICAgLy8gU2V0IG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAgICAgICAgZXhwb3J0cy5zZXROb25FbnVtZXJhYmxlUHJvcGVydGllcyhbZGVmYXVsdHMsIHJhd09wdGlvbnNdLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZV9hcmd1bWVudHNfMS5kZWZhdWx0KG9wdGlvbnMsIGRlZmF1bHRzKTtcbiAgICB9XG4gICAgX2xvY2tXcml0ZSgpIHtcbiAgICAgICAgY29uc3Qgb25Mb2NrZWRXcml0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBwYXlsb2FkIGhhcyBiZWVuIGFscmVhZHkgcHJvdmlkZWQnKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy53cml0ZSA9IG9uTG9ja2VkV3JpdGU7XG4gICAgICAgIHRoaXMuZW5kID0gb25Mb2NrZWRXcml0ZTtcbiAgICB9XG4gICAgX3VubG9ja1dyaXRlKCkge1xuICAgICAgICB0aGlzLndyaXRlID0gc3VwZXIud3JpdGU7XG4gICAgICAgIHRoaXMuZW5kID0gc3VwZXIuZW5kO1xuICAgIH1cbiAgICBhc3luYyBfZmluYWxpemVCb2R5KCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgaGVhZGVycyB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgaXNGb3JtID0gIWlzXzEuZGVmYXVsdC51bmRlZmluZWQob3B0aW9ucy5mb3JtKTtcbiAgICAgICAgY29uc3QgaXNKU09OID0gIWlzXzEuZGVmYXVsdC51bmRlZmluZWQob3B0aW9ucy5qc29uKTtcbiAgICAgICAgY29uc3QgaXNCb2R5ID0gIWlzXzEuZGVmYXVsdC51bmRlZmluZWQob3B0aW9ucy5ib2R5KTtcbiAgICAgICAgY29uc3QgaGFzUGF5bG9hZCA9IGlzRm9ybSB8fCBpc0pTT04gfHwgaXNCb2R5O1xuICAgICAgICBjb25zdCBjYW5ub3RIYXZlQm9keSA9IGV4cG9ydHMud2l0aG91dEJvZHkuaGFzKG9wdGlvbnMubWV0aG9kKSAmJiAhKG9wdGlvbnMubWV0aG9kID09PSAnR0VUJyAmJiBvcHRpb25zLmFsbG93R2V0Qm9keSk7XG4gICAgICAgIHRoaXMuX2Nhbm5vdEhhdmVCb2R5ID0gY2Fubm90SGF2ZUJvZHk7XG4gICAgICAgIGlmIChoYXNQYXlsb2FkKSB7XG4gICAgICAgICAgICBpZiAoY2Fubm90SGF2ZUJvZHkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBUaGUgXFxgJHtvcHRpb25zLm1ldGhvZH1cXGAgbWV0aG9kIGNhbm5vdCBiZSB1c2VkIHdpdGggYSBib2R5YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoW2lzQm9keSwgaXNGb3JtLCBpc0pTT05dLmZpbHRlcihpc1RydWUgPT4gaXNUcnVlKS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGBib2R5YCwgYGpzb25gIGFuZCBgZm9ybWAgb3B0aW9ucyBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNCb2R5ICYmXG4gICAgICAgICAgICAgICAgIShvcHRpb25zLmJvZHkgaW5zdGFuY2VvZiBzdHJlYW1fMS5SZWFkYWJsZSkgJiZcbiAgICAgICAgICAgICAgICAhaXNfMS5kZWZhdWx0LnN0cmluZyhvcHRpb25zLmJvZHkpICYmXG4gICAgICAgICAgICAgICAgIWlzXzEuZGVmYXVsdC5idWZmZXIob3B0aW9ucy5ib2R5KSAmJlxuICAgICAgICAgICAgICAgICFpc19mb3JtX2RhdGFfMS5kZWZhdWx0KG9wdGlvbnMuYm9keSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgYGJvZHlgIG9wdGlvbiBtdXN0IGJlIGEgc3RyZWFtLlJlYWRhYmxlLCBzdHJpbmcgb3IgQnVmZmVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNGb3JtICYmICFpc18xLmRlZmF1bHQub2JqZWN0KG9wdGlvbnMuZm9ybSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgYGZvcm1gIG9wdGlvbiBtdXN0IGJlIGFuIE9iamVjdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIFNlcmlhbGl6ZSBib2R5XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9Db250ZW50VHlwZSA9ICFpc18xLmRlZmF1bHQuc3RyaW5nKGhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNCb2R5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2Zvcm0tZGF0YS9mb3JtLWRhdGFcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzX2Zvcm1fZGF0YV8xLmRlZmF1bHQob3B0aW9ucy5ib2R5KSAmJiBub0NvbnRlbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzWydjb250ZW50LXR5cGUnXSA9IGBtdWx0aXBhcnQvZm9ybS1kYXRhOyBib3VuZGFyeT0ke29wdGlvbnMuYm9keS5nZXRCb3VuZGFyeSgpfWA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpc1trQm9keV0gPSBvcHRpb25zLmJvZHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzRm9ybSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9Db250ZW50VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1snY29udGVudC10eXBlJ10gPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzW2tCb2R5XSA9IChuZXcgdXJsXzEuVVJMU2VhcmNoUGFyYW1zKG9wdGlvbnMuZm9ybSkpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9Db250ZW50VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1snY29udGVudC10eXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpc1trQm9keV0gPSBvcHRpb25zLnN0cmluZ2lmeUpzb24ob3B0aW9ucy5qc29uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgdXBsb2FkQm9keVNpemUgPSBhd2FpdCBnZXRfYm9keV9zaXplXzEuZGVmYXVsdCh0aGlzW2tCb2R5XSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzAjc2VjdGlvbi0zLjMuMlxuICAgICAgICAgICAgICAgIC8vIEEgdXNlciBhZ2VudCBTSE9VTEQgc2VuZCBhIENvbnRlbnQtTGVuZ3RoIGluIGEgcmVxdWVzdCBtZXNzYWdlIHdoZW5cbiAgICAgICAgICAgICAgICAvLyBubyBUcmFuc2Zlci1FbmNvZGluZyBpcyBzZW50IGFuZCB0aGUgcmVxdWVzdCBtZXRob2QgZGVmaW5lcyBhIG1lYW5pbmdcbiAgICAgICAgICAgICAgICAvLyBmb3IgYW4gZW5jbG9zZWQgcGF5bG9hZCBib2R5LiAgRm9yIGV4YW1wbGUsIGEgQ29udGVudC1MZW5ndGggaGVhZGVyXG4gICAgICAgICAgICAgICAgLy8gZmllbGQgaXMgbm9ybWFsbHkgc2VudCBpbiBhIFBPU1QgcmVxdWVzdCBldmVuIHdoZW4gdGhlIHZhbHVlIGlzIDBcbiAgICAgICAgICAgICAgICAvLyAoaW5kaWNhdGluZyBhbiBlbXB0eSBwYXlsb2FkIGJvZHkpLiAgQSB1c2VyIGFnZW50IFNIT1VMRCBOT1Qgc2VuZCBhXG4gICAgICAgICAgICAgICAgLy8gQ29udGVudC1MZW5ndGggaGVhZGVyIGZpZWxkIHdoZW4gdGhlIHJlcXVlc3QgbWVzc2FnZSBkb2VzIG5vdCBjb250YWluXG4gICAgICAgICAgICAgICAgLy8gYSBwYXlsb2FkIGJvZHkgYW5kIHRoZSBtZXRob2Qgc2VtYW50aWNzIGRvIG5vdCBhbnRpY2lwYXRlIHN1Y2ggYVxuICAgICAgICAgICAgICAgIC8vIGJvZHkuXG4gICAgICAgICAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC51bmRlZmluZWQoaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSkgJiYgaXNfMS5kZWZhdWx0LnVuZGVmaW5lZChoZWFkZXJzWyd0cmFuc2Zlci1lbmNvZGluZyddKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbm5vdEhhdmVCb2R5ICYmICFpc18xLmRlZmF1bHQudW5kZWZpbmVkKHVwbG9hZEJvZHlTaXplKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSA9IFN0cmluZyh1cGxvYWRCb2R5U2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2Fubm90SGF2ZUJvZHkpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2tXcml0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdW5sb2NrV3JpdGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzW2tCb2R5U2l6ZV0gPSBOdW1iZXIoaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSkgfHwgdW5kZWZpbmVkO1xuICAgIH1cbiAgICBhc3luYyBfb25SZXNwb25zZUJhc2UocmVzcG9uc2UpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IHVybCB9ID0gb3B0aW9ucztcbiAgICAgICAgdGhpc1trT3JpZ2luYWxSZXNwb25zZV0gPSByZXNwb25zZTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGVjb21wcmVzcykge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSBkZWNvbXByZXNzUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YXR1c0NvZGUgPSByZXNwb25zZS5zdGF0dXNDb2RlO1xuICAgICAgICBjb25zdCB0eXBlZFJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgIHR5cGVkUmVzcG9uc2Uuc3RhdHVzTWVzc2FnZSA9IHR5cGVkUmVzcG9uc2Uuc3RhdHVzTWVzc2FnZSA/IHR5cGVkUmVzcG9uc2Uuc3RhdHVzTWVzc2FnZSA6IGh0dHAuU1RBVFVTX0NPREVTW3N0YXR1c0NvZGVdO1xuICAgICAgICB0eXBlZFJlc3BvbnNlLnVybCA9IG9wdGlvbnMudXJsLnRvU3RyaW5nKCk7XG4gICAgICAgIHR5cGVkUmVzcG9uc2UucmVxdWVzdFVybCA9IHRoaXMucmVxdWVzdFVybDtcbiAgICAgICAgdHlwZWRSZXNwb25zZS5yZWRpcmVjdFVybHMgPSB0aGlzLnJlZGlyZWN0cztcbiAgICAgICAgdHlwZWRSZXNwb25zZS5yZXF1ZXN0ID0gdGhpcztcbiAgICAgICAgdHlwZWRSZXNwb25zZS5pc0Zyb21DYWNoZSA9IHJlc3BvbnNlLmZyb21DYWNoZSB8fCBmYWxzZTtcbiAgICAgICAgdHlwZWRSZXNwb25zZS5pcCA9IHRoaXMuaXA7XG4gICAgICAgIHR5cGVkUmVzcG9uc2UucmV0cnlDb3VudCA9IHRoaXMucmV0cnlDb3VudDtcbiAgICAgICAgdGhpc1trSXNGcm9tQ2FjaGVdID0gdHlwZWRSZXNwb25zZS5pc0Zyb21DYWNoZTtcbiAgICAgICAgdGhpc1trUmVzcG9uc2VTaXplXSA9IE51bWJlcihyZXNwb25zZS5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddKSB8fCB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXNba1Jlc3BvbnNlXSA9IHJlc3BvbnNlO1xuICAgICAgICByZXNwb25zZS5vbmNlKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzW2tSZXNwb25zZVNpemVdID0gdGhpc1trRG93bmxvYWRlZFNpemVdO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdkb3dubG9hZFByb2dyZXNzJywgdGhpcy5kb3dubG9hZFByb2dyZXNzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3BvbnNlLm9uY2UoJ2Vycm9yJywgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAvLyBGb3JjZSBjbGVhbi11cCwgYmVjYXVzZSBzb21lIHBhY2thZ2VzIGRvbid0IGRvIHRoaXMuXG4gICAgICAgICAgICAvLyBUT0RPOiBGaXggZGVjb21wcmVzcy1yZXNwb25zZVxuICAgICAgICAgICAgcmVzcG9uc2UuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5fYmVmb3JlRXJyb3IobmV3IFJlYWRFcnJvcihlcnJvciwgdGhpcykpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVzcG9uc2Uub25jZSgnYWJvcnRlZCcsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2JlZm9yZUVycm9yKG5ldyBSZWFkRXJyb3Ioe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdFcnJvcicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1RoZSBzZXJ2ZXIgYWJvcnRlZCBwZW5kaW5nIHJlcXVlc3QnLFxuICAgICAgICAgICAgICAgIGNvZGU6ICdFQ09OTlJFU0VUJ1xuICAgICAgICAgICAgfSwgdGhpcykpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbWl0KCdkb3dubG9hZFByb2dyZXNzJywgdGhpcy5kb3dubG9hZFByb2dyZXNzKTtcbiAgICAgICAgY29uc3QgcmF3Q29va2llcyA9IHJlc3BvbnNlLmhlYWRlcnNbJ3NldC1jb29raWUnXTtcbiAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC5vYmplY3Qob3B0aW9ucy5jb29raWVKYXIpICYmIHJhd0Nvb2tpZXMpIHtcbiAgICAgICAgICAgIGxldCBwcm9taXNlcyA9IHJhd0Nvb2tpZXMubWFwKGFzeW5jIChyYXdDb29raWUpID0+IG9wdGlvbnMuY29va2llSmFyLnNldENvb2tpZShyYXdDb29raWUsIHVybC50b1N0cmluZygpKSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pZ25vcmVJbnZhbGlkQ29va2llcykge1xuICAgICAgICAgICAgICAgIHByb21pc2VzID0gcHJvbWlzZXMubWFwKGFzeW5jIChwKSA9PiBwLmNhdGNoKCgpID0+IHsgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9iZWZvcmVFcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmZvbGxvd1JlZGlyZWN0ICYmIHJlc3BvbnNlLmhlYWRlcnMubG9jYXRpb24gJiYgcmVkaXJlY3RDb2Rlcy5oYXMoc3RhdHVzQ29kZSkpIHtcbiAgICAgICAgICAgIC8vIFdlJ3JlIGJlaW5nIHJlZGlyZWN0ZWQsIHdlIGRvbid0IGNhcmUgYWJvdXQgdGhlIHJlc3BvbnNlLlxuICAgICAgICAgICAgLy8gSXQnZCBiZSBiZXN0IHRvIGFib3J0IHRoZSByZXF1ZXN0LCBidXQgd2UgY2FuJ3QgYmVjYXVzZVxuICAgICAgICAgICAgLy8gd2Ugd291bGQgaGF2ZSB0byBzYWNyaWZpY2UgdGhlIFRDUCBjb25uZWN0aW9uLiBXZSBkb24ndCB3YW50IHRoYXQuXG4gICAgICAgICAgICByZXNwb25zZS5yZXN1bWUoKTtcbiAgICAgICAgICAgIGlmICh0aGlzW2tSZXF1ZXN0XSkge1xuICAgICAgICAgICAgICAgIHRoaXNba0NhbmNlbFRpbWVvdXRzXSgpO1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpc1trUmVxdWVzdF07XG4gICAgICAgICAgICAgICAgdGhpc1trVW5wcm94eUV2ZW50c10oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNob3VsZEJlR2V0ID0gc3RhdHVzQ29kZSA9PT0gMzAzICYmIG9wdGlvbnMubWV0aG9kICE9PSAnR0VUJyAmJiBvcHRpb25zLm1ldGhvZCAhPT0gJ0hFQUQnO1xuICAgICAgICAgICAgaWYgKHNob3VsZEJlR2V0IHx8ICFvcHRpb25zLm1ldGhvZFJld3JpdGluZykge1xuICAgICAgICAgICAgICAgIC8vIFNlcnZlciByZXNwb25kZWQgd2l0aCBcInNlZSBvdGhlclwiLCBpbmRpY2F0aW5nIHRoYXQgdGhlIHJlc291cmNlIGV4aXN0cyBhdCBhbm90aGVyIGxvY2F0aW9uLFxuICAgICAgICAgICAgICAgIC8vIGFuZCB0aGUgY2xpZW50IHNob3VsZCByZXF1ZXN0IGl0IGZyb20gdGhhdCBsb2NhdGlvbiB2aWEgR0VUIG9yIEhFQUQuXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5tZXRob2QgPSAnR0VUJztcbiAgICAgICAgICAgICAgICBpZiAoJ2JvZHknIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuYm9keTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCdqc29uJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmpzb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgnZm9ybScgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5mb3JtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzW2tCb2R5XSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucmVkaXJlY3RzLmxlbmd0aCA+PSBvcHRpb25zLm1heFJlZGlyZWN0cykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2JlZm9yZUVycm9yKG5ldyBNYXhSZWRpcmVjdHNFcnJvcih0aGlzKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBEbyBub3QgcmVtb3ZlLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9nb3QvcHVsbC8yMTRcbiAgICAgICAgICAgICAgICBjb25zdCByZWRpcmVjdEJ1ZmZlciA9IEJ1ZmZlci5mcm9tKHJlc3BvbnNlLmhlYWRlcnMubG9jYXRpb24sICdiaW5hcnknKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIC8vIEhhbmRsZXMgaW52YWxpZCBVUkxzLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9nb3QvaXNzdWVzLzYwNFxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZGlyZWN0VXJsID0gbmV3IHVybF8xLlVSTChyZWRpcmVjdEJ1ZmZlciwgdXJsKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWRpcmVjdFN0cmluZyA9IHJlZGlyZWN0VXJsLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgZGVjb2RlVVJJKHJlZGlyZWN0U3RyaW5nKTtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW5uZXItZGVjbGFyYXRpb25zXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaXNVbml4U29ja2V0VVJMKHVybCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXJsLnByb3RvY29sID09PSAndW5peDonIHx8IHVybC5ob3N0bmFtZSA9PT0gJ3VuaXgnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5peFNvY2tldFVSTCh1cmwpICYmIGlzVW5peFNvY2tldFVSTChyZWRpcmVjdFVybCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmVmb3JlRXJyb3IobmV3IFJlcXVlc3RFcnJvcignQ2Fubm90IHJlZGlyZWN0IHRvIFVOSVggc29ja2V0Jywge30sIHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBSZWRpcmVjdGluZyB0byBhIGRpZmZlcmVudCBzaXRlLCBjbGVhciBzZW5zaXRpdmUgZGF0YS5cbiAgICAgICAgICAgICAgICBpZiAocmVkaXJlY3RVcmwuaG9zdG5hbWUgIT09IHVybC5ob3N0bmFtZSB8fCByZWRpcmVjdFVybC5wb3J0ICE9PSB1cmwucG9ydCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJ2hvc3QnIGluIG9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuaGVhZGVycy5ob3N0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgnY29va2llJyBpbiBvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmhlYWRlcnMuY29va2llO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgnYXV0aG9yaXphdGlvbicgaW4gb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5oZWFkZXJzLmF1dGhvcml6YXRpb247XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudXNlcm5hbWUgfHwgb3B0aW9ucy5wYXNzd29yZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy51c2VybmFtZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wYXNzd29yZCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFVybC51c2VybmFtZSA9IG9wdGlvbnMudXNlcm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJsLnBhc3N3b3JkID0gb3B0aW9ucy5wYXNzd29yZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZWRpcmVjdHMucHVzaChyZWRpcmVjdFN0cmluZyk7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy51cmwgPSByZWRpcmVjdFVybDtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGhvb2sgb2Ygb3B0aW9ucy5ob29rcy5iZWZvcmVSZWRpcmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcFxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBob29rKG9wdGlvbnMsIHR5cGVkUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ3JlZGlyZWN0JywgdHlwZWRSZXNwb25zZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fbWFrZVJlcXVlc3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2JlZm9yZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaXNTdHJlYW0gJiYgb3B0aW9ucy50aHJvd0h0dHBFcnJvcnMgJiYgIWlzX3Jlc3BvbnNlX29rXzEuaXNSZXNwb25zZU9rKHR5cGVkUmVzcG9uc2UpKSB7XG4gICAgICAgICAgICB0aGlzLl9iZWZvcmVFcnJvcihuZXcgSFRUUEVycm9yKHR5cGVkUmVzcG9uc2UpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXNwb25zZS5vbigncmVhZGFibGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpc1trVHJpZ2dlclJlYWRdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbigncmVzdW1lJywgKCkgPT4ge1xuICAgICAgICAgICAgcmVzcG9uc2UucmVzdW1lKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKCdwYXVzZScsICgpID0+IHtcbiAgICAgICAgICAgIHJlc3BvbnNlLnBhdXNlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXNwb25zZS5vbmNlKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnB1c2gobnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVtaXQoJ3Jlc3BvbnNlJywgcmVzcG9uc2UpO1xuICAgICAgICBmb3IgKGNvbnN0IGRlc3RpbmF0aW9uIG9mIHRoaXNba1NlcnZlclJlc3BvbnNlc1BpcGVkXSkge1xuICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uLmhlYWRlcnNTZW50KSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiByZXNwb25zZS5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNBbGxvd2VkID0gb3B0aW9ucy5kZWNvbXByZXNzID8ga2V5ICE9PSAnY29udGVudC1lbmNvZGluZycgOiB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcmVzcG9uc2UuaGVhZGVyc1trZXldO1xuICAgICAgICAgICAgICAgIGlmIChpc0FsbG93ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uc2V0SGVhZGVyKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9vblJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9vblJlc3BvbnNlQmFzZShyZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogYmV0dGVyIHNhZmUgdGhhbiBzb3JyeSAqL1xuICAgICAgICAgICAgdGhpcy5fYmVmb3JlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9vblJlcXVlc3QocmVxdWVzdCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgdGltZW91dCwgdXJsIH0gPSBvcHRpb25zO1xuICAgICAgICBodHRwX3RpbWVyXzEuZGVmYXVsdChyZXF1ZXN0KTtcbiAgICAgICAgdGhpc1trQ2FuY2VsVGltZW91dHNdID0gdGltZWRfb3V0XzEuZGVmYXVsdChyZXF1ZXN0LCB0aW1lb3V0LCB1cmwpO1xuICAgICAgICBjb25zdCByZXNwb25zZUV2ZW50TmFtZSA9IG9wdGlvbnMuY2FjaGUgPyAnY2FjaGVhYmxlUmVzcG9uc2UnIDogJ3Jlc3BvbnNlJztcbiAgICAgICAgcmVxdWVzdC5vbmNlKHJlc3BvbnNlRXZlbnROYW1lLCAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIHZvaWQgdGhpcy5fb25SZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXF1ZXN0Lm9uY2UoJ2Vycm9yJywgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAvLyBGb3JjZSBjbGVhbi11cCwgYmVjYXVzZSBzb21lIHBhY2thZ2VzIChlLmcuIG5vY2spIGRvbid0IGRvIHRoaXMuXG4gICAgICAgICAgICByZXF1ZXN0LmRlc3Ryb3koKTtcbiAgICAgICAgICAgIC8vIE5vZGUuanMgPD0gMTIuMTguMiBtaXN0YWtlbmx5IGVtaXRzIHRoZSByZXNwb25zZSBgZW5kYCBmaXJzdC5cbiAgICAgICAgICAgIChfYSA9IHJlcXVlc3QucmVzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlQWxsTGlzdGVuZXJzKCdlbmQnKTtcbiAgICAgICAgICAgIGVycm9yID0gZXJyb3IgaW5zdGFuY2VvZiB0aW1lZF9vdXRfMS5UaW1lb3V0RXJyb3IgPyBuZXcgVGltZW91dEVycm9yKGVycm9yLCB0aGlzLnRpbWluZ3MsIHRoaXMpIDogbmV3IFJlcXVlc3RFcnJvcihlcnJvci5tZXNzYWdlLCBlcnJvciwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLl9iZWZvcmVFcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzW2tVbnByb3h5RXZlbnRzXSA9IHByb3h5X2V2ZW50c18xLmRlZmF1bHQocmVxdWVzdCwgdGhpcywgcHJveGllZFJlcXVlc3RFdmVudHMpO1xuICAgICAgICB0aGlzW2tSZXF1ZXN0XSA9IHJlcXVlc3Q7XG4gICAgICAgIHRoaXMuZW1pdCgndXBsb2FkUHJvZ3Jlc3MnLCB0aGlzLnVwbG9hZFByb2dyZXNzKTtcbiAgICAgICAgLy8gU2VuZCBib2R5XG4gICAgICAgIGNvbnN0IGJvZHkgPSB0aGlzW2tCb2R5XTtcbiAgICAgICAgY29uc3QgY3VycmVudFJlcXVlc3QgPSB0aGlzLnJlZGlyZWN0cy5sZW5ndGggPT09IDAgPyB0aGlzIDogcmVxdWVzdDtcbiAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC5ub2RlU3RyZWFtKGJvZHkpKSB7XG4gICAgICAgICAgICBib2R5LnBpcGUoY3VycmVudFJlcXVlc3QpO1xuICAgICAgICAgICAgYm9keS5vbmNlKCdlcnJvcicsIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2JlZm9yZUVycm9yKG5ldyBVcGxvYWRFcnJvcihlcnJvciwgdGhpcykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl91bmxvY2tXcml0ZSgpO1xuICAgICAgICAgICAgaWYgKCFpc18xLmRlZmF1bHQudW5kZWZpbmVkKGJvZHkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd3JpdGVSZXF1ZXN0KGJvZHksIHVuZGVmaW5lZCwgKCkgPT4geyB9KTtcbiAgICAgICAgICAgICAgICBjdXJyZW50UmVxdWVzdC5lbmQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NrV3JpdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2Nhbm5vdEhhdmVCb2R5IHx8IHRoaXMuX25vUGlwZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRSZXF1ZXN0LmVuZCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2tXcml0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdCgncmVxdWVzdCcsIHJlcXVlc3QpO1xuICAgIH1cbiAgICBhc3luYyBfY3JlYXRlQ2FjaGVhYmxlUmVxdWVzdCh1cmwsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIC8vIFRPRE86IFJlbW92ZSBgdXRpbHMvdXJsLXRvLW9wdGlvbnMudHNgIHdoZW4gYGNhY2hlYWJsZS1yZXF1ZXN0YCBpcyBmaXhlZFxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihvcHRpb25zLCB1cmxfdG9fb3B0aW9uc18xLmRlZmF1bHQodXJsKSk7XG4gICAgICAgICAgICAvLyBgaHR0cC1jYWNoZS1zZW1hbnRpY3NgIGNoZWNrcyB0aGlzXG4gICAgICAgICAgICAvLyBUT0RPOiBGaXggdGhpcyBpZ25vcmUuXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy51cmw7XG4gICAgICAgICAgICBsZXQgcmVxdWVzdDtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdWdseVxuICAgICAgICAgICAgY29uc3QgY2FjaGVSZXF1ZXN0ID0gY2FjaGVhYmxlU3RvcmUuZ2V0KG9wdGlvbnMuY2FjaGUpKG9wdGlvbnMsIGFzeW5jIChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IEZpeCBgY2FjaGVhYmxlLXJlc3BvbnNlYFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLl9yZWFkYWJsZVN0YXRlLmF1dG9EZXN0cm95ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgKGF3YWl0IHJlcXVlc3QpLmVtaXQoJ2NhY2hlYWJsZVJlc3BvbnNlJywgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gUmVzdG9yZSBvcHRpb25zXG4gICAgICAgICAgICBvcHRpb25zLnVybCA9IHVybDtcbiAgICAgICAgICAgIGNhY2hlUmVxdWVzdC5vbmNlKCdlcnJvcicsIHJlamVjdCk7XG4gICAgICAgICAgICBjYWNoZVJlcXVlc3Qub25jZSgncmVxdWVzdCcsIGFzeW5jIChyZXF1ZXN0T3JQcm9taXNlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdCA9IHJlcXVlc3RPclByb21pc2U7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXF1ZXN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgX21ha2VSZXF1ZXN0KCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgaGVhZGVycyB9ID0gb3B0aW9ucztcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaGVhZGVycykge1xuICAgICAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC51bmRlZmluZWQoaGVhZGVyc1trZXldKSkge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcbiAgICAgICAgICAgICAgICBkZWxldGUgaGVhZGVyc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNfMS5kZWZhdWx0Lm51bGxfKGhlYWRlcnNba2V5XSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBVc2UgXFxgdW5kZWZpbmVkXFxgIGluc3RlYWQgb2YgXFxgbnVsbFxcYCB0byBkZWxldGUgdGhlIFxcYCR7a2V5fVxcYCBoZWFkZXJgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5kZWNvbXByZXNzICYmIGlzXzEuZGVmYXVsdC51bmRlZmluZWQoaGVhZGVyc1snYWNjZXB0LWVuY29kaW5nJ10pKSB7XG4gICAgICAgICAgICBoZWFkZXJzWydhY2NlcHQtZW5jb2RpbmcnXSA9IHN1cHBvcnRzQnJvdGxpID8gJ2d6aXAsIGRlZmxhdGUsIGJyJyA6ICdnemlwLCBkZWZsYXRlJztcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgY29va2llc1xuICAgICAgICBpZiAob3B0aW9ucy5jb29raWVKYXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvb2tpZVN0cmluZyA9IGF3YWl0IG9wdGlvbnMuY29va2llSmFyLmdldENvb2tpZVN0cmluZyhvcHRpb25zLnVybC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIGlmIChpc18xLmRlZmF1bHQubm9uRW1wdHlTdHJpbmcoY29va2llU3RyaW5nKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuaGVhZGVycy5jb29raWUgPSBjb29raWVTdHJpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBob29rIG9mIG9wdGlvbnMuaG9va3MuYmVmb3JlUmVxdWVzdCkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWF3YWl0LWluLWxvb3BcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGhvb2sob3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoIWlzXzEuZGVmYXVsdC51bmRlZmluZWQocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgU2tpcCB0aGUgdHlwZSBtaXNtYXRjaCB0byBzdXBwb3J0IGFic3RyYWN0IHJlc3BvbnNlc1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucmVxdWVzdCA9ICgpID0+IHJlc3VsdDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5ib2R5ICYmIHRoaXNba0JvZHldICE9PSBvcHRpb25zLmJvZHkpIHtcbiAgICAgICAgICAgIHRoaXNba0JvZHldID0gb3B0aW9ucy5ib2R5O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgYWdlbnQsIHJlcXVlc3QsIHRpbWVvdXQsIHVybCB9ID0gb3B0aW9ucztcbiAgICAgICAgaWYgKG9wdGlvbnMuZG5zQ2FjaGUgJiYgISgnbG9va3VwJyBpbiBvcHRpb25zKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5sb29rdXAgPSBvcHRpb25zLmRuc0NhY2hlLmxvb2t1cDtcbiAgICAgICAgfVxuICAgICAgICAvLyBVTklYIHNvY2tldHNcbiAgICAgICAgaWYgKHVybC5ob3N0bmFtZSA9PT0gJ3VuaXgnKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gLyg/PHNvY2tldFBhdGg+Lis/KTooPzxwYXRoPi4rKS8uZXhlYyhgJHt1cmwucGF0aG5hbWV9JHt1cmwuc2VhcmNofWApO1xuICAgICAgICAgICAgaWYgKG1hdGNoZXMgPT09IG51bGwgfHwgbWF0Y2hlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWF0Y2hlcy5ncm91cHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHNvY2tldFBhdGgsIHBhdGggfSA9IG1hdGNoZXMuZ3JvdXBzO1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ob3B0aW9ucywge1xuICAgICAgICAgICAgICAgICAgICBzb2NrZXRQYXRoLFxuICAgICAgICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICAgICAgICBob3N0OiAnJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlzSHR0cHMgPSB1cmwucHJvdG9jb2wgPT09ICdodHRwczonO1xuICAgICAgICAvLyBGYWxsYmFjayBmdW5jdGlvblxuICAgICAgICBsZXQgZmFsbGJhY2tGbjtcbiAgICAgICAgaWYgKG9wdGlvbnMuaHR0cDIpIHtcbiAgICAgICAgICAgIGZhbGxiYWNrRm4gPSBodHRwMndyYXBwZXIuYXV0bztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZhbGxiYWNrRm4gPSBpc0h0dHBzID8gaHR0cHMucmVxdWVzdCA6IGh0dHAucmVxdWVzdDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZWFsRm4gPSAoX2EgPSBvcHRpb25zLnJlcXVlc3QpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZhbGxiYWNrRm47XG4gICAgICAgIC8vIENhY2hlIHN1cHBvcnRcbiAgICAgICAgY29uc3QgZm4gPSBvcHRpb25zLmNhY2hlID8gdGhpcy5fY3JlYXRlQ2FjaGVhYmxlUmVxdWVzdCA6IHJlYWxGbjtcbiAgICAgICAgLy8gUGFzcyBhbiBhZ2VudCBkaXJlY3RseSB3aGVuIEhUVFAyIGlzIGRpc2FibGVkXG4gICAgICAgIGlmIChhZ2VudCAmJiAhb3B0aW9ucy5odHRwMikge1xuICAgICAgICAgICAgb3B0aW9ucy5hZ2VudCA9IGFnZW50W2lzSHR0cHMgPyAnaHR0cHMnIDogJ2h0dHAnXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmVwYXJlIHBsYWluIEhUVFAgcmVxdWVzdCBvcHRpb25zXG4gICAgICAgIG9wdGlvbnNba1JlcXVlc3RdID0gcmVhbEZuO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5yZXF1ZXN0O1xuICAgICAgICAvLyBUT0RPOiBGaXggdGhpcyBpZ25vcmUuXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgZGVsZXRlIG9wdGlvbnMudGltZW91dDtcbiAgICAgICAgY29uc3QgcmVxdWVzdE9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICByZXF1ZXN0T3B0aW9ucy5zaGFyZWQgPSAoX2IgPSBvcHRpb25zLmNhY2hlT3B0aW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnNoYXJlZDtcbiAgICAgICAgcmVxdWVzdE9wdGlvbnMuY2FjaGVIZXVyaXN0aWMgPSAoX2MgPSBvcHRpb25zLmNhY2hlT3B0aW9ucykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNhY2hlSGV1cmlzdGljO1xuICAgICAgICByZXF1ZXN0T3B0aW9ucy5pbW11dGFibGVNaW5UaW1lVG9MaXZlID0gKF9kID0gb3B0aW9ucy5jYWNoZU9wdGlvbnMpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5pbW11dGFibGVNaW5UaW1lVG9MaXZlO1xuICAgICAgICByZXF1ZXN0T3B0aW9ucy5pZ25vcmVDYXJnb0N1bHQgPSAoX2UgPSBvcHRpb25zLmNhY2hlT3B0aW9ucykgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLmlnbm9yZUNhcmdvQ3VsdDtcbiAgICAgICAgLy8gSWYgYGRuc0xvb2t1cElwVmVyc2lvbmAgaXMgbm90IHByZXNlbnQgZG8gbm90IG92ZXJyaWRlIGBmYW1pbHlgXG4gICAgICAgIGlmIChvcHRpb25zLmRuc0xvb2t1cElwVmVyc2lvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zLmZhbWlseSA9IGRuc19pcF92ZXJzaW9uXzEuZG5zTG9va3VwSXBWZXJzaW9uVG9GYW1pbHkob3B0aW9ucy5kbnNMb29rdXBJcFZlcnNpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF9mKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGBkbnNMb29rdXBJcFZlcnNpb25gIG9wdGlvbiB2YWx1ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEhUVFBTIG9wdGlvbnMgcmVtYXBwaW5nXG4gICAgICAgIGlmIChvcHRpb25zLmh0dHBzKSB7XG4gICAgICAgICAgICBpZiAoJ3JlamVjdFVuYXV0aG9yaXplZCcgaW4gb3B0aW9ucy5odHRwcykge1xuICAgICAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdGlvbnMuaHR0cHMucmVqZWN0VW5hdXRob3JpemVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaHR0cHMuY2hlY2tTZXJ2ZXJJZGVudGl0eSkge1xuICAgICAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zLmNoZWNrU2VydmVySWRlbnRpdHkgPSBvcHRpb25zLmh0dHBzLmNoZWNrU2VydmVySWRlbnRpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5odHRwcy5jZXJ0aWZpY2F0ZUF1dGhvcml0eSkge1xuICAgICAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zLmNhID0gb3B0aW9ucy5odHRwcy5jZXJ0aWZpY2F0ZUF1dGhvcml0eTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmh0dHBzLmNlcnRpZmljYXRlKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnMuY2VydCA9IG9wdGlvbnMuaHR0cHMuY2VydGlmaWNhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5odHRwcy5rZXkpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0T3B0aW9ucy5rZXkgPSBvcHRpb25zLmh0dHBzLmtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmh0dHBzLnBhc3NwaHJhc2UpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0T3B0aW9ucy5wYXNzcGhyYXNlID0gb3B0aW9ucy5odHRwcy5wYXNzcGhyYXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaHR0cHMucGZ4KSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnMucGZ4ID0gb3B0aW9ucy5odHRwcy5wZng7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCByZXF1ZXN0T3JSZXNwb25zZSA9IGF3YWl0IGZuKHVybCwgcmVxdWVzdE9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKGlzXzEuZGVmYXVsdC51bmRlZmluZWQocmVxdWVzdE9yUmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdE9yUmVzcG9uc2UgPSBmYWxsYmFja0ZuKHVybCwgcmVxdWVzdE9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVzdG9yZSBvcHRpb25zXG4gICAgICAgICAgICBvcHRpb25zLnJlcXVlc3QgPSByZXF1ZXN0O1xuICAgICAgICAgICAgb3B0aW9ucy50aW1lb3V0ID0gdGltZW91dDtcbiAgICAgICAgICAgIG9wdGlvbnMuYWdlbnQgPSBhZ2VudDtcbiAgICAgICAgICAgIC8vIEhUVFBTIG9wdGlvbnMgcmVzdG9yZVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaHR0cHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoJ3JlamVjdFVuYXV0aG9yaXplZCcgaW4gb3B0aW9ucy5odHRwcykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVxdWVzdE9wdGlvbnMucmVqZWN0VW5hdXRob3JpemVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5odHRwcy5jaGVja1NlcnZlcklkZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUaGlzIG9uZSB3aWxsIGJlIHJlbW92ZWQgd2hlbiB3ZSByZW1vdmUgdGhlIGFsaWFzLlxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVxdWVzdE9wdGlvbnMuY2hlY2tTZXJ2ZXJJZGVudGl0eTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaHR0cHMuY2VydGlmaWNhdGVBdXRob3JpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlcXVlc3RPcHRpb25zLmNhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5odHRwcy5jZXJ0aWZpY2F0ZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVxdWVzdE9wdGlvbnMuY2VydDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaHR0cHMua2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0T3B0aW9ucy5rZXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmh0dHBzLnBhc3NwaHJhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlcXVlc3RPcHRpb25zLnBhc3NwaHJhc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmh0dHBzLnBmeCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVxdWVzdE9wdGlvbnMucGZ4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0NsaWVudFJlcXVlc3QocmVxdWVzdE9yUmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25SZXF1ZXN0KHJlcXVlc3RPclJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAvLyBFbWl0IHRoZSByZXNwb25zZSBhZnRlciB0aGUgc3RyZWFtIGhhcyBiZWVuIGVuZGVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLndyaXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbmNlKCdmaW5pc2gnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZvaWQgdGhpcy5fb25SZXNwb25zZShyZXF1ZXN0T3JSZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdW5sb2NrV3JpdGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2tXcml0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdm9pZCB0aGlzLl9vblJlc3BvbnNlKHJlcXVlc3RPclJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIENhY2hlYWJsZVJlcXVlc3QuQ2FjaGVFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBDYWNoZUVycm9yKGVycm9yLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBSZXF1ZXN0RXJyb3IoZXJyb3IubWVzc2FnZSwgZXJyb3IsIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9lcnJvcihlcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBob29rIG9mIHRoaXMub3B0aW9ucy5ob29rcy5iZWZvcmVFcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXG4gICAgICAgICAgICAgICAgZXJyb3IgPSBhd2FpdCBob29rKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3JfKSB7XG4gICAgICAgICAgICBlcnJvciA9IG5ldyBSZXF1ZXN0RXJyb3IoZXJyb3JfLm1lc3NhZ2UsIGVycm9yXywgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXN0cm95KGVycm9yKTtcbiAgICB9XG4gICAgX2JlZm9yZUVycm9yKGVycm9yKSB7XG4gICAgICAgIGlmICh0aGlzW2tTdG9wUmVhZGluZ10pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHJldHJ5Q291bnQgPSB0aGlzLnJldHJ5Q291bnQgKyAxO1xuICAgICAgICB0aGlzW2tTdG9wUmVhZGluZ10gPSB0cnVlO1xuICAgICAgICBpZiAoIShlcnJvciBpbnN0YW5jZW9mIFJlcXVlc3RFcnJvcikpIHtcbiAgICAgICAgICAgIGVycm9yID0gbmV3IFJlcXVlc3RFcnJvcihlcnJvci5tZXNzYWdlLCBlcnJvciwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHlwZWRFcnJvciA9IGVycm9yO1xuICAgICAgICBjb25zdCB7IHJlc3BvbnNlIH0gPSB0eXBlZEVycm9yO1xuICAgICAgICB2b2lkIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgIXJlc3BvbnNlLmJvZHkpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZS5zZXRFbmNvZGluZyh0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5yYXdCb2R5ID0gYXdhaXQgZ2V0X2J1ZmZlcl8xLmRlZmF1bHQocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5ib2R5ID0gcmVzcG9uc2UucmF3Qm9keS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoX2EpIHsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubGlzdGVuZXJDb3VudCgncmV0cnknKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGxldCBiYWNrb2ZmO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXRyeUFmdGVyO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgJ3JldHJ5LWFmdGVyJyBpbiByZXNwb25zZS5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXRyeUFmdGVyID0gTnVtYmVyKHJlc3BvbnNlLmhlYWRlcnNbJ3JldHJ5LWFmdGVyJ10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc05hTihyZXRyeUFmdGVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5QWZ0ZXIgPSBEYXRlLnBhcnNlKHJlc3BvbnNlLmhlYWRlcnNbJ3JldHJ5LWFmdGVyJ10pIC0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0cnlBZnRlciA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5QWZ0ZXIgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5QWZ0ZXIgKj0gMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBiYWNrb2ZmID0gYXdhaXQgb3B0aW9ucy5yZXRyeS5jYWxjdWxhdGVEZWxheSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRlbXB0Q291bnQ6IHJldHJ5Q291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXRyeU9wdGlvbnM6IG9wdGlvbnMucmV0cnksXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogdHlwZWRFcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5QWZ0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wdXRlZFZhbHVlOiBjYWxjdWxhdGVfcmV0cnlfZGVsYXlfMS5kZWZhdWx0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRlbXB0Q291bnQ6IHJldHJ5Q291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlPcHRpb25zOiBvcHRpb25zLnJldHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiB0eXBlZEVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5QWZ0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZWRWYWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcl8pIHtcbiAgICAgICAgICAgICAgICAgICAgdm9pZCB0aGlzLl9lcnJvcihuZXcgUmVxdWVzdEVycm9yKGVycm9yXy5tZXNzYWdlLCBlcnJvcl8sIHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYmFja29mZikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXRyeSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBob29rIG9mIHRoaXMub3B0aW9ucy5ob29rcy5iZWZvcmVSZXRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBob29rKHRoaXMub3B0aW9ucywgdHlwZWRFcnJvciwgcmV0cnlDb3VudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZvaWQgdGhpcy5fZXJyb3IobmV3IFJlcXVlc3RFcnJvcihlcnJvcl8ubWVzc2FnZSwgZXJyb3IsIHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTb21ldGhpbmcgZm9yY2VkIHVzIHRvIGFib3J0IHRoZSByZXRyeVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ3JldHJ5JywgcmV0cnlDb3VudCwgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzW2tSZXRyeVRpbWVvdXRdID0gc2V0VGltZW91dChyZXRyeSwgYmFja29mZik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2b2lkIHRoaXMuX2Vycm9yKHR5cGVkRXJyb3IpO1xuICAgICAgICB9KSgpO1xuICAgIH1cbiAgICBfcmVhZCgpIHtcbiAgICAgICAgdGhpc1trVHJpZ2dlclJlYWRdID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzW2tSZXNwb25zZV07XG4gICAgICAgIGlmIChyZXNwb25zZSAmJiAhdGhpc1trU3RvcFJlYWRpbmddKSB7XG4gICAgICAgICAgICAvLyBXZSBjYW5ub3QgcHV0IHRoaXMgaW4gdGhlIGBpZmAgYWJvdmVcbiAgICAgICAgICAgIC8vIGJlY2F1c2UgYC5yZWFkKClgIGFsc28gdHJpZ2dlcnMgdGhlIGBlbmRgIGV2ZW50XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UucmVhZGFibGVMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzW2tUcmlnZ2VyUmVhZF0gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBkYXRhO1xuICAgICAgICAgICAgd2hpbGUgKChkYXRhID0gcmVzcG9uc2UucmVhZCgpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXNba0Rvd25sb2FkZWRTaXplXSArPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB0aGlzW2tTdGFydGVkUmVhZGluZ10gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzID0gdGhpcy5kb3dubG9hZFByb2dyZXNzO1xuICAgICAgICAgICAgICAgIGlmIChwcm9ncmVzcy5wZXJjZW50IDwgMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2Rvd25sb2FkUHJvZ3Jlc3MnLCBwcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucHVzaChkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBOb2RlLmpzIDEyIGhhcyBpbmNvcnJlY3QgdHlwZXMsIHNvIHRoZSBlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nXG4gICAgX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3Qgd3JpdGUgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl93cml0ZVJlcXVlc3QoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjayk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLnJlcXVlc3RJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgd3JpdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXNba0pvYnNdLnB1c2god3JpdGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF93cml0ZVJlcXVlc3QoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodGhpc1trUmVxdWVzdF0uZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAvLyBQcm9iYWJseSB0aGUgYENsaWVudFJlcXVlc3RgIGluc3RhbmNlIHdpbGwgdGhyb3dcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcm9ncmVzc0NhbGxiYWNrcy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXNba1VwbG9hZGVkU2l6ZV0gKz0gQnVmZmVyLmJ5dGVMZW5ndGgoY2h1bmssIGVuY29kaW5nKTtcbiAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzID0gdGhpcy51cGxvYWRQcm9ncmVzcztcbiAgICAgICAgICAgIGlmIChwcm9ncmVzcy5wZXJjZW50IDwgMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgndXBsb2FkUHJvZ3Jlc3MnLCBwcm9ncmVzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBUT0RPOiBXaGF0IGhhcHBlbnMgaWYgaXQncyBmcm9tIGNhY2hlPyBUaGVuIHRoaXNba1JlcXVlc3RdIHdvbid0IGJlIGRlZmluZWQuXG4gICAgICAgIHRoaXNba1JlcXVlc3RdLndyaXRlKGNodW5rLCBlbmNvZGluZywgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWVycm9yICYmIHRoaXMuX3Byb2dyZXNzQ2FsbGJhY2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9ncmVzc0NhbGxiYWNrcy5zaGlmdCgpKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfZmluYWwoY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgZW5kUmVxdWVzdCA9ICgpID0+IHtcbiAgICAgICAgICAgIC8vIEZJWDogTm9kZS5qcyAxMCBjYWxscyB0aGUgd3JpdGUgY2FsbGJhY2sgQUZURVIgdGhlIGVuZCBjYWxsYmFjayFcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLl9wcm9ncmVzc0NhbGxiYWNrcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9ncmVzc0NhbGxiYWNrcy5zaGlmdCgpKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGlmIGB0aGlzW2tSZXF1ZXN0XWAgaXMgcHJlc2VudCxcbiAgICAgICAgICAgIC8vIGJlY2F1c2UgaXQgaXNuJ3Qgd2hlbiB3ZSB1c2UgY2FjaGUuXG4gICAgICAgICAgICBpZiAoIShrUmVxdWVzdCBpbiB0aGlzKSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXNba1JlcXVlc3RdLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpc1trUmVxdWVzdF0uZW5kKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1trQm9keVNpemVdID0gdGhpc1trVXBsb2FkZWRTaXplXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCd1cGxvYWRQcm9ncmVzcycsIHRoaXMudXBsb2FkUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzW2tSZXF1ZXN0XS5lbWl0KCd1cGxvYWQtY29tcGxldGUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLnJlcXVlc3RJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgZW5kUmVxdWVzdCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpc1trSm9ic10ucHVzaChlbmRSZXF1ZXN0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZGVzdHJveShlcnJvciwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzW2tTdG9wUmVhZGluZ10gPSB0cnVlO1xuICAgICAgICAvLyBQcmV2ZW50IGZ1cnRoZXIgcmV0cmllc1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpc1trUmV0cnlUaW1lb3V0XSk7XG4gICAgICAgIGlmIChrUmVxdWVzdCBpbiB0aGlzKSB7XG4gICAgICAgICAgICB0aGlzW2tDYW5jZWxUaW1lb3V0c10oKTtcbiAgICAgICAgICAgIC8vIFRPRE86IFJlbW92ZSB0aGUgbmV4dCBgaWZgIHdoZW4gdGhlc2UgZ2V0IGZpeGVkOlxuICAgICAgICAgICAgLy8gLSBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzMyODUxXG4gICAgICAgICAgICBpZiAoISgoX2EgPSB0aGlzW2tSZXNwb25zZV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb21wbGV0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzW2tSZXF1ZXN0XS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yICE9PSBudWxsICYmICFpc18xLmRlZmF1bHQudW5kZWZpbmVkKGVycm9yKSAmJiAhKGVycm9yIGluc3RhbmNlb2YgUmVxdWVzdEVycm9yKSkge1xuICAgICAgICAgICAgZXJyb3IgPSBuZXcgUmVxdWVzdEVycm9yKGVycm9yLm1lc3NhZ2UsIGVycm9yLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgfVxuICAgIGdldCBfaXNBYm91dFRvRXJyb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzW2tTdG9wUmVhZGluZ107XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSByZW1vdGUgSVAgYWRkcmVzcy5cbiAgICAqL1xuICAgIGdldCBpcCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5zb2NrZXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZW1vdGVBZGRyZXNzO1xuICAgIH1cbiAgICAvKipcbiAgICBJbmRpY2F0ZXMgd2hldGhlciB0aGUgcmVxdWVzdCBoYXMgYmVlbiBhYm9ydGVkIG9yIG5vdC5cbiAgICAqL1xuICAgIGdldCBhYm9ydGVkKCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgcmV0dXJuICgoX2IgPSAoX2EgPSB0aGlzW2tSZXF1ZXN0XSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlc3Ryb3llZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdGhpcy5kZXN0cm95ZWQpICYmICEoKF9jID0gdGhpc1trT3JpZ2luYWxSZXNwb25zZV0pID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5jb21wbGV0ZSk7XG4gICAgfVxuICAgIGdldCBzb2NrZXQoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0aGlzW2tSZXF1ZXN0XSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNvY2tldCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICBQcm9ncmVzcyBldmVudCBmb3IgZG93bmxvYWRpbmcgKHJlY2VpdmluZyBhIHJlc3BvbnNlKS5cbiAgICAqL1xuICAgIGdldCBkb3dubG9hZFByb2dyZXNzKCkge1xuICAgICAgICBsZXQgcGVyY2VudDtcbiAgICAgICAgaWYgKHRoaXNba1Jlc3BvbnNlU2l6ZV0pIHtcbiAgICAgICAgICAgIHBlcmNlbnQgPSB0aGlzW2tEb3dubG9hZGVkU2l6ZV0gLyB0aGlzW2tSZXNwb25zZVNpemVdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXNba1Jlc3BvbnNlU2l6ZV0gPT09IHRoaXNba0Rvd25sb2FkZWRTaXplXSkge1xuICAgICAgICAgICAgcGVyY2VudCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZXJjZW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGVyY2VudCxcbiAgICAgICAgICAgIHRyYW5zZmVycmVkOiB0aGlzW2tEb3dubG9hZGVkU2l6ZV0sXG4gICAgICAgICAgICB0b3RhbDogdGhpc1trUmVzcG9uc2VTaXplXVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICBQcm9ncmVzcyBldmVudCBmb3IgdXBsb2FkaW5nIChzZW5kaW5nIGEgcmVxdWVzdCkuXG4gICAgKi9cbiAgICBnZXQgdXBsb2FkUHJvZ3Jlc3MoKSB7XG4gICAgICAgIGxldCBwZXJjZW50O1xuICAgICAgICBpZiAodGhpc1trQm9keVNpemVdKSB7XG4gICAgICAgICAgICBwZXJjZW50ID0gdGhpc1trVXBsb2FkZWRTaXplXSAvIHRoaXNba0JvZHlTaXplXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzW2tCb2R5U2l6ZV0gPT09IHRoaXNba1VwbG9hZGVkU2l6ZV0pIHtcbiAgICAgICAgICAgIHBlcmNlbnQgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGVyY2VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBlcmNlbnQsXG4gICAgICAgICAgICB0cmFuc2ZlcnJlZDogdGhpc1trVXBsb2FkZWRTaXplXSxcbiAgICAgICAgICAgIHRvdGFsOiB0aGlzW2tCb2R5U2l6ZV1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIG9iamVjdCBjb250YWlucyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG5cbiAgICAtIGBzdGFydGAgLSBUaW1lIHdoZW4gdGhlIHJlcXVlc3Qgc3RhcnRlZC5cbiAgICAtIGBzb2NrZXRgIC0gVGltZSB3aGVuIGEgc29ja2V0IHdhcyBhc3NpZ25lZCB0byB0aGUgcmVxdWVzdC5cbiAgICAtIGBsb29rdXBgIC0gVGltZSB3aGVuIHRoZSBETlMgbG9va3VwIGZpbmlzaGVkLlxuICAgIC0gYGNvbm5lY3RgIC0gVGltZSB3aGVuIHRoZSBzb2NrZXQgc3VjY2Vzc2Z1bGx5IGNvbm5lY3RlZC5cbiAgICAtIGBzZWN1cmVDb25uZWN0YCAtIFRpbWUgd2hlbiB0aGUgc29ja2V0IHNlY3VyZWx5IGNvbm5lY3RlZC5cbiAgICAtIGB1cGxvYWRgIC0gVGltZSB3aGVuIHRoZSByZXF1ZXN0IGZpbmlzaGVkIHVwbG9hZGluZy5cbiAgICAtIGByZXNwb25zZWAgLSBUaW1lIHdoZW4gdGhlIHJlcXVlc3QgZmlyZWQgYHJlc3BvbnNlYCBldmVudC5cbiAgICAtIGBlbmRgIC0gVGltZSB3aGVuIHRoZSByZXNwb25zZSBmaXJlZCBgZW5kYCBldmVudC5cbiAgICAtIGBlcnJvcmAgLSBUaW1lIHdoZW4gdGhlIHJlcXVlc3QgZmlyZWQgYGVycm9yYCBldmVudC5cbiAgICAtIGBhYm9ydGAgLSBUaW1lIHdoZW4gdGhlIHJlcXVlc3QgZmlyZWQgYGFib3J0YCBldmVudC5cbiAgICAtIGBwaGFzZXNgXG4gICAgICAgIC0gYHdhaXRgIC0gYHRpbWluZ3Muc29ja2V0IC0gdGltaW5ncy5zdGFydGBcbiAgICAgICAgLSBgZG5zYCAtIGB0aW1pbmdzLmxvb2t1cCAtIHRpbWluZ3Muc29ja2V0YFxuICAgICAgICAtIGB0Y3BgIC0gYHRpbWluZ3MuY29ubmVjdCAtIHRpbWluZ3MubG9va3VwYFxuICAgICAgICAtIGB0bHNgIC0gYHRpbWluZ3Muc2VjdXJlQ29ubmVjdCAtIHRpbWluZ3MuY29ubmVjdGBcbiAgICAgICAgLSBgcmVxdWVzdGAgLSBgdGltaW5ncy51cGxvYWQgLSAodGltaW5ncy5zZWN1cmVDb25uZWN0IHx8IHRpbWluZ3MuY29ubmVjdClgXG4gICAgICAgIC0gYGZpcnN0Qnl0ZWAgLSBgdGltaW5ncy5yZXNwb25zZSAtIHRpbWluZ3MudXBsb2FkYFxuICAgICAgICAtIGBkb3dubG9hZGAgLSBgdGltaW5ncy5lbmQgLSB0aW1pbmdzLnJlc3BvbnNlYFxuICAgICAgICAtIGB0b3RhbGAgLSBgKHRpbWluZ3MuZW5kIHx8IHRpbWluZ3MuZXJyb3IgfHwgdGltaW5ncy5hYm9ydCkgLSB0aW1pbmdzLnN0YXJ0YFxuXG4gICAgSWYgc29tZXRoaW5nIGhhcyBub3QgYmVlbiBtZWFzdXJlZCB5ZXQsIGl0IHdpbGwgYmUgYHVuZGVmaW5lZGAuXG5cbiAgICBfX05vdGVfXzogVGhlIHRpbWUgaXMgYSBgbnVtYmVyYCByZXByZXNlbnRpbmcgdGhlIG1pbGxpc2Vjb25kcyBlbGFwc2VkIHNpbmNlIHRoZSBVTklYIGVwb2NoLlxuICAgICovXG4gICAgZ2V0IHRpbWluZ3MoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXNba1JlcXVlc3RdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGltaW5ncztcbiAgICB9XG4gICAgLyoqXG4gICAgV2hldGhlciB0aGUgcmVzcG9uc2Ugd2FzIHJldHJpZXZlZCBmcm9tIHRoZSBjYWNoZS5cbiAgICAqL1xuICAgIGdldCBpc0Zyb21DYWNoZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNba0lzRnJvbUNhY2hlXTtcbiAgICB9XG4gICAgcGlwZShkZXN0aW5hdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBpZiAodGhpc1trU3RhcnRlZFJlYWRpbmddKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBwaXBlLiBUaGUgcmVzcG9uc2UgaGFzIGJlZW4gZW1pdHRlZCBhbHJlYWR5LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbiBpbnN0YW5jZW9mIGh0dHBfMS5TZXJ2ZXJSZXNwb25zZSkge1xuICAgICAgICAgICAgdGhpc1trU2VydmVyUmVzcG9uc2VzUGlwZWRdLmFkZChkZXN0aW5hdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLnBpcGUoZGVzdGluYXRpb24sIG9wdGlvbnMpO1xuICAgIH1cbiAgICB1bnBpcGUoZGVzdGluYXRpb24pIHtcbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uIGluc3RhbmNlb2YgaHR0cF8xLlNlcnZlclJlc3BvbnNlKSB7XG4gICAgICAgICAgICB0aGlzW2tTZXJ2ZXJSZXNwb25zZXNQaXBlZF0uZGVsZXRlKGRlc3RpbmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci51bnBpcGUoZGVzdGluYXRpb24pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBSZXF1ZXN0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/dns-ip-version.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/dns-ip-version.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.dnsLookupIpVersionToFamily = exports.isDnsLookupIpVersion = void 0;\nconst conversionTable = {\n    auto: 0,\n    ipv4: 4,\n    ipv6: 6\n};\nexports.isDnsLookupIpVersion = (value) => {\n    return value in conversionTable;\n};\nexports.dnsLookupIpVersionToFamily = (dnsLookupIpVersion) => {\n    if (exports.isDnsLookupIpVersion(dnsLookupIpVersion)) {\n        return conversionTable[dnsLookupIpVersion];\n    }\n    throw new Error('Invalid DNS lookup IP version');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZG5zLWlwLXZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0NBQWtDLEdBQUcsNEJBQTRCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvdGVpbi1iaW5kLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZG5zLWlwLXZlcnNpb24uanM/N2ZmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZG5zTG9va3VwSXBWZXJzaW9uVG9GYW1pbHkgPSBleHBvcnRzLmlzRG5zTG9va3VwSXBWZXJzaW9uID0gdm9pZCAwO1xuY29uc3QgY29udmVyc2lvblRhYmxlID0ge1xuICAgIGF1dG86IDAsXG4gICAgaXB2NDogNCxcbiAgICBpcHY2OiA2XG59O1xuZXhwb3J0cy5pc0Ruc0xvb2t1cElwVmVyc2lvbiA9ICh2YWx1ZSkgPT4ge1xuICAgIHJldHVybiB2YWx1ZSBpbiBjb252ZXJzaW9uVGFibGU7XG59O1xuZXhwb3J0cy5kbnNMb29rdXBJcFZlcnNpb25Ub0ZhbWlseSA9IChkbnNMb29rdXBJcFZlcnNpb24pID0+IHtcbiAgICBpZiAoZXhwb3J0cy5pc0Ruc0xvb2t1cElwVmVyc2lvbihkbnNMb29rdXBJcFZlcnNpb24pKSB7XG4gICAgICAgIHJldHVybiBjb252ZXJzaW9uVGFibGVbZG5zTG9va3VwSXBWZXJzaW9uXTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEROUyBsb29rdXAgSVAgdmVyc2lvbicpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/dns-ip-version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/get-body-size.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/get-body-size.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(ssr)/./node_modules/.pnpm/@sindresorhus+is@4.6.0/node_modules/@sindresorhus/is/dist/index.js\");\nconst is_form_data_1 = __webpack_require__(/*! ./is-form-data */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/is-form-data.js\");\nconst statAsync = util_1.promisify(fs_1.stat);\nexports[\"default\"] = async (body, headers) => {\n    if (headers && 'content-length' in headers) {\n        return Number(headers['content-length']);\n    }\n    if (!body) {\n        return 0;\n    }\n    if (is_1.default.string(body)) {\n        return Buffer.byteLength(body);\n    }\n    if (is_1.default.buffer(body)) {\n        return body.length;\n    }\n    if (is_form_data_1.default(body)) {\n        return util_1.promisify(body.getLength.bind(body))();\n    }\n    if (body instanceof fs_1.ReadStream) {\n        const { size } = await statAsync(body.path);\n        if (size === 0) {\n            return undefined;\n        }\n        return size;\n    }\n    return undefined;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZ2V0LWJvZHktc2l6ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsY0FBSTtBQUN6QixlQUFlLG1CQUFPLENBQUMsa0JBQU07QUFDN0IsYUFBYSxtQkFBTyxDQUFDLHVIQUFrQjtBQUN2Qyx1QkFBdUIsbUJBQU8sQ0FBQyxxSEFBZ0I7QUFDL0M7QUFDQSxrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm90ZWluLWJpbmQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9nb3RAMTEuOC42L25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy9nZXQtYm9keS1zaXplLmpzP2FkM2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBmc18xID0gcmVxdWlyZShcImZzXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcInV0aWxcIik7XG5jb25zdCBpc18xID0gcmVxdWlyZShcIkBzaW5kcmVzb3JodXMvaXNcIik7XG5jb25zdCBpc19mb3JtX2RhdGFfMSA9IHJlcXVpcmUoXCIuL2lzLWZvcm0tZGF0YVwiKTtcbmNvbnN0IHN0YXRBc3luYyA9IHV0aWxfMS5wcm9taXNpZnkoZnNfMS5zdGF0KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFzeW5jIChib2R5LCBoZWFkZXJzKSA9PiB7XG4gICAgaWYgKGhlYWRlcnMgJiYgJ2NvbnRlbnQtbGVuZ3RoJyBpbiBoZWFkZXJzKSB7XG4gICAgICAgIHJldHVybiBOdW1iZXIoaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSk7XG4gICAgfVxuICAgIGlmICghYm9keSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKGlzXzEuZGVmYXVsdC5zdHJpbmcoYm9keSkpIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5ieXRlTGVuZ3RoKGJvZHkpO1xuICAgIH1cbiAgICBpZiAoaXNfMS5kZWZhdWx0LmJ1ZmZlcihib2R5KSkge1xuICAgICAgICByZXR1cm4gYm9keS5sZW5ndGg7XG4gICAgfVxuICAgIGlmIChpc19mb3JtX2RhdGFfMS5kZWZhdWx0KGJvZHkpKSB7XG4gICAgICAgIHJldHVybiB1dGlsXzEucHJvbWlzaWZ5KGJvZHkuZ2V0TGVuZ3RoLmJpbmQoYm9keSkpKCk7XG4gICAgfVxuICAgIGlmIChib2R5IGluc3RhbmNlb2YgZnNfMS5SZWFkU3RyZWFtKSB7XG4gICAgICAgIGNvbnN0IHsgc2l6ZSB9ID0gYXdhaXQgc3RhdEFzeW5jKGJvZHkucGF0aCk7XG4gICAgICAgIGlmIChzaXplID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaXplO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/get-body-size.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/get-buffer.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/get-buffer.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n// TODO: Update https://github.com/sindresorhus/get-stream\nconst getBuffer = async (stream) => {\n    const chunks = [];\n    let length = 0;\n    for await (const chunk of stream) {\n        chunks.push(chunk);\n        length += Buffer.byteLength(chunk);\n    }\n    if (Buffer.isBuffer(chunks[0])) {\n        return Buffer.concat(chunks, length);\n    }\n    return Buffer.from(chunks.join(''));\n};\nexports[\"default\"] = getBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZ2V0LWJ1ZmZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvdGVpbi1iaW5kLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZ2V0LWJ1ZmZlci5qcz9jOTA1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gVE9ETzogVXBkYXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZ2V0LXN0cmVhbVxuY29uc3QgZ2V0QnVmZmVyID0gYXN5bmMgKHN0cmVhbSkgPT4ge1xuICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgIGxldCBsZW5ndGggPSAwO1xuICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2Ygc3RyZWFtKSB7XG4gICAgICAgIGNodW5rcy5wdXNoKGNodW5rKTtcbiAgICAgICAgbGVuZ3RoICs9IEJ1ZmZlci5ieXRlTGVuZ3RoKGNodW5rKTtcbiAgICB9XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihjaHVua3NbMF0pKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGNodW5rcywgbGVuZ3RoKTtcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rcy5qb2luKCcnKSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0QnVmZmVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/get-buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/is-form-data.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/is-form-data.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(ssr)/./node_modules/.pnpm/@sindresorhus+is@4.6.0/node_modules/@sindresorhus/is/dist/index.js\");\nexports[\"default\"] = (body) => is_1.default.nodeStream(body) && is_1.default.function_(body.getBoundary);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvaXMtZm9ybS1kYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyx1SEFBa0I7QUFDdkMsa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm90ZWluLWJpbmQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9nb3RAMTEuOC42L25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy9pcy1mb3JtLWRhdGEuanM/MzI2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGlzXzEgPSByZXF1aXJlKFwiQHNpbmRyZXNvcmh1cy9pc1wiKTtcbmV4cG9ydHMuZGVmYXVsdCA9IChib2R5KSA9PiBpc18xLmRlZmF1bHQubm9kZVN0cmVhbShib2R5KSAmJiBpc18xLmRlZmF1bHQuZnVuY3Rpb25fKGJvZHkuZ2V0Qm91bmRhcnkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/is-form-data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/is-response-ok.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/is-response-ok.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isResponseOk = void 0;\nexports.isResponseOk = (response) => {\n    const { statusCode } = response;\n    const limitStatusCode = response.request.options.followRedirect ? 299 : 399;\n    return (statusCode >= 200 && statusCode <= limitStatusCode) || statusCode === 304;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvaXMtcmVzcG9uc2Utb2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixZQUFZLGFBQWE7QUFDekI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvdGVpbi1iaW5kLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvaXMtcmVzcG9uc2Utb2suanM/MDkxYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNSZXNwb25zZU9rID0gdm9pZCAwO1xuZXhwb3J0cy5pc1Jlc3BvbnNlT2sgPSAocmVzcG9uc2UpID0+IHtcbiAgICBjb25zdCB7IHN0YXR1c0NvZGUgfSA9IHJlc3BvbnNlO1xuICAgIGNvbnN0IGxpbWl0U3RhdHVzQ29kZSA9IHJlc3BvbnNlLnJlcXVlc3Qub3B0aW9ucy5mb2xsb3dSZWRpcmVjdCA/IDI5OSA6IDM5OTtcbiAgICByZXR1cm4gKHN0YXR1c0NvZGUgPj0gMjAwICYmIHN0YXR1c0NvZGUgPD0gbGltaXRTdGF0dXNDb2RlKSB8fCBzdGF0dXNDb2RlID09PSAzMDQ7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/is-response-ok.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/options-to-url.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/options-to-url.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/* istanbul ignore file: deprecated */\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst keys = [\n    'protocol',\n    'host',\n    'hostname',\n    'port',\n    'pathname',\n    'search'\n];\nexports[\"default\"] = (origin, options) => {\n    var _a, _b;\n    if (options.path) {\n        if (options.pathname) {\n            throw new TypeError('Parameters `path` and `pathname` are mutually exclusive.');\n        }\n        if (options.search) {\n            throw new TypeError('Parameters `path` and `search` are mutually exclusive.');\n        }\n        if (options.searchParams) {\n            throw new TypeError('Parameters `path` and `searchParams` are mutually exclusive.');\n        }\n    }\n    if (options.search && options.searchParams) {\n        throw new TypeError('Parameters `search` and `searchParams` are mutually exclusive.');\n    }\n    if (!origin) {\n        if (!options.protocol) {\n            throw new TypeError('No URL protocol specified');\n        }\n        origin = `${options.protocol}//${(_b = (_a = options.hostname) !== null && _a !== void 0 ? _a : options.host) !== null && _b !== void 0 ? _b : ''}`;\n    }\n    const url = new url_1.URL(origin);\n    if (options.path) {\n        const searchIndex = options.path.indexOf('?');\n        if (searchIndex === -1) {\n            options.pathname = options.path;\n        }\n        else {\n            options.pathname = options.path.slice(0, searchIndex);\n            options.search = options.path.slice(searchIndex + 1);\n        }\n        delete options.path;\n    }\n    for (const key of keys) {\n        if (options[key]) {\n            url[key] = options[key].toString();\n        }\n    }\n    return url;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvb3B0aW9ucy10by11cmwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQSxjQUFjLG1CQUFPLENBQUMsZ0JBQUs7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCLElBQUksaUhBQWlIO0FBQzFKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm90ZWluLWJpbmQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9nb3RAMTEuOC42L25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy9vcHRpb25zLXRvLXVybC5qcz8wNTUyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaXN0YW5idWwgaWdub3JlIGZpbGU6IGRlcHJlY2F0ZWQgKi9cbmNvbnN0IHVybF8xID0gcmVxdWlyZShcInVybFwiKTtcbmNvbnN0IGtleXMgPSBbXG4gICAgJ3Byb3RvY29sJyxcbiAgICAnaG9zdCcsXG4gICAgJ2hvc3RuYW1lJyxcbiAgICAncG9ydCcsXG4gICAgJ3BhdGhuYW1lJyxcbiAgICAnc2VhcmNoJ1xuXTtcbmV4cG9ydHMuZGVmYXVsdCA9IChvcmlnaW4sIG9wdGlvbnMpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmIChvcHRpb25zLnBhdGgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMucGF0aG5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BhcmFtZXRlcnMgYHBhdGhgIGFuZCBgcGF0aG5hbWVgIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuc2VhcmNoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQYXJhbWV0ZXJzIGBwYXRoYCBhbmQgYHNlYXJjaGAgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5zZWFyY2hQYXJhbXMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BhcmFtZXRlcnMgYHBhdGhgIGFuZCBgc2VhcmNoUGFyYW1zYCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnNlYXJjaCAmJiBvcHRpb25zLnNlYXJjaFBhcmFtcykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQYXJhbWV0ZXJzIGBzZWFyY2hgIGFuZCBgc2VhcmNoUGFyYW1zYCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLicpO1xuICAgIH1cbiAgICBpZiAoIW9yaWdpbikge1xuICAgICAgICBpZiAoIW9wdGlvbnMucHJvdG9jb2wpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIFVSTCBwcm90b2NvbCBzcGVjaWZpZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBvcmlnaW4gPSBgJHtvcHRpb25zLnByb3RvY29sfS8vJHsoX2IgPSAoX2EgPSBvcHRpb25zLmhvc3RuYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBvcHRpb25zLmhvc3QpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcnfWA7XG4gICAgfVxuICAgIGNvbnN0IHVybCA9IG5ldyB1cmxfMS5VUkwob3JpZ2luKTtcbiAgICBpZiAob3B0aW9ucy5wYXRoKSB7XG4gICAgICAgIGNvbnN0IHNlYXJjaEluZGV4ID0gb3B0aW9ucy5wYXRoLmluZGV4T2YoJz8nKTtcbiAgICAgICAgaWYgKHNlYXJjaEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgb3B0aW9ucy5wYXRobmFtZSA9IG9wdGlvbnMucGF0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMucGF0aG5hbWUgPSBvcHRpb25zLnBhdGguc2xpY2UoMCwgc2VhcmNoSW5kZXgpO1xuICAgICAgICAgICAgb3B0aW9ucy5zZWFyY2ggPSBvcHRpb25zLnBhdGguc2xpY2Uoc2VhcmNoSW5kZXggKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgb3B0aW9ucy5wYXRoO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgIGlmIChvcHRpb25zW2tleV0pIHtcbiAgICAgICAgICAgIHVybFtrZXldID0gb3B0aW9uc1trZXldLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVybDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/options-to-url.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/proxy-events.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/proxy-events.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nfunction default_1(from, to, events) {\n    const fns = {};\n    for (const event of events) {\n        fns[event] = (...args) => {\n            to.emit(event, ...args);\n        };\n        from.on(event, fns[event]);\n    }\n    return () => {\n        for (const event of events) {\n            from.off(event, fns[event]);\n        }\n    };\n}\nexports[\"default\"] = default_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvcHJveHktZXZlbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3RlaW4tYmluZC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2dvdEAxMS44LjYvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL3Byb3h5LWV2ZW50cy5qcz81ZjIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gZGVmYXVsdF8xKGZyb20sIHRvLCBldmVudHMpIHtcbiAgICBjb25zdCBmbnMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgICAgICBmbnNbZXZlbnRdID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIHRvLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgICB9O1xuICAgICAgICBmcm9tLm9uKGV2ZW50LCBmbnNbZXZlbnRdKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcbiAgICAgICAgICAgIGZyb20ub2ZmKGV2ZW50LCBmbnNbZXZlbnRdKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWZhdWx0XzE7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/proxy-events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/timed-out.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/timed-out.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TimeoutError = void 0;\nconst net = __webpack_require__(/*! net */ \"net\");\nconst unhandle_1 = __webpack_require__(/*! ./unhandle */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/unhandle.js\");\nconst reentry = Symbol('reentry');\nconst noop = () => { };\nclass TimeoutError extends Error {\n    constructor(threshold, event) {\n        super(`Timeout awaiting '${event}' for ${threshold}ms`);\n        this.event = event;\n        this.name = 'TimeoutError';\n        this.code = 'ETIMEDOUT';\n    }\n}\nexports.TimeoutError = TimeoutError;\nexports[\"default\"] = (request, delays, options) => {\n    if (reentry in request) {\n        return noop;\n    }\n    request[reentry] = true;\n    const cancelers = [];\n    const { once, unhandleAll } = unhandle_1.default();\n    const addTimeout = (delay, callback, event) => {\n        var _a;\n        const timeout = setTimeout(callback, delay, delay, event);\n        (_a = timeout.unref) === null || _a === void 0 ? void 0 : _a.call(timeout);\n        const cancel = () => {\n            clearTimeout(timeout);\n        };\n        cancelers.push(cancel);\n        return cancel;\n    };\n    const { host, hostname } = options;\n    const timeoutHandler = (delay, event) => {\n        request.destroy(new TimeoutError(delay, event));\n    };\n    const cancelTimeouts = () => {\n        for (const cancel of cancelers) {\n            cancel();\n        }\n        unhandleAll();\n    };\n    request.once('error', error => {\n        cancelTimeouts();\n        // Save original behavior\n        /* istanbul ignore next */\n        if (request.listenerCount('error') === 0) {\n            throw error;\n        }\n    });\n    request.once('close', cancelTimeouts);\n    once(request, 'response', (response) => {\n        once(response, 'end', cancelTimeouts);\n    });\n    if (typeof delays.request !== 'undefined') {\n        addTimeout(delays.request, timeoutHandler, 'request');\n    }\n    if (typeof delays.socket !== 'undefined') {\n        const socketTimeoutHandler = () => {\n            timeoutHandler(delays.socket, 'socket');\n        };\n        request.setTimeout(delays.socket, socketTimeoutHandler);\n        // `request.setTimeout(0)` causes a memory leak.\n        // We can just remove the listener and forget about the timer - it's unreffed.\n        // See https://github.com/sindresorhus/got/issues/690\n        cancelers.push(() => {\n            request.removeListener('timeout', socketTimeoutHandler);\n        });\n    }\n    once(request, 'socket', (socket) => {\n        var _a;\n        const { socketPath } = request;\n        /* istanbul ignore next: hard to test */\n        if (socket.connecting) {\n            const hasPath = Boolean(socketPath !== null && socketPath !== void 0 ? socketPath : net.isIP((_a = hostname !== null && hostname !== void 0 ? hostname : host) !== null && _a !== void 0 ? _a : '') !== 0);\n            if (typeof delays.lookup !== 'undefined' && !hasPath && typeof socket.address().address === 'undefined') {\n                const cancelTimeout = addTimeout(delays.lookup, timeoutHandler, 'lookup');\n                once(socket, 'lookup', cancelTimeout);\n            }\n            if (typeof delays.connect !== 'undefined') {\n                const timeConnect = () => addTimeout(delays.connect, timeoutHandler, 'connect');\n                if (hasPath) {\n                    once(socket, 'connect', timeConnect());\n                }\n                else {\n                    once(socket, 'lookup', (error) => {\n                        if (error === null) {\n                            once(socket, 'connect', timeConnect());\n                        }\n                    });\n                }\n            }\n            if (typeof delays.secureConnect !== 'undefined' && options.protocol === 'https:') {\n                once(socket, 'connect', () => {\n                    const cancelTimeout = addTimeout(delays.secureConnect, timeoutHandler, 'secureConnect');\n                    once(socket, 'secureConnect', cancelTimeout);\n                });\n            }\n        }\n        if (typeof delays.send !== 'undefined') {\n            const timeRequest = () => addTimeout(delays.send, timeoutHandler, 'send');\n            /* istanbul ignore next: hard to test */\n            if (socket.connecting) {\n                once(socket, 'connect', () => {\n                    once(request, 'upload-complete', timeRequest());\n                });\n            }\n            else {\n                once(request, 'upload-complete', timeRequest());\n            }\n        }\n    });\n    if (typeof delays.response !== 'undefined') {\n        once(request, 'upload-complete', () => {\n            const cancelTimeout = addTimeout(delays.response, timeoutHandler, 'response');\n            once(request, 'response', cancelTimeout);\n        });\n    }\n    return cancelTimeouts;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/timed-out.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/unhandle.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/unhandle.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n// When attaching listeners, it's very easy to forget about them.\n// Especially if you do error handling and set timeouts.\n// So instead of checking if it's proper to throw an error on every timeout ever,\n// use this simple tool which will remove all listeners you have attached.\nexports[\"default\"] = () => {\n    const handlers = [];\n    return {\n        once(origin, event, fn) {\n            origin.once(event, fn);\n            handlers.push({ origin, event, fn });\n        },\n        unhandleAll() {\n            for (const handler of handlers) {\n                const { origin, event, fn } = handler;\n                origin.removeListener(event, fn);\n            }\n            handlers.length = 0;\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvdW5oYW5kbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLG1CQUFtQjtBQUMvQyxTQUFTO0FBQ1Q7QUFDQTtBQUNBLHdCQUF3QixvQkFBb0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvdGVpbi1iaW5kLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvdW5oYW5kbGUuanM/Mjc1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIFdoZW4gYXR0YWNoaW5nIGxpc3RlbmVycywgaXQncyB2ZXJ5IGVhc3kgdG8gZm9yZ2V0IGFib3V0IHRoZW0uXG4vLyBFc3BlY2lhbGx5IGlmIHlvdSBkbyBlcnJvciBoYW5kbGluZyBhbmQgc2V0IHRpbWVvdXRzLlxuLy8gU28gaW5zdGVhZCBvZiBjaGVja2luZyBpZiBpdCdzIHByb3BlciB0byB0aHJvdyBhbiBlcnJvciBvbiBldmVyeSB0aW1lb3V0IGV2ZXIsXG4vLyB1c2UgdGhpcyBzaW1wbGUgdG9vbCB3aGljaCB3aWxsIHJlbW92ZSBhbGwgbGlzdGVuZXJzIHlvdSBoYXZlIGF0dGFjaGVkLlxuZXhwb3J0cy5kZWZhdWx0ID0gKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZXJzID0gW107XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb25jZShvcmlnaW4sIGV2ZW50LCBmbikge1xuICAgICAgICAgICAgb3JpZ2luLm9uY2UoZXZlbnQsIGZuKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnB1c2goeyBvcmlnaW4sIGV2ZW50LCBmbiB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5oYW5kbGVBbGwoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGhhbmRsZXIgb2YgaGFuZGxlcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG9yaWdpbiwgZXZlbnQsIGZuIH0gPSBoYW5kbGVyO1xuICAgICAgICAgICAgICAgIG9yaWdpbi5yZW1vdmVMaXN0ZW5lcihldmVudCwgZm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFuZGxlcnMubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgIH07XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/unhandle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/url-to-options.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/url-to-options.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(ssr)/./node_modules/.pnpm/@sindresorhus+is@4.6.0/node_modules/@sindresorhus/is/dist/index.js\");\nexports[\"default\"] = (url) => {\n    // Cast to URL\n    url = url;\n    const options = {\n        protocol: url.protocol,\n        hostname: is_1.default.string(url.hostname) && url.hostname.startsWith('[') ? url.hostname.slice(1, -1) : url.hostname,\n        host: url.host,\n        hash: url.hash,\n        search: url.search,\n        pathname: url.pathname,\n        href: url.href,\n        path: `${url.pathname || ''}${url.search || ''}`\n    };\n    if (is_1.default.string(url.port) && url.port.length > 0) {\n        options.port = Number(url.port);\n    }\n    if (url.username || url.password) {\n        options.auth = `${url.username || ''}:${url.password || ''}`;\n    }\n    return options;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvdXJsLXRvLW9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLHVIQUFrQjtBQUN2QyxrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFtQixFQUFFLGlCQUFpQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLG1CQUFtQixHQUFHLG1CQUFtQjtBQUNuRTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm90ZWluLWJpbmQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9nb3RAMTEuOC42L25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy91cmwtdG8tb3B0aW9ucy5qcz8zZTVjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaXNfMSA9IHJlcXVpcmUoXCJAc2luZHJlc29yaHVzL2lzXCIpO1xuZXhwb3J0cy5kZWZhdWx0ID0gKHVybCkgPT4ge1xuICAgIC8vIENhc3QgdG8gVVJMXG4gICAgdXJsID0gdXJsO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIHByb3RvY29sOiB1cmwucHJvdG9jb2wsXG4gICAgICAgIGhvc3RuYW1lOiBpc18xLmRlZmF1bHQuc3RyaW5nKHVybC5ob3N0bmFtZSkgJiYgdXJsLmhvc3RuYW1lLnN0YXJ0c1dpdGgoJ1snKSA/IHVybC5ob3N0bmFtZS5zbGljZSgxLCAtMSkgOiB1cmwuaG9zdG5hbWUsXG4gICAgICAgIGhvc3Q6IHVybC5ob3N0LFxuICAgICAgICBoYXNoOiB1cmwuaGFzaCxcbiAgICAgICAgc2VhcmNoOiB1cmwuc2VhcmNoLFxuICAgICAgICBwYXRobmFtZTogdXJsLnBhdGhuYW1lLFxuICAgICAgICBocmVmOiB1cmwuaHJlZixcbiAgICAgICAgcGF0aDogYCR7dXJsLnBhdGhuYW1lIHx8ICcnfSR7dXJsLnNlYXJjaCB8fCAnJ31gXG4gICAgfTtcbiAgICBpZiAoaXNfMS5kZWZhdWx0LnN0cmluZyh1cmwucG9ydCkgJiYgdXJsLnBvcnQubGVuZ3RoID4gMCkge1xuICAgICAgICBvcHRpb25zLnBvcnQgPSBOdW1iZXIodXJsLnBvcnQpO1xuICAgIH1cbiAgICBpZiAodXJsLnVzZXJuYW1lIHx8IHVybC5wYXNzd29yZCkge1xuICAgICAgICBvcHRpb25zLmF1dGggPSBgJHt1cmwudXNlcm5hbWUgfHwgJyd9OiR7dXJsLnBhc3N3b3JkIHx8ICcnfWA7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/url-to-options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/weakable-map.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/weakable-map.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass WeakableMap {\n    constructor() {\n        this.weakMap = new WeakMap();\n        this.map = new Map();\n    }\n    set(key, value) {\n        if (typeof key === 'object') {\n            this.weakMap.set(key, value);\n        }\n        else {\n            this.map.set(key, value);\n        }\n    }\n    get(key) {\n        if (typeof key === 'object') {\n            return this.weakMap.get(key);\n        }\n        return this.map.get(key);\n    }\n    has(key) {\n        if (typeof key === 'object') {\n            return this.weakMap.has(key);\n        }\n        return this.map.has(key);\n    }\n}\nexports[\"default\"] = WeakableMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvd2Vha2FibGUtbWFwLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3RlaW4tYmluZC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2dvdEAxMS44LjYvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL3dlYWthYmxlLW1hcC5qcz9iNmZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgV2Vha2FibGVNYXAge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLndlYWtNYXAgPSBuZXcgV2Vha01hcCgpO1xuICAgICAgICB0aGlzLm1hcCA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aGlzLndlYWtNYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldChrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53ZWFrTWFwLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm1hcC5nZXQoa2V5KTtcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndlYWtNYXAuaGFzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmhhcyhrZXkpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFdlYWthYmxlTWFwO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/utils/weakable-map.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/create.js":
/*!******************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/create.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultHandler = void 0;\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(ssr)/./node_modules/.pnpm/@sindresorhus+is@4.6.0/node_modules/@sindresorhus/is/dist/index.js\");\nconst as_promise_1 = __webpack_require__(/*! ./as-promise */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/index.js\");\nconst create_rejection_1 = __webpack_require__(/*! ./as-promise/create-rejection */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/create-rejection.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/core/index.js\");\nconst deep_freeze_1 = __webpack_require__(/*! ./utils/deep-freeze */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/utils/deep-freeze.js\");\nconst errors = {\n    RequestError: as_promise_1.RequestError,\n    CacheError: as_promise_1.CacheError,\n    ReadError: as_promise_1.ReadError,\n    HTTPError: as_promise_1.HTTPError,\n    MaxRedirectsError: as_promise_1.MaxRedirectsError,\n    TimeoutError: as_promise_1.TimeoutError,\n    ParseError: as_promise_1.ParseError,\n    CancelError: as_promise_1.CancelError,\n    UnsupportedProtocolError: as_promise_1.UnsupportedProtocolError,\n    UploadError: as_promise_1.UploadError\n};\n// The `delay` package weighs 10KB (!)\nconst delay = async (ms) => new Promise(resolve => {\n    setTimeout(resolve, ms);\n});\nconst { normalizeArguments } = core_1.default;\nconst mergeOptions = (...sources) => {\n    let mergedOptions;\n    for (const source of sources) {\n        mergedOptions = normalizeArguments(undefined, source, mergedOptions);\n    }\n    return mergedOptions;\n};\nconst getPromiseOrStream = (options) => options.isStream ? new core_1.default(undefined, options) : as_promise_1.default(options);\nconst isGotInstance = (value) => ('defaults' in value && 'options' in value.defaults);\nconst aliases = [\n    'get',\n    'post',\n    'put',\n    'patch',\n    'head',\n    'delete'\n];\nexports.defaultHandler = (options, next) => next(options);\nconst callInitHooks = (hooks, options) => {\n    if (hooks) {\n        for (const hook of hooks) {\n            hook(options);\n        }\n    }\n};\nconst create = (defaults) => {\n    // Proxy properties from next handlers\n    defaults._rawHandlers = defaults.handlers;\n    defaults.handlers = defaults.handlers.map(fn => ((options, next) => {\n        // This will be assigned by assigning result\n        let root;\n        const result = fn(options, newOptions => {\n            root = next(newOptions);\n            return root;\n        });\n        if (result !== root && !options.isStream && root) {\n            const typedResult = result;\n            const { then: promiseThen, catch: promiseCatch, finally: promiseFianlly } = typedResult;\n            Object.setPrototypeOf(typedResult, Object.getPrototypeOf(root));\n            Object.defineProperties(typedResult, Object.getOwnPropertyDescriptors(root));\n            // These should point to the new promise\n            // eslint-disable-next-line promise/prefer-await-to-then\n            typedResult.then = promiseThen;\n            typedResult.catch = promiseCatch;\n            typedResult.finally = promiseFianlly;\n        }\n        return result;\n    }));\n    // Got interface\n    const got = ((url, options = {}, _defaults) => {\n        var _a, _b;\n        let iteration = 0;\n        const iterateHandlers = (newOptions) => {\n            return defaults.handlers[iteration++](newOptions, iteration === defaults.handlers.length ? getPromiseOrStream : iterateHandlers);\n        };\n        // TODO: Remove this in Got 12.\n        if (is_1.default.plainObject(url)) {\n            const mergedOptions = {\n                ...url,\n                ...options\n            };\n            core_1.setNonEnumerableProperties([url, options], mergedOptions);\n            options = mergedOptions;\n            url = undefined;\n        }\n        try {\n            // Call `init` hooks\n            let initHookError;\n            try {\n                callInitHooks(defaults.options.hooks.init, options);\n                callInitHooks((_a = options.hooks) === null || _a === void 0 ? void 0 : _a.init, options);\n            }\n            catch (error) {\n                initHookError = error;\n            }\n            // Normalize options & call handlers\n            const normalizedOptions = normalizeArguments(url, options, _defaults !== null && _defaults !== void 0 ? _defaults : defaults.options);\n            normalizedOptions[core_1.kIsNormalizedAlready] = true;\n            if (initHookError) {\n                throw new as_promise_1.RequestError(initHookError.message, initHookError, normalizedOptions);\n            }\n            return iterateHandlers(normalizedOptions);\n        }\n        catch (error) {\n            if (options.isStream) {\n                throw error;\n            }\n            else {\n                return create_rejection_1.default(error, defaults.options.hooks.beforeError, (_b = options.hooks) === null || _b === void 0 ? void 0 : _b.beforeError);\n            }\n        }\n    });\n    got.extend = (...instancesOrOptions) => {\n        const optionsArray = [defaults.options];\n        let handlers = [...defaults._rawHandlers];\n        let isMutableDefaults;\n        for (const value of instancesOrOptions) {\n            if (isGotInstance(value)) {\n                optionsArray.push(value.defaults.options);\n                handlers.push(...value.defaults._rawHandlers);\n                isMutableDefaults = value.defaults.mutableDefaults;\n            }\n            else {\n                optionsArray.push(value);\n                if ('handlers' in value) {\n                    handlers.push(...value.handlers);\n                }\n                isMutableDefaults = value.mutableDefaults;\n            }\n        }\n        handlers = handlers.filter(handler => handler !== exports.defaultHandler);\n        if (handlers.length === 0) {\n            handlers.push(exports.defaultHandler);\n        }\n        return create({\n            options: mergeOptions(...optionsArray),\n            handlers,\n            mutableDefaults: Boolean(isMutableDefaults)\n        });\n    };\n    // Pagination\n    const paginateEach = (async function* (url, options) {\n        // TODO: Remove this `@ts-expect-error` when upgrading to TypeScript 4.\n        // Error: Argument of type 'Merge<Options, PaginationOptions<T, R>> | undefined' is not assignable to parameter of type 'Options | undefined'.\n        // @ts-expect-error\n        let normalizedOptions = normalizeArguments(url, options, defaults.options);\n        normalizedOptions.resolveBodyOnly = false;\n        const pagination = normalizedOptions.pagination;\n        if (!is_1.default.object(pagination)) {\n            throw new TypeError('`options.pagination` must be implemented');\n        }\n        const all = [];\n        let { countLimit } = pagination;\n        let numberOfRequests = 0;\n        while (numberOfRequests < pagination.requestLimit) {\n            if (numberOfRequests !== 0) {\n                // eslint-disable-next-line no-await-in-loop\n                await delay(pagination.backoff);\n            }\n            // @ts-expect-error FIXME!\n            // TODO: Throw when result is not an instance of Response\n            // eslint-disable-next-line no-await-in-loop\n            const result = (await got(undefined, undefined, normalizedOptions));\n            // eslint-disable-next-line no-await-in-loop\n            const parsed = await pagination.transform(result);\n            const current = [];\n            for (const item of parsed) {\n                if (pagination.filter(item, all, current)) {\n                    if (!pagination.shouldContinue(item, all, current)) {\n                        return;\n                    }\n                    yield item;\n                    if (pagination.stackAllItems) {\n                        all.push(item);\n                    }\n                    current.push(item);\n                    if (--countLimit <= 0) {\n                        return;\n                    }\n                }\n            }\n            const optionsToMerge = pagination.paginate(result, all, current);\n            if (optionsToMerge === false) {\n                return;\n            }\n            if (optionsToMerge === result.request.options) {\n                normalizedOptions = result.request.options;\n            }\n            else if (optionsToMerge !== undefined) {\n                normalizedOptions = normalizeArguments(undefined, optionsToMerge, normalizedOptions);\n            }\n            numberOfRequests++;\n        }\n    });\n    got.paginate = paginateEach;\n    got.paginate.all = (async (url, options) => {\n        const results = [];\n        for await (const item of paginateEach(url, options)) {\n            results.push(item);\n        }\n        return results;\n    });\n    // For those who like very descriptive names\n    got.paginate.each = paginateEach;\n    // Stream API\n    got.stream = ((url, options) => got(url, { ...options, isStream: true }));\n    // Shortcuts\n    for (const method of aliases) {\n        got[method] = ((url, options) => got(url, { ...options, method }));\n        got.stream[method] = ((url, options) => {\n            return got(url, { ...options, method, isStream: true });\n        });\n    }\n    Object.assign(got, errors);\n    Object.defineProperty(got, 'defaults', {\n        value: defaults.mutableDefaults ? defaults : deep_freeze_1.default(defaults),\n        writable: defaults.mutableDefaults,\n        configurable: defaults.mutableDefaults,\n        enumerable: true\n    });\n    got.mergeOptions = mergeOptions;\n    return got;\n};\nexports[\"default\"] = create;\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/types.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/create.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/index.js ***!
  \*****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst create_1 = __webpack_require__(/*! ./create */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/create.js\");\nconst defaults = {\n    options: {\n        method: 'GET',\n        retry: {\n            limit: 2,\n            methods: [\n                'GET',\n                'PUT',\n                'HEAD',\n                'DELETE',\n                'OPTIONS',\n                'TRACE'\n            ],\n            statusCodes: [\n                408,\n                413,\n                429,\n                500,\n                502,\n                503,\n                504,\n                521,\n                522,\n                524\n            ],\n            errorCodes: [\n                'ETIMEDOUT',\n                'ECONNRESET',\n                'EADDRINUSE',\n                'ECONNREFUSED',\n                'EPIPE',\n                'ENOTFOUND',\n                'ENETUNREACH',\n                'EAI_AGAIN'\n            ],\n            maxRetryAfter: undefined,\n            calculateDelay: ({ computedValue }) => computedValue\n        },\n        timeout: {},\n        headers: {\n            'user-agent': 'got (https://github.com/sindresorhus/got)'\n        },\n        hooks: {\n            init: [],\n            beforeRequest: [],\n            beforeRedirect: [],\n            beforeRetry: [],\n            beforeError: [],\n            afterResponse: []\n        },\n        cache: undefined,\n        dnsCache: undefined,\n        decompress: true,\n        throwHttpErrors: true,\n        followRedirect: true,\n        isStream: false,\n        responseType: 'text',\n        resolveBodyOnly: false,\n        maxRedirects: 10,\n        prefixUrl: '',\n        methodRewriting: true,\n        ignoreInvalidCookies: false,\n        context: {},\n        // TODO: Set this to `true` when Got 12 gets released\n        http2: false,\n        allowGetBody: false,\n        https: undefined,\n        pagination: {\n            transform: (response) => {\n                if (response.request.options.responseType === 'json') {\n                    return response.body;\n                }\n                return JSON.parse(response.body);\n            },\n            paginate: response => {\n                if (!Reflect.has(response.headers, 'link')) {\n                    return false;\n                }\n                const items = response.headers.link.split(',');\n                let next;\n                for (const item of items) {\n                    const parsed = item.split(';');\n                    if (parsed[1].includes('next')) {\n                        next = parsed[0].trimStart().trim();\n                        next = next.slice(1, -1);\n                        break;\n                    }\n                }\n                if (next) {\n                    const options = {\n                        url: new url_1.URL(next)\n                    };\n                    return options;\n                }\n                return false;\n            },\n            filter: () => true,\n            shouldContinue: () => true,\n            countLimit: Infinity,\n            backoff: 0,\n            requestLimit: 10000,\n            stackAllItems: true\n        },\n        parseJson: (text) => JSON.parse(text),\n        stringifyJson: (object) => JSON.stringify(object),\n        cacheOptions: {}\n    },\n    handlers: [create_1.defaultHandler],\n    mutableDefaults: false\n};\nconst got = create_1.default(defaults);\nexports[\"default\"] = got;\n// For CommonJS default export support\nmodule.exports = got;\nmodule.exports[\"default\"] = got;\nmodule.exports.__esModule = true; // Workaround for TS issue: https://github.com/sindresorhus/got/pull/1267\n__exportStar(__webpack_require__(/*! ./create */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/create.js\"), exports);\n__exportStar(__webpack_require__(/*! ./as-promise */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/as-promise/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLG1DQUFtQyxvQ0FBb0MsZ0JBQWdCO0FBQ3ZGLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjLG1CQUFPLENBQUMsZ0JBQUs7QUFDM0IsaUJBQWlCLG1CQUFPLENBQUMsOEZBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGVBQWU7QUFDOUMsU0FBUztBQUNULG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZjtBQUNBO0FBQ0EseUJBQXNCO0FBQ3RCLHlCQUF5QixTQUFTO0FBQ2xDLGFBQWEsbUJBQU8sQ0FBQyw4RkFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsNEdBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm90ZWluLWJpbmQtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9nb3RAMTEuOC42L25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvaW5kZXguanM/Yjc3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdXJsXzEgPSByZXF1aXJlKFwidXJsXCIpO1xuY29uc3QgY3JlYXRlXzEgPSByZXF1aXJlKFwiLi9jcmVhdGVcIik7XG5jb25zdCBkZWZhdWx0cyA9IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHJldHJ5OiB7XG4gICAgICAgICAgICBsaW1pdDogMixcbiAgICAgICAgICAgIG1ldGhvZHM6IFtcbiAgICAgICAgICAgICAgICAnR0VUJyxcbiAgICAgICAgICAgICAgICAnUFVUJyxcbiAgICAgICAgICAgICAgICAnSEVBRCcsXG4gICAgICAgICAgICAgICAgJ0RFTEVURScsXG4gICAgICAgICAgICAgICAgJ09QVElPTlMnLFxuICAgICAgICAgICAgICAgICdUUkFDRSdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzdGF0dXNDb2RlczogW1xuICAgICAgICAgICAgICAgIDQwOCxcbiAgICAgICAgICAgICAgICA0MTMsXG4gICAgICAgICAgICAgICAgNDI5LFxuICAgICAgICAgICAgICAgIDUwMCxcbiAgICAgICAgICAgICAgICA1MDIsXG4gICAgICAgICAgICAgICAgNTAzLFxuICAgICAgICAgICAgICAgIDUwNCxcbiAgICAgICAgICAgICAgICA1MjEsXG4gICAgICAgICAgICAgICAgNTIyLFxuICAgICAgICAgICAgICAgIDUyNFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGVycm9yQ29kZXM6IFtcbiAgICAgICAgICAgICAgICAnRVRJTUVET1VUJyxcbiAgICAgICAgICAgICAgICAnRUNPTk5SRVNFVCcsXG4gICAgICAgICAgICAgICAgJ0VBRERSSU5VU0UnLFxuICAgICAgICAgICAgICAgICdFQ09OTlJFRlVTRUQnLFxuICAgICAgICAgICAgICAgICdFUElQRScsXG4gICAgICAgICAgICAgICAgJ0VOT1RGT1VORCcsXG4gICAgICAgICAgICAgICAgJ0VORVRVTlJFQUNIJyxcbiAgICAgICAgICAgICAgICAnRUFJX0FHQUlOJ1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG1heFJldHJ5QWZ0ZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNhbGN1bGF0ZURlbGF5OiAoeyBjb21wdXRlZFZhbHVlIH0pID0+IGNvbXB1dGVkVmFsdWVcbiAgICAgICAgfSxcbiAgICAgICAgdGltZW91dDoge30sXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICd1c2VyLWFnZW50JzogJ2dvdCAoaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9nb3QpJ1xuICAgICAgICB9LFxuICAgICAgICBob29rczoge1xuICAgICAgICAgICAgaW5pdDogW10sXG4gICAgICAgICAgICBiZWZvcmVSZXF1ZXN0OiBbXSxcbiAgICAgICAgICAgIGJlZm9yZVJlZGlyZWN0OiBbXSxcbiAgICAgICAgICAgIGJlZm9yZVJldHJ5OiBbXSxcbiAgICAgICAgICAgIGJlZm9yZUVycm9yOiBbXSxcbiAgICAgICAgICAgIGFmdGVyUmVzcG9uc2U6IFtdXG4gICAgICAgIH0sXG4gICAgICAgIGNhY2hlOiB1bmRlZmluZWQsXG4gICAgICAgIGRuc0NhY2hlOiB1bmRlZmluZWQsXG4gICAgICAgIGRlY29tcHJlc3M6IHRydWUsXG4gICAgICAgIHRocm93SHR0cEVycm9yczogdHJ1ZSxcbiAgICAgICAgZm9sbG93UmVkaXJlY3Q6IHRydWUsXG4gICAgICAgIGlzU3RyZWFtOiBmYWxzZSxcbiAgICAgICAgcmVzcG9uc2VUeXBlOiAndGV4dCcsXG4gICAgICAgIHJlc29sdmVCb2R5T25seTogZmFsc2UsXG4gICAgICAgIG1heFJlZGlyZWN0czogMTAsXG4gICAgICAgIHByZWZpeFVybDogJycsXG4gICAgICAgIG1ldGhvZFJld3JpdGluZzogdHJ1ZSxcbiAgICAgICAgaWdub3JlSW52YWxpZENvb2tpZXM6IGZhbHNlLFxuICAgICAgICBjb250ZXh0OiB7fSxcbiAgICAgICAgLy8gVE9ETzogU2V0IHRoaXMgdG8gYHRydWVgIHdoZW4gR290IDEyIGdldHMgcmVsZWFzZWRcbiAgICAgICAgaHR0cDI6IGZhbHNlLFxuICAgICAgICBhbGxvd0dldEJvZHk6IGZhbHNlLFxuICAgICAgICBodHRwczogdW5kZWZpbmVkLFxuICAgICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5yZXF1ZXN0Lm9wdGlvbnMucmVzcG9uc2VUeXBlID09PSAnanNvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmJvZHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhZ2luYXRlOiByZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFSZWZsZWN0LmhhcyhyZXNwb25zZS5oZWFkZXJzLCAnbGluaycpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbXMgPSByZXNwb25zZS5oZWFkZXJzLmxpbmsuc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dDtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gaXRlbS5zcGxpdCgnOycpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VkWzFdLmluY2x1ZGVzKCduZXh0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQgPSBwYXJzZWRbMF0udHJpbVN0YXJ0KCkudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IG5leHQuc2xpY2UoMSwgLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogbmV3IHVybF8xLlVSTChuZXh0KVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbHRlcjogKCkgPT4gdHJ1ZSxcbiAgICAgICAgICAgIHNob3VsZENvbnRpbnVlOiAoKSA9PiB0cnVlLFxuICAgICAgICAgICAgY291bnRMaW1pdDogSW5maW5pdHksXG4gICAgICAgICAgICBiYWNrb2ZmOiAwLFxuICAgICAgICAgICAgcmVxdWVzdExpbWl0OiAxMDAwMCxcbiAgICAgICAgICAgIHN0YWNrQWxsSXRlbXM6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgcGFyc2VKc29uOiAodGV4dCkgPT4gSlNPTi5wYXJzZSh0ZXh0KSxcbiAgICAgICAgc3RyaW5naWZ5SnNvbjogKG9iamVjdCkgPT4gSlNPTi5zdHJpbmdpZnkob2JqZWN0KSxcbiAgICAgICAgY2FjaGVPcHRpb25zOiB7fVxuICAgIH0sXG4gICAgaGFuZGxlcnM6IFtjcmVhdGVfMS5kZWZhdWx0SGFuZGxlcl0sXG4gICAgbXV0YWJsZURlZmF1bHRzOiBmYWxzZVxufTtcbmNvbnN0IGdvdCA9IGNyZWF0ZV8xLmRlZmF1bHQoZGVmYXVsdHMpO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ290O1xuLy8gRm9yIENvbW1vbkpTIGRlZmF1bHQgZXhwb3J0IHN1cHBvcnRcbm1vZHVsZS5leHBvcnRzID0gZ290O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGdvdDtcbm1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyAvLyBXb3JrYXJvdW5kIGZvciBUUyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9nb3QvcHVsbC8xMjY3XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY3JlYXRlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hcy1wcm9taXNlXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/types.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/types.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvdGVpbi1iaW5kLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL3R5cGVzLmpzPzQ2NTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/utils/deep-freeze.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/utils/deep-freeze.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(ssr)/./node_modules/.pnpm/@sindresorhus+is@4.6.0/node_modules/@sindresorhus/is/dist/index.js\");\nfunction deepFreeze(object) {\n    for (const value of Object.values(object)) {\n        if (is_1.default.plainObject(value) || is_1.default.array(value)) {\n            deepFreeze(value);\n        }\n    }\n    return Object.freeze(object);\n}\nexports[\"default\"] = deepFreeze;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL3V0aWxzL2RlZXAtZnJlZXplLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyx1SEFBa0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvdGVpbi1iaW5kLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL3V0aWxzL2RlZXAtZnJlZXplLmpzPzY4ODIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpc18xID0gcmVxdWlyZShcIkBzaW5kcmVzb3JodXMvaXNcIik7XG5mdW5jdGlvbiBkZWVwRnJlZXplKG9iamVjdCkge1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgT2JqZWN0LnZhbHVlcyhvYmplY3QpKSB7XG4gICAgICAgIGlmIChpc18xLmRlZmF1bHQucGxhaW5PYmplY3QodmFsdWUpIHx8IGlzXzEuZGVmYXVsdC5hcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlZXBGcmVlemUodmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZnJlZXplKG9iamVjdCk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWVwRnJlZXplO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/utils/deep-freeze.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/utils/deprecation-warning.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/utils/deprecation-warning.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst alreadyWarned = new Set();\nexports[\"default\"] = (message) => {\n    if (alreadyWarned.has(message)) {\n        return;\n    }\n    alreadyWarned.add(message);\n    // @ts-expect-error Missing types.\n    process.emitWarning(`Got: ${message}`, {\n        type: 'DeprecationWarning'\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZ290QDExLjguNi9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL3V0aWxzL2RlcHJlY2F0aW9uLXdhcm5pbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQSxrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsUUFBUTtBQUN4QztBQUNBLEtBQUs7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3RlaW4tYmluZC13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2dvdEAxMS44LjYvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS91dGlscy9kZXByZWNhdGlvbi13YXJuaW5nLmpzPzY5MzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBhbHJlYWR5V2FybmVkID0gbmV3IFNldCgpO1xuZXhwb3J0cy5kZWZhdWx0ID0gKG1lc3NhZ2UpID0+IHtcbiAgICBpZiAoYWxyZWFkeVdhcm5lZC5oYXMobWVzc2FnZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhbHJlYWR5V2FybmVkLmFkZChtZXNzYWdlKTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIE1pc3NpbmcgdHlwZXMuXG4gICAgcHJvY2Vzcy5lbWl0V2FybmluZyhgR290OiAke21lc3NhZ2V9YCwge1xuICAgICAgICB0eXBlOiAnRGVwcmVjYXRpb25XYXJuaW5nJ1xuICAgIH0pO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/utils/deprecation-warning.js\n");

/***/ })

};
;