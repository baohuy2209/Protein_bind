/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/message/page",{

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.2.7_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CADMIN%5C%5COneDrive%5C%5CHi%CC%80nh%20a%CC%89nh%5C%5CTa%CC%80i%20li%C3%AA%CC%A3u%5C%5CGitHub%5C%5CProtein_bind%5C%5Cprotein-bind-website%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4014.2.7_react-dom%4018.3.1_react%4018.3.1__react%4018.3.1%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cshared%5C%5Clib%5C%5Clazy-dynamic%5C%5Cdynamic-bailout-to-csr.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CADMIN%5C%5COneDrive%5C%5CHi%CC%80nh%20a%CC%89nh%5C%5CTa%CC%80i%20li%C3%AA%CC%A3u%5C%5CGitHub%5C%5CProtein_bind%5C%5Cprotein-bind-website%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4014.2.7_react-dom%4018.3.1_react%4018.3.1__react%4018.3.1%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cshared%5C%5Clib%5C%5Clazy-dynamic%5C%5Cpreload-css.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CADMIN%5C%5COneDrive%5C%5CHi%CC%80nh%20a%CC%89nh%5C%5CTa%CC%80i%20li%C3%AA%CC%A3u%5C%5CGitHub%5C%5CProtein_bind%5C%5Cprotein-bind-website%5C%5Csrc%5C%5Capp%5C%5Cmessage%5C%5Cchat.jsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!":

  !*** ./node_modules/.pnpm/next@14.2.7_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CADMIN%5C%5COneDrive%5C%5CHi%CC%80nh%20a%CC%89nh%5C%5CTa%CC%80i%20li%C3%AA%CC%A3u%5C%5CGitHub%5C%5CProtein_bind%5C%5Cprotein-bind-website%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4014.2.7_react-dom%4018.3.1_react%4018.3.1__react%4018.3.1%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cshared%5C%5Clib%5C%5Clazy-dynamic%5C%5Cdynamic-bailout-to-csr.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CADMIN%5C%5COneDrive%5C%5CHi%CC%80nh%20a%CC%89nh%5C%5CTa%CC%80i%20li%C3%AA%CC%A3u%5C%5CGitHub%5C%5CProtein_bind%5C%5Cprotein-bind-website%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4014.2.7_react-dom%4018.3.1_react%4018.3.1__react%4018.3.1%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cshared%5C%5Clib%5C%5Clazy-dynamic%5C%5Cpreload-css.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CADMIN%5C%5COneDrive%5C%5CHi%CC%80nh%20a%CC%89nh%5C%5CTa%CC%80i%20li%C3%AA%CC%A3u%5C%5CGitHub%5C%5CProtein_bind%5C%5Cprotein-bind-website%5C%5Csrc%5C%5Capp%5C%5Cmessage%5C%5Cchat.jsx%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!

/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@14.2.7_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/shared/lib/lazy-dynamic/dynamic-bailout-to-csr.js */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.7_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/shared/lib/lazy-dynamic/dynamic-bailout-to-csr.js\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@14.2.7_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/shared/lib/lazy-dynamic/preload-css.js */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.7_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/shared/lib/lazy-dynamic/preload-css.js\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/message/chat.jsx */ \"(app-pages-browser)/./src/app/message/chat.jsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjIuN19yZWFjdC1kb21AMTguMy4xX3JlYWN0QDE4LjMuMV9fcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDQURNSU4lNUMlNUNPbmVEcml2ZSU1QyU1Q0hpJUNDJTgwbmglMjBhJUNDJTg5bmglNUMlNUNUYSVDQyU4MGklMjBsaSVDMyVBQSVDQyVBM3UlNUMlNUNHaXRIdWIlNUMlNUNQcm90ZWluX2JpbmQlNUMlNUNwcm90ZWluLWJpbmQtd2Vic2l0ZSU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Qy5wbnBtJTVDJTVDbmV4dCU0MDE0LjIuN19yZWFjdC1kb20lNDAxOC4zLjFfcmVhY3QlNDAxOC4zLjFfX3JlYWN0JTQwMTguMy4xJTVDJTVDbm9kZV9tb2R1bGVzJTVDJTVDbmV4dCU1QyU1Q2Rpc3QlNUMlNUNzaGFyZWQlNUMlNUNsaWIlNUMlNUNsYXp5LWR5bmFtaWMlNUMlNUNkeW5hbWljLWJhaWxvdXQtdG8tY3NyLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q0FETUlOJTVDJTVDT25lRHJpdmUlNUMlNUNIaSVDQyU4MG5oJTIwYSVDQyU4OW5oJTVDJTVDVGElQ0MlODBpJTIwbGklQzMlQUElQ0MlQTN1JTVDJTVDR2l0SHViJTVDJTVDUHJvdGVpbl9iaW5kJTVDJTVDcHJvdGVpbi1iaW5kLXdlYnNpdGUlNUMlNUNub2RlX21vZHVsZXMlNUMlNUMucG5wbSU1QyU1Q25leHQlNDAxNC4yLjdfcmVhY3QtZG9tJTQwMTguMy4xX3JlYWN0JTQwMTguMy4xX19yZWFjdCU0MDE4LjMuMSU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Q25leHQlNUMlNUNkaXN0JTVDJTVDc2hhcmVkJTVDJTVDbGliJTVDJTVDbGF6eS1keW5hbWljJTVDJTVDcHJlbG9hZC1jc3MuanMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDQURNSU4lNUMlNUNPbmVEcml2ZSU1QyU1Q0hpJUNDJTgwbmglMjBhJUNDJTg5bmglNUMlNUNUYSVDQyU4MGklMjBsaSVDMyVBQSVDQyVBM3UlNUMlNUNHaXRIdWIlNUMlNUNQcm90ZWluX2JpbmQlNUMlNUNwcm90ZWluLWJpbmQtd2Vic2l0ZSU1QyU1Q3NyYyU1QyU1Q2FwcCU1QyU1Q21lc3NhZ2UlNUMlNUNjaGF0LmpzeCUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBLG9hQUFpUztBQUNqUztBQUNBLDhZQUFzUjtBQUN0UjtBQUNBLDhLQUFnSyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvP2E5N2QiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJDOlxcXFxVc2Vyc1xcXFxBRE1JTlxcXFxPbmVEcml2ZVxcXFxIacyAbmggYcyJbmhcXFxcVGHMgGkgbGnDqsyjdVxcXFxHaXRIdWJcXFxcUHJvdGVpbl9iaW5kXFxcXHByb3RlaW4tYmluZC13ZWJzaXRlXFxcXG5vZGVfbW9kdWxlc1xcXFwucG5wbVxcXFxuZXh0QDE0LjIuN19yZWFjdC1kb21AMTguMy4xX3JlYWN0QDE4LjMuMV9fcmVhY3RAMTguMy4xXFxcXG5vZGVfbW9kdWxlc1xcXFxuZXh0XFxcXGRpc3RcXFxcc2hhcmVkXFxcXGxpYlxcXFxsYXp5LWR5bmFtaWNcXFxcZHluYW1pYy1iYWlsb3V0LXRvLWNzci5qc1wiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcQURNSU5cXFxcT25lRHJpdmVcXFxcSGnMgG5oIGHMiW5oXFxcXFRhzIBpIGxpw6rMo3VcXFxcR2l0SHViXFxcXFByb3RlaW5fYmluZFxcXFxwcm90ZWluLWJpbmQtd2Vic2l0ZVxcXFxub2RlX21vZHVsZXNcXFxcLnBucG1cXFxcbmV4dEAxNC4yLjdfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjFfX3JlYWN0QDE4LjMuMVxcXFxub2RlX21vZHVsZXNcXFxcbmV4dFxcXFxkaXN0XFxcXHNoYXJlZFxcXFxsaWJcXFxcbGF6eS1keW5hbWljXFxcXHByZWxvYWQtY3NzLmpzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJDOlxcXFxVc2Vyc1xcXFxBRE1JTlxcXFxPbmVEcml2ZVxcXFxIacyAbmggYcyJbmhcXFxcVGHMgGkgbGnDqsyjdVxcXFxHaXRIdWJcXFxcUHJvdGVpbl9iaW5kXFxcXHByb3RlaW4tYmluZC13ZWJzaXRlXFxcXHNyY1xcXFxhcHBcXFxcbWVzc2FnZVxcXFxjaGF0LmpzeFwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.2.7_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CADMIN%5C%5COneDrive%5C%5CHi%CC%80nh%20a%CC%89nh%5C%5CTa%CC%80i%20li%C3%AA%CC%A3u%5C%5CGitHub%5C%5CProtein_bind%5C%5Cprotein-bind-website%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4014.2.7_react-dom%4018.3.1_react%4018.3.1__react%4018.3.1%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cshared%5C%5Clib%5C%5Clazy-dynamic%5C%5Cdynamic-bailout-to-csr.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CADMIN%5C%5COneDrive%5C%5CHi%CC%80nh%20a%CC%89nh%5C%5CTa%CC%80i%20li%C3%AA%CC%A3u%5C%5CGitHub%5C%5CProtein_bind%5C%5Cprotein-bind-website%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4014.2.7_react-dom%4018.3.1_react%4018.3.1__react%4018.3.1%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cshared%5C%5Clib%5C%5Clazy-dynamic%5C%5Cpreload-css.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5CADMIN%5C%5COneDrive%5C%5CHi%CC%80nh%20a%CC%89nh%5C%5CTa%CC%80i%20li%C3%AA%CC%A3u%5C%5CGitHub%5C%5CProtein_bind%5C%5Cprotein-bind-website%5C%5Csrc%5C%5Capp%5C%5Cmessage%5C%5Cchat.jsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/ably@2.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/ably/build/ably.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ably@2.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/ably/build/ably.js ***!
  \*******************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/*@license Copyright 2015-2022 Ably Real-time Ltd (ably.com)\n\nAbly JavaScript Library v2.3.1\nhttps://github.com/ably/ably-js\n\nReleased under the Apache Licence v2.0*/(function (g, f) {\n    if (true) {\n      module.exports = f();\n    } else {}\n  }(this, () => {\nvar exports = {};\nvar module = { exports };\n\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/platform/web/index.ts\nvar web_exports = {};\n__export(web_exports, {\n  ErrorInfo: () => ErrorInfo,\n  Realtime: () => DefaultRealtime,\n  Rest: () => DefaultRest,\n  default: () => web_default,\n  msgpack: () => msgpack_default,\n  protocolMessageFromDeserialized: () => fromDeserializedIncludingDependencies\n});\nmodule.exports = __toCommonJS(web_exports);\n\n// src/common/platform.ts\nvar Platform = class {\n};\n\n// src/common/lib/util/logger.ts\nvar globalObject = typeof __webpack_require__.g !== \"undefined\" ? __webpack_require__.g : typeof window !== \"undefined\" ? window : self;\nfunction pad(timeSegment, three) {\n  return `${timeSegment}`.padStart(three ? 3 : 2, \"0\");\n}\nfunction getHandler(logger) {\n  return Platform.Config.logTimestamps ? function(msg) {\n    const time = /* @__PURE__ */ new Date();\n    logger(\n      pad(time.getHours()) + \":\" + pad(time.getMinutes()) + \":\" + pad(time.getSeconds()) + \".\" + pad(time.getMilliseconds(), 1) + \" \" + msg\n    );\n  } : function(msg) {\n    logger(msg);\n  };\n}\nvar getDefaultLoggers = () => {\n  var _a2;\n  let consoleLogger;\n  let errorLogger;\n  if (typeof ((_a2 = globalObject == null ? void 0 : globalObject.console) == null ? void 0 : _a2.log) === \"function\") {\n    consoleLogger = function(...args) {\n      console.log.apply(console, args);\n    };\n    errorLogger = console.warn ? function(...args) {\n      console.warn.apply(console, args);\n    } : consoleLogger;\n  } else {\n    consoleLogger = errorLogger = function() {\n    };\n  }\n  return [consoleLogger, errorLogger].map(getHandler);\n};\nvar _Logger = class _Logger {\n  constructor() {\n    this.deprecated = (description, msg) => {\n      this.deprecationWarning(`${description} is deprecated and will be removed in a future version. ${msg}`);\n    };\n    /* Where a logging operation is expensive, such as serialisation of data, use shouldLog will prevent\n      the object being serialised if the log level will not output the message */\n    this.shouldLog = (level) => {\n      return level <= this.logLevel;\n    };\n    this.setLog = (level, handler) => {\n      if (level !== void 0)\n        this.logLevel = level;\n      if (handler !== void 0)\n        this.logHandler = this.logErrorHandler = handler;\n    };\n    this.logLevel = _Logger.defaultLogLevel;\n    this.logHandler = _Logger.defaultLogHandler;\n    this.logErrorHandler = _Logger.defaultLogErrorHandler;\n  }\n  static initLogHandlers() {\n    const [logHandler, logErrorHandler] = getDefaultLoggers();\n    this.defaultLogHandler = logHandler;\n    this.defaultLogErrorHandler = logErrorHandler;\n    this.defaultLogger = new _Logger();\n  }\n  /**\n   * Calls to this method are never stripped by the `stripLogs` esbuild plugin. Use it for log statements that you wish to always be included in the modular variant of the SDK.\n   */\n  static logActionNoStrip(logger, level, action, message) {\n    logger.logAction(level, action, message);\n  }\n  logAction(level, action, message) {\n    if (this.shouldLog(level)) {\n      (level === 1 /* Error */ ? this.logErrorHandler : this.logHandler)(\"Ably: \" + action + \": \" + message, level);\n    }\n  }\n  renamedClientOption(oldName, newName) {\n    this.deprecationWarning(\n      `The \\`${oldName}\\` client option has been renamed to \\`${newName}\\`. Please update your code to use \\`${newName}\\` instead. \\`${oldName}\\` will be removed in a future version.`\n    );\n  }\n  renamedMethod(className, oldName, newName) {\n    this.deprecationWarning(\n      `\\`${className}\\`\\u2019s \\`${oldName}\\` method has been renamed to \\`${newName}\\`. Please update your code to use \\`${newName}\\` instead. \\`${oldName}\\` will be removed in a future version.`\n    );\n  }\n  deprecationWarning(message) {\n    if (this.shouldLog(1 /* Error */)) {\n      this.logErrorHandler(`Ably: Deprecation warning - ${message}`, 1 /* Error */);\n    }\n  }\n};\n_Logger.defaultLogLevel = 1 /* Error */;\n// public constants\n_Logger.LOG_NONE = 0 /* None */;\n_Logger.LOG_ERROR = 1 /* Error */;\n_Logger.LOG_MAJOR = 2 /* Major */;\n_Logger.LOG_MINOR = 3 /* Minor */;\n_Logger.LOG_MICRO = 4 /* Micro */;\n/* public static functions */\n/**\n * In the modular variant of the SDK, the `stripLogs` esbuild plugin strips out all calls to this method (when invoked as `Logger.logAction(...)`) except when called with level `Logger.LOG_ERROR`. If you wish for a log statement to never be stripped, use the {@link logActionNoStrip} method instead.\n *\n * The aforementioned plugin expects `level` to be an expression of the form `Logger.LOG_*`; that is, you can’t dynamically specify the log level.\n */\n_Logger.logAction = (logger, level, action, message) => {\n  _Logger.logActionNoStrip(logger, level, action, message);\n};\nvar Logger = _Logger;\nvar logger_default = Logger;\n\n// src/common/lib/util/utils.ts\nvar utils_exports = {};\n__export(utils_exports, {\n  Format: () => Format,\n  allSame: () => allSame,\n  allToLowerCase: () => allToLowerCase,\n  allToUpperCase: () => allToUpperCase,\n  arrChooseN: () => arrChooseN,\n  arrDeleteValue: () => arrDeleteValue,\n  arrEquals: () => arrEquals,\n  arrIntersect: () => arrIntersect,\n  arrIntersectOb: () => arrIntersectOb,\n  arrPopRandomElement: () => arrPopRandomElement,\n  arrSubtract: () => arrSubtract,\n  arrWithoutValue: () => arrWithoutValue,\n  cheapRandStr: () => cheapRandStr,\n  containsValue: () => containsValue,\n  copy: () => copy,\n  createMissingPluginError: () => createMissingPluginError,\n  dataSizeBytes: () => dataSizeBytes,\n  decodeBody: () => decodeBody,\n  encodeBody: () => encodeBody,\n  ensureArray: () => ensureArray,\n  forInOwnNonNullProperties: () => forInOwnNonNullProperties,\n  getBackoffCoefficient: () => getBackoffCoefficient,\n  getGlobalObject: () => getGlobalObject,\n  getJitterCoefficient: () => getJitterCoefficient,\n  getRetryTime: () => getRetryTime,\n  inherits: () => inherits,\n  inspectBody: () => inspectBody,\n  inspectError: () => inspectError,\n  intersect: () => intersect,\n  isEmpty: () => isEmpty,\n  isErrorInfoOrPartialErrorInfo: () => isErrorInfoOrPartialErrorInfo,\n  isNil: () => isNil,\n  isObject: () => isObject,\n  keysArray: () => keysArray,\n  matchDerivedChannel: () => matchDerivedChannel,\n  mixin: () => mixin,\n  parseQueryString: () => parseQueryString,\n  prototypicalClone: () => prototypicalClone,\n  randomString: () => randomString,\n  shallowClone: () => shallowClone,\n  shallowEquals: () => shallowEquals,\n  throwMissingPluginError: () => throwMissingPluginError,\n  toBase64: () => toBase64,\n  toQueryString: () => toQueryString,\n  valuesArray: () => valuesArray,\n  whenPromiseSettles: () => whenPromiseSettles,\n  withTimeoutAsync: () => withTimeoutAsync\n});\n\n// src/common/lib/types/errorinfo.ts\nfunction toString(err) {\n  let result = \"[\" + err.constructor.name;\n  if (err.message)\n    result += \": \" + err.message;\n  if (err.statusCode)\n    result += \"; statusCode=\" + err.statusCode;\n  if (err.code)\n    result += \"; code=\" + err.code;\n  if (err.cause)\n    result += \"; cause=\" + inspectError(err.cause);\n  if (err.href && !(err.message && err.message.indexOf(\"help.ably.io\") > -1))\n    result += \"; see \" + err.href + \" \";\n  result += \"]\";\n  return result;\n}\nvar ErrorInfo = class _ErrorInfo extends Error {\n  constructor(message, code, statusCode, cause) {\n    super(message);\n    if (typeof Object.setPrototypeOf !== \"undefined\") {\n      Object.setPrototypeOf(this, _ErrorInfo.prototype);\n    }\n    this.code = code;\n    this.statusCode = statusCode;\n    this.cause = cause;\n  }\n  toString() {\n    return toString(this);\n  }\n  static fromValues(values) {\n    const { message, code, statusCode } = values;\n    if (typeof message !== \"string\" || typeof code !== \"number\" || typeof statusCode !== \"number\") {\n      throw new Error(\"ErrorInfo.fromValues(): invalid values: \" + Platform.Config.inspect(values));\n    }\n    const result = Object.assign(new _ErrorInfo(message, code, statusCode), values);\n    if (result.code && !result.href) {\n      result.href = \"https://help.ably.io/error/\" + result.code;\n    }\n    return result;\n  }\n};\nvar PartialErrorInfo = class _PartialErrorInfo extends Error {\n  constructor(message, code, statusCode, cause) {\n    super(message);\n    if (typeof Object.setPrototypeOf !== \"undefined\") {\n      Object.setPrototypeOf(this, _PartialErrorInfo.prototype);\n    }\n    this.code = code;\n    this.statusCode = statusCode;\n    this.cause = cause;\n  }\n  toString() {\n    return toString(this);\n  }\n  static fromValues(values) {\n    const { message, code, statusCode } = values;\n    if (typeof message !== \"string\" || !isNil(code) && typeof code !== \"number\" || !isNil(statusCode) && typeof statusCode !== \"number\") {\n      throw new Error(\"PartialErrorInfo.fromValues(): invalid values: \" + Platform.Config.inspect(values));\n    }\n    const result = Object.assign(new _PartialErrorInfo(message, code, statusCode), values);\n    if (result.code && !result.href) {\n      result.href = \"https://help.ably.io/error/\" + result.code;\n    }\n    return result;\n  }\n};\n\n// src/common/lib/util/utils.ts\nfunction randomPosn(arrOrStr) {\n  return Math.floor(Math.random() * arrOrStr.length);\n}\nfunction mixin(target, ...args) {\n  for (let i = 0; i < args.length; i++) {\n    const source = args[i];\n    if (!source) {\n      break;\n    }\n    for (const key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n}\nfunction copy(src) {\n  return mixin({}, src);\n}\nfunction ensureArray(obj) {\n  if (isNil(obj)) {\n    return [];\n  }\n  if (Array.isArray(obj)) {\n    return obj;\n  }\n  return [obj];\n}\nfunction isObject(ob) {\n  return Object.prototype.toString.call(ob) == \"[object Object]\";\n}\nfunction isEmpty(ob) {\n  for (const prop in ob)\n    return false;\n  return true;\n}\nfunction isNil(arg) {\n  return arg == null;\n}\nfunction shallowClone(ob) {\n  const result = new Object();\n  for (const prop in ob)\n    result[prop] = ob[prop];\n  return result;\n}\nfunction prototypicalClone(ob, ownProperties) {\n  class F {\n  }\n  F.prototype = ob;\n  const result = new F();\n  if (ownProperties)\n    mixin(result, ownProperties);\n  return result;\n}\nvar inherits = function(ctor, superCtor) {\n  if (Platform.Config.inherits) {\n    Platform.Config.inherits(ctor, superCtor);\n    return;\n  }\n  ctor.super_ = superCtor;\n  ctor.prototype = prototypicalClone(superCtor.prototype, { constructor: ctor });\n};\nfunction containsValue(ob, val) {\n  for (const i in ob) {\n    if (ob[i] == val)\n      return true;\n  }\n  return false;\n}\nfunction intersect(arr, ob) {\n  return Array.isArray(ob) ? arrIntersect(arr, ob) : arrIntersectOb(arr, ob);\n}\nfunction arrIntersect(arr1, arr2) {\n  const result = [];\n  for (let i = 0; i < arr1.length; i++) {\n    const member = arr1[i];\n    if (arr2.indexOf(member) != -1)\n      result.push(member);\n  }\n  return result;\n}\nfunction arrIntersectOb(arr, ob) {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const member = arr[i];\n    if (member in ob)\n      result.push(member);\n  }\n  return result;\n}\nfunction arrSubtract(arr1, arr2) {\n  const result = [];\n  for (let i = 0; i < arr1.length; i++) {\n    const element = arr1[i];\n    if (arr2.indexOf(element) == -1)\n      result.push(element);\n  }\n  return result;\n}\nfunction arrDeleteValue(arr, val) {\n  const idx = arr.indexOf(val);\n  const res = idx != -1;\n  if (res)\n    arr.splice(idx, 1);\n  return res;\n}\nfunction arrWithoutValue(arr, val) {\n  const newArr = arr.slice();\n  arrDeleteValue(newArr, val);\n  return newArr;\n}\nfunction keysArray(ob, ownOnly) {\n  const result = [];\n  for (const prop in ob) {\n    if (ownOnly && !Object.prototype.hasOwnProperty.call(ob, prop))\n      continue;\n    result.push(prop);\n  }\n  return result;\n}\nfunction valuesArray(ob, ownOnly) {\n  const result = [];\n  for (const prop in ob) {\n    if (ownOnly && !Object.prototype.hasOwnProperty.call(ob, prop))\n      continue;\n    result.push(ob[prop]);\n  }\n  return result;\n}\nfunction forInOwnNonNullProperties(ob, fn) {\n  for (const prop in ob) {\n    if (Object.prototype.hasOwnProperty.call(ob, prop) && ob[prop]) {\n      fn(prop);\n    }\n  }\n}\nfunction allSame(arr, prop) {\n  if (arr.length === 0) {\n    return true;\n  }\n  const first = arr[0][prop];\n  return arr.every(function(item) {\n    return item[prop] === first;\n  });\n}\nvar Format = /* @__PURE__ */ ((Format2) => {\n  Format2[\"msgpack\"] = \"msgpack\";\n  Format2[\"json\"] = \"json\";\n  return Format2;\n})(Format || {});\nfunction arrPopRandomElement(arr) {\n  return arr.splice(randomPosn(arr), 1)[0];\n}\nfunction toQueryString(params) {\n  const parts = [];\n  if (params) {\n    for (const key in params)\n      parts.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]));\n  }\n  return parts.length ? \"?\" + parts.join(\"&\") : \"\";\n}\nfunction parseQueryString(query) {\n  let match;\n  const search = /([^?&=]+)=?([^&]*)/g;\n  const result = {};\n  while (match = search.exec(query))\n    result[decodeURIComponent(match[1])] = decodeURIComponent(match[2]);\n  return result;\n}\nfunction isErrorInfoOrPartialErrorInfo(err) {\n  return typeof err == \"object\" && err !== null && (err instanceof ErrorInfo || err instanceof PartialErrorInfo);\n}\nfunction inspectError(err) {\n  var _a2, _b;\n  if (err instanceof Error || ((_a2 = err == null ? void 0 : err.constructor) == null ? void 0 : _a2.name) === \"ErrorInfo\" || ((_b = err == null ? void 0 : err.constructor) == null ? void 0 : _b.name) === \"PartialErrorInfo\")\n    return err.toString();\n  return Platform.Config.inspect(err);\n}\nfunction inspectBody(body) {\n  if (Platform.BufferUtils.isBuffer(body)) {\n    return body.toString();\n  } else if (typeof body === \"string\") {\n    return body;\n  } else {\n    return Platform.Config.inspect(body);\n  }\n}\nfunction dataSizeBytes(data) {\n  if (Platform.BufferUtils.isBuffer(data)) {\n    return Platform.BufferUtils.byteLength(data);\n  }\n  if (typeof data === \"string\") {\n    return Platform.Config.stringByteSize(data);\n  }\n  throw new Error(\"Expected input of Utils.dataSizeBytes to be a buffer or string, but was: \" + typeof data);\n}\nfunction cheapRandStr() {\n  return String(Math.random()).substr(2);\n}\nvar randomString = async (numBytes) => {\n  const buffer = await Platform.Config.getRandomArrayBuffer(numBytes);\n  return Platform.BufferUtils.base64Encode(buffer);\n};\nfunction arrChooseN(arr, n2) {\n  const numItems = Math.min(n2, arr.length), mutableArr = arr.slice(), result = [];\n  for (let i = 0; i < numItems; i++) {\n    result.push(arrPopRandomElement(mutableArr));\n  }\n  return result;\n}\nfunction whenPromiseSettles(promise, callback) {\n  promise.then((result) => {\n    callback == null ? void 0 : callback(null, result);\n  }).catch((err) => {\n    callback == null ? void 0 : callback(err);\n  });\n}\nfunction decodeBody(body, MsgPack, format) {\n  if (format == \"msgpack\") {\n    if (!MsgPack) {\n      throwMissingPluginError(\"MsgPack\");\n    }\n    return MsgPack.decode(body);\n  }\n  return JSON.parse(String(body));\n}\nfunction encodeBody(body, MsgPack, format) {\n  if (format == \"msgpack\") {\n    if (!MsgPack) {\n      throwMissingPluginError(\"MsgPack\");\n    }\n    return MsgPack.encode(body, true);\n  }\n  return JSON.stringify(body);\n}\nfunction allToLowerCase(arr) {\n  return arr.map(function(element) {\n    return element && element.toLowerCase();\n  });\n}\nfunction allToUpperCase(arr) {\n  return arr.map(function(element) {\n    return element && element.toUpperCase();\n  });\n}\nfunction getBackoffCoefficient(count) {\n  return Math.min((count + 2) / 3, 2);\n}\nfunction getJitterCoefficient() {\n  return 1 - Math.random() * 0.2;\n}\nfunction getRetryTime(initialTimeout, retryAttempt) {\n  return initialTimeout * getBackoffCoefficient(retryAttempt) * getJitterCoefficient();\n}\nfunction getGlobalObject() {\n  if (typeof __webpack_require__.g !== \"undefined\") {\n    return __webpack_require__.g;\n  }\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n  return self;\n}\nfunction shallowEquals(source, target) {\n  return Object.keys(source).every((key) => source[key] === target[key]) && Object.keys(target).every((key) => target[key] === source[key]);\n}\nfunction matchDerivedChannel(name) {\n  const regex = /^(\\[([^?]*)(?:(.*))\\])?(.+)$/;\n  const match = name.match(regex);\n  if (!match || !match.length || match.length < 5) {\n    throw new ErrorInfo(\"regex match failed\", 400, 40010);\n  }\n  if (match[2]) {\n    throw new ErrorInfo(`cannot use a derived option with a ${match[2]} channel`, 400, 40010);\n  }\n  return {\n    qualifierParam: match[3] || \"\",\n    channelName: match[4]\n  };\n}\nfunction toBase64(str) {\n  const bufferUtils = Platform.BufferUtils;\n  const textBuffer = bufferUtils.utf8Encode(str);\n  return bufferUtils.base64Encode(textBuffer);\n}\nfunction arrEquals(a, b) {\n  return a.length === b.length && a.every(function(val, i) {\n    return val === b[i];\n  });\n}\nfunction createMissingPluginError(pluginName) {\n  return new ErrorInfo(`${pluginName} plugin not provided`, 40019, 400);\n}\nfunction throwMissingPluginError(pluginName) {\n  throw createMissingPluginError(pluginName);\n}\nasync function withTimeoutAsync(promise, timeout = 5e3, err = \"Timeout expired\") {\n  const e = new ErrorInfo(err, 5e4, 500);\n  return Promise.race([promise, new Promise((_resolve, reject) => setTimeout(() => reject(e), timeout))]);\n}\n\n// package.json\nvar version = \"2.3.1\";\n\n// src/common/lib/util/defaults.ts\nvar agent = \"ably-js/\" + version;\nvar Defaults = {\n  ENVIRONMENT: \"\",\n  REST_HOST: \"rest.ably.io\",\n  REALTIME_HOST: \"realtime.ably.io\",\n  FALLBACK_HOSTS: [\n    \"A.ably-realtime.com\",\n    \"B.ably-realtime.com\",\n    \"C.ably-realtime.com\",\n    \"D.ably-realtime.com\",\n    \"E.ably-realtime.com\"\n  ],\n  PORT: 80,\n  TLS_PORT: 443,\n  TIMEOUTS: {\n    /* Documented as options params: */\n    disconnectedRetryTimeout: 15e3,\n    suspendedRetryTimeout: 3e4,\n    /* Undocumented, but part of the api and can be used by customers: */\n    httpRequestTimeout: 1e4,\n    httpMaxRetryDuration: 15e3,\n    channelRetryTimeout: 15e3,\n    fallbackRetryTimeout: 6e5,\n    /* For internal / test use only: */\n    connectionStateTtl: 12e4,\n    realtimeRequestTimeout: 1e4,\n    recvTimeout: 9e4,\n    webSocketConnectTimeout: 1e4,\n    webSocketSlowTimeout: 4e3\n  },\n  httpMaxRetryCount: 3,\n  maxMessageSize: 65536,\n  version,\n  protocolVersion: 3,\n  agent,\n  getHost,\n  getPort,\n  getHttpScheme,\n  environmentFallbackHosts,\n  getFallbackHosts,\n  getHosts,\n  checkHost,\n  objectifyOptions,\n  normaliseOptions,\n  defaultGetHeaders,\n  defaultPostHeaders\n};\nfunction getHost(options, host, ws) {\n  if (ws)\n    host = host == options.restHost && options.realtimeHost || host || options.realtimeHost;\n  else\n    host = host || options.restHost;\n  return host;\n}\nfunction getPort(options, tls) {\n  return tls || options.tls ? options.tlsPort : options.port;\n}\nfunction getHttpScheme(options) {\n  return options.tls ? \"https://\" : \"http://\";\n}\nfunction environmentFallbackHosts(environment) {\n  return [\n    environment + \"-a-fallback.ably-realtime.com\",\n    environment + \"-b-fallback.ably-realtime.com\",\n    environment + \"-c-fallback.ably-realtime.com\",\n    environment + \"-d-fallback.ably-realtime.com\",\n    environment + \"-e-fallback.ably-realtime.com\"\n  ];\n}\nfunction getFallbackHosts(options) {\n  const fallbackHosts = options.fallbackHosts, httpMaxRetryCount = typeof options.httpMaxRetryCount !== \"undefined\" ? options.httpMaxRetryCount : Defaults.httpMaxRetryCount;\n  return fallbackHosts ? arrChooseN(fallbackHosts, httpMaxRetryCount) : [];\n}\nfunction getHosts(options, ws) {\n  const hosts = [options.restHost].concat(getFallbackHosts(options));\n  return ws ? hosts.map((host) => getHost(options, host, true)) : hosts;\n}\nfunction checkHost(host) {\n  if (typeof host !== \"string\") {\n    throw new ErrorInfo(\"host must be a string; was a \" + typeof host, 4e4, 400);\n  }\n  if (!host.length) {\n    throw new ErrorInfo(\"host must not be zero-length\", 4e4, 400);\n  }\n}\nfunction getRealtimeHost(options, production, environment, logger) {\n  if (options.realtimeHost)\n    return options.realtimeHost;\n  if (options.restHost) {\n    logger_default.logAction(\n      logger,\n      logger_default.LOG_MINOR,\n      \"Defaults.normaliseOptions\",\n      'restHost is set to \"' + options.restHost + '\" but realtimeHost is not set, so setting realtimeHost to \"' + options.restHost + '\" too. If this is not what you want, please set realtimeHost explicitly.'\n    );\n    return options.restHost;\n  }\n  return production ? Defaults.REALTIME_HOST : environment + \"-\" + Defaults.REALTIME_HOST;\n}\nfunction getTimeouts(options) {\n  const timeouts = {};\n  for (const prop in Defaults.TIMEOUTS) {\n    timeouts[prop] = options[prop] || Defaults.TIMEOUTS[prop];\n  }\n  return timeouts;\n}\nfunction getAgentString(options) {\n  let agentStr = Defaults.agent;\n  if (options.agents) {\n    for (var agent2 in options.agents) {\n      agentStr += \" \" + agent2 + \"/\" + options.agents[agent2];\n    }\n  }\n  return agentStr;\n}\nfunction objectifyOptions(options, allowKeyOrToken, sourceForErrorMessage, logger, modularPluginsToInclude) {\n  if (options === void 0) {\n    const msg = allowKeyOrToken ? `${sourceForErrorMessage} must be initialized with either a client options object, an Ably API key, or an Ably Token` : `${sourceForErrorMessage} must be initialized with a client options object`;\n    logger_default.logAction(logger, logger_default.LOG_ERROR, `${sourceForErrorMessage}()`, msg);\n    throw new Error(msg);\n  }\n  let optionsObj;\n  if (typeof options === \"string\") {\n    if (options.indexOf(\":\") == -1) {\n      if (!allowKeyOrToken) {\n        const msg = `${sourceForErrorMessage} cannot be initialized with just an Ably Token; you must provide a client options object with a \\`plugins\\` property. (Set this Ably Token as the object\\u2019s \\`token\\` property.)`;\n        logger_default.logAction(logger, logger_default.LOG_ERROR, `${sourceForErrorMessage}()`, msg);\n        throw new Error(msg);\n      }\n      optionsObj = { token: options };\n    } else {\n      if (!allowKeyOrToken) {\n        const msg = `${sourceForErrorMessage} cannot be initialized with just an Ably API key; you must provide a client options object with a \\`plugins\\` property. (Set this Ably API key as the object\\u2019s \\`key\\` property.)`;\n        logger_default.logAction(logger, logger_default.LOG_ERROR, `${sourceForErrorMessage}()`, msg);\n        throw new Error(msg);\n      }\n      optionsObj = { key: options };\n    }\n  } else {\n    optionsObj = options;\n  }\n  if (modularPluginsToInclude) {\n    optionsObj = __spreadProps(__spreadValues({}, optionsObj), { plugins: __spreadValues(__spreadValues({}, modularPluginsToInclude), optionsObj.plugins) });\n  }\n  return optionsObj;\n}\nfunction normaliseOptions(options, MsgPack, logger) {\n  const loggerToUse = logger != null ? logger : logger_default.defaultLogger;\n  if (typeof options.recover === \"function\" && options.closeOnUnload === true) {\n    logger_default.logAction(\n      loggerToUse,\n      logger_default.LOG_ERROR,\n      \"Defaults.normaliseOptions\",\n      \"closeOnUnload was true and a session recovery function was set - these are mutually exclusive, so unsetting the latter\"\n    );\n    options.recover = void 0;\n  }\n  if (!(\"closeOnUnload\" in options)) {\n    options.closeOnUnload = !options.recover;\n  }\n  if (!(\"queueMessages\" in options))\n    options.queueMessages = true;\n  const environment = options.environment && String(options.environment).toLowerCase() || Defaults.ENVIRONMENT;\n  const production = !environment || environment === \"production\";\n  if (!options.fallbackHosts && !options.restHost && !options.realtimeHost && !options.port && !options.tlsPort) {\n    options.fallbackHosts = production ? Defaults.FALLBACK_HOSTS : environmentFallbackHosts(environment);\n  }\n  const restHost = options.restHost || (production ? Defaults.REST_HOST : environment + \"-\" + Defaults.REST_HOST);\n  const realtimeHost = getRealtimeHost(options, production, environment, loggerToUse);\n  (options.fallbackHosts || []).concat(restHost, realtimeHost).forEach(checkHost);\n  options.port = options.port || Defaults.PORT;\n  options.tlsPort = options.tlsPort || Defaults.TLS_PORT;\n  if (!(\"tls\" in options))\n    options.tls = true;\n  const timeouts = getTimeouts(options);\n  if (MsgPack) {\n    if (\"useBinaryProtocol\" in options) {\n      options.useBinaryProtocol = Platform.Config.supportsBinary && options.useBinaryProtocol;\n    } else {\n      options.useBinaryProtocol = Platform.Config.preferBinary;\n    }\n  } else {\n    options.useBinaryProtocol = false;\n  }\n  const headers = {};\n  if (options.clientId) {\n    headers[\"X-Ably-ClientId\"] = Platform.BufferUtils.base64Encode(Platform.BufferUtils.utf8Encode(options.clientId));\n  }\n  if (!(\"idempotentRestPublishing\" in options)) {\n    options.idempotentRestPublishing = true;\n  }\n  let connectivityCheckParams = null;\n  let connectivityCheckUrl = options.connectivityCheckUrl;\n  if (options.connectivityCheckUrl) {\n    let [uri, qs] = options.connectivityCheckUrl.split(\"?\");\n    connectivityCheckParams = qs ? parseQueryString(qs) : {};\n    if (uri.indexOf(\"://\") === -1) {\n      uri = \"https://\" + uri;\n    }\n    connectivityCheckUrl = uri;\n  }\n  return __spreadProps(__spreadValues({}, options), {\n    realtimeHost,\n    restHost,\n    maxMessageSize: options.maxMessageSize || Defaults.maxMessageSize,\n    timeouts,\n    connectivityCheckParams,\n    connectivityCheckUrl,\n    headers\n  });\n}\nfunction normaliseChannelOptions(Crypto2, logger, options) {\n  const channelOptions = options || {};\n  if (channelOptions.cipher) {\n    if (!Crypto2)\n      throwMissingPluginError(\"Crypto\");\n    const cipher = Crypto2.getCipher(channelOptions.cipher, logger);\n    channelOptions.cipher = cipher.cipherParams;\n    channelOptions.channelCipher = cipher.cipher;\n  } else if (\"cipher\" in channelOptions) {\n    channelOptions.cipher = void 0;\n    channelOptions.channelCipher = null;\n  }\n  return channelOptions;\n}\nvar contentTypes = {\n  json: \"application/json\",\n  xml: \"application/xml\",\n  html: \"text/html\",\n  msgpack: \"application/x-msgpack\",\n  text: \"text/plain\"\n};\nvar defaultHeadersOptions = {\n  format: \"json\" /* json */,\n  protocolVersion: Defaults.protocolVersion\n};\nfunction defaultGetHeaders(options, {\n  format = defaultHeadersOptions.format,\n  protocolVersion = defaultHeadersOptions.protocolVersion\n} = {}) {\n  const accept = contentTypes[format];\n  return {\n    accept,\n    \"X-Ably-Version\": protocolVersion.toString(),\n    \"Ably-Agent\": getAgentString(options)\n  };\n}\nfunction defaultPostHeaders(options, {\n  format = defaultHeadersOptions.format,\n  protocolVersion = defaultHeadersOptions.protocolVersion\n} = {}) {\n  let contentType;\n  const accept = contentType = contentTypes[format];\n  return {\n    accept,\n    \"content-type\": contentType,\n    \"X-Ably-Version\": protocolVersion.toString(),\n    \"Ably-Agent\": getAgentString(options)\n  };\n}\nvar defaults_default = Defaults;\nfunction getDefaults(platformDefaults) {\n  return Object.assign(Defaults, platformDefaults);\n}\n\n// src/common/lib/util/multicaster.ts\nvar Multicaster = class _Multicaster {\n  // Private constructor; use static Multicaster.create instead\n  constructor(logger, members) {\n    this.logger = logger;\n    this.members = members || [];\n  }\n  call(err, result) {\n    for (const member of this.members) {\n      if (member) {\n        try {\n          member(err, result);\n        } catch (e) {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_ERROR,\n            \"Multicaster multiple callback handler\",\n            \"Unexpected exception: \" + e + \"; stack = \" + e.stack\n          );\n        }\n      }\n    }\n  }\n  push(...args) {\n    this.members.push(...args);\n  }\n  createPromise() {\n    return new Promise((resolve, reject) => {\n      this.push((err, result) => {\n        err ? reject(err) : resolve(result);\n      });\n    });\n  }\n  resolveAll(result) {\n    this.call(null, result);\n  }\n  rejectAll(err) {\n    this.call(err);\n  }\n  static create(logger, members) {\n    const instance = new _Multicaster(logger, members);\n    return Object.assign((err, result) => instance.call(err, result), {\n      push: (fn) => instance.push(fn),\n      createPromise: () => instance.createPromise(),\n      resolveAll: (result) => instance.resolveAll(result),\n      rejectAll: (err) => instance.rejectAll(err)\n    });\n  }\n};\nvar multicaster_default = Multicaster;\n\n// src/common/constants/HttpMethods.ts\nvar HttpMethods = /* @__PURE__ */ ((HttpMethods2) => {\n  HttpMethods2[\"Get\"] = \"get\";\n  HttpMethods2[\"Delete\"] = \"delete\";\n  HttpMethods2[\"Post\"] = \"post\";\n  HttpMethods2[\"Put\"] = \"put\";\n  HttpMethods2[\"Patch\"] = \"patch\";\n  return HttpMethods2;\n})(HttpMethods || {});\nvar HttpMethods_default = HttpMethods;\n\n// src/common/constants/HttpStatusCodes.ts\nvar HttpStatusCodes = /* @__PURE__ */ ((HttpStatusCodes2) => {\n  HttpStatusCodes2[HttpStatusCodes2[\"Success\"] = 200] = \"Success\";\n  HttpStatusCodes2[HttpStatusCodes2[\"NoContent\"] = 204] = \"NoContent\";\n  HttpStatusCodes2[HttpStatusCodes2[\"BadRequest\"] = 400] = \"BadRequest\";\n  HttpStatusCodes2[HttpStatusCodes2[\"Unauthorized\"] = 401] = \"Unauthorized\";\n  HttpStatusCodes2[HttpStatusCodes2[\"Forbidden\"] = 403] = \"Forbidden\";\n  HttpStatusCodes2[HttpStatusCodes2[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n  HttpStatusCodes2[HttpStatusCodes2[\"InternalServerError\"] = 500] = \"InternalServerError\";\n  return HttpStatusCodes2;\n})(HttpStatusCodes || {});\nfunction isSuccessCode(statusCode) {\n  return statusCode >= 200 /* Success */ && statusCode < 400 /* BadRequest */;\n}\nvar HttpStatusCodes_default = HttpStatusCodes;\n\n// src/common/lib/client/auth.ts\nvar MAX_TOKEN_LENGTH = Math.pow(2, 17);\nfunction random() {\n  return (\"000000\" + Math.floor(Math.random() * 1e16)).slice(-16);\n}\nfunction isRealtime(client) {\n  return !!client.connection;\n}\nfunction normaliseAuthcallbackError(err) {\n  if (!isErrorInfoOrPartialErrorInfo(err)) {\n    return new ErrorInfo(inspectError(err), err.code || 40170, err.statusCode || 401);\n  }\n  if (!err.code) {\n    if (err.statusCode === 403) {\n      err.code = 40300;\n    } else {\n      err.code = 40170;\n      err.statusCode = 401;\n    }\n  }\n  return err;\n}\nvar hmac = (text, key) => {\n  const bufferUtils = Platform.BufferUtils;\n  const textBuffer = bufferUtils.utf8Encode(text);\n  const keyBuffer = bufferUtils.utf8Encode(key);\n  const digest = bufferUtils.hmacSha256(textBuffer, keyBuffer);\n  return bufferUtils.base64Encode(digest);\n};\nfunction c14n(capability) {\n  if (!capability)\n    return \"\";\n  if (typeof capability == \"string\")\n    capability = JSON.parse(capability);\n  const c14nCapability = /* @__PURE__ */ Object.create(null);\n  const keys = keysArray(capability, true);\n  if (!keys)\n    return \"\";\n  keys.sort();\n  for (let i = 0; i < keys.length; i++) {\n    c14nCapability[keys[i]] = capability[keys[i]].sort();\n  }\n  return JSON.stringify(c14nCapability);\n}\nfunction logAndValidateTokenAuthMethod(authOptions, logger) {\n  if (authOptions.authCallback) {\n    logger_default.logAction(logger, logger_default.LOG_MINOR, \"Auth()\", \"using token auth with authCallback\");\n  } else if (authOptions.authUrl) {\n    logger_default.logAction(logger, logger_default.LOG_MINOR, \"Auth()\", \"using token auth with authUrl\");\n  } else if (authOptions.key) {\n    logger_default.logAction(logger, logger_default.LOG_MINOR, \"Auth()\", \"using token auth with client-side signing\");\n  } else if (authOptions.tokenDetails) {\n    logger_default.logAction(logger, logger_default.LOG_MINOR, \"Auth()\", \"using token auth with supplied token only\");\n  } else {\n    const msg = \"authOptions must include valid authentication parameters\";\n    logger_default.logAction(logger, logger_default.LOG_ERROR, \"Auth()\", msg);\n    throw new Error(msg);\n  }\n}\nfunction basicAuthForced(options) {\n  return \"useTokenAuth\" in options && !options.useTokenAuth;\n}\nfunction useTokenAuth(options) {\n  return options.useTokenAuth || !basicAuthForced(options) && (options.authCallback || options.authUrl || options.token || options.tokenDetails);\n}\nfunction noWayToRenew(options) {\n  return !options.key && !options.authCallback && !options.authUrl;\n}\nvar trId = 0;\nfunction getTokenRequestId() {\n  return trId++;\n}\nvar Auth = class {\n  constructor(client, options) {\n    // This initialization is always overwritten and only used to prevent a TypeScript compiler error\n    this.authOptions = {};\n    this.client = client;\n    this.tokenParams = options.defaultTokenParams || {};\n    this.currentTokenRequestId = null;\n    this.waitingForTokenRequest = null;\n    if (useTokenAuth(options)) {\n      if (noWayToRenew(options)) {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_ERROR,\n          \"Auth()\",\n          \"Warning: library initialized with a token literal without any way to renew the token when it expires (no authUrl, authCallback, or key). See https://help.ably.io/error/40171 for help\"\n        );\n      }\n      this._saveTokenOptions(options.defaultTokenParams, options);\n      logAndValidateTokenAuthMethod(this.authOptions, this.logger);\n    } else {\n      if (!options.key) {\n        const msg = \"No authentication options provided; need one of: key, authUrl, or authCallback (or for testing only, token or tokenDetails)\";\n        logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"Auth()\", msg);\n        throw new ErrorInfo(msg, 40160, 401);\n      }\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Auth()\", \"anonymous, using basic auth\");\n      this._saveBasicOptions(options);\n    }\n  }\n  get logger() {\n    return this.client.logger;\n  }\n  async authorize(tokenParams, authOptions) {\n    if (authOptions && authOptions.key && this.authOptions.key !== authOptions.key) {\n      throw new ErrorInfo(\"Unable to update auth options with incompatible key\", 40102, 401);\n    }\n    try {\n      let tokenDetails = await this._forceNewToken(tokenParams != null ? tokenParams : null, authOptions != null ? authOptions : null);\n      if (isRealtime(this.client)) {\n        return new Promise((resolve, reject) => {\n          this.client.connection.connectionManager.onAuthUpdated(\n            tokenDetails,\n            (err, tokenDetails2) => err ? reject(err) : resolve(tokenDetails2)\n          );\n        });\n      } else {\n        return tokenDetails;\n      }\n    } catch (err) {\n      if (this.client.connection && err.statusCode === HttpStatusCodes_default.Forbidden) {\n        this.client.connection.connectionManager.actOnErrorFromAuthorize(err);\n      }\n      throw err;\n    }\n  }\n  /* For internal use, eg by connectionManager - useful when want to call back\n   * as soon as we have the new token, rather than waiting for it to take\n   * effect on the connection as #authorize does */\n  async _forceNewToken(tokenParams, authOptions) {\n    this.tokenDetails = null;\n    this._saveTokenOptions(tokenParams, authOptions);\n    logAndValidateTokenAuthMethod(this.authOptions, this.logger);\n    try {\n      return this._ensureValidAuthCredentials(true);\n    } finally {\n      delete this.tokenParams.timestamp;\n      delete this.authOptions.queryTime;\n    }\n  }\n  async requestToken(tokenParams, authOptions) {\n    const resolvedAuthOptions = authOptions || this.authOptions;\n    const resolvedTokenParams = tokenParams || copy(this.tokenParams);\n    let tokenRequestCallback, client = this.client;\n    if (resolvedAuthOptions.authCallback) {\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Auth.requestToken()\", \"using token auth with authCallback\");\n      tokenRequestCallback = resolvedAuthOptions.authCallback;\n    } else if (resolvedAuthOptions.authUrl) {\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Auth.requestToken()\", \"using token auth with authUrl\");\n      tokenRequestCallback = (params, cb) => {\n        const authHeaders = mixin(\n          { accept: \"application/json, text/plain\" },\n          resolvedAuthOptions.authHeaders\n        );\n        const usePost = resolvedAuthOptions.authMethod && resolvedAuthOptions.authMethod.toLowerCase() === \"post\";\n        let providedQsParams;\n        const queryIdx = resolvedAuthOptions.authUrl.indexOf(\"?\");\n        if (queryIdx > -1) {\n          providedQsParams = parseQueryString(resolvedAuthOptions.authUrl.slice(queryIdx));\n          resolvedAuthOptions.authUrl = resolvedAuthOptions.authUrl.slice(0, queryIdx);\n          if (!usePost) {\n            resolvedAuthOptions.authParams = mixin(\n              providedQsParams,\n              resolvedAuthOptions.authParams\n            );\n          }\n        }\n        const authParams = mixin({}, resolvedAuthOptions.authParams || {}, params);\n        const authUrlRequestCallback = (result) => {\n          var _a2, _b;\n          let body = (_a2 = result.body) != null ? _a2 : null;\n          let contentType = null;\n          if (result.error) {\n            logger_default.logAction(\n              this.logger,\n              logger_default.LOG_MICRO,\n              \"Auth.requestToken().tokenRequestCallback\",\n              \"Received Error: \" + inspectError(result.error)\n            );\n          } else {\n            const contentTypeHeaderOrHeaders = (_b = result.headers[\"content-type\"]) != null ? _b : null;\n            if (Array.isArray(contentTypeHeaderOrHeaders)) {\n              contentType = contentTypeHeaderOrHeaders.join(\", \");\n            } else {\n              contentType = contentTypeHeaderOrHeaders;\n            }\n            logger_default.logAction(\n              this.logger,\n              logger_default.LOG_MICRO,\n              \"Auth.requestToken().tokenRequestCallback\",\n              \"Received; content-type: \" + contentType + \"; body: \" + inspectBody(body)\n            );\n          }\n          if (result.error) {\n            cb(result.error, null);\n            return;\n          }\n          if (result.unpacked) {\n            cb(null, body);\n            return;\n          }\n          if (Platform.BufferUtils.isBuffer(body))\n            body = body.toString();\n          if (!contentType) {\n            cb(new ErrorInfo(\"authUrl response is missing a content-type header\", 40170, 401), null);\n            return;\n          }\n          const json = contentType.indexOf(\"application/json\") > -1, text = contentType.indexOf(\"text/plain\") > -1 || contentType.indexOf(\"application/jwt\") > -1;\n          if (!json && !text) {\n            cb(\n              new ErrorInfo(\n                \"authUrl responded with unacceptable content-type \" + contentType + \", should be either text/plain, application/jwt or application/json\",\n                40170,\n                401\n              ),\n              null\n            );\n            return;\n          }\n          if (json) {\n            if (body.length > MAX_TOKEN_LENGTH) {\n              cb(new ErrorInfo(\"authUrl response exceeded max permitted length\", 40170, 401), null);\n              return;\n            }\n            try {\n              body = JSON.parse(body);\n            } catch (e) {\n              cb(\n                new ErrorInfo(\n                  \"Unexpected error processing authURL response; err = \" + e.message,\n                  40170,\n                  401\n                ),\n                null\n              );\n              return;\n            }\n          }\n          cb(null, body, contentType);\n        };\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MICRO,\n          \"Auth.requestToken().tokenRequestCallback\",\n          \"Requesting token from \" + resolvedAuthOptions.authUrl + \"; Params: \" + JSON.stringify(authParams) + \"; method: \" + (usePost ? \"POST\" : \"GET\")\n        );\n        if (usePost) {\n          const headers = authHeaders || {};\n          headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n          const body = toQueryString(authParams).slice(1);\n          whenPromiseSettles(\n            this.client.http.doUri(\n              HttpMethods_default.Post,\n              resolvedAuthOptions.authUrl,\n              headers,\n              body,\n              providedQsParams\n            ),\n            (err, result) => err ? authUrlRequestCallback(err) : authUrlRequestCallback(result)\n          );\n        } else {\n          whenPromiseSettles(\n            this.client.http.doUri(HttpMethods_default.Get, resolvedAuthOptions.authUrl, authHeaders || {}, null, authParams),\n            (err, result) => err ? authUrlRequestCallback(err) : authUrlRequestCallback(result)\n          );\n        }\n      };\n    } else if (resolvedAuthOptions.key) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"Auth.requestToken()\",\n        \"using token auth with client-side signing\"\n      );\n      tokenRequestCallback = (params, cb) => {\n        whenPromiseSettles(\n          this.createTokenRequest(params, resolvedAuthOptions),\n          (err, result) => cb(err, result != null ? result : null)\n        );\n      };\n    } else {\n      const msg = \"Need a new token, but authOptions does not include any way to request one (no authUrl, authCallback, or key)\";\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"Auth()\",\n        \"library initialized with a token literal without any way to renew the token when it expires (no authUrl, authCallback, or key). See https://help.ably.io/error/40171 for help\"\n      );\n      throw new ErrorInfo(msg, 40171, 403);\n    }\n    if (\"capability\" in resolvedTokenParams)\n      resolvedTokenParams.capability = c14n(\n        resolvedTokenParams.capability\n      );\n    const tokenRequest = (signedTokenParams, tokenCb) => {\n      const keyName = signedTokenParams.keyName, path = \"/keys/\" + keyName + \"/requestToken\", tokenUri = function(host) {\n        return client.baseUri(host) + path;\n      };\n      const requestHeaders = defaults_default.defaultPostHeaders(this.client.options);\n      if (resolvedAuthOptions.requestHeaders)\n        mixin(requestHeaders, resolvedAuthOptions.requestHeaders);\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"Auth.requestToken().requestToken\",\n        \"Sending POST to \" + path + \"; Token params: \" + JSON.stringify(signedTokenParams)\n      );\n      whenPromiseSettles(\n        this.client.http.do(HttpMethods_default.Post, tokenUri, requestHeaders, JSON.stringify(signedTokenParams), null),\n        (err, result) => err ? tokenCb(err) : tokenCb(result.error, result.body, result.unpacked)\n      );\n    };\n    return new Promise((resolve, reject) => {\n      let tokenRequestCallbackTimeoutExpired = false, timeoutLength = this.client.options.timeouts.realtimeRequestTimeout, tokenRequestCallbackTimeout = setTimeout(() => {\n        tokenRequestCallbackTimeoutExpired = true;\n        const msg = \"Token request callback timed out after \" + timeoutLength / 1e3 + \" seconds\";\n        logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"Auth.requestToken()\", msg);\n        reject(new ErrorInfo(msg, 40170, 401));\n      }, timeoutLength);\n      tokenRequestCallback(resolvedTokenParams, (err, tokenRequestOrDetails, contentType) => {\n        if (tokenRequestCallbackTimeoutExpired)\n          return;\n        clearTimeout(tokenRequestCallbackTimeout);\n        if (err) {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_ERROR,\n            \"Auth.requestToken()\",\n            \"token request signing call returned error; err = \" + inspectError(err)\n          );\n          reject(normaliseAuthcallbackError(err));\n          return;\n        }\n        if (typeof tokenRequestOrDetails === \"string\") {\n          if (tokenRequestOrDetails.length === 0) {\n            reject(new ErrorInfo(\"Token string is empty\", 40170, 401));\n          } else if (tokenRequestOrDetails.length > MAX_TOKEN_LENGTH) {\n            reject(\n              new ErrorInfo(\n                \"Token string exceeded max permitted length (was \" + tokenRequestOrDetails.length + \" bytes)\",\n                40170,\n                401\n              )\n            );\n          } else if (tokenRequestOrDetails === \"undefined\" || tokenRequestOrDetails === \"null\") {\n            reject(new ErrorInfo(\"Token string was literal null/undefined\", 40170, 401));\n          } else if (tokenRequestOrDetails[0] === \"{\" && !(contentType && contentType.indexOf(\"application/jwt\") > -1)) {\n            reject(\n              new ErrorInfo(\n                \"Token was double-encoded; make sure you're not JSON-encoding an already encoded token request or details\",\n                40170,\n                401\n              )\n            );\n          } else {\n            resolve({ token: tokenRequestOrDetails });\n          }\n          return;\n        }\n        if (typeof tokenRequestOrDetails !== \"object\" || tokenRequestOrDetails === null) {\n          const msg = \"Expected token request callback to call back with a token string or token request/details object, but got a \" + typeof tokenRequestOrDetails;\n          logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"Auth.requestToken()\", msg);\n          reject(new ErrorInfo(msg, 40170, 401));\n          return;\n        }\n        const objectSize = JSON.stringify(tokenRequestOrDetails).length;\n        if (objectSize > MAX_TOKEN_LENGTH && !resolvedAuthOptions.suppressMaxLengthCheck) {\n          reject(\n            new ErrorInfo(\n              \"Token request/details object exceeded max permitted stringified size (was \" + objectSize + \" bytes)\",\n              40170,\n              401\n            )\n          );\n          return;\n        }\n        if (\"issued\" in tokenRequestOrDetails) {\n          resolve(tokenRequestOrDetails);\n          return;\n        }\n        if (!(\"keyName\" in tokenRequestOrDetails)) {\n          const msg = \"Expected token request callback to call back with a token string, token request object, or token details object\";\n          logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"Auth.requestToken()\", msg);\n          reject(new ErrorInfo(msg, 40170, 401));\n          return;\n        }\n        tokenRequest(tokenRequestOrDetails, (err2, tokenResponse, unpacked) => {\n          if (err2) {\n            logger_default.logAction(\n              this.logger,\n              logger_default.LOG_ERROR,\n              \"Auth.requestToken()\",\n              \"token request API call returned error; err = \" + inspectError(err2)\n            );\n            reject(normaliseAuthcallbackError(err2));\n            return;\n          }\n          if (!unpacked)\n            tokenResponse = JSON.parse(tokenResponse);\n          logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Auth.getToken()\", \"token received\");\n          resolve(tokenResponse);\n        });\n      });\n    });\n  }\n  /**\n   * Create and sign a token request based on the given options.\n   * NOTE this can only be used when the key value is available locally.\n   * Otherwise, signed token requests must be obtained from the key\n   * owner (either using the token request callback or url).\n   *\n   * @param authOptions\n   * an object containing the request options:\n   * - key:           the key to use. If not specified, a key passed in constructing\n   *                  the Rest interface will be used\n   *\n   * - queryTime      (optional) boolean indicating that the ably system should be\n   *                  queried for the current time when none is specified explicitly\n   *\n   * - requestHeaders (optional, unsupported, for testing only) extra headers to add to the\n   *                  requestToken request\n   *\n   * @param tokenParams\n   * an object containing the parameters for the requested token:\n   * - ttl:       (optional) the requested life of the token in ms. If none is specified\n   *                  a default of 1 hour is provided. The maximum lifetime is 24hours; any request\n   *                  exceeding that lifetime will be rejected with an error.\n   *\n   * - capability:    (optional) the capability to associate with the access token.\n   *                  If none is specified, a token will be requested with all of the\n   *                  capabilities of the specified key.\n   *\n   * - clientId:      (optional) a client ID to associate with the token; if not\n   *                  specified, a clientId passed in constructing the Rest interface will be used\n   *\n   * - timestamp:     (optional) the time in ms since the epoch. If none is specified,\n   *                  the system will be queried for a time value to use.\n   */\n  async createTokenRequest(tokenParams, authOptions) {\n    authOptions = authOptions || this.authOptions;\n    tokenParams = tokenParams || copy(this.tokenParams);\n    const key = authOptions.key;\n    if (!key) {\n      throw new ErrorInfo(\"No key specified\", 40101, 403);\n    }\n    const keyParts = key.split(\":\"), keyName = keyParts[0], keySecret = keyParts[1];\n    if (!keySecret) {\n      throw new ErrorInfo(\"Invalid key specified\", 40101, 403);\n    }\n    if (tokenParams.clientId === \"\") {\n      throw new ErrorInfo(\"clientId can\\u2019t be an empty string\", 40012, 400);\n    }\n    if (\"capability\" in tokenParams) {\n      tokenParams.capability = c14n(tokenParams.capability);\n    }\n    const request = mixin({ keyName }, tokenParams), clientId = tokenParams.clientId || \"\", ttl = tokenParams.ttl || \"\", capability = tokenParams.capability || \"\";\n    if (!request.timestamp) {\n      request.timestamp = await this.getTimestamp(authOptions && authOptions.queryTime);\n    }\n    const nonce = request.nonce || (request.nonce = random()), timestamp = request.timestamp;\n    const signText = request.keyName + \"\\n\" + ttl + \"\\n\" + capability + \"\\n\" + clientId + \"\\n\" + timestamp + \"\\n\" + nonce + \"\\n\";\n    request.mac = request.mac || hmac(signText, keySecret);\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Auth.getTokenRequest()\", \"generated signed request\");\n    return request;\n  }\n  /**\n   * Get the auth query params to use for a websocket connection,\n   * based on the current auth parameters\n   */\n  async getAuthParams() {\n    if (this.method == \"basic\")\n      return { key: this.key };\n    else {\n      let tokenDetails = await this._ensureValidAuthCredentials(false);\n      if (!tokenDetails) {\n        throw new Error(\"Auth.getAuthParams(): _ensureValidAuthCredentials returned no error or tokenDetails\");\n      }\n      return { access_token: tokenDetails.token };\n    }\n  }\n  /**\n   * Get the authorization header to use for a REST or comet request,\n   * based on the current auth parameters\n   */\n  async getAuthHeaders() {\n    if (this.method == \"basic\") {\n      return { authorization: \"Basic \" + this.basicKey };\n    } else {\n      const tokenDetails = await this._ensureValidAuthCredentials(false);\n      if (!tokenDetails) {\n        throw new Error(\"Auth.getAuthParams(): _ensureValidAuthCredentials returned no error or tokenDetails\");\n      }\n      return { authorization: \"Bearer \" + toBase64(tokenDetails.token) };\n    }\n  }\n  /**\n   * Get the current time based on the local clock,\n   * or if the option queryTime is true, return the server time.\n   * The server time offset from the local time is stored so that\n   * only one request to the server to get the time is ever needed\n   */\n  async getTimestamp(queryTime) {\n    if (!this.isTimeOffsetSet() && (queryTime || this.authOptions.queryTime)) {\n      return this.client.time();\n    } else {\n      return this.getTimestampUsingOffset();\n    }\n  }\n  getTimestampUsingOffset() {\n    return Date.now() + (this.client.serverTimeOffset || 0);\n  }\n  isTimeOffsetSet() {\n    return this.client.serverTimeOffset !== null;\n  }\n  _saveBasicOptions(authOptions) {\n    this.method = \"basic\";\n    this.key = authOptions.key;\n    this.basicKey = toBase64(authOptions.key);\n    this.authOptions = authOptions || {};\n    if (\"clientId\" in authOptions) {\n      this._userSetClientId(authOptions.clientId);\n    }\n  }\n  _saveTokenOptions(tokenParams, authOptions) {\n    this.method = \"token\";\n    if (tokenParams) {\n      this.tokenParams = tokenParams;\n    }\n    if (authOptions) {\n      if (authOptions.token) {\n        authOptions.tokenDetails = typeof authOptions.token === \"string\" ? { token: authOptions.token } : authOptions.token;\n      }\n      if (authOptions.tokenDetails) {\n        this.tokenDetails = authOptions.tokenDetails;\n      }\n      if (\"clientId\" in authOptions) {\n        this._userSetClientId(authOptions.clientId);\n      }\n      this.authOptions = authOptions;\n    }\n  }\n  /* @param forceSupersede: force a new token request even if there's one in\n   * progress, making all pending callbacks wait for the new one */\n  async _ensureValidAuthCredentials(forceSupersede) {\n    const token = this.tokenDetails;\n    if (token) {\n      if (this._tokenClientIdMismatch(token.clientId)) {\n        throw new ErrorInfo(\n          \"Mismatch between clientId in token (\" + token.clientId + \") and current clientId (\" + this.clientId + \")\",\n          40102,\n          403\n        );\n      }\n      if (!this.isTimeOffsetSet() || !token.expires || token.expires >= this.getTimestampUsingOffset()) {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"Auth.getToken()\",\n          \"using cached token; expires = \" + token.expires\n        );\n        return token;\n      }\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Auth.getToken()\", \"deleting expired token\");\n      this.tokenDetails = null;\n    }\n    const promise = (this.waitingForTokenRequest || (this.waitingForTokenRequest = multicaster_default.create(this.logger))).createPromise();\n    if (this.currentTokenRequestId !== null && !forceSupersede) {\n      return promise;\n    }\n    const tokenRequestId = this.currentTokenRequestId = getTokenRequestId();\n    let tokenResponse, caughtError = null;\n    try {\n      tokenResponse = await this.requestToken(this.tokenParams, this.authOptions);\n    } catch (err) {\n      caughtError = err;\n    }\n    if (this.currentTokenRequestId > tokenRequestId) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"Auth._ensureValidAuthCredentials()\",\n        \"Discarding token request response; overtaken by newer one\"\n      );\n      return promise;\n    }\n    this.currentTokenRequestId = null;\n    const multicaster = this.waitingForTokenRequest;\n    this.waitingForTokenRequest = null;\n    if (caughtError) {\n      multicaster == null ? void 0 : multicaster.rejectAll(caughtError);\n      return promise;\n    }\n    multicaster == null ? void 0 : multicaster.resolveAll(this.tokenDetails = tokenResponse);\n    return promise;\n  }\n  /* User-set: check types, '*' is disallowed, throw any errors */\n  _userSetClientId(clientId) {\n    if (!(typeof clientId === \"string\" || clientId === null)) {\n      throw new ErrorInfo(\"clientId must be either a string or null\", 40012, 400);\n    } else if (clientId === \"*\") {\n      throw new ErrorInfo(\n        'Can\\u2019t use \"*\" as a clientId as that string is reserved. (To change the default token request behaviour to use a wildcard clientId, instantiate the library with {defaultTokenParams: {clientId: \"*\"}}), or if calling authorize(), pass it in as a tokenParam: authorize({clientId: \"*\"}, authOptions)',\n        40012,\n        400\n      );\n    } else {\n      const err = this._uncheckedSetClientId(clientId);\n      if (err)\n        throw err;\n    }\n  }\n  /* Ably-set: no typechecking, '*' is allowed but not set on this.clientId), return errors to the caller */\n  _uncheckedSetClientId(clientId) {\n    if (this._tokenClientIdMismatch(clientId)) {\n      const msg = \"Unexpected clientId mismatch: client has \" + this.clientId + \", requested \" + clientId;\n      const err = new ErrorInfo(msg, 40102, 401);\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"Auth._uncheckedSetClientId()\", msg);\n      return err;\n    } else {\n      this.clientId = this.tokenParams.clientId = clientId;\n      return null;\n    }\n  }\n  _tokenClientIdMismatch(tokenClientId) {\n    return !!(this.clientId && this.clientId !== \"*\" && tokenClientId && tokenClientId !== \"*\" && this.clientId !== tokenClientId);\n  }\n  static isTokenErr(error) {\n    return error.code && error.code >= 40140 && error.code < 40150;\n  }\n  revokeTokens(specifiers, options) {\n    return this.client.rest.revokeTokens(specifiers, options);\n  }\n};\nvar auth_default = Auth;\n\n// src/common/types/http.ts\nfunction paramString(params) {\n  const paramPairs = [];\n  if (params) {\n    for (const needle in params) {\n      paramPairs.push(needle + \"=\" + params[needle]);\n    }\n  }\n  return paramPairs.join(\"&\");\n}\nfunction appendingParams(uri, params) {\n  return uri + (params ? \"?\" : \"\") + paramString(params);\n}\nfunction logResult(result, method, uri, params, logger) {\n  if (result.error) {\n    logger_default.logActionNoStrip(\n      logger,\n      logger_default.LOG_MICRO,\n      \"Http.\" + method + \"()\",\n      \"Received Error; \" + appendingParams(uri, params) + \"; Error: \" + inspectError(result.error)\n    );\n  } else {\n    logger_default.logActionNoStrip(\n      logger,\n      logger_default.LOG_MICRO,\n      \"Http.\" + method + \"()\",\n      \"Received; \" + appendingParams(uri, params) + \"; Headers: \" + paramString(result.headers) + \"; StatusCode: \" + result.statusCode + \"; Body\" + (Platform.BufferUtils.isBuffer(result.body) ? \" (Base64): \" + Platform.BufferUtils.base64Encode(result.body) : \": \" + result.body)\n    );\n  }\n}\nfunction logRequest(method, uri, body, params, logger) {\n  if (logger.shouldLog(logger_default.LOG_MICRO)) {\n    logger_default.logActionNoStrip(\n      logger,\n      logger_default.LOG_MICRO,\n      \"Http.\" + method + \"()\",\n      \"Sending; \" + appendingParams(uri, params) + \"; Body\" + (Platform.BufferUtils.isBuffer(body) ? \" (Base64): \" + Platform.BufferUtils.base64Encode(body) : \": \" + body)\n    );\n  }\n}\nvar Http = class {\n  constructor(client) {\n    this.client = client;\n    this.platformHttp = new Platform.Http(client);\n    this.checkConnectivity = this.platformHttp.checkConnectivity ? () => this.platformHttp.checkConnectivity() : void 0;\n  }\n  get logger() {\n    var _a2, _b;\n    return (_b = (_a2 = this.client) == null ? void 0 : _a2.logger) != null ? _b : logger_default.defaultLogger;\n  }\n  get supportsAuthHeaders() {\n    return this.platformHttp.supportsAuthHeaders;\n  }\n  get supportsLinkHeaders() {\n    return this.platformHttp.supportsLinkHeaders;\n  }\n  _getHosts(client) {\n    const connection = client.connection, connectionHost = connection && connection.connectionManager.host;\n    if (connectionHost) {\n      return [connectionHost].concat(defaults_default.getFallbackHosts(client.options));\n    }\n    return defaults_default.getHosts(client.options);\n  }\n  /**\n   * This method will not throw any errors; rather, it will communicate any error by populating the {@link RequestResult.error} property of the returned {@link RequestResult}.\n   */\n  async do(method, path, headers, body, params) {\n    try {\n      const client = this.client;\n      if (!client) {\n        return { error: new ErrorInfo(\"http.do called without client\", 5e4, 500) };\n      }\n      const uriFromHost = typeof path === \"function\" ? path : function(host) {\n        return client.baseUri(host) + path;\n      };\n      const currentFallback = client._currentFallback;\n      if (currentFallback) {\n        if (currentFallback.validUntil > Date.now()) {\n          const result = await this.doUri(method, uriFromHost(currentFallback.host), headers, body, params);\n          if (result.error && this.platformHttp.shouldFallback(result.error)) {\n            client._currentFallback = null;\n            return this.do(method, path, headers, body, params);\n          }\n          return result;\n        } else {\n          client._currentFallback = null;\n        }\n      }\n      const hosts = this._getHosts(client);\n      if (hosts.length === 1) {\n        return this.doUri(method, uriFromHost(hosts[0]), headers, body, params);\n      }\n      let tryAHostStartedAt = null;\n      const tryAHost = async (candidateHosts, persistOnSuccess) => {\n        const host = candidateHosts.shift();\n        tryAHostStartedAt = tryAHostStartedAt != null ? tryAHostStartedAt : /* @__PURE__ */ new Date();\n        const result = await this.doUri(method, uriFromHost(host), headers, body, params);\n        if (result.error && this.platformHttp.shouldFallback(result.error) && candidateHosts.length) {\n          const elapsedTime = Date.now() - tryAHostStartedAt.getTime();\n          if (elapsedTime > client.options.timeouts.httpMaxRetryDuration) {\n            return {\n              error: new ErrorInfo(\n                `Timeout for trying fallback hosts retries. Total elapsed time exceeded the ${client.options.timeouts.httpMaxRetryDuration}ms limit`,\n                50003,\n                500\n              )\n            };\n          }\n          return tryAHost(candidateHosts, true);\n        }\n        if (persistOnSuccess) {\n          client._currentFallback = {\n            host,\n            validUntil: Date.now() + client.options.timeouts.fallbackRetryTimeout\n          };\n        }\n        return result;\n      };\n      return tryAHost(hosts);\n    } catch (err) {\n      return { error: new ErrorInfo(`Unexpected error in Http.do: ${inspectError(err)}`, 500, 5e4) };\n    }\n  }\n  /**\n   * This method will not throw any errors; rather, it will communicate any error by populating the {@link RequestResult.error} property of the returned {@link RequestResult}.\n   */\n  async doUri(method, uri, headers, body, params) {\n    try {\n      logRequest(method, uri, body, params, this.logger);\n      const result = await this.platformHttp.doUri(method, uri, headers, body, params);\n      if (this.logger.shouldLog(logger_default.LOG_MICRO)) {\n        logResult(result, method, uri, params, this.logger);\n      }\n      return result;\n    } catch (err) {\n      return { error: new ErrorInfo(`Unexpected error in Http.doUri: ${inspectError(err)}`, 500, 5e4) };\n    }\n  }\n};\n\n// src/common/lib/client/baseclient.ts\nvar BaseClient = class {\n  constructor(options) {\n    /**\n     * These exports are for use by UMD plugins; reason being so that constructors and static methods can be accessed by these plugins without needing to import the classes directly and result in the class existing in both the plugin and the core library.\n     */\n    this.Platform = Platform;\n    this.ErrorInfo = ErrorInfo;\n    this.Logger = logger_default;\n    this.Defaults = defaults_default;\n    this.Utils = utils_exports;\n    var _a2, _b, _c, _d, _e, _f, _g, _h;\n    this._additionalHTTPRequestImplementations = (_a2 = options.plugins) != null ? _a2 : null;\n    this.logger = new logger_default();\n    this.logger.setLog(options.logLevel, options.logHandler);\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"BaseClient()\",\n      \"initialized with clientOptions \" + Platform.Config.inspect(options)\n    );\n    this._MsgPack = (_c = (_b = options.plugins) == null ? void 0 : _b.MsgPack) != null ? _c : null;\n    const normalOptions = this.options = defaults_default.normaliseOptions(options, this._MsgPack, this.logger);\n    if (normalOptions.key) {\n      const keyMatch = normalOptions.key.match(/^([^:\\s]+):([^:.\\s]+)$/);\n      if (!keyMatch) {\n        const msg = \"invalid key parameter\";\n        logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"BaseClient()\", msg);\n        throw new ErrorInfo(msg, 40400, 404);\n      }\n      normalOptions.keyName = keyMatch[1];\n      normalOptions.keySecret = keyMatch[2];\n    }\n    if (\"clientId\" in normalOptions) {\n      if (!(typeof normalOptions.clientId === \"string\" || normalOptions.clientId === null))\n        throw new ErrorInfo(\"clientId must be either a string or null\", 40012, 400);\n      else if (normalOptions.clientId === \"*\")\n        throw new ErrorInfo(\n          'Can\\u2019t use \"*\" as a clientId as that string is reserved. (To change the default token request behaviour to use a wildcard clientId, use {defaultTokenParams: {clientId: \"*\"}})',\n          40012,\n          400\n        );\n    }\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"BaseClient()\", \"started; version = \" + defaults_default.version);\n    this._currentFallback = null;\n    this.serverTimeOffset = null;\n    this.http = new Http(this);\n    this.auth = new auth_default(this, normalOptions);\n    this._rest = ((_d = options.plugins) == null ? void 0 : _d.Rest) ? new options.plugins.Rest(this) : null;\n    this._Crypto = (_f = (_e = options.plugins) == null ? void 0 : _e.Crypto) != null ? _f : null;\n    this.__FilteredSubscriptions = (_h = (_g = options.plugins) == null ? void 0 : _g.MessageInteractions) != null ? _h : null;\n  }\n  get rest() {\n    if (!this._rest) {\n      throwMissingPluginError(\"Rest\");\n    }\n    return this._rest;\n  }\n  get _FilteredSubscriptions() {\n    if (!this.__FilteredSubscriptions) {\n      throwMissingPluginError(\"MessageInteractions\");\n    }\n    return this.__FilteredSubscriptions;\n  }\n  get channels() {\n    return this.rest.channels;\n  }\n  get push() {\n    return this.rest.push;\n  }\n  get device() {\n    var _a2;\n    if (!((_a2 = this.options.plugins) == null ? void 0 : _a2.Push) || !this.push.LocalDevice) {\n      throwMissingPluginError(\"Push\");\n    }\n    if (!this._device) {\n      this._device = this.push.LocalDevice.load(this);\n    }\n    return this._device;\n  }\n  baseUri(host) {\n    return defaults_default.getHttpScheme(this.options) + host + \":\" + defaults_default.getPort(this.options, false);\n  }\n  async stats(params) {\n    return this.rest.stats(params);\n  }\n  async time(params) {\n    return this.rest.time(params);\n  }\n  async request(method, path, version2, params, body, customHeaders) {\n    return this.rest.request(method, path, version2, params, body, customHeaders);\n  }\n  batchPublish(specOrSpecs) {\n    return this.rest.batchPublish(specOrSpecs);\n  }\n  batchPresence(channels) {\n    return this.rest.batchPresence(channels);\n  }\n  setLog(logOptions) {\n    this.logger.setLog(logOptions.level, logOptions.handler);\n  }\n};\nBaseClient.Platform = Platform;\nvar baseclient_default = BaseClient;\n\n// src/common/lib/types/devicedetails.ts\nvar DeviceDetails = class _DeviceDetails {\n  toJSON() {\n    var _a2, _b, _c;\n    return {\n      id: this.id,\n      deviceSecret: this.deviceSecret,\n      platform: this.platform,\n      formFactor: this.formFactor,\n      clientId: this.clientId,\n      metadata: this.metadata,\n      deviceIdentityToken: this.deviceIdentityToken,\n      push: {\n        recipient: (_a2 = this.push) == null ? void 0 : _a2.recipient,\n        state: (_b = this.push) == null ? void 0 : _b.state,\n        error: (_c = this.push) == null ? void 0 : _c.error\n      }\n    };\n  }\n  toString() {\n    var _a2, _b, _c, _d;\n    let result = \"[DeviceDetails\";\n    if (this.id)\n      result += \"; id=\" + this.id;\n    if (this.platform)\n      result += \"; platform=\" + this.platform;\n    if (this.formFactor)\n      result += \"; formFactor=\" + this.formFactor;\n    if (this.clientId)\n      result += \"; clientId=\" + this.clientId;\n    if (this.metadata)\n      result += \"; metadata=\" + this.metadata;\n    if (this.deviceIdentityToken)\n      result += \"; deviceIdentityToken=\" + JSON.stringify(this.deviceIdentityToken);\n    if ((_a2 = this.push) == null ? void 0 : _a2.recipient)\n      result += \"; push.recipient=\" + JSON.stringify(this.push.recipient);\n    if ((_b = this.push) == null ? void 0 : _b.state)\n      result += \"; push.state=\" + this.push.state;\n    if ((_c = this.push) == null ? void 0 : _c.error)\n      result += \"; push.error=\" + JSON.stringify(this.push.error);\n    if ((_d = this.push) == null ? void 0 : _d.metadata)\n      result += \"; push.metadata=\" + this.push.metadata;\n    result += \"]\";\n    return result;\n  }\n  static toRequestBody(body, MsgPack, format) {\n    return encodeBody(body, MsgPack, format);\n  }\n  static fromResponseBody(body, MsgPack, format) {\n    if (format) {\n      body = decodeBody(body, MsgPack, format);\n    }\n    if (Array.isArray(body)) {\n      return _DeviceDetails.fromValuesArray(body);\n    } else {\n      return _DeviceDetails.fromValues(body);\n    }\n  }\n  static fromValues(values) {\n    values.error = values.error && ErrorInfo.fromValues(values.error);\n    return Object.assign(new _DeviceDetails(), values);\n  }\n  static fromLocalDevice(device) {\n    return Object.assign(new _DeviceDetails(), device);\n  }\n  static fromValuesArray(values) {\n    const count = values.length, result = new Array(count);\n    for (let i = 0; i < count; i++)\n      result[i] = _DeviceDetails.fromValues(values[i]);\n    return result;\n  }\n};\nvar devicedetails_default = DeviceDetails;\n\n// src/common/lib/client/resource.ts\nasync function withAuthDetails(client, headers, params, opCallback) {\n  if (client.http.supportsAuthHeaders) {\n    const authHeaders = await client.auth.getAuthHeaders();\n    return opCallback(mixin(authHeaders, headers), params);\n  } else {\n    const authParams = await client.auth.getAuthParams();\n    return opCallback(headers, mixin(authParams, params));\n  }\n}\nfunction unenvelope(result, MsgPack, format) {\n  if (result.err && !result.body) {\n    return { err: result.err };\n  }\n  if (result.statusCode === HttpStatusCodes_default.NoContent) {\n    return __spreadProps(__spreadValues({}, result), { body: [], unpacked: true });\n  }\n  let body = result.body;\n  if (!result.unpacked) {\n    try {\n      body = decodeBody(body, MsgPack, format);\n    } catch (e) {\n      if (isErrorInfoOrPartialErrorInfo(e)) {\n        return { err: e };\n      } else {\n        return { err: new PartialErrorInfo(inspectError(e), null) };\n      }\n    }\n  }\n  if (!body) {\n    return { err: new PartialErrorInfo(\"unenvelope(): Response body is missing\", null) };\n  }\n  const { statusCode: wrappedStatusCode, response, headers: wrappedHeaders } = body;\n  if (wrappedStatusCode === void 0) {\n    return __spreadProps(__spreadValues({}, result), { body, unpacked: true });\n  }\n  if (wrappedStatusCode < 200 || wrappedStatusCode >= 300) {\n    let wrappedErr = response && response.error || result.err;\n    if (!wrappedErr) {\n      wrappedErr = new Error(\"Error in unenveloping \" + body);\n      wrappedErr.statusCode = wrappedStatusCode;\n    }\n    return { err: wrappedErr, body: response, headers: wrappedHeaders, unpacked: true, statusCode: wrappedStatusCode };\n  }\n  return { err: result.err, body: response, headers: wrappedHeaders, unpacked: true, statusCode: wrappedStatusCode };\n}\nfunction logResult2(result, method, path, params, logger) {\n  if (result.err) {\n    logger_default.logAction(\n      logger,\n      logger_default.LOG_MICRO,\n      \"Resource.\" + method + \"()\",\n      \"Received Error; \" + appendingParams(path, params) + \"; Error: \" + inspectError(result.err)\n    );\n  } else {\n    logger_default.logAction(\n      logger,\n      logger_default.LOG_MICRO,\n      \"Resource.\" + method + \"()\",\n      \"Received; \" + appendingParams(path, params) + \"; Headers: \" + paramString(result.headers) + \"; StatusCode: \" + result.statusCode + \"; Body: \" + (Platform.BufferUtils.isBuffer(result.body) ? \" (Base64): \" + Platform.BufferUtils.base64Encode(result.body) : \": \" + Platform.Config.inspect(result.body))\n    );\n  }\n}\nvar Resource = class _Resource {\n  static async get(client, path, headers, params, envelope, throwError) {\n    return _Resource.do(HttpMethods_default.Get, client, path, null, headers, params, envelope, throwError != null ? throwError : false);\n  }\n  static async delete(client, path, headers, params, envelope, throwError) {\n    return _Resource.do(HttpMethods_default.Delete, client, path, null, headers, params, envelope, throwError);\n  }\n  static async post(client, path, body, headers, params, envelope, throwError) {\n    return _Resource.do(HttpMethods_default.Post, client, path, body, headers, params, envelope, throwError);\n  }\n  static async patch(client, path, body, headers, params, envelope, throwError) {\n    return _Resource.do(HttpMethods_default.Patch, client, path, body, headers, params, envelope, throwError);\n  }\n  static async put(client, path, body, headers, params, envelope, throwError) {\n    return _Resource.do(HttpMethods_default.Put, client, path, body, headers, params, envelope, throwError);\n  }\n  static async do(method, client, path, body, headers, params, envelope, throwError) {\n    if (envelope) {\n      (params = params || {})[\"envelope\"] = envelope;\n    }\n    const logger = client.logger;\n    async function doRequest(headers2, params2) {\n      var _a2;\n      if (logger.shouldLog(logger_default.LOG_MICRO)) {\n        let decodedBody = body;\n        if (((_a2 = headers2[\"content-type\"]) == null ? void 0 : _a2.indexOf(\"msgpack\")) > 0) {\n          try {\n            if (!client._MsgPack) {\n              throwMissingPluginError(\"MsgPack\");\n            }\n            decodedBody = client._MsgPack.decode(body);\n          } catch (decodeErr) {\n            logger_default.logAction(\n              logger,\n              logger_default.LOG_MICRO,\n              \"Resource.\" + method + \"()\",\n              \"Sending MsgPack Decoding Error: \" + inspectError(decodeErr)\n            );\n          }\n        }\n        logger_default.logAction(\n          logger,\n          logger_default.LOG_MICRO,\n          \"Resource.\" + method + \"()\",\n          \"Sending; \" + appendingParams(path, params2) + \"; Body: \" + decodedBody\n        );\n      }\n      const httpResult = await client.http.do(method, path, headers2, body, params2);\n      if (httpResult.error && auth_default.isTokenErr(httpResult.error)) {\n        await client.auth.authorize(null, null);\n        return withAuthDetails(client, headers2, params2, doRequest);\n      }\n      return {\n        err: httpResult.error,\n        body: httpResult.body,\n        headers: httpResult.headers,\n        unpacked: httpResult.unpacked,\n        statusCode: httpResult.statusCode\n      };\n    }\n    let result = await withAuthDetails(client, headers, params, doRequest);\n    if (envelope) {\n      result = unenvelope(result, client._MsgPack, envelope);\n    }\n    if (logger.shouldLog(logger_default.LOG_MICRO)) {\n      logResult2(result, method, path, params, logger);\n    }\n    if (throwError) {\n      if (result.err) {\n        throw result.err;\n      } else {\n        const response = __spreadValues({}, result);\n        delete response.err;\n        return response;\n      }\n    }\n    return result;\n  }\n};\nvar resource_default = Resource;\n\n// src/common/lib/client/paginatedresource.ts\nfunction getRelParams(linkUrl) {\n  const urlMatch = linkUrl.match(/^\\.\\/(\\w+)\\?(.*)$/);\n  return urlMatch && urlMatch[2] && parseQueryString(urlMatch[2]);\n}\nfunction parseRelLinks(linkHeader) {\n  if (typeof linkHeader == \"string\")\n    linkHeader = linkHeader.split(\",\");\n  const relParams = {};\n  for (let i = 0; i < linkHeader.length; i++) {\n    const linkMatch = linkHeader[i].match(/^\\s*<(.+)>;\\s*rel=\"(\\w+)\"$/);\n    if (linkMatch) {\n      const params = getRelParams(linkMatch[1]);\n      if (params)\n        relParams[linkMatch[2]] = params;\n    }\n  }\n  return relParams;\n}\nfunction returnErrOnly(err, body, useHPR) {\n  return !(useHPR && (body || typeof err.code === \"number\"));\n}\nvar PaginatedResource = class {\n  constructor(client, path, headers, envelope, bodyHandler, useHttpPaginatedResponse) {\n    this.client = client;\n    this.path = path;\n    this.headers = headers;\n    this.envelope = envelope != null ? envelope : null;\n    this.bodyHandler = bodyHandler;\n    this.useHttpPaginatedResponse = useHttpPaginatedResponse || false;\n  }\n  get logger() {\n    return this.client.logger;\n  }\n  async get(params) {\n    const result = await resource_default.get(this.client, this.path, this.headers, params, this.envelope, false);\n    return this.handlePage(result);\n  }\n  async delete(params) {\n    const result = await resource_default.delete(this.client, this.path, this.headers, params, this.envelope, false);\n    return this.handlePage(result);\n  }\n  async post(params, body) {\n    const result = await resource_default.post(this.client, this.path, body, this.headers, params, this.envelope, false);\n    return this.handlePage(result);\n  }\n  async put(params, body) {\n    const result = await resource_default.put(this.client, this.path, body, this.headers, params, this.envelope, false);\n    return this.handlePage(result);\n  }\n  async patch(params, body) {\n    const result = await resource_default.patch(this.client, this.path, body, this.headers, params, this.envelope, false);\n    return this.handlePage(result);\n  }\n  async handlePage(result) {\n    if (result.err && returnErrOnly(result.err, result.body, this.useHttpPaginatedResponse)) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"PaginatedResource.handlePage()\",\n        \"Unexpected error getting resource: err = \" + inspectError(result.err)\n      );\n      throw result.err;\n    }\n    let items, linkHeader, relParams;\n    try {\n      items = result.statusCode == HttpStatusCodes_default.NoContent ? [] : await this.bodyHandler(result.body, result.headers || {}, result.unpacked);\n    } catch (e) {\n      throw result.err || e;\n    }\n    if (result.headers && (linkHeader = result.headers[\"Link\"] || result.headers[\"link\"])) {\n      relParams = parseRelLinks(linkHeader);\n    }\n    if (this.useHttpPaginatedResponse) {\n      return new HttpPaginatedResponse(\n        this,\n        items,\n        result.headers || {},\n        result.statusCode,\n        relParams,\n        result.err\n      );\n    } else {\n      return new PaginatedResult(this, items, relParams);\n    }\n  }\n};\nvar PaginatedResult = class {\n  constructor(resource, items, relParams) {\n    this.resource = resource;\n    this.items = items;\n    const self2 = this;\n    if (relParams) {\n      if (\"first\" in relParams) {\n        this.first = async function() {\n          return self2.get(relParams.first);\n        };\n      }\n      if (\"current\" in relParams) {\n        this.current = async function() {\n          return self2.get(relParams.current);\n        };\n      }\n      this.next = async function() {\n        if (\"next\" in relParams) {\n          return self2.get(relParams.next);\n        } else {\n          return null;\n        }\n      };\n      this.hasNext = function() {\n        return \"next\" in relParams;\n      };\n      this.isLast = () => {\n        var _a2;\n        return !((_a2 = this.hasNext) == null ? void 0 : _a2.call(this));\n      };\n    }\n  }\n  /* We assume that only the initial request can be a POST, and that accessing\n   * the rest of a multipage set of results can always be done with GET */\n  async get(params) {\n    const res = this.resource;\n    const result = await resource_default.get(res.client, res.path, res.headers, params, res.envelope, false);\n    return res.handlePage(result);\n  }\n};\nvar HttpPaginatedResponse = class extends PaginatedResult {\n  constructor(resource, items, headers, statusCode, relParams, err) {\n    super(resource, items, relParams);\n    this.statusCode = statusCode;\n    this.success = statusCode < 300 && statusCode >= 200;\n    this.headers = headers;\n    this.errorCode = err && err.code;\n    this.errorMessage = err && err.message;\n  }\n  toJSON() {\n    return {\n      items: this.items,\n      statusCode: this.statusCode,\n      success: this.success,\n      headers: this.headers,\n      errorCode: this.errorCode,\n      errorMessage: this.errorMessage\n    };\n  }\n};\nvar paginatedresource_default = PaginatedResource;\n\n// src/common/lib/types/pushchannelsubscription.ts\nvar _PushChannelSubscription = class _PushChannelSubscription {\n  /**\n   * Overload toJSON() to intercept JSON.stringify()\n   * @return {*}\n   */\n  toJSON() {\n    return {\n      channel: this.channel,\n      deviceId: this.deviceId,\n      clientId: this.clientId\n    };\n  }\n  toString() {\n    let result = \"[PushChannelSubscription\";\n    if (this.channel)\n      result += \"; channel=\" + this.channel;\n    if (this.deviceId)\n      result += \"; deviceId=\" + this.deviceId;\n    if (this.clientId)\n      result += \"; clientId=\" + this.clientId;\n    result += \"]\";\n    return result;\n  }\n  static fromResponseBody(body, MsgPack, format) {\n    if (format) {\n      body = decodeBody(body, MsgPack, format);\n    }\n    if (Array.isArray(body)) {\n      return _PushChannelSubscription.fromValuesArray(body);\n    } else {\n      return _PushChannelSubscription.fromValues(body);\n    }\n  }\n  static fromValues(values) {\n    return Object.assign(new _PushChannelSubscription(), values);\n  }\n  static fromValuesArray(values) {\n    const count = values.length, result = new Array(count);\n    for (let i = 0; i < count; i++)\n      result[i] = _PushChannelSubscription.fromValues(values[i]);\n    return result;\n  }\n};\n_PushChannelSubscription.toRequestBody = encodeBody;\nvar PushChannelSubscription = _PushChannelSubscription;\nvar pushchannelsubscription_default = PushChannelSubscription;\n\n// src/common/lib/client/push.ts\nvar Push = class {\n  constructor(client) {\n    var _a2;\n    this.client = client;\n    this.admin = new Admin(client);\n    if (Platform.Config.push && ((_a2 = client.options.plugins) == null ? void 0 : _a2.Push)) {\n      this.stateMachine = new client.options.plugins.Push.ActivationStateMachine(client);\n      this.LocalDevice = client.options.plugins.Push.localDeviceFactory(devicedetails_default);\n    }\n  }\n  async activate(registerCallback, updateFailedCallback) {\n    await new Promise((resolve, reject) => {\n      var _a2;\n      if (!((_a2 = this.client.options.plugins) == null ? void 0 : _a2.Push)) {\n        reject(createMissingPluginError(\"Push\"));\n        return;\n      }\n      if (!this.stateMachine) {\n        reject(new ErrorInfo(\"This platform is not supported as a target of push notifications\", 4e4, 400));\n        return;\n      }\n      if (this.stateMachine.activatedCallback) {\n        reject(new ErrorInfo(\"Activation already in progress\", 4e4, 400));\n        return;\n      }\n      this.stateMachine.activatedCallback = (err) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve();\n      };\n      this.stateMachine.updateFailedCallback = updateFailedCallback;\n      this.stateMachine.handleEvent(\n        new this.client.options.plugins.Push.CalledActivate(this.stateMachine, registerCallback)\n      );\n    });\n  }\n  async deactivate(deregisterCallback) {\n    await new Promise((resolve, reject) => {\n      var _a2;\n      if (!((_a2 = this.client.options.plugins) == null ? void 0 : _a2.Push)) {\n        reject(createMissingPluginError(\"Push\"));\n        return;\n      }\n      if (!this.stateMachine) {\n        reject(new ErrorInfo(\"This platform is not supported as a target of push notifications\", 4e4, 400));\n        return;\n      }\n      if (this.stateMachine.deactivatedCallback) {\n        reject(new ErrorInfo(\"Deactivation already in progress\", 4e4, 400));\n        return;\n      }\n      this.stateMachine.deactivatedCallback = (err) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve();\n      };\n      this.stateMachine.handleEvent(\n        new this.client.options.plugins.Push.CalledDeactivate(this.stateMachine, deregisterCallback)\n      );\n    });\n  }\n};\nvar Admin = class {\n  constructor(client) {\n    this.client = client;\n    this.deviceRegistrations = new DeviceRegistrations(client);\n    this.channelSubscriptions = new ChannelSubscriptions(client);\n  }\n  async publish(recipient, payload) {\n    const client = this.client;\n    const format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultPostHeaders(client.options, { format }), params = {};\n    const body = mixin({ recipient }, payload);\n    mixin(headers, client.options.headers);\n    if (client.options.pushFullWait)\n      mixin(params, { fullWait: \"true\" });\n    const requestBody = encodeBody(body, client._MsgPack, format);\n    await resource_default.post(client, \"/push/publish\", requestBody, headers, params, null, true);\n  }\n};\nvar DeviceRegistrations = class {\n  constructor(client) {\n    this.client = client;\n  }\n  async save(device) {\n    const client = this.client;\n    const body = devicedetails_default.fromValues(device);\n    const format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultPostHeaders(client.options, { format }), params = {};\n    mixin(headers, client.options.headers);\n    if (client.options.pushFullWait)\n      mixin(params, { fullWait: \"true\" });\n    const requestBody = encodeBody(body, client._MsgPack, format);\n    const response = await resource_default.put(\n      client,\n      \"/push/deviceRegistrations/\" + encodeURIComponent(device.id),\n      requestBody,\n      headers,\n      params,\n      null,\n      true\n    );\n    return devicedetails_default.fromResponseBody(\n      response.body,\n      client._MsgPack,\n      response.unpacked ? void 0 : format\n    );\n  }\n  async get(deviceIdOrDetails) {\n    const client = this.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultGetHeaders(client.options, { format }), deviceId = deviceIdOrDetails.id || deviceIdOrDetails;\n    if (typeof deviceId !== \"string\" || !deviceId.length) {\n      throw new ErrorInfo(\n        \"First argument to DeviceRegistrations#get must be a deviceId string or DeviceDetails\",\n        4e4,\n        400\n      );\n    }\n    mixin(headers, client.options.headers);\n    const response = await resource_default.get(\n      client,\n      \"/push/deviceRegistrations/\" + encodeURIComponent(deviceId),\n      headers,\n      {},\n      null,\n      true\n    );\n    return devicedetails_default.fromResponseBody(\n      response.body,\n      client._MsgPack,\n      response.unpacked ? void 0 : format\n    );\n  }\n  async list(params) {\n    const client = this.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, envelope = this.client.http.supportsLinkHeaders ? void 0 : format, headers = defaults_default.defaultGetHeaders(client.options, { format });\n    mixin(headers, client.options.headers);\n    return new paginatedresource_default(client, \"/push/deviceRegistrations\", headers, envelope, async function(body, headers2, unpacked) {\n      return devicedetails_default.fromResponseBody(\n        body,\n        client._MsgPack,\n        unpacked ? void 0 : format\n      );\n    }).get(params);\n  }\n  async remove(deviceIdOrDetails) {\n    const client = this.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultGetHeaders(client.options, { format }), params = {}, deviceId = deviceIdOrDetails.id || deviceIdOrDetails;\n    if (typeof deviceId !== \"string\" || !deviceId.length) {\n      throw new ErrorInfo(\n        \"First argument to DeviceRegistrations#remove must be a deviceId string or DeviceDetails\",\n        4e4,\n        400\n      );\n    }\n    mixin(headers, client.options.headers);\n    if (client.options.pushFullWait)\n      mixin(params, { fullWait: \"true\" });\n    await resource_default[\"delete\"](\n      client,\n      \"/push/deviceRegistrations/\" + encodeURIComponent(deviceId),\n      headers,\n      params,\n      null,\n      true\n    );\n  }\n  async removeWhere(params) {\n    const client = this.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultGetHeaders(client.options, { format });\n    mixin(headers, client.options.headers);\n    if (client.options.pushFullWait)\n      mixin(params, { fullWait: \"true\" });\n    await resource_default[\"delete\"](client, \"/push/deviceRegistrations\", headers, params, null, true);\n  }\n};\nvar ChannelSubscriptions = class _ChannelSubscriptions {\n  constructor(client) {\n    /* ChannelSubscriptions have no unique id; removing one is equivalent to removeWhere by its properties */\n    this.remove = _ChannelSubscriptions.prototype.removeWhere;\n    this.client = client;\n  }\n  async save(subscription) {\n    const client = this.client;\n    const body = pushchannelsubscription_default.fromValues(subscription);\n    const format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultPostHeaders(client.options, { format }), params = {};\n    mixin(headers, client.options.headers);\n    if (client.options.pushFullWait)\n      mixin(params, { fullWait: \"true\" });\n    const requestBody = encodeBody(body, client._MsgPack, format);\n    const response = await resource_default.post(\n      client,\n      \"/push/channelSubscriptions\",\n      requestBody,\n      headers,\n      params,\n      null,\n      true\n    );\n    return pushchannelsubscription_default.fromResponseBody(\n      response.body,\n      client._MsgPack,\n      response.unpacked ? void 0 : format\n    );\n  }\n  async list(params) {\n    const client = this.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, envelope = this.client.http.supportsLinkHeaders ? void 0 : format, headers = defaults_default.defaultGetHeaders(client.options, { format });\n    mixin(headers, client.options.headers);\n    return new paginatedresource_default(client, \"/push/channelSubscriptions\", headers, envelope, async function(body, headers2, unpacked) {\n      return pushchannelsubscription_default.fromResponseBody(\n        body,\n        client._MsgPack,\n        unpacked ? void 0 : format\n      );\n    }).get(params);\n  }\n  async removeWhere(params) {\n    const client = this.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultGetHeaders(client.options, { format });\n    mixin(headers, client.options.headers);\n    if (client.options.pushFullWait)\n      mixin(params, { fullWait: \"true\" });\n    await resource_default[\"delete\"](client, \"/push/channelSubscriptions\", headers, params, null, true);\n  }\n  async listChannels(params) {\n    const client = this.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, envelope = this.client.http.supportsLinkHeaders ? void 0 : format, headers = defaults_default.defaultGetHeaders(client.options, { format });\n    mixin(headers, client.options.headers);\n    if (client.options.pushFullWait)\n      mixin(params, { fullWait: \"true\" });\n    return new paginatedresource_default(client, \"/push/channels\", headers, envelope, async function(body, headers2, unpacked) {\n      const parsedBody = !unpacked && format ? decodeBody(body, client._MsgPack, format) : body;\n      for (let i = 0; i < parsedBody.length; i++) {\n        parsedBody[i] = String(parsedBody[i]);\n      }\n      return parsedBody;\n    }).get(params);\n  }\n};\nvar push_default = Push;\n\n// src/common/lib/types/message.ts\nfunction normaliseContext(context) {\n  if (!context || !context.channelOptions) {\n    return {\n      channelOptions: context,\n      plugins: {},\n      baseEncodedPreviousPayload: void 0\n    };\n  }\n  return context;\n}\nfunction normalizeCipherOptions(Crypto2, logger, options) {\n  if (options && options.cipher) {\n    if (!Crypto2)\n      throwMissingPluginError(\"Crypto\");\n    const cipher = Crypto2.getCipher(options.cipher, logger);\n    return {\n      cipher: cipher.cipherParams,\n      channelCipher: cipher.cipher\n    };\n  }\n  return options != null ? options : {};\n}\nfunction getMessageSize(msg) {\n  let size = 0;\n  if (msg.name) {\n    size += msg.name.length;\n  }\n  if (msg.clientId) {\n    size += msg.clientId.length;\n  }\n  if (msg.extras) {\n    size += JSON.stringify(msg.extras).length;\n  }\n  if (msg.data) {\n    size += dataSizeBytes(msg.data);\n  }\n  return size;\n}\nasync function fromEncoded(logger, Crypto2, encoded, inputOptions) {\n  const msg = fromValues(encoded);\n  const options = normalizeCipherOptions(Crypto2, logger, inputOptions != null ? inputOptions : null);\n  try {\n    await decode(msg, options);\n  } catch (e) {\n    logger_default.logAction(logger, logger_default.LOG_ERROR, \"Message.fromEncoded()\", e.toString());\n  }\n  return msg;\n}\nasync function fromEncodedArray(logger, Crypto2, encodedArray, options) {\n  return Promise.all(\n    encodedArray.map(function(encoded) {\n      return fromEncoded(logger, Crypto2, encoded, options);\n    })\n  );\n}\nasync function encrypt(msg, options) {\n  let data = msg.data, encoding = msg.encoding, cipher = options.channelCipher;\n  encoding = encoding ? encoding + \"/\" : \"\";\n  if (!Platform.BufferUtils.isBuffer(data)) {\n    data = Platform.BufferUtils.utf8Encode(String(data));\n    encoding = encoding + \"utf-8/\";\n  }\n  const ciphertext = await cipher.encrypt(data);\n  msg.data = ciphertext;\n  msg.encoding = encoding + \"cipher+\" + cipher.algorithm;\n  return msg;\n}\nasync function encode(msg, options) {\n  const data = msg.data;\n  const nativeDataType = typeof data == \"string\" || Platform.BufferUtils.isBuffer(data) || data === null || data === void 0;\n  if (!nativeDataType) {\n    if (isObject(data) || Array.isArray(data)) {\n      msg.data = JSON.stringify(data);\n      msg.encoding = msg.encoding ? msg.encoding + \"/json\" : \"json\";\n    } else {\n      throw new ErrorInfo(\"Data type is unsupported\", 40013, 400);\n    }\n  }\n  if (options != null && options.cipher) {\n    return encrypt(msg, options);\n  } else {\n    return msg;\n  }\n}\nasync function encodeArray(messages, options) {\n  return Promise.all(messages.map((message) => encode(message, options)));\n}\nvar serialize = encodeBody;\nasync function decode(message, inputContext) {\n  const context = normaliseContext(inputContext);\n  let lastPayload = message.data;\n  const encoding = message.encoding;\n  if (encoding) {\n    const xforms = encoding.split(\"/\");\n    let lastProcessedEncodingIndex, encodingsToProcess = xforms.length, data = message.data;\n    let xform = \"\";\n    try {\n      while ((lastProcessedEncodingIndex = encodingsToProcess) > 0) {\n        const match = xforms[--encodingsToProcess].match(/([-\\w]+)(\\+([\\w-]+))?/);\n        if (!match)\n          break;\n        xform = match[1];\n        switch (xform) {\n          case \"base64\":\n            data = Platform.BufferUtils.base64Decode(String(data));\n            if (lastProcessedEncodingIndex == xforms.length) {\n              lastPayload = data;\n            }\n            continue;\n          case \"utf-8\":\n            data = Platform.BufferUtils.utf8Decode(data);\n            continue;\n          case \"json\":\n            data = JSON.parse(data);\n            continue;\n          case \"cipher\":\n            if (context.channelOptions != null && context.channelOptions.cipher && context.channelOptions.channelCipher) {\n              const xformAlgorithm = match[3], cipher = context.channelOptions.channelCipher;\n              if (xformAlgorithm != cipher.algorithm) {\n                throw new Error(\"Unable to decrypt message with given cipher; incompatible cipher params\");\n              }\n              data = await cipher.decrypt(data);\n              continue;\n            } else {\n              throw new Error(\"Unable to decrypt message; not an encrypted channel\");\n            }\n          case \"vcdiff\":\n            if (!context.plugins || !context.plugins.vcdiff) {\n              throw new ErrorInfo(\"Missing Vcdiff decoder (https://github.com/ably-forks/vcdiff-decoder)\", 40019, 400);\n            }\n            if (typeof Uint8Array === \"undefined\") {\n              throw new ErrorInfo(\n                \"Delta decoding not supported on this browser (need ArrayBuffer & Uint8Array)\",\n                40020,\n                400\n              );\n            }\n            try {\n              let deltaBase = context.baseEncodedPreviousPayload;\n              if (typeof deltaBase === \"string\") {\n                deltaBase = Platform.BufferUtils.utf8Encode(deltaBase);\n              }\n              const deltaBaseBuffer = Platform.BufferUtils.toBuffer(deltaBase);\n              data = Platform.BufferUtils.toBuffer(data);\n              data = Platform.BufferUtils.arrayBufferViewToBuffer(context.plugins.vcdiff.decode(data, deltaBaseBuffer));\n              lastPayload = data;\n            } catch (e) {\n              throw new ErrorInfo(\"Vcdiff delta decode failed with \" + e, 40018, 400);\n            }\n            continue;\n          default:\n            throw new Error(\"Unknown encoding\");\n        }\n      }\n    } catch (e) {\n      const err = e;\n      throw new ErrorInfo(\n        \"Error processing the \" + xform + \" encoding, decoder returned \\u2018\" + err.message + \"\\u2019\",\n        err.code || 40013,\n        400\n      );\n    } finally {\n      message.encoding = lastProcessedEncodingIndex <= 0 ? null : xforms.slice(0, lastProcessedEncodingIndex).join(\"/\");\n      message.data = data;\n    }\n  }\n  context.baseEncodedPreviousPayload = lastPayload;\n}\nasync function fromResponseBody(body, options, logger, MsgPack, format) {\n  if (format) {\n    body = decodeBody(body, MsgPack, format);\n  }\n  for (let i = 0; i < body.length; i++) {\n    const msg = body[i] = fromValues(body[i]);\n    try {\n      await decode(msg, options);\n    } catch (e) {\n      logger_default.logAction(logger, logger_default.LOG_ERROR, \"Message.fromResponseBody()\", e.toString());\n    }\n  }\n  return body;\n}\nfunction fromValues(values) {\n  return Object.assign(new Message(), values);\n}\nfunction fromValuesArray(values) {\n  const count = values.length, result = new Array(count);\n  for (let i = 0; i < count; i++)\n    result[i] = fromValues(values[i]);\n  return result;\n}\nfunction getMessagesSize(messages) {\n  let msg, total = 0;\n  for (let i = 0; i < messages.length; i++) {\n    msg = messages[i];\n    total += msg.size || (msg.size = getMessageSize(msg));\n  }\n  return total;\n}\nvar Message = class {\n  /**\n   * Overload toJSON() to intercept JSON.stringify()\n   * @return {*}\n   */\n  toJSON() {\n    let encoding = this.encoding;\n    let data = this.data;\n    if (data && Platform.BufferUtils.isBuffer(data)) {\n      if (arguments.length > 0) {\n        encoding = encoding ? encoding + \"/base64\" : \"base64\";\n        data = Platform.BufferUtils.base64Encode(data);\n      } else {\n        data = Platform.BufferUtils.toBuffer(data);\n      }\n    }\n    return {\n      name: this.name,\n      id: this.id,\n      clientId: this.clientId,\n      connectionId: this.connectionId,\n      connectionKey: this.connectionKey,\n      extras: this.extras,\n      encoding,\n      data\n    };\n  }\n  toString() {\n    let result = \"[Message\";\n    if (this.name)\n      result += \"; name=\" + this.name;\n    if (this.id)\n      result += \"; id=\" + this.id;\n    if (this.timestamp)\n      result += \"; timestamp=\" + this.timestamp;\n    if (this.clientId)\n      result += \"; clientId=\" + this.clientId;\n    if (this.connectionId)\n      result += \"; connectionId=\" + this.connectionId;\n    if (this.encoding)\n      result += \"; encoding=\" + this.encoding;\n    if (this.extras)\n      result += \"; extras =\" + JSON.stringify(this.extras);\n    if (this.data) {\n      if (typeof this.data == \"string\")\n        result += \"; data=\" + this.data;\n      else if (Platform.BufferUtils.isBuffer(this.data))\n        result += \"; data (buffer)=\" + Platform.BufferUtils.base64Encode(this.data);\n      else\n        result += \"; data (json)=\" + JSON.stringify(this.data);\n    }\n    if (this.extras)\n      result += \"; extras=\" + JSON.stringify(this.extras);\n    result += \"]\";\n    return result;\n  }\n};\nvar message_default = Message;\n\n// src/common/lib/types/presencemessage.ts\nvar actions = [\"absent\", \"present\", \"enter\", \"leave\", \"update\"];\nfunction toActionValue(actionString) {\n  return actions.indexOf(actionString);\n}\nasync function fromEncoded2(logger, encoded, options) {\n  const msg = fromValues2(encoded, true);\n  try {\n    await decode2(msg, options != null ? options : {});\n  } catch (e) {\n    logger_default.logAction(logger, logger_default.LOG_ERROR, \"PresenceMessage.fromEncoded()\", e.toString());\n  }\n  return msg;\n}\nasync function fromEncodedArray2(logger, encodedArray, options) {\n  return Promise.all(\n    encodedArray.map(function(encoded) {\n      return fromEncoded2(logger, encoded, options);\n    })\n  );\n}\nfunction fromValues2(values, stringifyAction) {\n  if (stringifyAction) {\n    values.action = actions[values.action];\n  }\n  return Object.assign(new PresenceMessage(), values);\n}\nvar decode2 = decode;\nasync function fromResponseBody2(body, options, logger, MsgPack, format) {\n  const messages = [];\n  if (format) {\n    body = decodeBody(body, MsgPack, format);\n  }\n  for (let i = 0; i < body.length; i++) {\n    const msg = messages[i] = fromValues2(body[i], true);\n    try {\n      await decode2(msg, options);\n    } catch (e) {\n      logger_default.logAction(logger, logger_default.LOG_ERROR, \"PresenceMessage.fromResponseBody()\", e.toString());\n    }\n  }\n  return messages;\n}\nfunction fromValuesArray2(values) {\n  const count = values.length, result = new Array(count);\n  for (let i = 0; i < count; i++)\n    result[i] = fromValues2(values[i]);\n  return result;\n}\nfunction fromData(data) {\n  if (data instanceof PresenceMessage) {\n    return data;\n  }\n  return fromValues2({\n    data\n  });\n}\nvar PresenceMessage = class {\n  /* Returns whether this presenceMessage is synthesized, i.e. was not actually\n   * sent by the connection (usually means a leave event sent 15s after a\n   * disconnection). This is useful because synthesized messages cannot be\n   * compared for newness by id lexicographically - RTP2b1\n   */\n  isSynthesized() {\n    if (!this.id || !this.connectionId) {\n      return true;\n    }\n    return this.id.substring(this.connectionId.length, 0) !== this.connectionId;\n  }\n  /* RTP2b2 */\n  parseId() {\n    if (!this.id)\n      throw new Error(\"parseId(): Presence message does not contain an id\");\n    const parts = this.id.split(\":\");\n    return {\n      connectionId: parts[0],\n      msgSerial: parseInt(parts[1], 10),\n      index: parseInt(parts[2], 10)\n    };\n  }\n  /**\n   * Overload toJSON() to intercept JSON.stringify()\n   * @return {*}\n   */\n  toJSON() {\n    let data = this.data;\n    let encoding = this.encoding;\n    if (data && Platform.BufferUtils.isBuffer(data)) {\n      if (arguments.length > 0) {\n        encoding = encoding ? encoding + \"/base64\" : \"base64\";\n        data = Platform.BufferUtils.base64Encode(data);\n      } else {\n        data = Platform.BufferUtils.toBuffer(data);\n      }\n    }\n    return {\n      id: this.id,\n      clientId: this.clientId,\n      /* Convert presence action back to an int for sending to Ably */\n      action: toActionValue(this.action),\n      data,\n      encoding,\n      extras: this.extras\n    };\n  }\n  toString() {\n    let result = \"[PresenceMessage\";\n    result += \"; action=\" + this.action;\n    if (this.id)\n      result += \"; id=\" + this.id;\n    if (this.timestamp)\n      result += \"; timestamp=\" + this.timestamp;\n    if (this.clientId)\n      result += \"; clientId=\" + this.clientId;\n    if (this.connectionId)\n      result += \"; connectionId=\" + this.connectionId;\n    if (this.encoding)\n      result += \"; encoding=\" + this.encoding;\n    if (this.data) {\n      if (typeof this.data == \"string\")\n        result += \"; data=\" + this.data;\n      else if (Platform.BufferUtils.isBuffer(this.data))\n        result += \"; data (buffer)=\" + Platform.BufferUtils.base64Encode(this.data);\n      else\n        result += \"; data (json)=\" + JSON.stringify(this.data);\n    }\n    if (this.extras) {\n      result += \"; extras=\" + JSON.stringify(this.extras);\n    }\n    result += \"]\";\n    return result;\n  }\n};\nvar presencemessage_default = PresenceMessage;\n\n// src/common/lib/client/restpresence.ts\nvar RestPresence = class {\n  constructor(channel) {\n    this.channel = channel;\n  }\n  get logger() {\n    return this.channel.logger;\n  }\n  async get(params) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RestPresence.get()\", \"channel = \" + this.channel.name);\n    const client = this.channel.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, envelope = this.channel.client.http.supportsLinkHeaders ? void 0 : format, headers = defaults_default.defaultGetHeaders(client.options, { format });\n    mixin(headers, client.options.headers);\n    const options = this.channel.channelOptions;\n    return new paginatedresource_default(\n      client,\n      this.channel.client.rest.presenceMixin.basePath(this),\n      headers,\n      envelope,\n      async (body, headers2, unpacked) => {\n        return await fromResponseBody2(\n          body,\n          options,\n          this.logger,\n          client._MsgPack,\n          unpacked ? void 0 : format\n        );\n      }\n    ).get(params);\n  }\n  async history(params) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RestPresence.history()\", \"channel = \" + this.channel.name);\n    return this.channel.client.rest.presenceMixin.history(this, params);\n  }\n};\nvar restpresence_default = RestPresence;\n\n// src/common/lib/client/restchannel.ts\nvar MSG_ID_ENTROPY_BYTES = 9;\nfunction allEmptyIds(messages) {\n  return messages.every(function(message) {\n    return !message.id;\n  });\n}\nvar RestChannel = class {\n  constructor(client, name, channelOptions) {\n    var _a2, _b;\n    logger_default.logAction(client.logger, logger_default.LOG_MINOR, \"RestChannel()\", \"started; name = \" + name);\n    this.name = name;\n    this.client = client;\n    this.presence = new restpresence_default(this);\n    this.channelOptions = normaliseChannelOptions((_a2 = client._Crypto) != null ? _a2 : null, this.logger, channelOptions);\n    if ((_b = client.options.plugins) == null ? void 0 : _b.Push) {\n      this._push = new client.options.plugins.Push.PushChannel(this);\n    }\n  }\n  get push() {\n    if (!this._push) {\n      throwMissingPluginError(\"Push\");\n    }\n    return this._push;\n  }\n  get logger() {\n    return this.client.logger;\n  }\n  setOptions(options) {\n    var _a2;\n    this.channelOptions = normaliseChannelOptions((_a2 = this.client._Crypto) != null ? _a2 : null, this.logger, options);\n  }\n  async history(params) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RestChannel.history()\", \"channel = \" + this.name);\n    return this.client.rest.channelMixin.history(this, params);\n  }\n  async publish(...args) {\n    const first = args[0], second = args[1];\n    let messages;\n    let params;\n    if (typeof first === \"string\" || first === null) {\n      messages = [fromValues({ name: first, data: second })];\n      params = args[2];\n    } else if (isObject(first)) {\n      messages = [fromValues(first)];\n      params = args[1];\n    } else if (Array.isArray(first)) {\n      messages = fromValuesArray(first);\n      params = args[1];\n    } else {\n      throw new ErrorInfo(\n        \"The single-argument form of publish() expects a message object or an array of message objects\",\n        40013,\n        400\n      );\n    }\n    if (!params) {\n      params = {};\n    }\n    const client = this.client, options = client.options, format = options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, idempotentRestPublishing = client.options.idempotentRestPublishing, headers = defaults_default.defaultPostHeaders(client.options, { format });\n    mixin(headers, options.headers);\n    if (idempotentRestPublishing && allEmptyIds(messages)) {\n      const msgIdBase = await randomString(MSG_ID_ENTROPY_BYTES);\n      messages.forEach(function(message, index) {\n        message.id = msgIdBase + \":\" + index.toString();\n      });\n    }\n    await encodeArray(messages, this.channelOptions);\n    const size = getMessagesSize(messages), maxMessageSize = options.maxMessageSize;\n    if (size > maxMessageSize) {\n      throw new ErrorInfo(\n        \"Maximum size of messages that can be published at once exceeded ( was \" + size + \" bytes; limit is \" + maxMessageSize + \" bytes)\",\n        40009,\n        400\n      );\n    }\n    await this._publish(serialize(messages, client._MsgPack, format), headers, params);\n  }\n  async _publish(requestBody, headers, params) {\n    await resource_default.post(\n      this.client,\n      this.client.rest.channelMixin.basePath(this) + \"/messages\",\n      requestBody,\n      headers,\n      params,\n      null,\n      true\n    );\n  }\n  async status() {\n    return this.client.rest.channelMixin.status(this);\n  }\n};\nvar restchannel_default = RestChannel;\n\n// src/common/lib/types/stats.ts\nvar Stats = class _Stats {\n  constructor(values) {\n    this.entries = values && values.entries || void 0;\n    this.schema = values && values.schema || void 0;\n    this.appId = values && values.appId || void 0;\n    this.inProgress = values && values.inProgress || void 0;\n    this.unit = values && values.unit || void 0;\n    this.intervalId = values && values.intervalId || void 0;\n  }\n  static fromValues(values) {\n    return new _Stats(values);\n  }\n};\nvar stats_default = Stats;\n\n// src/common/lib/client/restchannelmixin.ts\nvar RestChannelMixin = class {\n  static basePath(channel) {\n    return \"/channels/\" + encodeURIComponent(channel.name);\n  }\n  static history(channel, params) {\n    const client = channel.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, envelope = channel.client.http.supportsLinkHeaders ? void 0 : format, headers = defaults_default.defaultGetHeaders(client.options, { format });\n    mixin(headers, client.options.headers);\n    const options = channel.channelOptions;\n    return new paginatedresource_default(client, this.basePath(channel) + \"/messages\", headers, envelope, async function(body, headers2, unpacked) {\n      return await fromResponseBody(\n        body,\n        options,\n        channel.logger,\n        client._MsgPack,\n        unpacked ? void 0 : format\n      );\n    }).get(params);\n  }\n  static async status(channel) {\n    const format = channel.client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */;\n    const headers = defaults_default.defaultPostHeaders(channel.client.options, { format });\n    const response = await resource_default.get(\n      channel.client,\n      this.basePath(channel),\n      headers,\n      {},\n      format,\n      true\n    );\n    return response.body;\n  }\n};\n\n// src/common/lib/client/restpresencemixin.ts\nvar RestPresenceMixin = class {\n  static basePath(presence) {\n    return RestChannelMixin.basePath(presence.channel) + \"/presence\";\n  }\n  static async history(presence, params) {\n    const client = presence.channel.client, format = client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, envelope = presence.channel.client.http.supportsLinkHeaders ? void 0 : format, headers = defaults_default.defaultGetHeaders(client.options, { format });\n    mixin(headers, client.options.headers);\n    const options = presence.channel.channelOptions;\n    return new paginatedresource_default(client, this.basePath(presence) + \"/history\", headers, envelope, async function(body, headers2, unpacked) {\n      return await fromResponseBody2(\n        body,\n        options,\n        presence.logger,\n        client._MsgPack,\n        unpacked ? void 0 : format\n      );\n    }).get(params);\n  }\n};\n\n// src/common/lib/client/rest.ts\nvar Rest = class {\n  constructor(client) {\n    this.channelMixin = RestChannelMixin;\n    this.presenceMixin = RestPresenceMixin;\n    // exposed for plugins but shouldn't be bundled with minimal realtime\n    this.Resource = resource_default;\n    this.DeviceDetails = devicedetails_default;\n    this.client = client;\n    this.channels = new Channels(this.client);\n    this.push = new push_default(this.client);\n  }\n  async stats(params) {\n    const headers = defaults_default.defaultGetHeaders(this.client.options), format = this.client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, envelope = this.client.http.supportsLinkHeaders ? void 0 : format;\n    mixin(headers, this.client.options.headers);\n    return new paginatedresource_default(this.client, \"/stats\", headers, envelope, function(body, headers2, unpacked) {\n      const statsValues = unpacked ? body : JSON.parse(body);\n      for (let i = 0; i < statsValues.length; i++)\n        statsValues[i] = stats_default.fromValues(statsValues[i]);\n      return statsValues;\n    }).get(params);\n  }\n  async time(params) {\n    const headers = defaults_default.defaultGetHeaders(this.client.options);\n    if (this.client.options.headers)\n      mixin(headers, this.client.options.headers);\n    const timeUri = (host) => {\n      return this.client.baseUri(host) + \"/time\";\n    };\n    let { error, body, unpacked } = await this.client.http.do(\n      HttpMethods_default.Get,\n      timeUri,\n      headers,\n      null,\n      params\n    );\n    if (error) {\n      throw error;\n    }\n    if (!unpacked)\n      body = JSON.parse(body);\n    const time = body[0];\n    if (!time) {\n      throw new ErrorInfo(\"Internal error (unexpected result type from GET /time)\", 5e4, 500);\n    }\n    this.client.serverTimeOffset = time - Date.now();\n    return time;\n  }\n  async request(method, path, version2, params, body, customHeaders) {\n    var _a2;\n    const [encoder, decoder, format] = (() => {\n      if (this.client.options.useBinaryProtocol) {\n        if (!this.client._MsgPack) {\n          throwMissingPluginError(\"MsgPack\");\n        }\n        return [this.client._MsgPack.encode, this.client._MsgPack.decode, \"msgpack\" /* msgpack */];\n      } else {\n        return [JSON.stringify, JSON.parse, \"json\" /* json */];\n      }\n    })();\n    const envelope = this.client.http.supportsLinkHeaders ? void 0 : format;\n    params = params || {};\n    const _method = method.toLowerCase();\n    const headers = _method == \"get\" ? defaults_default.defaultGetHeaders(this.client.options, { format, protocolVersion: version2 }) : defaults_default.defaultPostHeaders(this.client.options, { format, protocolVersion: version2 });\n    if (typeof body !== \"string\") {\n      body = (_a2 = encoder(body)) != null ? _a2 : null;\n    }\n    mixin(headers, this.client.options.headers);\n    if (customHeaders) {\n      mixin(headers, customHeaders);\n    }\n    const paginatedResource = new paginatedresource_default(\n      this.client,\n      path,\n      headers,\n      envelope,\n      async function(resbody, headers2, unpacked) {\n        return ensureArray(unpacked ? resbody : decoder(resbody));\n      },\n      /* useHttpPaginatedResponse: */\n      true\n    );\n    if (!Platform.Http.methods.includes(_method)) {\n      throw new ErrorInfo(\"Unsupported method \" + _method, 40500, 405);\n    }\n    if (Platform.Http.methodsWithBody.includes(_method)) {\n      return paginatedResource[_method](params, body);\n    } else {\n      return paginatedResource[_method](params);\n    }\n  }\n  async batchPublish(specOrSpecs) {\n    let requestBodyDTO;\n    let singleSpecMode;\n    if (Array.isArray(specOrSpecs)) {\n      requestBodyDTO = specOrSpecs;\n      singleSpecMode = false;\n    } else {\n      requestBodyDTO = [specOrSpecs];\n      singleSpecMode = true;\n    }\n    const format = this.client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultPostHeaders(this.client.options, { format });\n    if (this.client.options.headers)\n      mixin(headers, this.client.options.headers);\n    const requestBody = encodeBody(requestBodyDTO, this.client._MsgPack, format);\n    const response = await resource_default.post(this.client, \"/messages\", requestBody, headers, {}, null, true);\n    const batchResults = response.unpacked ? response.body : decodeBody(response.body, this.client._MsgPack, format);\n    if (singleSpecMode) {\n      return batchResults[0];\n    } else {\n      return batchResults;\n    }\n  }\n  async batchPresence(channels) {\n    const format = this.client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultPostHeaders(this.client.options, { format });\n    if (this.client.options.headers)\n      mixin(headers, this.client.options.headers);\n    const channelsParam = channels.join(\",\");\n    const response = await resource_default.get(this.client, \"/presence\", headers, { channels: channelsParam }, null, true);\n    return response.unpacked ? response.body : decodeBody(response.body, this.client._MsgPack, format);\n  }\n  async revokeTokens(specifiers, options) {\n    if (useTokenAuth(this.client.options)) {\n      throw new ErrorInfo(\"Cannot revoke tokens when using token auth\", 40162, 401);\n    }\n    const keyName = this.client.options.keyName;\n    let resolvedOptions = options != null ? options : {};\n    const requestBodyDTO = __spreadValues({\n      targets: specifiers.map((specifier) => `${specifier.type}:${specifier.value}`)\n    }, resolvedOptions);\n    const format = this.client.options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */, headers = defaults_default.defaultPostHeaders(this.client.options, { format });\n    if (this.client.options.headers)\n      mixin(headers, this.client.options.headers);\n    const requestBody = encodeBody(requestBodyDTO, this.client._MsgPack, format);\n    const response = await resource_default.post(\n      this.client,\n      `/keys/${keyName}/revokeTokens`,\n      requestBody,\n      headers,\n      {},\n      null,\n      true\n    );\n    return response.unpacked ? response.body : decodeBody(response.body, this.client._MsgPack, format);\n  }\n};\nvar Channels = class {\n  constructor(client) {\n    this.client = client;\n    this.all = /* @__PURE__ */ Object.create(null);\n  }\n  get(name, channelOptions) {\n    name = String(name);\n    let channel = this.all[name];\n    if (!channel) {\n      this.all[name] = channel = new restchannel_default(this.client, name, channelOptions);\n    } else if (channelOptions) {\n      channel.setOptions(channelOptions);\n    }\n    return channel;\n  }\n  /* Included to support certain niche use-cases; most users should ignore this.\n   * Please do not use this unless you know what you're doing */\n  release(name) {\n    delete this.all[String(name)];\n  }\n};\n\n// src/common/lib/client/baserest.ts\nvar BaseRest = class extends baseclient_default {\n  /*\n   * The public typings declare that this only accepts an object, but since we want to emit a good error message in the case where a non-TypeScript user does one of these things:\n   *\n   * 1. passes a string (which is quite likely if they’re e.g. migrating from the default variant to the modular variant)\n   * 2. passes no argument at all\n   *\n   * tell the compiler that these cases are possible so that it forces us to handle them.\n   */\n  constructor(options) {\n    super(defaults_default.objectifyOptions(options, false, \"BaseRest\", logger_default.defaultLogger, { Rest }));\n  }\n};\n\n// src/common/lib/client/modularplugins.ts\nvar allCommonModularPlugins = { Rest };\n\n// src/common/lib/types/defaultmessage.ts\nvar DefaultMessage = class extends message_default {\n  static async fromEncoded(encoded, inputOptions) {\n    return fromEncoded(logger_default.defaultLogger, Platform.Crypto, encoded, inputOptions);\n  }\n  static async fromEncodedArray(encodedArray, options) {\n    return fromEncodedArray(logger_default.defaultLogger, Platform.Crypto, encodedArray, options);\n  }\n  // Used by tests\n  static fromValues(values) {\n    return Object.assign(new message_default(), values);\n  }\n  // Used by tests\n  static async encode(msg, options) {\n    return encode(msg, options);\n  }\n  // Used by tests\n  static async decode(message, inputContext) {\n    return decode(message, inputContext);\n  }\n};\n\n// src/common/lib/types/defaultpresencemessage.ts\nvar DefaultPresenceMessage = class extends presencemessage_default {\n  static async fromEncoded(encoded, inputOptions) {\n    return fromEncoded2(logger_default.defaultLogger, encoded, inputOptions);\n  }\n  static async fromEncodedArray(encodedArray, options) {\n    return fromEncodedArray2(logger_default.defaultLogger, encodedArray, options);\n  }\n  static fromValues(values, stringifyAction) {\n    return fromValues2(values, stringifyAction);\n  }\n};\n\n// src/common/lib/client/defaultrest.ts\nvar _DefaultRest = class _DefaultRest extends BaseRest {\n  // The public typings declare that this requires an argument to be passed, but since we want to emit a good error message in the case where a non-TypeScript user does not pass an argument, tell the compiler that this is possible so that it forces us to handle it.\n  constructor(options) {\n    var _a2, _b;\n    const MsgPack = _DefaultRest._MsgPack;\n    if (!MsgPack) {\n      throw new Error(\"Expected DefaultRest._MsgPack to have been set\");\n    }\n    super(\n      defaults_default.objectifyOptions(options, true, \"Rest\", logger_default.defaultLogger, __spreadProps(__spreadValues({}, allCommonModularPlugins), {\n        Crypto: (_a2 = _DefaultRest.Crypto) != null ? _a2 : void 0,\n        MsgPack: (_b = _DefaultRest._MsgPack) != null ? _b : void 0\n      }))\n    );\n  }\n  static get Crypto() {\n    if (this._Crypto === null) {\n      throw new Error(\"Encryption not enabled; use ably.encryption.js instead\");\n    }\n    return this._Crypto;\n  }\n  static set Crypto(newValue) {\n    this._Crypto = newValue;\n  }\n};\n_DefaultRest._Crypto = null;\n_DefaultRest.Message = DefaultMessage;\n_DefaultRest.PresenceMessage = DefaultPresenceMessage;\n_DefaultRest._MsgPack = null;\n// Used by tests\n_DefaultRest._Http = Http;\nvar DefaultRest = _DefaultRest;\n\n// src/common/lib/util/eventemitter.ts\nfunction callListener(logger, eventThis, listener, args) {\n  try {\n    listener.apply(eventThis, args);\n  } catch (e) {\n    logger_default.logAction(\n      logger,\n      logger_default.LOG_ERROR,\n      \"EventEmitter.emit()\",\n      \"Unexpected listener exception: \" + e + \"; stack = \" + (e && e.stack)\n    );\n  }\n}\nfunction removeListener(targetListeners, listener, eventFilter) {\n  let listeners;\n  let index;\n  let eventName;\n  for (let targetListenersIndex = 0; targetListenersIndex < targetListeners.length; targetListenersIndex++) {\n    listeners = targetListeners[targetListenersIndex];\n    if (eventFilter) {\n      listeners = listeners[eventFilter];\n    }\n    if (Array.isArray(listeners)) {\n      while ((index = listeners.indexOf(listener)) !== -1) {\n        listeners.splice(index, 1);\n      }\n      if (eventFilter && listeners.length === 0) {\n        delete targetListeners[targetListenersIndex][eventFilter];\n      }\n    } else if (isObject(listeners)) {\n      for (eventName in listeners) {\n        if (Object.prototype.hasOwnProperty.call(listeners, eventName) && Array.isArray(listeners[eventName])) {\n          removeListener([listeners], listener, eventName);\n        }\n      }\n    }\n  }\n}\nvar EventEmitter = class {\n  constructor(logger) {\n    this.logger = logger;\n    this.any = [];\n    this.events = /* @__PURE__ */ Object.create(null);\n    this.anyOnce = [];\n    this.eventsOnce = /* @__PURE__ */ Object.create(null);\n  }\n  on(...args) {\n    if (args.length === 1) {\n      const listener = args[0];\n      if (typeof listener === \"function\") {\n        this.any.push(listener);\n      } else {\n        throw new Error(\"EventListener.on(): Invalid arguments: \" + Platform.Config.inspect(args));\n      }\n    }\n    if (args.length === 2) {\n      const [event, listener] = args;\n      if (typeof listener !== \"function\") {\n        throw new Error(\"EventListener.on(): Invalid arguments: \" + Platform.Config.inspect(args));\n      }\n      if (isNil(event)) {\n        this.any.push(listener);\n      } else if (Array.isArray(event)) {\n        event.forEach((eventName) => {\n          this.on(eventName, listener);\n        });\n      } else {\n        if (typeof event !== \"string\") {\n          throw new Error(\"EventListener.on(): Invalid arguments: \" + Platform.Config.inspect(args));\n        }\n        const listeners = this.events[event] || (this.events[event] = []);\n        listeners.push(listener);\n      }\n    }\n  }\n  off(...args) {\n    if (args.length == 0 || isNil(args[0]) && isNil(args[1])) {\n      this.any = [];\n      this.events = /* @__PURE__ */ Object.create(null);\n      this.anyOnce = [];\n      this.eventsOnce = /* @__PURE__ */ Object.create(null);\n      return;\n    }\n    const [firstArg, secondArg] = args;\n    let listener = null;\n    let event = null;\n    if (args.length === 1 || !secondArg) {\n      if (typeof firstArg === \"function\") {\n        listener = firstArg;\n      } else {\n        event = firstArg;\n      }\n    } else {\n      if (typeof secondArg !== \"function\") {\n        throw new Error(\"EventEmitter.off(): invalid arguments:\" + Platform.Config.inspect(args));\n      }\n      [event, listener] = [firstArg, secondArg];\n    }\n    if (listener && isNil(event)) {\n      removeListener([this.any, this.events, this.anyOnce, this.eventsOnce], listener);\n      return;\n    }\n    if (Array.isArray(event)) {\n      event.forEach((eventName) => {\n        this.off(eventName, listener);\n      });\n      return;\n    }\n    if (typeof event !== \"string\") {\n      throw new Error(\"EventEmitter.off(): invalid arguments:\" + Platform.Config.inspect(args));\n    }\n    if (listener) {\n      removeListener([this.events, this.eventsOnce], listener, event);\n    } else {\n      delete this.events[event];\n      delete this.eventsOnce[event];\n    }\n  }\n  /**\n   * Get the array of listeners for a given event; excludes once events\n   * @param event (optional) the name of the event, or none for 'any'\n   * @return array of events, or null if none\n   */\n  listeners(event) {\n    if (event) {\n      const listeners = this.events[event] || [];\n      if (this.eventsOnce[event])\n        Array.prototype.push.apply(listeners, this.eventsOnce[event]);\n      return listeners.length ? listeners : null;\n    }\n    return this.any.length ? this.any : null;\n  }\n  /**\n   * Emit an event\n   * @param event the event name\n   * @param args the arguments to pass to the listener\n   */\n  emit(event, ...args) {\n    const eventThis = { event };\n    const listeners = [];\n    if (this.anyOnce.length) {\n      Array.prototype.push.apply(listeners, this.anyOnce);\n      this.anyOnce = [];\n    }\n    if (this.any.length) {\n      Array.prototype.push.apply(listeners, this.any);\n    }\n    const eventsOnceListeners = this.eventsOnce[event];\n    if (eventsOnceListeners) {\n      Array.prototype.push.apply(listeners, eventsOnceListeners);\n      delete this.eventsOnce[event];\n    }\n    const eventsListeners = this.events[event];\n    if (eventsListeners) {\n      Array.prototype.push.apply(listeners, eventsListeners);\n    }\n    listeners.forEach((listener) => {\n      callListener(this.logger, eventThis, listener, args);\n    });\n  }\n  once(...args) {\n    const argCount = args.length;\n    if (argCount === 0 || argCount === 1 && typeof args[0] !== \"function\") {\n      const event = args[0];\n      return new Promise((resolve) => {\n        this.once(event, resolve);\n      });\n    }\n    const [firstArg, secondArg] = args;\n    if (args.length === 1 && typeof firstArg === \"function\") {\n      this.anyOnce.push(firstArg);\n    } else if (isNil(firstArg)) {\n      if (typeof secondArg !== \"function\") {\n        throw new Error(\"EventEmitter.once(): Invalid arguments:\" + Platform.Config.inspect(args));\n      }\n      this.anyOnce.push(secondArg);\n    } else if (Array.isArray(firstArg)) {\n      const self2 = this;\n      const listenerWrapper = function() {\n        const innerArgs = Array.prototype.slice.call(arguments);\n        firstArg.forEach(function(eventName) {\n          self2.off(eventName, listenerWrapper);\n        });\n        if (typeof secondArg !== \"function\") {\n          throw new Error(\"EventEmitter.once(): Invalid arguments:\" + Platform.Config.inspect(args));\n        }\n        secondArg.apply(this, innerArgs);\n      };\n      firstArg.forEach(function(eventName) {\n        self2.on(eventName, listenerWrapper);\n      });\n    } else {\n      if (typeof firstArg !== \"string\") {\n        throw new Error(\"EventEmitter.once(): Invalid arguments:\" + Platform.Config.inspect(args));\n      }\n      const listeners = this.eventsOnce[firstArg] || (this.eventsOnce[firstArg] = []);\n      if (secondArg) {\n        if (typeof secondArg !== \"function\") {\n          throw new Error(\"EventEmitter.once(): Invalid arguments:\" + Platform.Config.inspect(args));\n        }\n        listeners.push(secondArg);\n      }\n    }\n  }\n  /**\n   * Listen for a single occurrence of a state event and fire immediately if currentState matches targetState\n   * @param targetState the name of the state event to listen to\n   * @param currentState the name of the current state of this object\n   */\n  async whenState(targetState, currentState) {\n    if (typeof targetState !== \"string\" || typeof currentState !== \"string\") {\n      throw new Error(\"whenState requires a valid state String argument\");\n    }\n    if (targetState === currentState) {\n      return null;\n    } else {\n      return this.once(targetState);\n    }\n  }\n};\nvar eventemitter_default = EventEmitter;\n\n// src/common/lib/types/protocolmessage.ts\nvar actions2 = {\n  HEARTBEAT: 0,\n  ACK: 1,\n  NACK: 2,\n  CONNECT: 3,\n  CONNECTED: 4,\n  DISCONNECT: 5,\n  DISCONNECTED: 6,\n  CLOSE: 7,\n  CLOSED: 8,\n  ERROR: 9,\n  ATTACH: 10,\n  ATTACHED: 11,\n  DETACH: 12,\n  DETACHED: 13,\n  PRESENCE: 14,\n  MESSAGE: 15,\n  SYNC: 16,\n  AUTH: 17,\n  ACTIVATE: 18\n};\nvar ActionName = [];\nObject.keys(actions2).forEach(function(name) {\n  ActionName[actions2[name]] = name;\n});\nvar flags = {\n  /* Channel attach state flags */\n  HAS_PRESENCE: 1 << 0,\n  HAS_BACKLOG: 1 << 1,\n  RESUMED: 1 << 2,\n  TRANSIENT: 1 << 4,\n  ATTACH_RESUME: 1 << 5,\n  /* Channel mode flags */\n  PRESENCE: 1 << 16,\n  PUBLISH: 1 << 17,\n  SUBSCRIBE: 1 << 18,\n  PRESENCE_SUBSCRIBE: 1 << 19\n};\nvar flagNames = Object.keys(flags);\nflags.MODE_ALL = flags.PRESENCE | flags.PUBLISH | flags.SUBSCRIBE | flags.PRESENCE_SUBSCRIBE;\nfunction toStringArray(array) {\n  const result = [];\n  if (array) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i].toString());\n    }\n  }\n  return \"[ \" + result.join(\", \") + \" ]\";\n}\nvar channelModes = [\"PRESENCE\", \"PUBLISH\", \"SUBSCRIBE\", \"PRESENCE_SUBSCRIBE\"];\nvar serialize2 = encodeBody;\nfunction deserialize(serialized, MsgPack, presenceMessagePlugin, format) {\n  const deserialized = decodeBody(serialized, MsgPack, format);\n  return fromDeserialized(deserialized, presenceMessagePlugin);\n}\nfunction fromDeserialized(deserialized, presenceMessagePlugin) {\n  const error = deserialized.error;\n  if (error)\n    deserialized.error = ErrorInfo.fromValues(error);\n  const messages = deserialized.messages;\n  if (messages)\n    for (let i = 0; i < messages.length; i++)\n      messages[i] = fromValues(messages[i]);\n  const presence = presenceMessagePlugin ? deserialized.presence : void 0;\n  if (presenceMessagePlugin) {\n    if (presence && presenceMessagePlugin)\n      for (let i = 0; i < presence.length; i++)\n        presence[i] = presenceMessagePlugin.presenceMessageFromValues(presence[i], true);\n  }\n  return Object.assign(new ProtocolMessage(), __spreadProps(__spreadValues({}, deserialized), { presence }));\n}\nfunction fromDeserializedIncludingDependencies(deserialized) {\n  return fromDeserialized(deserialized, { presenceMessageFromValues: fromValues2, presenceMessagesFromValuesArray: fromValuesArray2 });\n}\nfunction fromValues3(values) {\n  return Object.assign(new ProtocolMessage(), values);\n}\nfunction stringify(msg, presenceMessagePlugin) {\n  let result = \"[ProtocolMessage\";\n  if (msg.action !== void 0)\n    result += \"; action=\" + ActionName[msg.action] || 0;\n  const simpleAttributes = [\"id\", \"channel\", \"channelSerial\", \"connectionId\", \"count\", \"msgSerial\", \"timestamp\"];\n  let attribute;\n  for (let attribIndex = 0; attribIndex < simpleAttributes.length; attribIndex++) {\n    attribute = simpleAttributes[attribIndex];\n    if (msg[attribute] !== void 0)\n      result += \"; \" + attribute + \"=\" + msg[attribute];\n  }\n  if (msg.messages)\n    result += \"; messages=\" + toStringArray(fromValuesArray(msg.messages));\n  if (msg.presence && presenceMessagePlugin)\n    result += \"; presence=\" + toStringArray(presenceMessagePlugin.presenceMessagesFromValuesArray(msg.presence));\n  if (msg.error)\n    result += \"; error=\" + ErrorInfo.fromValues(msg.error).toString();\n  if (msg.auth && msg.auth.accessToken)\n    result += \"; token=\" + msg.auth.accessToken;\n  if (msg.flags)\n    result += \"; flags=\" + flagNames.filter(msg.hasFlag).join(\",\");\n  if (msg.params) {\n    let stringifiedParams = \"\";\n    forInOwnNonNullProperties(msg.params, function(prop) {\n      if (stringifiedParams.length > 0) {\n        stringifiedParams += \"; \";\n      }\n      stringifiedParams += prop + \"=\" + msg.params[prop];\n    });\n    if (stringifiedParams.length > 0) {\n      result += \"; params=[\" + stringifiedParams + \"]\";\n    }\n  }\n  result += \"]\";\n  return result;\n}\nvar ProtocolMessage = class {\n  constructor() {\n    this.hasFlag = (flag) => {\n      return (this.flags & flags[flag]) > 0;\n    };\n  }\n  setFlag(flag) {\n    return this.flags = this.flags | flags[flag];\n  }\n  getMode() {\n    return this.flags && this.flags & flags.MODE_ALL;\n  }\n  encodeModesToFlags(modes) {\n    modes.forEach((mode) => this.setFlag(mode));\n  }\n  decodeModesFromFlags() {\n    const modes = [];\n    channelModes.forEach((mode) => {\n      if (this.hasFlag(mode)) {\n        modes.push(mode);\n      }\n    });\n    return modes.length > 0 ? modes : void 0;\n  }\n};\nvar protocolmessage_default = ProtocolMessage;\n\n// src/common/lib/transport/messagequeue.ts\nvar MessageQueue = class extends eventemitter_default {\n  constructor(logger) {\n    super(logger);\n    this.messages = [];\n  }\n  count() {\n    return this.messages.length;\n  }\n  push(message) {\n    this.messages.push(message);\n  }\n  shift() {\n    return this.messages.shift();\n  }\n  last() {\n    return this.messages[this.messages.length - 1];\n  }\n  copyAll() {\n    return this.messages.slice();\n  }\n  append(messages) {\n    this.messages.push.apply(this.messages, messages);\n  }\n  prepend(messages) {\n    this.messages.unshift.apply(this.messages, messages);\n  }\n  completeMessages(serial, count, err) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"MessageQueue.completeMessages()\",\n      \"serial = \" + serial + \"; count = \" + count\n    );\n    err = err || null;\n    const messages = this.messages;\n    if (messages.length === 0) {\n      throw new Error(\"MessageQueue.completeMessages(): completeMessages called on any empty MessageQueue\");\n    }\n    const first = messages[0];\n    if (first) {\n      const startSerial = first.message.msgSerial;\n      const endSerial = serial + count;\n      if (endSerial > startSerial) {\n        const completeMessages = messages.splice(0, endSerial - startSerial);\n        for (const message of completeMessages) {\n          message.callback(err);\n        }\n      }\n      if (messages.length == 0)\n        this.emit(\"idle\");\n    }\n  }\n  completeAllMessages(err) {\n    this.completeMessages(0, Number.MAX_SAFE_INTEGER || Number.MAX_VALUE, err);\n  }\n  resetSendAttempted() {\n    for (let msg of this.messages) {\n      msg.sendAttempted = false;\n    }\n  }\n  clear() {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"MessageQueue.clear()\",\n      \"clearing \" + this.messages.length + \" messages\"\n    );\n    this.messages = [];\n    this.emit(\"idle\");\n  }\n};\nvar messagequeue_default = MessageQueue;\n\n// src/common/lib/transport/protocol.ts\nvar PendingMessage = class {\n  constructor(message, callback) {\n    this.message = message;\n    this.callback = callback;\n    this.merged = false;\n    const action = message.action;\n    this.sendAttempted = false;\n    this.ackRequired = action == actions2.MESSAGE || action == actions2.PRESENCE;\n  }\n};\nvar Protocol = class extends eventemitter_default {\n  constructor(transport) {\n    super(transport.logger);\n    this.transport = transport;\n    this.messageQueue = new messagequeue_default(this.logger);\n    transport.on(\"ack\", (serial, count) => {\n      this.onAck(serial, count);\n    });\n    transport.on(\"nack\", (serial, count, err) => {\n      this.onNack(serial, count, err);\n    });\n  }\n  onAck(serial, count) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"Protocol.onAck()\", \"serial = \" + serial + \"; count = \" + count);\n    this.messageQueue.completeMessages(serial, count);\n  }\n  onNack(serial, count, err) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_ERROR,\n      \"Protocol.onNack()\",\n      \"serial = \" + serial + \"; count = \" + count + \"; err = \" + inspectError(err)\n    );\n    if (!err) {\n      err = new ErrorInfo(\"Unable to send message; channel not responding\", 50001, 500);\n    }\n    this.messageQueue.completeMessages(serial, count, err);\n  }\n  onceIdle(listener) {\n    const messageQueue = this.messageQueue;\n    if (messageQueue.count() === 0) {\n      listener();\n      return;\n    }\n    messageQueue.once(\"idle\", listener);\n  }\n  send(pendingMessage) {\n    if (pendingMessage.ackRequired) {\n      this.messageQueue.push(pendingMessage);\n    }\n    if (this.logger.shouldLog(logger_default.LOG_MICRO)) {\n      logger_default.logActionNoStrip(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"Protocol.send()\",\n        \"sending msg; \" + stringify(pendingMessage.message, this.transport.connectionManager.realtime._RealtimePresence)\n      );\n    }\n    pendingMessage.sendAttempted = true;\n    this.transport.send(pendingMessage.message);\n  }\n  getTransport() {\n    return this.transport;\n  }\n  getPendingMessages() {\n    return this.messageQueue.copyAll();\n  }\n  clearPendingMessages() {\n    return this.messageQueue.clear();\n  }\n  finish() {\n    const transport = this.transport;\n    this.onceIdle(function() {\n      transport.disconnect();\n    });\n  }\n};\nvar protocol_default = Protocol;\n\n// src/common/lib/client/connectionstatechange.ts\nvar ConnectionStateChange = class {\n  constructor(previous, current, retryIn, reason) {\n    this.previous = previous;\n    this.current = current;\n    if (retryIn)\n      this.retryIn = retryIn;\n    if (reason)\n      this.reason = reason;\n  }\n};\nvar connectionstatechange_default = ConnectionStateChange;\n\n// src/common/lib/transport/connectionerrors.ts\nvar ConnectionErrorCodes = {\n  DISCONNECTED: 80003,\n  SUSPENDED: 80002,\n  FAILED: 8e4,\n  CLOSING: 80017,\n  CLOSED: 80017,\n  UNKNOWN_CONNECTION_ERR: 50002,\n  UNKNOWN_CHANNEL_ERR: 50001\n};\nvar ConnectionErrors = {\n  disconnected: () => ErrorInfo.fromValues({\n    statusCode: 400,\n    code: ConnectionErrorCodes.DISCONNECTED,\n    message: \"Connection to server temporarily unavailable\"\n  }),\n  suspended: () => ErrorInfo.fromValues({\n    statusCode: 400,\n    code: ConnectionErrorCodes.SUSPENDED,\n    message: \"Connection to server unavailable\"\n  }),\n  failed: () => ErrorInfo.fromValues({\n    statusCode: 400,\n    code: ConnectionErrorCodes.FAILED,\n    message: \"Connection failed or disconnected by server\"\n  }),\n  closing: () => ErrorInfo.fromValues({\n    statusCode: 400,\n    code: ConnectionErrorCodes.CLOSING,\n    message: \"Connection closing\"\n  }),\n  closed: () => ErrorInfo.fromValues({\n    statusCode: 400,\n    code: ConnectionErrorCodes.CLOSED,\n    message: \"Connection closed\"\n  }),\n  unknownConnectionErr: () => ErrorInfo.fromValues({\n    statusCode: 500,\n    code: ConnectionErrorCodes.UNKNOWN_CONNECTION_ERR,\n    message: \"Internal connection error\"\n  }),\n  unknownChannelErr: () => ErrorInfo.fromValues({\n    statusCode: 500,\n    code: ConnectionErrorCodes.UNKNOWN_CONNECTION_ERR,\n    message: \"Internal channel error\"\n  })\n};\nfunction isRetriable(err) {\n  if (!err.statusCode || !err.code || err.statusCode >= 500) {\n    return true;\n  }\n  return Object.values(ConnectionErrorCodes).includes(err.code);\n}\nvar connectionerrors_default = ConnectionErrors;\n\n// src/common/lib/transport/transport.ts\nvar closeMessage = fromValues3({ action: actions2.CLOSE });\nvar disconnectMessage = fromValues3({ action: actions2.DISCONNECT });\nvar Transport = class extends eventemitter_default {\n  constructor(connectionManager, auth, params, forceJsonProtocol) {\n    super(connectionManager.logger);\n    if (forceJsonProtocol) {\n      params.format = void 0;\n      params.heartbeats = true;\n    }\n    this.connectionManager = connectionManager;\n    this.auth = auth;\n    this.params = params;\n    this.timeouts = params.options.timeouts;\n    this.format = params.format;\n    this.isConnected = false;\n    this.isFinished = false;\n    this.isDisposed = false;\n    this.maxIdleInterval = null;\n    this.idleTimer = null;\n    this.lastActivity = null;\n  }\n  connect() {\n  }\n  close() {\n    if (this.isConnected) {\n      this.requestClose();\n    }\n    this.finish(\"closed\", connectionerrors_default.closed());\n  }\n  disconnect(err) {\n    if (this.isConnected) {\n      this.requestDisconnect();\n    }\n    this.finish(\"disconnected\", err || connectionerrors_default.disconnected());\n  }\n  fail(err) {\n    if (this.isConnected) {\n      this.requestDisconnect();\n    }\n    this.finish(\"failed\", err || connectionerrors_default.failed());\n  }\n  finish(event, err) {\n    var _a2;\n    if (this.isFinished) {\n      return;\n    }\n    this.isFinished = true;\n    this.isConnected = false;\n    this.maxIdleInterval = null;\n    clearTimeout((_a2 = this.idleTimer) != null ? _a2 : void 0);\n    this.idleTimer = null;\n    this.emit(event, err);\n    this.dispose();\n  }\n  onProtocolMessage(message) {\n    if (this.logger.shouldLog(logger_default.LOG_MICRO)) {\n      logger_default.logActionNoStrip(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"Transport.onProtocolMessage()\",\n        \"received on \" + this.shortName + \": \" + stringify(message, this.connectionManager.realtime._RealtimePresence) + \"; connectionId = \" + this.connectionManager.connectionId\n      );\n    }\n    this.onActivity();\n    switch (message.action) {\n      case actions2.HEARTBEAT:\n        logger_default.logActionNoStrip(\n          this.logger,\n          logger_default.LOG_MICRO,\n          \"Transport.onProtocolMessage()\",\n          this.shortName + \" heartbeat; connectionId = \" + this.connectionManager.connectionId\n        );\n        this.emit(\"heartbeat\", message.id);\n        break;\n      case actions2.CONNECTED:\n        this.onConnect(message);\n        this.emit(\"connected\", message.error, message.connectionId, message.connectionDetails, message);\n        break;\n      case actions2.CLOSED:\n        this.onClose(message);\n        break;\n      case actions2.DISCONNECTED:\n        this.onDisconnect(message);\n        break;\n      case actions2.ACK:\n        this.emit(\"ack\", message.msgSerial, message.count);\n        break;\n      case actions2.NACK:\n        this.emit(\"nack\", message.msgSerial, message.count, message.error);\n        break;\n      case actions2.SYNC:\n        this.connectionManager.onChannelMessage(message, this);\n        break;\n      case actions2.ACTIVATE:\n        break;\n      case actions2.AUTH:\n        whenPromiseSettles(this.auth.authorize(), (err) => {\n          if (err) {\n            logger_default.logAction(\n              this.logger,\n              logger_default.LOG_ERROR,\n              \"Transport.onProtocolMessage()\",\n              \"Ably requested re-authentication, but unable to obtain a new token: \" + inspectError(err)\n            );\n          }\n        });\n        break;\n      case actions2.ERROR:\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"Transport.onProtocolMessage()\",\n          \"received error action; connectionId = \" + this.connectionManager.connectionId + \"; err = \" + Platform.Config.inspect(message.error) + (message.channel ? \", channel: \" + message.channel : \"\")\n        );\n        if (message.channel === void 0) {\n          this.onFatalError(message);\n          break;\n        }\n        this.connectionManager.onChannelMessage(message, this);\n        break;\n      default:\n        this.connectionManager.onChannelMessage(message, this);\n    }\n  }\n  onConnect(message) {\n    this.isConnected = true;\n    if (!message.connectionDetails) {\n      throw new Error(\"Transport.onConnect(): Connect message recieved without connectionDetails\");\n    }\n    const maxPromisedIdle = message.connectionDetails.maxIdleInterval;\n    if (maxPromisedIdle) {\n      this.maxIdleInterval = maxPromisedIdle + this.timeouts.realtimeRequestTimeout;\n      this.onActivity();\n    }\n  }\n  onDisconnect(message) {\n    const err = message && message.error;\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Transport.onDisconnect()\", \"err = \" + inspectError(err));\n    this.finish(\"disconnected\", err);\n  }\n  onFatalError(message) {\n    const err = message && message.error;\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Transport.onFatalError()\", \"err = \" + inspectError(err));\n    this.finish(\"failed\", err);\n  }\n  onClose(message) {\n    const err = message && message.error;\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Transport.onClose()\", \"err = \" + inspectError(err));\n    this.finish(\"closed\", err);\n  }\n  requestClose() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Transport.requestClose()\", \"\");\n    this.send(closeMessage);\n  }\n  requestDisconnect() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Transport.requestDisconnect()\", \"\");\n    this.send(disconnectMessage);\n  }\n  ping(id) {\n    const msg = { action: actions2.HEARTBEAT };\n    if (id)\n      msg.id = id;\n    this.send(fromValues3(msg));\n  }\n  dispose() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Transport.dispose()\", \"\");\n    this.isDisposed = true;\n    this.off();\n  }\n  onActivity() {\n    if (!this.maxIdleInterval) {\n      return;\n    }\n    this.lastActivity = this.connectionManager.lastActivity = Date.now();\n    this.setIdleTimer(this.maxIdleInterval + 100);\n  }\n  setIdleTimer(timeout) {\n    if (!this.idleTimer) {\n      this.idleTimer = setTimeout(() => {\n        this.onIdleTimerExpire();\n      }, timeout);\n    }\n  }\n  onIdleTimerExpire() {\n    if (!this.lastActivity || !this.maxIdleInterval) {\n      throw new Error(\"Transport.onIdleTimerExpire(): lastActivity/maxIdleInterval not set\");\n    }\n    this.idleTimer = null;\n    const sinceLast = Date.now() - this.lastActivity;\n    const timeRemaining = this.maxIdleInterval - sinceLast;\n    if (timeRemaining <= 0) {\n      const msg = \"No activity seen from realtime in \" + sinceLast + \"ms; assuming connection has dropped\";\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"Transport.onIdleTimerExpire()\", msg);\n      this.disconnect(new ErrorInfo(msg, 80003, 408));\n    } else {\n      this.setIdleTimer(timeRemaining + 100);\n    }\n  }\n  static tryConnect(transportCtor, connectionManager, auth, transportParams, callback) {\n    const transport = new transportCtor(connectionManager, auth, transportParams);\n    let transportAttemptTimer;\n    const errorCb = function(err) {\n      clearTimeout(transportAttemptTimer);\n      callback({ event: this.event, error: err });\n    };\n    const realtimeRequestTimeout = connectionManager.options.timeouts.realtimeRequestTimeout;\n    transportAttemptTimer = setTimeout(() => {\n      transport.off([\"preconnect\", \"disconnected\", \"failed\"]);\n      transport.dispose();\n      errorCb.call(\n        { event: \"disconnected\" },\n        new ErrorInfo(\"Timeout waiting for transport to indicate itself viable\", 5e4, 500)\n      );\n    }, realtimeRequestTimeout);\n    transport.on([\"failed\", \"disconnected\"], errorCb);\n    transport.on(\"preconnect\", function() {\n      logger_default.logAction(\n        connectionManager.logger,\n        logger_default.LOG_MINOR,\n        \"Transport.tryConnect()\",\n        \"viable transport \" + transport\n      );\n      clearTimeout(transportAttemptTimer);\n      transport.off([\"failed\", \"disconnected\"], errorCb);\n      callback(null, transport);\n    });\n    transport.connect();\n    return transport;\n  }\n  static isAvailable() {\n    throw new ErrorInfo(\"isAvailable not implemented for transport\", 5e4, 500);\n  }\n};\nvar transport_default = Transport;\n\n// src/common/constants/TransportName.ts\nvar TransportNames;\n((TransportNames2) => {\n  TransportNames2.WebSocket = \"web_socket\";\n  TransportNames2.Comet = \"comet\";\n  TransportNames2.XhrPolling = \"xhr_polling\";\n})(TransportNames || (TransportNames = {}));\n\n// src/common/lib/transport/connectionmanager.ts\nvar globalObject2 = typeof __webpack_require__.g !== \"undefined\" ? __webpack_require__.g : typeof window !== \"undefined\" ? window : self;\nvar haveWebStorage = () => {\n  var _a2;\n  return typeof Platform.WebStorage !== \"undefined\" && ((_a2 = Platform.WebStorage) == null ? void 0 : _a2.localSupported);\n};\nvar haveSessionStorage = () => {\n  var _a2;\n  return typeof Platform.WebStorage !== \"undefined\" && ((_a2 = Platform.WebStorage) == null ? void 0 : _a2.sessionSupported);\n};\nvar noop = function() {\n};\nvar transportPreferenceName = \"ably-transport-preference\";\nfunction bundleWith(dest, src, maxSize) {\n  let action;\n  if (dest.channel !== src.channel) {\n    return false;\n  }\n  if ((action = dest.action) !== actions2.PRESENCE && action !== actions2.MESSAGE) {\n    return false;\n  }\n  if (action !== src.action) {\n    return false;\n  }\n  const kind = action === actions2.PRESENCE ? \"presence\" : \"messages\", proposed = dest[kind].concat(src[kind]), size = getMessagesSize(proposed);\n  if (size > maxSize) {\n    return false;\n  }\n  if (!allSame(proposed, \"clientId\")) {\n    return false;\n  }\n  if (!proposed.every(function(msg) {\n    return !msg.id;\n  })) {\n    return false;\n  }\n  dest[kind] = proposed;\n  return true;\n}\nfunction decodeRecoveryKey(recoveryKey) {\n  try {\n    return JSON.parse(recoveryKey);\n  } catch (e) {\n    return null;\n  }\n}\nvar TransportParams = class {\n  constructor(options, host, mode, connectionKey) {\n    this.options = options;\n    this.host = host;\n    this.mode = mode;\n    this.connectionKey = connectionKey;\n    this.format = options.useBinaryProtocol ? \"msgpack\" /* msgpack */ : \"json\" /* json */;\n  }\n  getConnectParams(authParams) {\n    const params = authParams ? copy(authParams) : {};\n    const options = this.options;\n    switch (this.mode) {\n      case \"resume\":\n        params.resume = this.connectionKey;\n        break;\n      case \"recover\": {\n        const recoveryContext = decodeRecoveryKey(options.recover);\n        if (recoveryContext) {\n          params.recover = recoveryContext.connectionKey;\n        }\n        break;\n      }\n      default:\n    }\n    if (options.clientId !== void 0) {\n      params.clientId = options.clientId;\n    }\n    if (options.echoMessages === false) {\n      params.echo = \"false\";\n    }\n    if (this.format !== void 0) {\n      params.format = this.format;\n    }\n    if (this.stream !== void 0) {\n      params.stream = this.stream;\n    }\n    if (this.heartbeats !== void 0) {\n      params.heartbeats = this.heartbeats;\n    }\n    params.v = defaults_default.protocolVersion;\n    params.agent = getAgentString(this.options);\n    if (options.transportParams !== void 0) {\n      mixin(params, options.transportParams);\n    }\n    return params;\n  }\n  toString() {\n    let result = \"[mode=\" + this.mode;\n    if (this.host) {\n      result += \",host=\" + this.host;\n    }\n    if (this.connectionKey) {\n      result += \",connectionKey=\" + this.connectionKey;\n    }\n    if (this.format) {\n      result += \",format=\" + this.format;\n    }\n    result += \"]\";\n    return result;\n  }\n};\nvar ConnectionManager = class _ConnectionManager extends eventemitter_default {\n  constructor(realtime, options) {\n    super(realtime.logger);\n    this.supportedTransports = {};\n    this.disconnectedRetryCount = 0;\n    this.pendingChannelMessagesState = { isProcessing: false, queue: [] };\n    this.realtime = realtime;\n    this.initTransports();\n    this.options = options;\n    const timeouts = options.timeouts;\n    const connectingTimeout = timeouts.webSocketConnectTimeout + timeouts.realtimeRequestTimeout;\n    this.states = {\n      initialized: {\n        state: \"initialized\",\n        terminal: false,\n        queueEvents: true,\n        sendEvents: false,\n        failState: \"disconnected\"\n      },\n      connecting: {\n        state: \"connecting\",\n        terminal: false,\n        queueEvents: true,\n        sendEvents: false,\n        retryDelay: connectingTimeout,\n        failState: \"disconnected\"\n      },\n      connected: {\n        state: \"connected\",\n        terminal: false,\n        queueEvents: false,\n        sendEvents: true,\n        failState: \"disconnected\"\n      },\n      disconnected: {\n        state: \"disconnected\",\n        terminal: false,\n        queueEvents: true,\n        sendEvents: false,\n        retryDelay: timeouts.disconnectedRetryTimeout,\n        failState: \"disconnected\"\n      },\n      suspended: {\n        state: \"suspended\",\n        terminal: false,\n        queueEvents: false,\n        sendEvents: false,\n        retryDelay: timeouts.suspendedRetryTimeout,\n        failState: \"suspended\"\n      },\n      closing: {\n        state: \"closing\",\n        terminal: false,\n        queueEvents: false,\n        sendEvents: false,\n        retryDelay: timeouts.realtimeRequestTimeout,\n        failState: \"closed\"\n      },\n      closed: { state: \"closed\", terminal: true, queueEvents: false, sendEvents: false, failState: \"closed\" },\n      failed: { state: \"failed\", terminal: true, queueEvents: false, sendEvents: false, failState: \"failed\" }\n    };\n    this.state = this.states.initialized;\n    this.errorReason = null;\n    this.queuedMessages = new messagequeue_default(this.logger);\n    this.msgSerial = 0;\n    this.connectionDetails = void 0;\n    this.connectionId = void 0;\n    this.connectionKey = void 0;\n    this.connectionStateTtl = timeouts.connectionStateTtl;\n    this.maxIdleInterval = null;\n    this.transports = intersect(options.transports || defaults_default.defaultTransports, this.supportedTransports);\n    this.transportPreference = null;\n    if (this.transports.includes(TransportNames.WebSocket)) {\n      this.webSocketTransportAvailable = true;\n    }\n    if (this.transports.includes(TransportNames.XhrPolling)) {\n      this.baseTransport = TransportNames.XhrPolling;\n    } else if (this.transports.includes(TransportNames.Comet)) {\n      this.baseTransport = TransportNames.Comet;\n    }\n    this.httpHosts = defaults_default.getHosts(options);\n    this.wsHosts = defaults_default.getHosts(options, true);\n    this.activeProtocol = null;\n    this.host = null;\n    this.lastAutoReconnectAttempt = null;\n    this.lastActivity = null;\n    this.forceFallbackHost = false;\n    this.connectCounter = 0;\n    this.wsCheckResult = null;\n    this.webSocketSlowTimer = null;\n    this.webSocketGiveUpTimer = null;\n    this.abandonedWebSocket = false;\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Realtime.ConnectionManager()\", \"started\");\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"Realtime.ConnectionManager()\",\n      \"requested transports = [\" + (options.transports || defaults_default.defaultTransports) + \"]\"\n    );\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"Realtime.ConnectionManager()\",\n      \"available transports = [\" + this.transports + \"]\"\n    );\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"Realtime.ConnectionManager()\",\n      \"http hosts = [\" + this.httpHosts + \"]\"\n    );\n    if (!this.transports.length) {\n      const msg = \"no requested transports available\";\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"realtime.ConnectionManager()\", msg);\n      throw new Error(msg);\n    }\n    const addEventListener = Platform.Config.addEventListener;\n    if (addEventListener) {\n      if (haveSessionStorage() && typeof options.recover === \"function\") {\n        addEventListener(\"beforeunload\", this.persistConnection.bind(this));\n      }\n      if (options.closeOnUnload === true) {\n        addEventListener(\"beforeunload\", () => {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_MAJOR,\n            \"Realtime.ConnectionManager()\",\n            \"beforeunload event has triggered the connection to close as closeOnUnload is true\"\n          );\n          this.requestState({ state: \"closing\" });\n        });\n      }\n      addEventListener(\"online\", () => {\n        var _a2;\n        if (this.state == this.states.disconnected || this.state == this.states.suspended) {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_MINOR,\n            \"ConnectionManager caught browser \\u2018online\\u2019 event\",\n            \"reattempting connection\"\n          );\n          this.requestState({ state: \"connecting\" });\n        } else if (this.state == this.states.connecting) {\n          (_a2 = this.pendingTransport) == null ? void 0 : _a2.off();\n          this.disconnectAllTransports();\n          this.startConnect();\n        }\n      });\n      addEventListener(\"offline\", () => {\n        if (this.state == this.states.connected) {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_MINOR,\n            \"ConnectionManager caught browser \\u2018offline\\u2019 event\",\n            \"disconnecting active transport\"\n          );\n          this.disconnectAllTransports();\n        }\n      });\n    }\n  }\n  /*********************\n   * transport management\n   *********************/\n  // Used by tests\n  static supportedTransports(additionalImplementations) {\n    const storage = { supportedTransports: {} };\n    this.initTransports(additionalImplementations, storage);\n    return storage.supportedTransports;\n  }\n  static initTransports(additionalImplementations, storage) {\n    const implementations = __spreadValues(__spreadValues({}, Platform.Transports.bundledImplementations), additionalImplementations);\n    [TransportNames.WebSocket, ...Platform.Transports.order].forEach((transportName) => {\n      const transport = implementations[transportName];\n      if (transport && transport.isAvailable()) {\n        storage.supportedTransports[transportName] = transport;\n      }\n    });\n  }\n  initTransports() {\n    _ConnectionManager.initTransports(this.realtime._additionalTransportImplementations, this);\n  }\n  createTransportParams(host, mode) {\n    return new TransportParams(this.options, host, mode, this.connectionKey);\n  }\n  getTransportParams(callback) {\n    const decideMode = (modeCb) => {\n      if (this.connectionKey) {\n        modeCb(\"resume\");\n        return;\n      }\n      if (typeof this.options.recover === \"string\") {\n        modeCb(\"recover\");\n        return;\n      }\n      const recoverFn = this.options.recover, lastSessionData = this.getSessionRecoverData(), sessionRecoveryName = this.sessionRecoveryName();\n      if (lastSessionData && typeof recoverFn === \"function\") {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"ConnectionManager.getTransportParams()\",\n          \"Calling clientOptions-provided recover function with last session data (recovery scope: \" + sessionRecoveryName + \")\"\n        );\n        recoverFn(lastSessionData, (shouldRecover) => {\n          if (shouldRecover) {\n            this.options.recover = lastSessionData.recoveryKey;\n            modeCb(\"recover\");\n          } else {\n            modeCb(\"clean\");\n          }\n        });\n        return;\n      }\n      modeCb(\"clean\");\n    };\n    decideMode((mode) => {\n      const transportParams = this.createTransportParams(null, mode);\n      if (mode === \"recover\") {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"ConnectionManager.getTransportParams()\",\n          \"Transport recovery mode = recover; recoveryKey = \" + this.options.recover\n        );\n        const recoveryContext = decodeRecoveryKey(this.options.recover);\n        if (recoveryContext) {\n          this.msgSerial = recoveryContext.msgSerial;\n        }\n      } else {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"ConnectionManager.getTransportParams()\",\n          \"Transport params = \" + transportParams.toString()\n        );\n      }\n      callback(transportParams);\n    });\n  }\n  /**\n   * Attempt to connect using a given transport\n   * @param transportParams\n   * @param candidate, the transport to try\n   * @param callback\n   */\n  tryATransport(transportParams, candidate, callback) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"ConnectionManager.tryATransport()\", \"trying \" + candidate);\n    this.proposedTransport = transport_default.tryConnect(\n      this.supportedTransports[candidate],\n      this,\n      this.realtime.auth,\n      transportParams,\n      (wrappedErr, transport) => {\n        const state = this.state;\n        if (state == this.states.closing || state == this.states.closed || state == this.states.failed) {\n          if (transport) {\n            logger_default.logAction(\n              this.logger,\n              logger_default.LOG_MINOR,\n              \"ConnectionManager.tryATransport()\",\n              \"connection \" + state.state + \" while we were attempting the transport; closing \" + transport\n            );\n            transport.close();\n          }\n          callback(true);\n          return;\n        }\n        if (wrappedErr) {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_MINOR,\n            \"ConnectionManager.tryATransport()\",\n            \"transport \" + candidate + \" \" + wrappedErr.event + \", err: \" + wrappedErr.error.toString()\n          );\n          if (auth_default.isTokenErr(wrappedErr.error) && !(this.errorReason && auth_default.isTokenErr(this.errorReason))) {\n            this.errorReason = wrappedErr.error;\n            whenPromiseSettles(this.realtime.auth._forceNewToken(null, null), (err) => {\n              if (err) {\n                this.actOnErrorFromAuthorize(err);\n                return;\n              }\n              this.tryATransport(transportParams, candidate, callback);\n            });\n          } else if (wrappedErr.event === \"failed\") {\n            this.notifyState({ state: \"failed\", error: wrappedErr.error });\n            callback(true);\n          } else if (wrappedErr.event === \"disconnected\") {\n            if (!isRetriable(wrappedErr.error)) {\n              this.notifyState({ state: this.states.connecting.failState, error: wrappedErr.error });\n              callback(true);\n            } else {\n              callback(false);\n            }\n          }\n          return;\n        }\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MICRO,\n          \"ConnectionManager.tryATransport()\",\n          \"viable transport \" + candidate + \"; setting pending\"\n        );\n        this.setTransportPending(transport, transportParams);\n        callback(null, transport);\n      }\n    );\n  }\n  /**\n   * Called when a transport is indicated to be viable, and the ConnectionManager\n   * expects to activate this transport as soon as it is connected.\n   * @param transport\n   * @param transportParams\n   */\n  setTransportPending(transport, transportParams) {\n    const mode = transportParams.mode;\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.setTransportPending()\",\n      \"transport = \" + transport + \"; mode = \" + mode\n    );\n    this.pendingTransport = transport;\n    this.cancelWebSocketSlowTimer();\n    this.cancelWebSocketGiveUpTimer();\n    transport.once(\"connected\", (error, connectionId, connectionDetails) => {\n      this.activateTransport(error, transport, connectionId, connectionDetails);\n      if (mode === \"recover\" && this.options.recover) {\n        delete this.options.recover;\n        this.unpersistConnection();\n      }\n    });\n    const self2 = this;\n    transport.on([\"disconnected\", \"closed\", \"failed\"], function(error) {\n      self2.deactivateTransport(transport, this.event, error);\n    });\n    this.emit(\"transport.pending\", transport);\n  }\n  /**\n   * Called when a transport is connected, and the connectionmanager decides that\n   * it will now be the active transport. Returns whether or not it activated\n   * the transport (if the connection is closing/closed it will choose not to).\n   * @param transport the transport instance\n   * @param connectionId the id of the new active connection\n   * @param connectionDetails the details of the new active connection\n   */\n  activateTransport(error, transport, connectionId, connectionDetails) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.activateTransport()\",\n      \"transport = \" + transport\n    );\n    if (error) {\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"ConnectionManager.activateTransport()\", \"error = \" + error);\n    }\n    if (connectionId) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.activateTransport()\",\n        \"connectionId =  \" + connectionId\n      );\n    }\n    if (connectionDetails) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.activateTransport()\",\n        \"connectionDetails =  \" + JSON.stringify(connectionDetails)\n      );\n    }\n    this.persistTransportPreference(transport);\n    const existingState = this.state, connectedState = this.states.connected.state;\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.activateTransport()\",\n      \"current state = \" + existingState.state\n    );\n    if (existingState.state == this.states.closing.state || existingState.state == this.states.closed.state || existingState.state == this.states.failed.state) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"ConnectionManager.activateTransport()\",\n        \"Disconnecting transport and abandoning\"\n      );\n      transport.disconnect();\n      return false;\n    }\n    delete this.pendingTransport;\n    if (!transport.isConnected) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"ConnectionManager.activateTransport()\",\n        \"Declining to activate transport \" + transport + \" since it appears to no longer be connected\"\n      );\n      return false;\n    }\n    const existingActiveProtocol = this.activeProtocol;\n    this.activeProtocol = new protocol_default(transport);\n    this.host = transport.params.host;\n    const connectionKey = connectionDetails.connectionKey;\n    if (connectionKey && this.connectionKey != connectionKey) {\n      this.setConnection(connectionId, connectionDetails, !!error);\n    }\n    this.onConnectionDetailsUpdate(connectionDetails, transport);\n    Platform.Config.nextTick(() => {\n      transport.on(\n        \"connected\",\n        (connectedErr, _connectionId, connectionDetails2) => {\n          this.onConnectionDetailsUpdate(connectionDetails2, transport);\n          this.emit(\"update\", new connectionstatechange_default(connectedState, connectedState, null, connectedErr));\n        }\n      );\n    });\n    if (existingState.state === this.states.connected.state) {\n      if (error) {\n        this.errorReason = this.realtime.connection.errorReason = error;\n        this.emit(\"update\", new connectionstatechange_default(connectedState, connectedState, null, error));\n      }\n    } else {\n      this.notifyState({ state: \"connected\", error });\n      this.errorReason = this.realtime.connection.errorReason = error || null;\n    }\n    this.emit(\"transport.active\", transport);\n    if (existingActiveProtocol) {\n      if (existingActiveProtocol.messageQueue.count() > 0) {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_ERROR,\n          \"ConnectionManager.activateTransport()\",\n          \"Previous active protocol (for transport \" + existingActiveProtocol.transport.shortName + \", new one is \" + transport.shortName + \") finishing with \" + existingActiveProtocol.messageQueue.count() + \" messages still pending\"\n        );\n      }\n      if (existingActiveProtocol.transport === transport) {\n        const msg = \"Assumption violated: activating a transport that was also the transport for the previous active protocol; transport = \" + transport.shortName + \"; stack = \" + new Error().stack;\n        logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"ConnectionManager.activateTransport()\", msg);\n      } else {\n        existingActiveProtocol.finish();\n      }\n    }\n    return true;\n  }\n  /**\n   * Called when a transport is no longer the active transport. This can occur\n   * in any transport connection state.\n   * @param transport\n   */\n  deactivateTransport(transport, state, error) {\n    const currentProtocol = this.activeProtocol, wasActive = currentProtocol && currentProtocol.getTransport() === transport, wasPending = transport === this.pendingTransport, noTransportsScheduledForActivation = this.noTransportsScheduledForActivation();\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.deactivateTransport()\",\n      \"transport = \" + transport\n    );\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.deactivateTransport()\",\n      \"state = \" + state + (wasActive ? \"; was active\" : wasPending ? \"; was pending\" : \"\") + (noTransportsScheduledForActivation ? \"\" : \"; another transport is scheduled for activation\")\n    );\n    if (error && error.message)\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.deactivateTransport()\",\n        \"reason =  \" + error.message\n      );\n    if (wasActive) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.deactivateTransport()\",\n        \"Getting, clearing, and requeuing \" + this.activeProtocol.messageQueue.count() + \" pending messages\"\n      );\n      this.queuePendingMessages(currentProtocol.getPendingMessages());\n      currentProtocol.clearPendingMessages();\n      this.activeProtocol = this.host = null;\n    }\n    this.emit(\"transport.inactive\", transport);\n    if (wasActive && noTransportsScheduledForActivation || wasActive && state === \"failed\" || state === \"closed\" || currentProtocol === null && wasPending) {\n      if (state === \"disconnected\" && error && error.statusCode > 500 && this.httpHosts.length > 1) {\n        this.unpersistTransportPreference();\n        this.forceFallbackHost = true;\n        this.notifyState({ state, error, retryImmediately: true });\n        return;\n      }\n      const newConnectionState = state === \"failed\" && auth_default.isTokenErr(error) ? \"disconnected\" : state;\n      this.notifyState({ state: newConnectionState, error });\n      return;\n    }\n  }\n  /* Helper that returns true if there are no transports which are pending,\n   * have been connected, and are just waiting for onceNoPending to fire before\n   * being activated */\n  noTransportsScheduledForActivation() {\n    return !this.pendingTransport || !this.pendingTransport.isConnected;\n  }\n  setConnection(connectionId, connectionDetails, hasConnectionError) {\n    const prevConnId = this.connectionId, connIdChanged = prevConnId && prevConnId !== connectionId, recoverFailure = !prevConnId && hasConnectionError;\n    if (connIdChanged || recoverFailure) {\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"ConnectionManager.setConnection()\", \"Resetting msgSerial\");\n      this.msgSerial = 0;\n      this.queuedMessages.resetSendAttempted();\n    }\n    if (this.connectionId !== connectionId) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"ConnectionManager.setConnection()\",\n        \"New connectionId; reattaching any attached channels\"\n      );\n    }\n    this.realtime.connection.id = this.connectionId = connectionId;\n    this.realtime.connection.key = this.connectionKey = connectionDetails.connectionKey;\n  }\n  clearConnection() {\n    this.realtime.connection.id = this.connectionId = void 0;\n    this.realtime.connection.key = this.connectionKey = void 0;\n    this.msgSerial = 0;\n    this.unpersistConnection();\n  }\n  createRecoveryKey() {\n    if (!this.connectionKey) {\n      return null;\n    }\n    return JSON.stringify({\n      connectionKey: this.connectionKey,\n      msgSerial: this.msgSerial,\n      channelSerials: this.realtime.channels.channelSerials()\n    });\n  }\n  checkConnectionStateFreshness() {\n    if (!this.lastActivity || !this.connectionId) {\n      return;\n    }\n    const sinceLast = Date.now() - this.lastActivity;\n    if (sinceLast > this.connectionStateTtl + this.maxIdleInterval) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"ConnectionManager.checkConnectionStateFreshness()\",\n        \"Last known activity from realtime was \" + sinceLast + \"ms ago; discarding connection state\"\n      );\n      this.clearConnection();\n      this.states.connecting.failState = \"suspended\";\n    }\n  }\n  /**\n   * Called when the connectionmanager wants to persist transport\n   * state for later recovery. Only applicable in the browser context.\n   */\n  persistConnection() {\n    if (haveSessionStorage()) {\n      const recoveryKey = this.createRecoveryKey();\n      if (recoveryKey) {\n        this.setSessionRecoverData({\n          recoveryKey,\n          disconnectedAt: Date.now(),\n          location: globalObject2.location,\n          clientId: this.realtime.auth.clientId\n        });\n      }\n    }\n  }\n  /**\n   * Called when the connectionmanager wants to persist transport\n   * state for later recovery. Only applicable in the browser context.\n   */\n  unpersistConnection() {\n    this.clearSessionRecoverData();\n  }\n  /*********************\n   * state management\n   *********************/\n  getError() {\n    if (this.errorReason) {\n      const newError = PartialErrorInfo.fromValues(this.errorReason);\n      newError.cause = this.errorReason;\n      return newError;\n    }\n    return this.getStateError();\n  }\n  getStateError() {\n    var _a2, _b;\n    return (_b = (_a2 = connectionerrors_default)[this.state.state]) == null ? void 0 : _b.call(_a2);\n  }\n  activeState() {\n    return this.state.queueEvents || this.state.sendEvents;\n  }\n  enactStateChange(stateChange) {\n    const action = \"Connection state\";\n    const message = stateChange.current + (stateChange.reason ? \"; reason: \" + stateChange.reason : \"\");\n    if (stateChange.current === \"failed\") {\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, action, message);\n    } else {\n      logger_default.logAction(this.logger, logger_default.LOG_MAJOR, action, message);\n    }\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.enactStateChange\",\n      \"setting new state: \" + stateChange.current + \"; reason = \" + (stateChange.reason && stateChange.reason.message)\n    );\n    const newState = this.state = this.states[stateChange.current];\n    if (stateChange.reason) {\n      this.errorReason = stateChange.reason;\n      this.realtime.connection.errorReason = stateChange.reason;\n    }\n    if (newState.terminal || newState.state === \"suspended\") {\n      this.clearConnection();\n    }\n    this.emit(\"connectionstate\", stateChange);\n  }\n  /****************************************\n   * ConnectionManager connection lifecycle\n   ****************************************/\n  startTransitionTimer(transitionState) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.startTransitionTimer()\",\n      \"transitionState: \" + transitionState.state\n    );\n    if (this.transitionTimer) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"ConnectionManager.startTransitionTimer()\",\n        \"clearing already-running timer\"\n      );\n      clearTimeout(this.transitionTimer);\n    }\n    this.transitionTimer = setTimeout(() => {\n      if (this.transitionTimer) {\n        this.transitionTimer = null;\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"ConnectionManager \" + transitionState.state + \" timer expired\",\n          \"requesting new state: \" + transitionState.failState\n        );\n        this.notifyState({ state: transitionState.failState });\n      }\n    }, transitionState.retryDelay);\n  }\n  cancelTransitionTimer() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"ConnectionManager.cancelTransitionTimer()\", \"\");\n    if (this.transitionTimer) {\n      clearTimeout(this.transitionTimer);\n      this.transitionTimer = null;\n    }\n  }\n  startSuspendTimer() {\n    if (this.suspendTimer)\n      return;\n    this.suspendTimer = setTimeout(() => {\n      if (this.suspendTimer) {\n        this.suspendTimer = null;\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"ConnectionManager suspend timer expired\",\n          \"requesting new state: suspended\"\n        );\n        this.states.connecting.failState = \"suspended\";\n        this.notifyState({ state: \"suspended\" });\n      }\n    }, this.connectionStateTtl);\n  }\n  checkSuspendTimer(state) {\n    if (state !== \"disconnected\" && state !== \"suspended\" && state !== \"connecting\")\n      this.cancelSuspendTimer();\n  }\n  cancelSuspendTimer() {\n    this.states.connecting.failState = \"disconnected\";\n    if (this.suspendTimer) {\n      clearTimeout(this.suspendTimer);\n      this.suspendTimer = null;\n    }\n  }\n  startRetryTimer(interval) {\n    this.retryTimer = setTimeout(() => {\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"ConnectionManager retry timer expired\", \"retrying\");\n      this.retryTimer = null;\n      this.requestState({ state: \"connecting\" });\n    }, interval);\n  }\n  cancelRetryTimer() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n      this.retryTimer = null;\n    }\n  }\n  startWebSocketSlowTimer() {\n    this.webSocketSlowTimer = setTimeout(() => {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"ConnectionManager WebSocket slow timer\",\n        \"checking connectivity\"\n      );\n      if (this.wsCheckResult === null) {\n        this.checkWsConnectivity().then(() => {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_MINOR,\n            \"ConnectionManager WebSocket slow timer\",\n            \"ws connectivity check succeeded\"\n          );\n          this.wsCheckResult = true;\n        }).catch(() => {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_MAJOR,\n            \"ConnectionManager WebSocket slow timer\",\n            \"ws connectivity check failed\"\n          );\n          this.wsCheckResult = false;\n        });\n      }\n      if (this.realtime.http.checkConnectivity) {\n        whenPromiseSettles(this.realtime.http.checkConnectivity(), (err, connectivity) => {\n          if (err || !connectivity) {\n            logger_default.logAction(\n              this.logger,\n              logger_default.LOG_MAJOR,\n              \"ConnectionManager WebSocket slow timer\",\n              \"http connectivity check failed\"\n            );\n            this.cancelWebSocketGiveUpTimer();\n            this.notifyState({\n              state: \"disconnected\",\n              error: new ErrorInfo(\"Unable to connect (network unreachable)\", 80003, 404)\n            });\n          } else {\n            logger_default.logAction(\n              this.logger,\n              logger_default.LOG_MINOR,\n              \"ConnectionManager WebSocket slow timer\",\n              \"http connectivity check succeeded\"\n            );\n          }\n        });\n      }\n    }, this.options.timeouts.webSocketSlowTimeout);\n  }\n  cancelWebSocketSlowTimer() {\n    if (this.webSocketSlowTimer) {\n      clearTimeout(this.webSocketSlowTimer);\n      this.webSocketSlowTimer = null;\n    }\n  }\n  startWebSocketGiveUpTimer(transportParams) {\n    this.webSocketGiveUpTimer = setTimeout(() => {\n      var _a2, _b;\n      if (!this.wsCheckResult) {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"ConnectionManager WebSocket give up timer\",\n          \"websocket connection took more than 10s; \" + (this.baseTransport ? \"trying base transport\" : \"\")\n        );\n        if (this.baseTransport) {\n          this.abandonedWebSocket = true;\n          (_a2 = this.proposedTransport) == null ? void 0 : _a2.dispose();\n          (_b = this.pendingTransport) == null ? void 0 : _b.dispose();\n          this.connectBase(transportParams, ++this.connectCounter);\n        } else {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_MAJOR,\n            \"ConnectionManager WebSocket give up timer\",\n            \"websocket connectivity appears to be unavailable but no other transports to try\"\n          );\n        }\n      }\n    }, this.options.timeouts.webSocketConnectTimeout);\n  }\n  cancelWebSocketGiveUpTimer() {\n    if (this.webSocketGiveUpTimer) {\n      clearTimeout(this.webSocketGiveUpTimer);\n      this.webSocketGiveUpTimer = null;\n    }\n  }\n  notifyState(indicated) {\n    var _a2, _b;\n    const state = indicated.state;\n    const retryImmediately = state === \"disconnected\" && (this.state === this.states.connected || indicated.retryImmediately || this.state === this.states.connecting && indicated.error && auth_default.isTokenErr(indicated.error) && !(this.errorReason && auth_default.isTokenErr(this.errorReason)));\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.notifyState()\",\n      \"new state: \" + state + (retryImmediately ? \"; will retry connection immediately\" : \"\")\n    );\n    if (state == this.state.state)\n      return;\n    this.cancelTransitionTimer();\n    this.cancelRetryTimer();\n    this.cancelWebSocketSlowTimer();\n    this.cancelWebSocketGiveUpTimer();\n    this.checkSuspendTimer(indicated.state);\n    if (state === \"suspended\" || state === \"connected\") {\n      this.disconnectedRetryCount = 0;\n    }\n    if (this.state.terminal)\n      return;\n    const newState = this.states[indicated.state];\n    let retryDelay = newState.retryDelay;\n    if (newState.state === \"disconnected\") {\n      this.disconnectedRetryCount++;\n      retryDelay = getRetryTime(newState.retryDelay, this.disconnectedRetryCount);\n    }\n    const change = new connectionstatechange_default(\n      this.state.state,\n      newState.state,\n      retryDelay,\n      indicated.error || ((_b = (_a2 = connectionerrors_default)[newState.state]) == null ? void 0 : _b.call(_a2))\n    );\n    if (retryImmediately) {\n      const autoReconnect = () => {\n        if (this.state === this.states.disconnected) {\n          this.lastAutoReconnectAttempt = Date.now();\n          this.requestState({ state: \"connecting\" });\n        }\n      };\n      const sinceLast = this.lastAutoReconnectAttempt && Date.now() - this.lastAutoReconnectAttempt + 1;\n      if (sinceLast && sinceLast < 1e3) {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MICRO,\n          \"ConnectionManager.notifyState()\",\n          \"Last reconnect attempt was only \" + sinceLast + \"ms ago, waiting another \" + (1e3 - sinceLast) + \"ms before trying again\"\n        );\n        setTimeout(autoReconnect, 1e3 - sinceLast);\n      } else {\n        Platform.Config.nextTick(autoReconnect);\n      }\n    } else if (state === \"disconnected\" || state === \"suspended\") {\n      this.startRetryTimer(retryDelay);\n    }\n    if (state === \"disconnected\" && !retryImmediately || state === \"suspended\" || newState.terminal) {\n      Platform.Config.nextTick(() => {\n        this.disconnectAllTransports();\n      });\n    }\n    if (state == \"connected\" && !this.activeProtocol) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"ConnectionManager.notifyState()\",\n        \"Broken invariant: attempted to go into connected state, but there is no active protocol\"\n      );\n    }\n    this.enactStateChange(change);\n    if (this.state.sendEvents) {\n      this.sendQueuedMessages();\n    } else if (!this.state.queueEvents) {\n      this.realtime.channels.propogateConnectionInterruption(state, change.reason);\n      this.failQueuedMessages(change.reason);\n    }\n  }\n  requestState(request) {\n    var _a2, _b;\n    const state = request.state;\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.requestState()\",\n      \"requested state: \" + state + \"; current state: \" + this.state.state\n    );\n    if (state == this.state.state)\n      return;\n    this.cancelWebSocketSlowTimer();\n    this.cancelWebSocketGiveUpTimer();\n    this.cancelTransitionTimer();\n    this.cancelRetryTimer();\n    this.checkSuspendTimer(state);\n    if (state == \"connecting\" && this.state.state == \"connected\")\n      return;\n    if (state == \"closing\" && this.state.state == \"closed\")\n      return;\n    const newState = this.states[state], change = new connectionstatechange_default(\n      this.state.state,\n      newState.state,\n      null,\n      request.error || ((_b = (_a2 = connectionerrors_default)[newState.state]) == null ? void 0 : _b.call(_a2))\n    );\n    this.enactStateChange(change);\n    if (state == \"connecting\") {\n      Platform.Config.nextTick(() => {\n        this.startConnect();\n      });\n    }\n    if (state == \"closing\") {\n      this.closeImpl();\n    }\n  }\n  startConnect() {\n    if (this.state !== this.states.connecting) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"ConnectionManager.startConnect()\",\n        \"Must be in connecting state to connect, but was \" + this.state.state\n      );\n      return;\n    }\n    const auth = this.realtime.auth;\n    const connectCount = ++this.connectCounter;\n    const connect = () => {\n      this.checkConnectionStateFreshness();\n      this.getTransportParams((transportParams) => {\n        if (transportParams.mode === \"recover\" && transportParams.options.recover) {\n          const recoveryContext = decodeRecoveryKey(transportParams.options.recover);\n          if (recoveryContext) {\n            this.realtime.channels.recoverChannels(recoveryContext.channelSerials);\n          }\n        }\n        if (connectCount !== this.connectCounter) {\n          return;\n        }\n        this.connectImpl(transportParams, connectCount);\n      });\n    };\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"ConnectionManager.startConnect()\", \"starting connection\");\n    this.startSuspendTimer();\n    this.startTransitionTimer(this.states.connecting);\n    if (auth.method === \"basic\") {\n      connect();\n    } else {\n      const authCb = (err) => {\n        if (connectCount !== this.connectCounter) {\n          return;\n        }\n        if (err) {\n          this.actOnErrorFromAuthorize(err);\n        } else {\n          connect();\n        }\n      };\n      if (this.errorReason && auth_default.isTokenErr(this.errorReason)) {\n        whenPromiseSettles(auth._forceNewToken(null, null), authCb);\n      } else {\n        whenPromiseSettles(auth._ensureValidAuthCredentials(false), authCb);\n      }\n    }\n  }\n  /*\n   * there are, at most, two transports available with which a connection may\n   * be attempted: web_socket and/or a base transport (xhr_polling in browsers,\n   * comet in nodejs). web_socket is always preferred, and the base transport is\n   * only used in case web_socket connectivity appears to be unavailable.\n   *\n   * connectImpl begins the transport selection process by checking which transports\n   * are available, and if there is a cached preference. It then defers to the\n   * transport-specific connect methods: connectWs and connectBase.\n   *\n   * It is also responsible for invalidating the cache in the case that a base\n   * transport preference is stored but web socket connectivity is now available.\n   *\n   * handling of the case where we need to failover from web_socket to the base\n   * transport is implemented in the connectWs method.\n   */\n  connectImpl(transportParams, connectCount) {\n    const state = this.state.state;\n    if (state !== this.states.connecting.state) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"ConnectionManager.connectImpl()\",\n        \"Must be in connecting state to connect, but was \" + state\n      );\n      return;\n    }\n    const transportPreference = this.getTransportPreference();\n    if (transportPreference && transportPreference === this.baseTransport && this.webSocketTransportAvailable) {\n      this.checkWsConnectivity().then(() => {\n        this.wsCheckResult = true;\n        this.abandonedWebSocket = false;\n        this.unpersistTransportPreference();\n        if (this.state === this.states.connecting) {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_MINOR,\n            \"ConnectionManager.connectImpl():\",\n            \"web socket connectivity available, cancelling connection attempt with \" + this.baseTransport\n          );\n          this.disconnectAllTransports();\n          this.connectWs(transportParams, ++this.connectCounter);\n        }\n      }).catch(noop);\n    }\n    if (transportPreference && transportPreference === this.baseTransport || this.baseTransport && !this.webSocketTransportAvailable) {\n      this.connectBase(transportParams, connectCount);\n    } else {\n      this.connectWs(transportParams, connectCount);\n    }\n  }\n  /*\n   * connectWs starts two timers to monitor the success of a web_socket connection attempt:\n   * - webSocketSlowTimer: if this timer fires before the connection succeeds,\n   *   cm will simultaneously check websocket and http/xhr connectivity. if the http\n   *   connectivity check fails, we give up the connection sequence entirely and\n   *   transition to disconnected. if the websocket connectivity check fails then\n   *   we assume no ws connectivity and failover to base transport. in the case that\n   *   the checks succeed, we continue with websocket and wait for it to try fallback hosts\n   *   and, if unsuccessful, ultimately transition to disconnected.\n   * - webSocketGiveUpTimer: if this timer fires, and the preceding websocket\n   *   connectivity check is still pending then we assume that there is an issue\n   *   with the transport and fallback to base transport.\n   */\n  connectWs(transportParams, connectCount) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"ConnectionManager.connectWs()\");\n    this.startWebSocketSlowTimer();\n    this.startWebSocketGiveUpTimer(transportParams);\n    this.tryTransportWithFallbacks(\"web_socket\", transportParams, true, connectCount, () => {\n      return this.wsCheckResult !== false && !this.abandonedWebSocket;\n    });\n  }\n  connectBase(transportParams, connectCount) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"ConnectionManager.connectBase()\");\n    if (this.baseTransport) {\n      this.tryTransportWithFallbacks(this.baseTransport, transportParams, false, connectCount, () => true);\n    } else {\n      this.notifyState({\n        state: \"disconnected\",\n        error: new ErrorInfo(\"No transports left to try\", 8e4, 404)\n      });\n    }\n  }\n  tryTransportWithFallbacks(transportName, transportParams, ws, connectCount, shouldContinue) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"ConnectionManager.tryTransportWithFallbacks()\",\n      transportName\n    );\n    const giveUp = (err) => {\n      this.notifyState({ state: this.states.connecting.failState, error: err });\n    };\n    const candidateHosts = ws ? this.wsHosts.slice() : this.httpHosts.slice();\n    const hostAttemptCb = (fatal, transport) => {\n      if (connectCount !== this.connectCounter) {\n        return;\n      }\n      if (!shouldContinue()) {\n        if (transport) {\n          transport.dispose();\n        }\n        return;\n      }\n      if (!transport && !fatal) {\n        tryFallbackHosts();\n      }\n    };\n    const host = candidateHosts.shift();\n    if (!host) {\n      giveUp(new ErrorInfo(\"Unable to connect (no available host)\", 80003, 404));\n      return;\n    }\n    transportParams.host = host;\n    const tryFallbackHosts = () => {\n      if (!candidateHosts.length) {\n        giveUp(new ErrorInfo(\"Unable to connect (and no more fallback hosts to try)\", 80003, 404));\n        return;\n      }\n      if (!this.realtime.http.checkConnectivity) {\n        giveUp(new PartialErrorInfo(\"Internal error: Http.checkConnectivity not set\", null, 500));\n        return;\n      }\n      whenPromiseSettles(\n        this.realtime.http.checkConnectivity(),\n        (err, connectivity) => {\n          if (connectCount !== this.connectCounter) {\n            return;\n          }\n          if (!shouldContinue()) {\n            return;\n          }\n          if (err) {\n            giveUp(err);\n            return;\n          }\n          if (!connectivity) {\n            giveUp(new ErrorInfo(\"Unable to connect (network unreachable)\", 80003, 404));\n            return;\n          }\n          transportParams.host = arrPopRandomElement(candidateHosts);\n          this.tryATransport(transportParams, transportName, hostAttemptCb);\n        }\n      );\n    };\n    if (this.forceFallbackHost && candidateHosts.length) {\n      this.forceFallbackHost = false;\n      tryFallbackHosts();\n      return;\n    }\n    this.tryATransport(transportParams, transportName, hostAttemptCb);\n  }\n  closeImpl() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"ConnectionManager.closeImpl()\", \"closing connection\");\n    this.cancelSuspendTimer();\n    this.startTransitionTimer(this.states.closing);\n    if (this.pendingTransport) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.closeImpl()\",\n        \"Closing pending transport: \" + this.pendingTransport\n      );\n      this.pendingTransport.close();\n    }\n    if (this.activeProtocol) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.closeImpl()\",\n        \"Closing active transport: \" + this.activeProtocol.getTransport()\n      );\n      this.activeProtocol.getTransport().close();\n    }\n    this.notifyState({ state: \"closed\" });\n  }\n  onAuthUpdated(tokenDetails, callback) {\n    var _a2;\n    switch (this.state.state) {\n      case \"connected\": {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MICRO,\n          \"ConnectionManager.onAuthUpdated()\",\n          \"Sending AUTH message on active transport\"\n        );\n        const activeTransport = (_a2 = this.activeProtocol) == null ? void 0 : _a2.getTransport();\n        if (activeTransport && activeTransport.onAuthUpdated) {\n          activeTransport.onAuthUpdated(tokenDetails);\n        }\n        const authMsg = fromValues3({\n          action: actions2.AUTH,\n          auth: {\n            accessToken: tokenDetails.token\n          }\n        });\n        this.send(authMsg);\n        const successListener = () => {\n          this.off(failureListener);\n          callback(null, tokenDetails);\n        };\n        const failureListener = (stateChange) => {\n          if (stateChange.current === \"failed\") {\n            this.off(successListener);\n            this.off(failureListener);\n            callback(stateChange.reason || this.getStateError());\n          }\n        };\n        this.once(\"connectiondetails\", successListener);\n        this.on(\"connectionstate\", failureListener);\n        break;\n      }\n      case \"connecting\":\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MICRO,\n          \"ConnectionManager.onAuthUpdated()\",\n          \"Aborting current connection attempts in order to start again with the new auth details\"\n        );\n        this.disconnectAllTransports();\n      default: {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MICRO,\n          \"ConnectionManager.onAuthUpdated()\",\n          \"Connection state is \" + this.state.state + \"; waiting until either connected or failed\"\n        );\n        const listener = (stateChange) => {\n          switch (stateChange.current) {\n            case \"connected\":\n              this.off(listener);\n              callback(null, tokenDetails);\n              break;\n            case \"failed\":\n            case \"closed\":\n            case \"suspended\":\n              this.off(listener);\n              callback(stateChange.reason || this.getStateError());\n              break;\n            default:\n              break;\n          }\n        };\n        this.on(\"connectionstate\", listener);\n        if (this.state.state === \"connecting\") {\n          this.startConnect();\n        } else {\n          this.requestState({ state: \"connecting\" });\n        }\n      }\n    }\n  }\n  disconnectAllTransports() {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"ConnectionManager.disconnectAllTransports()\",\n      \"Disconnecting all transports\"\n    );\n    this.connectCounter++;\n    if (this.pendingTransport) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.disconnectAllTransports()\",\n        \"Disconnecting pending transport: \" + this.pendingTransport\n      );\n      this.pendingTransport.disconnect();\n    }\n    delete this.pendingTransport;\n    if (this.proposedTransport) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.disconnectAllTransports()\",\n        \"Disconnecting proposed transport: \" + this.pendingTransport\n      );\n      this.proposedTransport.disconnect();\n    }\n    delete this.pendingTransport;\n    if (this.activeProtocol) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.disconnectAllTransports()\",\n        \"Disconnecting active transport: \" + this.activeProtocol.getTransport()\n      );\n      this.activeProtocol.getTransport().disconnect();\n    }\n  }\n  /******************\n   * event queueing\n   ******************/\n  send(msg, queueEvent, callback) {\n    callback = callback || noop;\n    const state = this.state;\n    if (state.sendEvents) {\n      logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"ConnectionManager.send()\", \"sending event\");\n      this.sendImpl(new PendingMessage(msg, callback));\n      return;\n    }\n    const shouldQueue = queueEvent && state.queueEvents;\n    if (!shouldQueue) {\n      const err = \"rejecting event, queueEvent was \" + queueEvent + \", state was \" + state.state;\n      logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"ConnectionManager.send()\", err);\n      callback(this.errorReason || new ErrorInfo(err, 9e4, 400));\n      return;\n    }\n    if (this.logger.shouldLog(logger_default.LOG_MICRO)) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.send()\",\n        \"queueing msg; \" + stringify(msg, this.realtime._RealtimePresence)\n      );\n    }\n    this.queue(msg, callback);\n  }\n  sendImpl(pendingMessage) {\n    const msg = pendingMessage.message;\n    if (pendingMessage.ackRequired && !pendingMessage.sendAttempted) {\n      msg.msgSerial = this.msgSerial++;\n    }\n    try {\n      this.activeProtocol.send(pendingMessage);\n    } catch (e) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"ConnectionManager.sendImpl()\",\n        \"Unexpected exception in transport.send(): \" + e.stack\n      );\n    }\n  }\n  queue(msg, callback) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"ConnectionManager.queue()\", \"queueing event\");\n    const lastQueued = this.queuedMessages.last();\n    const maxSize = this.options.maxMessageSize;\n    if (lastQueued && !lastQueued.sendAttempted && bundleWith(lastQueued.message, msg, maxSize)) {\n      if (!lastQueued.merged) {\n        lastQueued.callback = multicaster_default.create(this.logger, [lastQueued.callback]);\n        lastQueued.merged = true;\n      }\n      lastQueued.callback.push(callback);\n    } else {\n      this.queuedMessages.push(new PendingMessage(msg, callback));\n    }\n  }\n  sendQueuedMessages() {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"ConnectionManager.sendQueuedMessages()\",\n      \"sending \" + this.queuedMessages.count() + \" queued messages\"\n    );\n    let pendingMessage;\n    while (pendingMessage = this.queuedMessages.shift())\n      this.sendImpl(pendingMessage);\n  }\n  queuePendingMessages(pendingMessages) {\n    if (pendingMessages && pendingMessages.length) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"ConnectionManager.queuePendingMessages()\",\n        \"queueing \" + pendingMessages.length + \" pending messages\"\n      );\n      this.queuedMessages.prepend(pendingMessages);\n    }\n  }\n  failQueuedMessages(err) {\n    const numQueued = this.queuedMessages.count();\n    if (numQueued > 0) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"ConnectionManager.failQueuedMessages()\",\n        \"failing \" + numQueued + \" queued messages, err = \" + inspectError(err)\n      );\n      this.queuedMessages.completeAllMessages(err);\n    }\n  }\n  onChannelMessage(message, transport) {\n    this.pendingChannelMessagesState.queue.push({ message, transport });\n    if (!this.pendingChannelMessagesState.isProcessing) {\n      this.processNextPendingChannelMessage();\n    }\n  }\n  processNextPendingChannelMessage() {\n    if (this.pendingChannelMessagesState.queue.length > 0) {\n      this.pendingChannelMessagesState.isProcessing = true;\n      const pendingChannelMessage = this.pendingChannelMessagesState.queue.shift();\n      this.processChannelMessage(pendingChannelMessage.message).catch((err) => {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_ERROR,\n          \"ConnectionManager.processNextPendingChannelMessage() received error \",\n          err\n        );\n      }).finally(() => {\n        this.pendingChannelMessagesState.isProcessing = false;\n        this.processNextPendingChannelMessage();\n      });\n    }\n  }\n  async processChannelMessage(message) {\n    await this.realtime.channels.processChannelMessage(message);\n  }\n  async ping() {\n    var _a2;\n    if (this.state.state !== \"connected\") {\n      throw new ErrorInfo(\"Unable to ping service; not connected\", 4e4, 400);\n    }\n    const transport = (_a2 = this.activeProtocol) == null ? void 0 : _a2.getTransport();\n    if (!transport) {\n      throw this.getStateError();\n    }\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"ConnectionManager.ping()\", \"transport = \" + transport);\n    const pingStart = Date.now();\n    const id = cheapRandStr();\n    return withTimeoutAsync(\n      new Promise((resolve) => {\n        const onHeartbeat = (responseId) => {\n          if (responseId === id) {\n            transport.off(\"heartbeat\", onHeartbeat);\n            resolve(Date.now() - pingStart);\n          }\n        };\n        transport.on(\"heartbeat\", onHeartbeat);\n        transport.ping(id);\n      }),\n      this.options.timeouts.realtimeRequestTimeout,\n      \"Timeout waiting for heartbeat response\"\n    );\n  }\n  abort(error) {\n    this.activeProtocol.getTransport().fail(error);\n  }\n  getTransportPreference() {\n    var _a2, _b;\n    return this.transportPreference || haveWebStorage() && ((_b = (_a2 = Platform.WebStorage) == null ? void 0 : _a2.get) == null ? void 0 : _b.call(_a2, transportPreferenceName));\n  }\n  persistTransportPreference(transport) {\n    var _a2, _b;\n    this.transportPreference = transport.shortName;\n    if (haveWebStorage()) {\n      (_b = (_a2 = Platform.WebStorage) == null ? void 0 : _a2.set) == null ? void 0 : _b.call(_a2, transportPreferenceName, transport.shortName);\n    }\n  }\n  unpersistTransportPreference() {\n    var _a2, _b;\n    this.transportPreference = null;\n    if (haveWebStorage()) {\n      (_b = (_a2 = Platform.WebStorage) == null ? void 0 : _a2.remove) == null ? void 0 : _b.call(_a2, transportPreferenceName);\n    }\n  }\n  /* This method is only used during connection attempts, so implements RSA4c1, RSA4c2,\n   * and RSA4d. It is generally not invoked for serverside-triggered reauths or manual\n   * reauths, so RSA4c3 does not apply, except (per per RSA4d1) in the case that the auth\n   * server returns 403. */\n  actOnErrorFromAuthorize(err) {\n    if (err.code === 40171) {\n      this.notifyState({ state: \"failed\", error: err });\n    } else if (err.code === 40102) {\n      this.notifyState({ state: \"failed\", error: err });\n    } else if (err.statusCode === HttpStatusCodes_default.Forbidden) {\n      const msg = \"Client configured authentication provider returned 403; failing the connection\";\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"ConnectionManager.actOnErrorFromAuthorize()\", msg);\n      this.notifyState({ state: \"failed\", error: new ErrorInfo(msg, 80019, 403, err) });\n    } else {\n      const msg = \"Client configured authentication provider request failed\";\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"ConnectionManager.actOnErrorFromAuthorize\", msg);\n      this.notifyState({ state: this.state.failState, error: new ErrorInfo(msg, 80019, 401, err) });\n    }\n  }\n  onConnectionDetailsUpdate(connectionDetails, transport) {\n    if (!connectionDetails) {\n      return;\n    }\n    this.connectionDetails = connectionDetails;\n    if (connectionDetails.maxMessageSize) {\n      this.options.maxMessageSize = connectionDetails.maxMessageSize;\n    }\n    const clientId = connectionDetails.clientId;\n    if (clientId) {\n      const err = this.realtime.auth._uncheckedSetClientId(clientId);\n      if (err) {\n        logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"ConnectionManager.onConnectionDetailsUpdate()\", err.message);\n        transport.fail(err);\n        return;\n      }\n    }\n    const connectionStateTtl = connectionDetails.connectionStateTtl;\n    if (connectionStateTtl) {\n      this.connectionStateTtl = connectionStateTtl;\n    }\n    this.maxIdleInterval = connectionDetails.maxIdleInterval;\n    this.emit(\"connectiondetails\", connectionDetails);\n  }\n  checkWsConnectivity() {\n    const ws = new Platform.Config.WebSocket(defaults_default.wsConnectivityUrl);\n    return new Promise((resolve, reject) => {\n      let finished = false;\n      ws.onopen = () => {\n        if (!finished) {\n          finished = true;\n          resolve();\n          ws.close();\n        }\n      };\n      ws.onclose = ws.onerror = () => {\n        if (!finished) {\n          finished = true;\n          reject();\n        }\n      };\n    });\n  }\n  sessionRecoveryName() {\n    return this.options.recoveryKeyStorageName || \"ably-connection-recovery\";\n  }\n  getSessionRecoverData() {\n    var _a2, _b;\n    return haveSessionStorage() && ((_b = (_a2 = Platform.WebStorage) == null ? void 0 : _a2.getSession) == null ? void 0 : _b.call(_a2, this.sessionRecoveryName()));\n  }\n  setSessionRecoverData(value) {\n    var _a2, _b;\n    return haveSessionStorage() && ((_b = (_a2 = Platform.WebStorage) == null ? void 0 : _a2.setSession) == null ? void 0 : _b.call(_a2, this.sessionRecoveryName(), value));\n  }\n  clearSessionRecoverData() {\n    var _a2, _b;\n    return haveSessionStorage() && ((_b = (_a2 = Platform.WebStorage) == null ? void 0 : _a2.removeSession) == null ? void 0 : _b.call(_a2, this.sessionRecoveryName()));\n  }\n};\nvar connectionmanager_default = ConnectionManager;\n\n// src/common/lib/client/connection.ts\nvar Connection = class extends eventemitter_default {\n  constructor(ably, options) {\n    super(ably.logger);\n    this.whenState = (state) => {\n      return eventemitter_default.prototype.whenState.call(this, state, this.state);\n    };\n    this.ably = ably;\n    this.connectionManager = new connectionmanager_default(ably, options);\n    this.state = this.connectionManager.state.state;\n    this.key = void 0;\n    this.id = void 0;\n    this.errorReason = null;\n    this.connectionManager.on(\"connectionstate\", (stateChange) => {\n      const state = this.state = stateChange.current;\n      Platform.Config.nextTick(() => {\n        this.emit(state, stateChange);\n      });\n    });\n    this.connectionManager.on(\"update\", (stateChange) => {\n      Platform.Config.nextTick(() => {\n        this.emit(\"update\", stateChange);\n      });\n    });\n  }\n  connect() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Connection.connect()\", \"\");\n    this.connectionManager.requestState({ state: \"connecting\" });\n  }\n  async ping() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Connection.ping()\", \"\");\n    return this.connectionManager.ping();\n  }\n  close() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Connection.close()\", \"connectionKey = \" + this.key);\n    this.connectionManager.requestState({ state: \"closing\" });\n  }\n  get recoveryKey() {\n    this.logger.deprecationWarning(\n      \"The `Connection.recoveryKey` attribute has been replaced by the `Connection.createRecoveryKey()` method. Replace your usage of `recoveryKey` with the return value of `createRecoveryKey()`. `recoveryKey` will be removed in a future version.\"\n    );\n    return this.createRecoveryKey();\n  }\n  createRecoveryKey() {\n    return this.connectionManager.createRecoveryKey();\n  }\n};\nvar connection_default = Connection;\n\n// src/common/lib/client/channelstatechange.ts\nvar ChannelStateChange = class {\n  constructor(previous, current, resumed, hasBacklog, reason) {\n    this.previous = previous;\n    this.current = current;\n    if (current === \"attached\") {\n      this.resumed = resumed;\n      this.hasBacklog = hasBacklog;\n    }\n    if (reason)\n      this.reason = reason;\n  }\n};\nvar channelstatechange_default = ChannelStateChange;\n\n// src/common/lib/client/realtimechannel.ts\nvar noop2 = function() {\n};\nfunction validateChannelOptions(options) {\n  if (options && \"params\" in options && !isObject(options.params)) {\n    return new ErrorInfo(\"options.params must be an object\", 4e4, 400);\n  }\n  if (options && \"modes\" in options) {\n    if (!Array.isArray(options.modes)) {\n      return new ErrorInfo(\"options.modes must be an array\", 4e4, 400);\n    }\n    for (let i = 0; i < options.modes.length; i++) {\n      const currentMode = options.modes[i];\n      if (!currentMode || typeof currentMode !== \"string\" || !channelModes.includes(String.prototype.toUpperCase.call(currentMode))) {\n        return new ErrorInfo(\"Invalid channel mode: \" + currentMode, 4e4, 400);\n      }\n    }\n  }\n}\nvar RealtimeChannel = class _RealtimeChannel extends eventemitter_default {\n  constructor(client, name, options) {\n    var _a2, _b;\n    super(client.logger);\n    this.retryCount = 0;\n    this.history = async function(params) {\n      logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RealtimeChannel.history()\", \"channel = \" + this.name);\n      const restMixin = this.client.rest.channelMixin;\n      if (params && params.untilAttach) {\n        if (this.state !== \"attached\") {\n          throw new ErrorInfo(\"option untilAttach requires the channel to be attached\", 4e4, 400);\n        }\n        if (!this.properties.attachSerial) {\n          throw new ErrorInfo(\n            \"untilAttach was specified and channel is attached, but attachSerial is not defined\",\n            4e4,\n            400\n          );\n        }\n        delete params.untilAttach;\n        params.from_serial = this.properties.attachSerial;\n      }\n      return restMixin.history(this, params);\n    };\n    this.whenState = (state) => {\n      return eventemitter_default.prototype.whenState.call(this, state, this.state);\n    };\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"RealtimeChannel()\", \"started; name = \" + name);\n    this.name = name;\n    this.channelOptions = normaliseChannelOptions((_a2 = client._Crypto) != null ? _a2 : null, this.logger, options);\n    this.client = client;\n    this._presence = client._RealtimePresence ? new client._RealtimePresence.RealtimePresence(this) : null;\n    this.connectionManager = client.connection.connectionManager;\n    this.state = \"initialized\";\n    this.subscriptions = new eventemitter_default(this.logger);\n    this.syncChannelSerial = void 0;\n    this.properties = {\n      attachSerial: void 0,\n      channelSerial: void 0\n    };\n    this.setOptions(options);\n    this.errorReason = null;\n    this._requestedFlags = null;\n    this._mode = null;\n    this._attachResume = false;\n    this._decodingContext = {\n      channelOptions: this.channelOptions,\n      plugins: client.options.plugins || {},\n      baseEncodedPreviousPayload: void 0\n    };\n    this._lastPayload = {\n      messageId: null,\n      protocolMessageChannelSerial: null,\n      decodeFailureRecoveryInProgress: null\n    };\n    this._allChannelChanges = new eventemitter_default(this.logger);\n    if ((_b = client.options.plugins) == null ? void 0 : _b.Push) {\n      this._push = new client.options.plugins.Push.PushChannel(this);\n    }\n  }\n  get presence() {\n    if (!this._presence) {\n      throwMissingPluginError(\"RealtimePresence\");\n    }\n    return this._presence;\n  }\n  get push() {\n    if (!this._push) {\n      throwMissingPluginError(\"Push\");\n    }\n    return this._push;\n  }\n  invalidStateError() {\n    return new ErrorInfo(\n      \"Channel operation failed as channel state is \" + this.state,\n      90001,\n      400,\n      this.errorReason || void 0\n    );\n  }\n  static processListenerArgs(args) {\n    args = Array.prototype.slice.call(args);\n    if (typeof args[0] === \"function\") {\n      args.unshift(null);\n    }\n    return args;\n  }\n  async setOptions(options) {\n    var _a2;\n    const previousChannelOptions = this.channelOptions;\n    const err = validateChannelOptions(options);\n    if (err) {\n      throw err;\n    }\n    this.channelOptions = normaliseChannelOptions((_a2 = this.client._Crypto) != null ? _a2 : null, this.logger, options);\n    if (this._decodingContext)\n      this._decodingContext.channelOptions = this.channelOptions;\n    if (this._shouldReattachToSetOptions(options, previousChannelOptions)) {\n      this.attachImpl();\n      return new Promise((resolve, reject) => {\n        this._allChannelChanges.once(\n          [\"attached\", \"update\", \"detached\", \"failed\"],\n          function(stateChange) {\n            switch (this.event) {\n              case \"update\":\n              case \"attached\":\n                resolve();\n                break;\n              default:\n                reject(stateChange.reason);\n            }\n          }\n        );\n      });\n    }\n  }\n  _shouldReattachToSetOptions(options, prevOptions) {\n    if (!(this.state === \"attached\" || this.state === \"attaching\")) {\n      return false;\n    }\n    if (options == null ? void 0 : options.params) {\n      const requestedParams = omitAgent(options.params);\n      const existingParams = omitAgent(prevOptions.params);\n      if (Object.keys(requestedParams).length !== Object.keys(existingParams).length) {\n        return true;\n      }\n      if (!shallowEquals(existingParams, requestedParams)) {\n        return true;\n      }\n    }\n    if (options == null ? void 0 : options.modes) {\n      if (!prevOptions.modes || !arrEquals(options.modes, prevOptions.modes)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  async publish(...args) {\n    let messages = args[0];\n    let argCount = args.length;\n    if (!this.connectionManager.activeState()) {\n      throw this.connectionManager.getError();\n    }\n    if (argCount == 1) {\n      if (isObject(messages))\n        messages = [fromValues(messages)];\n      else if (Array.isArray(messages))\n        messages = fromValuesArray(messages);\n      else\n        throw new ErrorInfo(\n          \"The single-argument form of publish() expects a message object or an array of message objects\",\n          40013,\n          400\n        );\n    } else {\n      messages = [fromValues({ name: args[0], data: args[1] })];\n    }\n    const maxMessageSize = this.client.options.maxMessageSize;\n    await encodeArray(messages, this.channelOptions);\n    const size = getMessagesSize(messages);\n    if (size > maxMessageSize) {\n      throw new ErrorInfo(\n        \"Maximum size of messages that can be published at once exceeded ( was \" + size + \" bytes; limit is \" + maxMessageSize + \" bytes)\",\n        40009,\n        400\n      );\n    }\n    return new Promise((resolve, reject) => {\n      this._publish(messages, (err) => err ? reject(err) : resolve());\n    });\n  }\n  _publish(messages, callback) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RealtimeChannel.publish()\", \"message count = \" + messages.length);\n    const state = this.state;\n    switch (state) {\n      case \"failed\":\n      case \"suspended\":\n        callback(ErrorInfo.fromValues(this.invalidStateError()));\n        break;\n      default: {\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MICRO,\n          \"RealtimeChannel.publish()\",\n          \"sending message; channel state is \" + state\n        );\n        const msg = new protocolmessage_default();\n        msg.action = actions2.MESSAGE;\n        msg.channel = this.name;\n        msg.messages = messages;\n        this.sendMessage(msg, callback);\n        break;\n      }\n    }\n  }\n  onEvent(messages) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RealtimeChannel.onEvent()\", \"received message\");\n    const subscriptions = this.subscriptions;\n    for (let i = 0; i < messages.length; i++) {\n      const message = messages[i];\n      subscriptions.emit(message.name, message);\n    }\n  }\n  async attach() {\n    if (this.state === \"attached\") {\n      return null;\n    }\n    return new Promise((resolve, reject) => {\n      this._attach(false, null, (err, result) => err ? reject(err) : resolve(result));\n    });\n  }\n  _attach(forceReattach, attachReason, callback) {\n    if (!callback) {\n      callback = (err) => {\n        if (err) {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_ERROR,\n            \"RealtimeChannel._attach()\",\n            \"Channel attach failed: \" + err.toString()\n          );\n        }\n      };\n    }\n    const connectionManager = this.connectionManager;\n    if (!connectionManager.activeState()) {\n      callback(connectionManager.getError());\n      return;\n    }\n    if (this.state !== \"attaching\" || forceReattach) {\n      this.requestState(\"attaching\", attachReason);\n    }\n    this.once(function(stateChange) {\n      switch (this.event) {\n        case \"attached\":\n          callback == null ? void 0 : callback(null, stateChange);\n          break;\n        case \"detached\":\n        case \"suspended\":\n        case \"failed\":\n          callback == null ? void 0 : callback(\n            stateChange.reason || connectionManager.getError() || new ErrorInfo(\"Unable to attach; reason unknown; state = \" + this.event, 9e4, 500)\n          );\n          break;\n        case \"detaching\":\n          callback == null ? void 0 : callback(new ErrorInfo(\"Attach request superseded by a subsequent detach request\", 9e4, 409));\n          break;\n      }\n    });\n  }\n  attachImpl() {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RealtimeChannel.attachImpl()\", \"sending ATTACH message\");\n    const attachMsg = fromValues3({\n      action: actions2.ATTACH,\n      channel: this.name,\n      params: this.channelOptions.params,\n      // RTL4c1: Includes the channel serial to resume from a previous message\n      // or attachment.\n      channelSerial: this.properties.channelSerial\n    });\n    if (this._requestedFlags) {\n      attachMsg.encodeModesToFlags(this._requestedFlags);\n    } else if (this.channelOptions.modes) {\n      attachMsg.encodeModesToFlags(allToUpperCase(this.channelOptions.modes));\n    }\n    if (this._attachResume) {\n      attachMsg.setFlag(\"ATTACH_RESUME\");\n    }\n    if (this._lastPayload.decodeFailureRecoveryInProgress) {\n      attachMsg.channelSerial = this._lastPayload.protocolMessageChannelSerial;\n    }\n    this.sendMessage(attachMsg, noop2);\n  }\n  async detach() {\n    const connectionManager = this.connectionManager;\n    if (!connectionManager.activeState()) {\n      throw connectionManager.getError();\n    }\n    switch (this.state) {\n      case \"suspended\":\n        this.notifyState(\"detached\");\n        return;\n      case \"detached\":\n        return;\n      case \"failed\":\n        throw new ErrorInfo(\"Unable to detach; channel state = failed\", 90001, 400);\n      default:\n        this.requestState(\"detaching\");\n      case \"detaching\":\n        return new Promise((resolve, reject) => {\n          this.once(function(stateChange) {\n            switch (this.event) {\n              case \"detached\":\n                resolve();\n                break;\n              case \"attached\":\n              case \"suspended\":\n              case \"failed\":\n                reject(\n                  stateChange.reason || connectionManager.getError() || new ErrorInfo(\"Unable to detach; reason unknown; state = \" + this.event, 9e4, 500)\n                );\n                break;\n              case \"attaching\":\n                reject(new ErrorInfo(\"Detach request superseded by a subsequent attach request\", 9e4, 409));\n                break;\n            }\n          });\n        });\n    }\n  }\n  detachImpl(callback) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RealtimeChannel.detach()\", \"sending DETACH message\");\n    const msg = fromValues3({ action: actions2.DETACH, channel: this.name });\n    this.sendMessage(msg, callback || noop2);\n  }\n  async subscribe(...args) {\n    const [event, listener] = _RealtimeChannel.processListenerArgs(args);\n    if (this.state === \"failed\") {\n      throw ErrorInfo.fromValues(this.invalidStateError());\n    }\n    if (event && typeof event === \"object\" && !Array.isArray(event)) {\n      this.client._FilteredSubscriptions.subscribeFilter(this, event, listener);\n    } else {\n      this.subscriptions.on(event, listener);\n    }\n    return this.attach();\n  }\n  unsubscribe(...args) {\n    var _a2;\n    const [event, listener] = _RealtimeChannel.processListenerArgs(args);\n    if (typeof event === \"object\" && !listener || ((_a2 = this.filteredSubscriptions) == null ? void 0 : _a2.has(listener))) {\n      this.client._FilteredSubscriptions.getAndDeleteFilteredSubscriptions(this, event, listener).forEach((l) => this.subscriptions.off(l));\n      return;\n    }\n    this.subscriptions.off(event, listener);\n  }\n  sync() {\n    switch (this.state) {\n      case \"initialized\":\n      case \"detaching\":\n      case \"detached\":\n        throw new PartialErrorInfo(\"Unable to sync to channel; not attached\", 4e4);\n      default:\n    }\n    const connectionManager = this.connectionManager;\n    if (!connectionManager.activeState()) {\n      throw connectionManager.getError();\n    }\n    const syncMessage = fromValues3({ action: actions2.SYNC, channel: this.name });\n    if (this.syncChannelSerial) {\n      syncMessage.channelSerial = this.syncChannelSerial;\n    }\n    connectionManager.send(syncMessage);\n  }\n  sendMessage(msg, callback) {\n    this.connectionManager.send(msg, this.client.options.queueMessages, callback);\n  }\n  sendPresence(presence, callback) {\n    const msg = fromValues3({\n      action: actions2.PRESENCE,\n      channel: this.name,\n      presence: Array.isArray(presence) ? this.client._RealtimePresence.presenceMessagesFromValuesArray(presence) : [this.client._RealtimePresence.presenceMessageFromValues(presence)]\n    });\n    this.sendMessage(msg, callback);\n  }\n  // Access to this method is synchronised by ConnectionManager#processChannelMessage, in order to synchronise access to the state stored in _decodingContext.\n  async processMessage(message) {\n    if (message.action === actions2.ATTACHED || message.action === actions2.MESSAGE || message.action === actions2.PRESENCE) {\n      this.setChannelSerial(message.channelSerial);\n    }\n    let syncChannelSerial, isSync = false;\n    switch (message.action) {\n      case actions2.ATTACHED: {\n        this.properties.attachSerial = message.channelSerial;\n        this._mode = message.getMode();\n        this.params = message.params || {};\n        const modesFromFlags = message.decodeModesFromFlags();\n        this.modes = modesFromFlags && allToLowerCase(modesFromFlags) || void 0;\n        const resumed = message.hasFlag(\"RESUMED\");\n        const hasPresence = message.hasFlag(\"HAS_PRESENCE\");\n        const hasBacklog = message.hasFlag(\"HAS_BACKLOG\");\n        if (this.state === \"attached\") {\n          if (!resumed) {\n            if (this._presence) {\n              this._presence.onAttached(hasPresence);\n            }\n          }\n          const change = new channelstatechange_default(this.state, this.state, resumed, hasBacklog, message.error);\n          this._allChannelChanges.emit(\"update\", change);\n          if (!resumed || this.channelOptions.updateOnAttached) {\n            this.emit(\"update\", change);\n          }\n        } else if (this.state === \"detaching\") {\n          this.checkPendingState();\n        } else {\n          this.notifyState(\"attached\", message.error, resumed, hasPresence, hasBacklog);\n        }\n        break;\n      }\n      case actions2.DETACHED: {\n        const detachErr = message.error ? ErrorInfo.fromValues(message.error) : new ErrorInfo(\"Channel detached\", 90001, 404);\n        if (this.state === \"detaching\") {\n          this.notifyState(\"detached\", detachErr);\n        } else if (this.state === \"attaching\") {\n          this.notifyState(\"suspended\", detachErr);\n        } else if (this.state === \"attached\" || this.state === \"suspended\") {\n          this.requestState(\"attaching\", detachErr);\n        }\n        break;\n      }\n      case actions2.SYNC:\n        isSync = true;\n        syncChannelSerial = this.syncChannelSerial = message.channelSerial;\n        if (!message.presence)\n          break;\n      case actions2.PRESENCE: {\n        const presence = message.presence;\n        if (!presence) {\n          break;\n        }\n        const { id, connectionId, timestamp } = message;\n        const options = this.channelOptions;\n        let presenceMsg;\n        for (let i = 0; i < presence.length; i++) {\n          try {\n            presenceMsg = presence[i];\n            await decode2(presenceMsg, options);\n            if (!presenceMsg.connectionId)\n              presenceMsg.connectionId = connectionId;\n            if (!presenceMsg.timestamp)\n              presenceMsg.timestamp = timestamp;\n            if (!presenceMsg.id)\n              presenceMsg.id = id + \":\" + i;\n          } catch (e) {\n            logger_default.logAction(\n              this.logger,\n              logger_default.LOG_ERROR,\n              \"RealtimeChannel.processMessage()\",\n              e.toString()\n            );\n          }\n        }\n        if (this._presence) {\n          this._presence.setPresence(presence, isSync, syncChannelSerial);\n        }\n        break;\n      }\n      case actions2.MESSAGE: {\n        if (this.state !== \"attached\") {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_MAJOR,\n            \"RealtimeChannel.processMessage()\",\n            'Message \"' + message.id + '\" skipped as this channel \"' + this.name + '\" state is not \"attached\" (state is \"' + this.state + '\").'\n          );\n          return;\n        }\n        const messages = message.messages, firstMessage = messages[0], lastMessage = messages[messages.length - 1], id = message.id, connectionId = message.connectionId, timestamp = message.timestamp;\n        if (firstMessage.extras && firstMessage.extras.delta && firstMessage.extras.delta.from !== this._lastPayload.messageId) {\n          const msg = 'Delta message decode failure - previous message not available for message \"' + message.id + '\" on this channel \"' + this.name + '\".';\n          logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"RealtimeChannel.processMessage()\", msg);\n          this._startDecodeFailureRecovery(new ErrorInfo(msg, 40018, 400));\n          break;\n        }\n        for (let i = 0; i < messages.length; i++) {\n          const msg = messages[i];\n          try {\n            await decode(msg, this._decodingContext);\n          } catch (e) {\n            logger_default.logAction(\n              this.logger,\n              logger_default.LOG_ERROR,\n              \"RealtimeChannel.processMessage()\",\n              e.toString()\n            );\n            switch (e.code) {\n              case 40018:\n                this._startDecodeFailureRecovery(e);\n                return;\n              case 40019:\n              case 40021:\n                this.notifyState(\"failed\", e);\n                return;\n            }\n          }\n          if (!msg.connectionId)\n            msg.connectionId = connectionId;\n          if (!msg.timestamp)\n            msg.timestamp = timestamp;\n          if (!msg.id)\n            msg.id = id + \":\" + i;\n        }\n        this._lastPayload.messageId = lastMessage.id;\n        this._lastPayload.protocolMessageChannelSerial = message.channelSerial;\n        this.onEvent(messages);\n        break;\n      }\n      case actions2.ERROR: {\n        const err = message.error;\n        if (err && err.code == 80016) {\n          this.checkPendingState();\n        } else {\n          this.notifyState(\"failed\", ErrorInfo.fromValues(err));\n        }\n        break;\n      }\n      default:\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_ERROR,\n          \"RealtimeChannel.processMessage()\",\n          \"Fatal protocol error: unrecognised action (\" + message.action + \")\"\n        );\n        this.connectionManager.abort(connectionerrors_default.unknownChannelErr());\n    }\n  }\n  _startDecodeFailureRecovery(reason) {\n    if (!this._lastPayload.decodeFailureRecoveryInProgress) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MAJOR,\n        \"RealtimeChannel.processMessage()\",\n        \"Starting decode failure recovery process.\"\n      );\n      this._lastPayload.decodeFailureRecoveryInProgress = true;\n      this._attach(true, reason, () => {\n        this._lastPayload.decodeFailureRecoveryInProgress = false;\n      });\n    }\n  }\n  onAttached() {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"RealtimeChannel.onAttached\",\n      \"activating channel; name = \" + this.name\n    );\n  }\n  notifyState(state, reason, resumed, hasPresence, hasBacklog) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"RealtimeChannel.notifyState\",\n      \"name = \" + this.name + \", current state = \" + this.state + \", notifying state \" + state\n    );\n    this.clearStateTimer();\n    if ([\"detached\", \"suspended\", \"failed\"].includes(state)) {\n      this.properties.channelSerial = null;\n    }\n    if (state === this.state) {\n      return;\n    }\n    if (this._presence) {\n      this._presence.actOnChannelState(state, hasPresence, reason);\n    }\n    if (state === \"suspended\" && this.connectionManager.state.sendEvents) {\n      this.startRetryTimer();\n    } else {\n      this.cancelRetryTimer();\n    }\n    if (reason) {\n      this.errorReason = reason;\n    }\n    const change = new channelstatechange_default(this.state, state, resumed, hasBacklog, reason);\n    const action = 'Channel state for channel \"' + this.name + '\"';\n    const message = state + (reason ? \"; reason: \" + reason : \"\");\n    if (state === \"failed\") {\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, action, message);\n    } else {\n      logger_default.logAction(this.logger, logger_default.LOG_MAJOR, action, message);\n    }\n    if (state !== \"attaching\" && state !== \"suspended\") {\n      this.retryCount = 0;\n    }\n    if (state === \"attached\") {\n      this.onAttached();\n    }\n    if (state === \"attached\") {\n      this._attachResume = true;\n    } else if (state === \"detaching\" || state === \"failed\") {\n      this._attachResume = false;\n    }\n    this.state = state;\n    this._allChannelChanges.emit(state, change);\n    this.emit(state, change);\n  }\n  requestState(state, reason) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"RealtimeChannel.requestState\",\n      \"name = \" + this.name + \", state = \" + state\n    );\n    this.notifyState(state, reason);\n    this.checkPendingState();\n  }\n  checkPendingState() {\n    const cmState = this.connectionManager.state;\n    if (!cmState.sendEvents) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"RealtimeChannel.checkPendingState\",\n        \"sendEvents is false; state is \" + this.connectionManager.state.state\n      );\n      return;\n    }\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"RealtimeChannel.checkPendingState\",\n      \"name = \" + this.name + \", state = \" + this.state\n    );\n    switch (this.state) {\n      case \"attaching\":\n        this.startStateTimerIfNotRunning();\n        this.attachImpl();\n        break;\n      case \"detaching\":\n        this.startStateTimerIfNotRunning();\n        this.detachImpl();\n        break;\n      case \"attached\":\n        this.sync();\n        break;\n      default:\n        break;\n    }\n  }\n  timeoutPendingState() {\n    switch (this.state) {\n      case \"attaching\": {\n        const err = new ErrorInfo(\"Channel attach timed out\", 90007, 408);\n        this.notifyState(\"suspended\", err);\n        break;\n      }\n      case \"detaching\": {\n        const err = new ErrorInfo(\"Channel detach timed out\", 90007, 408);\n        this.notifyState(\"attached\", err);\n        break;\n      }\n      default:\n        this.checkPendingState();\n        break;\n    }\n  }\n  startStateTimerIfNotRunning() {\n    if (!this.stateTimer) {\n      this.stateTimer = setTimeout(() => {\n        logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"RealtimeChannel.startStateTimerIfNotRunning\", \"timer expired\");\n        this.stateTimer = null;\n        this.timeoutPendingState();\n      }, this.client.options.timeouts.realtimeRequestTimeout);\n    }\n  }\n  clearStateTimer() {\n    const stateTimer = this.stateTimer;\n    if (stateTimer) {\n      clearTimeout(stateTimer);\n      this.stateTimer = null;\n    }\n  }\n  startRetryTimer() {\n    if (this.retryTimer)\n      return;\n    this.retryCount++;\n    const retryDelay = getRetryTime(this.client.options.timeouts.channelRetryTimeout, this.retryCount);\n    this.retryTimer = setTimeout(() => {\n      if (this.state === \"suspended\" && this.connectionManager.state.sendEvents) {\n        this.retryTimer = null;\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MINOR,\n          \"RealtimeChannel retry timer expired\",\n          \"attempting a new attach\"\n        );\n        this.requestState(\"attaching\");\n      }\n    }, retryDelay);\n  }\n  cancelRetryTimer() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n      this.retryTimer = null;\n    }\n  }\n  /* @returns null (if can safely be released) | ErrorInfo (if cannot) */\n  getReleaseErr() {\n    const s = this.state;\n    if (s === \"initialized\" || s === \"detached\" || s === \"failed\") {\n      return null;\n    }\n    return new ErrorInfo(\n      \"Can only release a channel in a state where there is no possibility of further updates from the server being received (initialized, detached, or failed); was \" + s,\n      90001,\n      400\n    );\n  }\n  setChannelSerial(channelSerial) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"RealtimeChannel.setChannelSerial()\",\n      \"Updating channel serial; serial = \" + channelSerial + \"; previous = \" + this.properties.channelSerial\n    );\n    if (channelSerial) {\n      this.properties.channelSerial = channelSerial;\n    }\n  }\n  async status() {\n    return this.client.rest.channelMixin.status(this);\n  }\n};\nfunction omitAgent(channelParams) {\n  const _a2 = channelParams || {}, { agent: _ } = _a2, paramsWithoutAgent = __objRest(_a2, [\"agent\"]);\n  return paramsWithoutAgent;\n}\nvar realtimechannel_default = RealtimeChannel;\n\n// src/common/lib/client/baserealtime.ts\nvar _BaseRealtime = class _BaseRealtime extends baseclient_default {\n  /*\n   * The public typings declare that this only accepts an object, but since we want to emit a good error message in the case where a non-TypeScript user does one of these things:\n   *\n   * 1. passes a string (which is quite likely if they’re e.g. migrating from the default variant to the modular variant)\n   * 2. passes no argument at all\n   *\n   * tell the compiler that these cases are possible so that it forces us to handle them.\n   */\n  constructor(options) {\n    var _a2, _b;\n    super(defaults_default.objectifyOptions(options, false, \"BaseRealtime\", logger_default.defaultLogger));\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Realtime()\", \"\");\n    if (typeof EdgeRuntime === \"string\") {\n      throw new ErrorInfo(\n        `Ably.Realtime instance cannot be used in Vercel Edge runtime. If you are running Vercel Edge functions, please replace your \"new Ably.Realtime()\" with \"new Ably.Rest()\" and use Ably Rest API instead of the Realtime API. If you are server-rendering your application in the Vercel Edge runtime, please use the condition \"if (typeof EdgeRuntime === 'string')\" to prevent instantiating Ably.Realtime instance during SSR in the Vercel Edge runtime.`,\n        4e4,\n        400\n      );\n    }\n    this._additionalTransportImplementations = _BaseRealtime.transportImplementationsFromPlugins(this.options.plugins);\n    this._RealtimePresence = (_b = (_a2 = this.options.plugins) == null ? void 0 : _a2.RealtimePresence) != null ? _b : null;\n    this.connection = new connection_default(this, this.options);\n    this._channels = new Channels2(this);\n    if (this.options.autoConnect !== false)\n      this.connect();\n  }\n  static transportImplementationsFromPlugins(plugins) {\n    const transports = {};\n    if (plugins == null ? void 0 : plugins.WebSocketTransport) {\n      transports[TransportNames.WebSocket] = plugins.WebSocketTransport;\n    }\n    if (plugins == null ? void 0 : plugins.XHRPolling) {\n      transports[TransportNames.XhrPolling] = plugins.XHRPolling;\n    }\n    return transports;\n  }\n  get channels() {\n    return this._channels;\n  }\n  connect() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Realtime.connect()\", \"\");\n    this.connection.connect();\n  }\n  close() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"Realtime.close()\", \"\");\n    this.connection.close();\n  }\n};\n// internal API to make EventEmitter usable in other SDKs\n_BaseRealtime.EventEmitter = eventemitter_default;\nvar BaseRealtime = _BaseRealtime;\nvar Channels2 = class extends eventemitter_default {\n  constructor(realtime) {\n    super(realtime.logger);\n    this.realtime = realtime;\n    this.all = /* @__PURE__ */ Object.create(null);\n    realtime.connection.connectionManager.on(\"transport.active\", () => {\n      this.onTransportActive();\n    });\n  }\n  channelSerials() {\n    let serials = {};\n    for (const name of keysArray(this.all, true)) {\n      const channel = this.all[name];\n      if (channel.properties.channelSerial) {\n        serials[name] = channel.properties.channelSerial;\n      }\n    }\n    return serials;\n  }\n  // recoverChannels gets the given channels and sets their channel serials.\n  recoverChannels(channelSerials) {\n    for (const name of keysArray(channelSerials, true)) {\n      const channel = this.get(name);\n      channel.properties.channelSerial = channelSerials[name];\n    }\n  }\n  // Access to this method is synchronised by ConnectionManager#processChannelMessage.\n  async processChannelMessage(msg) {\n    const channelName = msg.channel;\n    if (channelName === void 0) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"Channels.processChannelMessage()\",\n        \"received event unspecified channel, action = \" + msg.action\n      );\n      return;\n    }\n    const channel = this.all[channelName];\n    if (!channel) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"Channels.processChannelMessage()\",\n        \"received event for non-existent channel: \" + channelName\n      );\n      return;\n    }\n    await channel.processMessage(msg);\n  }\n  /* called when a transport becomes connected; reattempt attach/detach\n   * for channels that are attaching or detaching. */\n  onTransportActive() {\n    for (const channelName in this.all) {\n      const channel = this.all[channelName];\n      if (channel.state === \"attaching\" || channel.state === \"detaching\") {\n        channel.checkPendingState();\n      } else if (channel.state === \"suspended\") {\n        channel._attach(false, null);\n      } else if (channel.state === \"attached\") {\n        channel.requestState(\"attaching\");\n      }\n    }\n  }\n  /* Connection interruptions (ie when the connection will no longer queue\n   * events) imply connection state changes for any channel which is either\n   * attached, pending, or will attempt to become attached in the future */\n  propogateConnectionInterruption(connectionState, reason) {\n    const connectionStateToChannelState = {\n      closing: \"detached\",\n      closed: \"detached\",\n      failed: \"failed\",\n      suspended: \"suspended\"\n    };\n    const fromChannelStates = [\"attaching\", \"attached\", \"detaching\", \"suspended\"];\n    const toChannelState = connectionStateToChannelState[connectionState];\n    for (const channelId in this.all) {\n      const channel = this.all[channelId];\n      if (fromChannelStates.includes(channel.state)) {\n        channel.notifyState(toChannelState, reason);\n      }\n    }\n  }\n  get(name, channelOptions) {\n    name = String(name);\n    let channel = this.all[name];\n    if (!channel) {\n      channel = this.all[name] = new realtimechannel_default(this.realtime, name, channelOptions);\n    } else if (channelOptions) {\n      if (channel._shouldReattachToSetOptions(channelOptions, channel.channelOptions)) {\n        throw new ErrorInfo(\n          \"Channels.get() cannot be used to set channel options that would cause the channel to reattach. Please, use RealtimeChannel.setOptions() instead.\",\n          4e4,\n          400\n        );\n      }\n      channel.setOptions(channelOptions);\n    }\n    return channel;\n  }\n  getDerived(name, deriveOptions, channelOptions) {\n    if (deriveOptions.filter) {\n      const filter = toBase64(deriveOptions.filter);\n      const match = matchDerivedChannel(name);\n      name = `[filter=${filter}${match.qualifierParam}]${match.channelName}`;\n    }\n    return this.get(name, channelOptions);\n  }\n  /* Included to support certain niche use-cases; most users should ignore this.\n   * Please do not use this unless you know what you're doing */\n  release(name) {\n    name = String(name);\n    const channel = this.all[name];\n    if (!channel) {\n      return;\n    }\n    const releaseErr = channel.getReleaseErr();\n    if (releaseErr) {\n      throw releaseErr;\n    }\n    delete this.all[name];\n  }\n};\nvar baserealtime_default = BaseRealtime;\n\n// src/common/lib/client/realtimepresence.ts\nfunction getClientId(realtimePresence) {\n  return realtimePresence.channel.client.auth.clientId;\n}\nfunction isAnonymousOrWildcard(realtimePresence) {\n  const realtime = realtimePresence.channel.client;\n  const clientId = realtime.auth.clientId;\n  return (!clientId || clientId === \"*\") && realtime.connection.state === \"connected\";\n}\nfunction waitAttached(channel, callback, action) {\n  switch (channel.state) {\n    case \"attached\":\n    case \"suspended\":\n      action();\n      break;\n    case \"initialized\":\n    case \"detached\":\n    case \"detaching\":\n    case \"attaching\":\n      whenPromiseSettles(channel.attach(), function(err) {\n        if (err)\n          callback(err);\n        else\n          action();\n      });\n      break;\n    default:\n      callback(ErrorInfo.fromValues(channel.invalidStateError()));\n  }\n}\nfunction newerThan(item, existing) {\n  if (item.isSynthesized() || existing.isSynthesized()) {\n    return item.timestamp >= existing.timestamp;\n  }\n  const itemOrderings = item.parseId(), existingOrderings = existing.parseId();\n  if (itemOrderings.msgSerial === existingOrderings.msgSerial) {\n    return itemOrderings.index > existingOrderings.index;\n  } else {\n    return itemOrderings.msgSerial > existingOrderings.msgSerial;\n  }\n}\nvar RealtimePresence = class extends eventemitter_default {\n  constructor(channel) {\n    super(channel.logger);\n    this.channel = channel;\n    this.syncComplete = false;\n    this.members = new PresenceMap(this, (item) => item.clientId + \":\" + item.connectionId);\n    this._myMembers = new PresenceMap(this, (item) => item.clientId);\n    this.subscriptions = new eventemitter_default(this.logger);\n    this.pendingPresence = [];\n  }\n  async enter(data) {\n    if (isAnonymousOrWildcard(this)) {\n      throw new ErrorInfo(\"clientId must be specified to enter a presence channel\", 40012, 400);\n    }\n    return this._enterOrUpdateClient(void 0, void 0, data, \"enter\");\n  }\n  async update(data) {\n    if (isAnonymousOrWildcard(this)) {\n      throw new ErrorInfo(\"clientId must be specified to update presence data\", 40012, 400);\n    }\n    return this._enterOrUpdateClient(void 0, void 0, data, \"update\");\n  }\n  async enterClient(clientId, data) {\n    return this._enterOrUpdateClient(void 0, clientId, data, \"enter\");\n  }\n  async updateClient(clientId, data) {\n    return this._enterOrUpdateClient(void 0, clientId, data, \"update\");\n  }\n  async _enterOrUpdateClient(id, clientId, data, action) {\n    const channel = this.channel;\n    if (!channel.connectionManager.activeState()) {\n      throw channel.connectionManager.getError();\n    }\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"RealtimePresence.\" + action + \"Client()\",\n      \"channel = \" + channel.name + \", id = \" + id + \", client = \" + (clientId || \"(implicit) \" + getClientId(this))\n    );\n    const presence = fromData(data);\n    presence.action = action;\n    if (id) {\n      presence.id = id;\n    }\n    if (clientId) {\n      presence.clientId = clientId;\n    }\n    await encode(presence, channel.channelOptions);\n    switch (channel.state) {\n      case \"attached\":\n        return new Promise((resolve, reject) => {\n          channel.sendPresence(presence, (err) => err ? reject(err) : resolve());\n        });\n      case \"initialized\":\n      case \"detached\":\n        channel.attach();\n      case \"attaching\":\n        return new Promise((resolve, reject) => {\n          this.pendingPresence.push({\n            presence,\n            callback: (err) => err ? reject(err) : resolve()\n          });\n        });\n      default: {\n        const err = new PartialErrorInfo(\n          \"Unable to \" + action + \" presence channel while in \" + channel.state + \" state\",\n          90001\n        );\n        err.code = 90001;\n        throw err;\n      }\n    }\n  }\n  async leave(data) {\n    if (isAnonymousOrWildcard(this)) {\n      throw new ErrorInfo(\"clientId must have been specified to enter or leave a presence channel\", 40012, 400);\n    }\n    return this.leaveClient(void 0, data);\n  }\n  async leaveClient(clientId, data) {\n    const channel = this.channel;\n    if (!channel.connectionManager.activeState()) {\n      throw channel.connectionManager.getError();\n    }\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"RealtimePresence.leaveClient()\",\n      \"leaving; channel = \" + this.channel.name + \", client = \" + clientId\n    );\n    const presence = fromData(data);\n    presence.action = \"leave\";\n    if (clientId) {\n      presence.clientId = clientId;\n    }\n    return new Promise((resolve, reject) => {\n      switch (channel.state) {\n        case \"attached\":\n          channel.sendPresence(presence, (err) => err ? reject(err) : resolve());\n          break;\n        case \"attaching\":\n          this.pendingPresence.push({\n            presence,\n            callback: (err) => err ? reject(err) : resolve()\n          });\n          break;\n        case \"initialized\":\n        case \"failed\": {\n          const err = new PartialErrorInfo(\"Unable to leave presence channel (incompatible state)\", 90001);\n          reject(err);\n          break;\n        }\n        default:\n          reject(channel.invalidStateError());\n      }\n    });\n  }\n  async get(params) {\n    const waitForSync = !params || (\"waitForSync\" in params ? params.waitForSync : true);\n    return new Promise((resolve, reject) => {\n      function returnMembers(members) {\n        resolve(params ? members.list(params) : members.values());\n      }\n      if (this.channel.state === \"suspended\") {\n        if (waitForSync) {\n          reject(\n            ErrorInfo.fromValues({\n              statusCode: 400,\n              code: 91005,\n              message: \"Presence state is out of sync due to channel being in the SUSPENDED state\"\n            })\n          );\n        } else {\n          returnMembers(this.members);\n        }\n        return;\n      }\n      waitAttached(\n        this.channel,\n        (err) => reject(err),\n        () => {\n          const members = this.members;\n          if (waitForSync) {\n            members.waitSync(function() {\n              returnMembers(members);\n            });\n          } else {\n            returnMembers(members);\n          }\n        }\n      );\n    });\n  }\n  async history(params) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"RealtimePresence.history()\", \"channel = \" + this.name);\n    const restMixin = this.channel.client.rest.presenceMixin;\n    if (params && params.untilAttach) {\n      if (this.channel.state === \"attached\") {\n        delete params.untilAttach;\n        params.from_serial = this.channel.properties.attachSerial;\n      } else {\n        throw new ErrorInfo(\n          \"option untilAttach requires the channel to be attached, was: \" + this.channel.state,\n          4e4,\n          400\n        );\n      }\n    }\n    return restMixin.history(this, params);\n  }\n  setPresence(presenceSet, isSync, syncChannelSerial) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"RealtimePresence.setPresence()\",\n      \"received presence for \" + presenceSet.length + \" participants; syncChannelSerial = \" + syncChannelSerial\n    );\n    let syncCursor, match;\n    const members = this.members, myMembers = this._myMembers, broadcastMessages = [], connId = this.channel.connectionManager.connectionId;\n    if (isSync) {\n      this.members.startSync();\n      if (syncChannelSerial && (match = syncChannelSerial.match(/^[\\w-]+:(.*)$/))) {\n        syncCursor = match[1];\n      }\n    }\n    for (let i = 0; i < presenceSet.length; i++) {\n      const presence = fromValues2(presenceSet[i]);\n      switch (presence.action) {\n        case \"leave\":\n          if (members.remove(presence)) {\n            broadcastMessages.push(presence);\n          }\n          if (presence.connectionId === connId && !presence.isSynthesized()) {\n            myMembers.remove(presence);\n          }\n          break;\n        case \"enter\":\n        case \"present\":\n        case \"update\":\n          if (members.put(presence)) {\n            broadcastMessages.push(presence);\n          }\n          if (presence.connectionId === connId) {\n            myMembers.put(presence);\n          }\n          break;\n      }\n    }\n    if (isSync && !syncCursor) {\n      members.endSync();\n      this.channel.syncChannelSerial = null;\n    }\n    for (let i = 0; i < broadcastMessages.length; i++) {\n      const presence = broadcastMessages[i];\n      this.subscriptions.emit(presence.action, presence);\n    }\n  }\n  onAttached(hasPresence) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"RealtimePresence.onAttached()\",\n      \"channel = \" + this.channel.name + \", hasPresence = \" + hasPresence\n    );\n    if (hasPresence) {\n      this.members.startSync();\n    } else {\n      this._synthesizeLeaves(this.members.values());\n      this.members.clear();\n    }\n    this._ensureMyMembersPresent();\n    const pendingPresence = this.pendingPresence, pendingPresCount = pendingPresence.length;\n    if (pendingPresCount) {\n      this.pendingPresence = [];\n      const presenceArray = [];\n      const multicaster = multicaster_default.create(this.logger);\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"RealtimePresence.onAttached\",\n        \"sending \" + pendingPresCount + \" queued presence messages\"\n      );\n      for (let i = 0; i < pendingPresCount; i++) {\n        const event = pendingPresence[i];\n        presenceArray.push(event.presence);\n        multicaster.push(event.callback);\n      }\n      this.channel.sendPresence(presenceArray, multicaster);\n    }\n  }\n  actOnChannelState(state, hasPresence, err) {\n    switch (state) {\n      case \"attached\":\n        this.onAttached(hasPresence);\n        break;\n      case \"detached\":\n      case \"failed\":\n        this._clearMyMembers();\n        this.members.clear();\n      case \"suspended\":\n        this.failPendingPresence(err);\n        break;\n    }\n  }\n  failPendingPresence(err) {\n    if (this.pendingPresence.length) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"RealtimeChannel.failPendingPresence\",\n        \"channel; name = \" + this.channel.name + \", err = \" + inspectError(err)\n      );\n      for (let i = 0; i < this.pendingPresence.length; i++)\n        try {\n          this.pendingPresence[i].callback(err);\n        } catch (e) {\n        }\n      this.pendingPresence = [];\n    }\n  }\n  _clearMyMembers() {\n    this._myMembers.clear();\n  }\n  _ensureMyMembersPresent() {\n    const myMembers = this._myMembers, reenterCb = (err) => {\n      if (err) {\n        const msg = \"Presence auto-re-enter failed: \" + err.toString();\n        const wrappedErr = new ErrorInfo(msg, 91004, 400);\n        logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"RealtimePresence._ensureMyMembersPresent()\", msg);\n        const change = new channelstatechange_default(this.channel.state, this.channel.state, true, false, wrappedErr);\n        this.channel.emit(\"update\", change);\n      }\n    };\n    for (const memberKey in myMembers.map) {\n      const entry = myMembers.map[memberKey];\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MICRO,\n        \"RealtimePresence._ensureMyMembersPresent()\",\n        'Auto-reentering clientId \"' + entry.clientId + '\" into the presence set'\n      );\n      whenPromiseSettles(this._enterOrUpdateClient(entry.id, entry.clientId, entry.data, \"enter\"), reenterCb);\n    }\n  }\n  _synthesizeLeaves(items) {\n    const subscriptions = this.subscriptions;\n    items.forEach(function(item) {\n      const presence = fromValues2({\n        action: \"leave\",\n        connectionId: item.connectionId,\n        clientId: item.clientId,\n        data: item.data,\n        encoding: item.encoding,\n        timestamp: Date.now()\n      });\n      subscriptions.emit(\"leave\", presence);\n    });\n  }\n  async subscribe(..._args) {\n    const args = realtimechannel_default.processListenerArgs(_args);\n    const event = args[0];\n    const listener = args[1];\n    const channel = this.channel;\n    if (channel.state === \"failed\") {\n      throw ErrorInfo.fromValues(channel.invalidStateError());\n    }\n    this.subscriptions.on(event, listener);\n    await channel.attach();\n  }\n  unsubscribe(..._args) {\n    const args = realtimechannel_default.processListenerArgs(_args);\n    const event = args[0];\n    const listener = args[1];\n    this.subscriptions.off(event, listener);\n  }\n};\nvar PresenceMap = class extends eventemitter_default {\n  constructor(presence, memberKey) {\n    super(presence.logger);\n    this.presence = presence;\n    this.map = /* @__PURE__ */ Object.create(null);\n    this.syncInProgress = false;\n    this.residualMembers = null;\n    this.memberKey = memberKey;\n  }\n  get(key) {\n    return this.map[key];\n  }\n  getClient(clientId) {\n    const map = this.map, result = [];\n    for (const key in map) {\n      const item = map[key];\n      if (item.clientId == clientId && item.action != \"absent\")\n        result.push(item);\n    }\n    return result;\n  }\n  list(params) {\n    const map = this.map, clientId = params && params.clientId, connectionId = params && params.connectionId, result = [];\n    for (const key in map) {\n      const item = map[key];\n      if (item.action === \"absent\")\n        continue;\n      if (clientId && clientId != item.clientId)\n        continue;\n      if (connectionId && connectionId != item.connectionId)\n        continue;\n      result.push(item);\n    }\n    return result;\n  }\n  put(item) {\n    if (item.action === \"enter\" || item.action === \"update\") {\n      item = fromValues2(item);\n      item.action = \"present\";\n    }\n    const map = this.map, key = this.memberKey(item);\n    if (this.residualMembers)\n      delete this.residualMembers[key];\n    const existingItem = map[key];\n    if (existingItem && !newerThan(item, existingItem)) {\n      return false;\n    }\n    map[key] = item;\n    return true;\n  }\n  values() {\n    const map = this.map, result = [];\n    for (const key in map) {\n      const item = map[key];\n      if (item.action != \"absent\")\n        result.push(item);\n    }\n    return result;\n  }\n  remove(item) {\n    const map = this.map, key = this.memberKey(item);\n    const existingItem = map[key];\n    if (existingItem && !newerThan(item, existingItem)) {\n      return false;\n    }\n    if (this.syncInProgress) {\n      item = fromValues2(item);\n      item.action = \"absent\";\n      map[key] = item;\n    } else {\n      delete map[key];\n    }\n    return true;\n  }\n  startSync() {\n    const map = this.map, syncInProgress = this.syncInProgress;\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"PresenceMap.startSync()\",\n      \"channel = \" + this.presence.channel.name + \"; syncInProgress = \" + syncInProgress\n    );\n    if (!this.syncInProgress) {\n      this.residualMembers = copy(map);\n      this.setInProgress(true);\n    }\n  }\n  endSync() {\n    const map = this.map, syncInProgress = this.syncInProgress;\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"PresenceMap.endSync()\",\n      \"channel = \" + this.presence.channel.name + \"; syncInProgress = \" + syncInProgress\n    );\n    if (syncInProgress) {\n      for (const memberKey in map) {\n        const entry = map[memberKey];\n        if (entry.action === \"absent\") {\n          delete map[memberKey];\n        }\n      }\n      this.presence._synthesizeLeaves(valuesArray(this.residualMembers));\n      for (const memberKey in this.residualMembers) {\n        delete map[memberKey];\n      }\n      this.residualMembers = null;\n      this.setInProgress(false);\n    }\n    this.emit(\"sync\");\n  }\n  waitSync(callback) {\n    const syncInProgress = this.syncInProgress;\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"PresenceMap.waitSync()\",\n      \"channel = \" + this.presence.channel.name + \"; syncInProgress = \" + syncInProgress\n    );\n    if (!syncInProgress) {\n      callback();\n      return;\n    }\n    this.once(\"sync\", callback);\n  }\n  clear() {\n    this.map = {};\n    this.setInProgress(false);\n    this.residualMembers = null;\n  }\n  setInProgress(inProgress) {\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"PresenceMap.setInProgress()\", \"inProgress = \" + inProgress);\n    this.syncInProgress = inProgress;\n    this.presence.syncComplete = !inProgress;\n  }\n};\nvar realtimepresence_default = RealtimePresence;\n\n// src/common/lib/transport/websockettransport.ts\nvar shortName = TransportNames.WebSocket;\nfunction isNodeWebSocket(ws) {\n  return !!ws.on;\n}\nvar WebSocketTransport = class extends transport_default {\n  constructor(connectionManager, auth, params) {\n    super(connectionManager, auth, params);\n    this.shortName = shortName;\n    params.heartbeats = Platform.Config.useProtocolHeartbeats;\n    this.wsHost = params.host;\n  }\n  static isAvailable() {\n    return !!Platform.Config.WebSocket;\n  }\n  createWebSocket(uri, connectParams) {\n    this.uri = uri + toQueryString(connectParams);\n    return new Platform.Config.WebSocket(this.uri);\n  }\n  toString() {\n    return \"WebSocketTransport; uri=\" + this.uri;\n  }\n  connect() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"WebSocketTransport.connect()\", \"starting\");\n    transport_default.prototype.connect.call(this);\n    const self2 = this, params = this.params, options = params.options;\n    const wsScheme = options.tls ? \"wss://\" : \"ws://\";\n    const wsUri = wsScheme + this.wsHost + \":\" + defaults_default.getPort(options) + \"/\";\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"WebSocketTransport.connect()\", \"uri: \" + wsUri);\n    whenPromiseSettles(\n      this.auth.getAuthParams(),\n      function(err, authParams) {\n        if (self2.isDisposed) {\n          return;\n        }\n        let paramStr = \"\";\n        for (const param in authParams)\n          paramStr += \" \" + param + \": \" + authParams[param] + \";\";\n        logger_default.logAction(\n          self2.logger,\n          logger_default.LOG_MINOR,\n          \"WebSocketTransport.connect()\",\n          \"authParams:\" + paramStr + \" err: \" + err\n        );\n        if (err) {\n          self2.disconnect(err);\n          return;\n        }\n        const connectParams = params.getConnectParams(authParams);\n        try {\n          const wsConnection = self2.wsConnection = self2.createWebSocket(wsUri, connectParams);\n          wsConnection.binaryType = Platform.Config.binaryType;\n          wsConnection.onopen = function() {\n            self2.onWsOpen();\n          };\n          wsConnection.onclose = function(ev) {\n            self2.onWsClose(ev);\n          };\n          wsConnection.onmessage = function(ev) {\n            self2.onWsData(ev.data);\n          };\n          wsConnection.onerror = function(ev) {\n            self2.onWsError(ev);\n          };\n          if (isNodeWebSocket(wsConnection)) {\n            wsConnection.on(\"ping\", function() {\n              self2.onActivity();\n            });\n          }\n        } catch (e) {\n          logger_default.logAction(\n            self2.logger,\n            logger_default.LOG_ERROR,\n            \"WebSocketTransport.connect()\",\n            \"Unexpected exception creating websocket: err = \" + (e.stack || e.message)\n          );\n          self2.disconnect(e);\n        }\n      }\n    );\n  }\n  send(message) {\n    const wsConnection = this.wsConnection;\n    if (!wsConnection) {\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"WebSocketTransport.send()\", \"No socket connection\");\n      return;\n    }\n    try {\n      wsConnection.send(\n        serialize2(message, this.connectionManager.realtime._MsgPack, this.params.format)\n      );\n    } catch (e) {\n      const msg = \"Exception from ws connection when trying to send: \" + inspectError(e);\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"WebSocketTransport.send()\", msg);\n      this.finish(\"disconnected\", new ErrorInfo(msg, 5e4, 500));\n    }\n  }\n  onWsData(data) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MICRO,\n      \"WebSocketTransport.onWsData()\",\n      \"data received; length = \" + data.length + \"; type = \" + typeof data\n    );\n    try {\n      this.onProtocolMessage(\n        deserialize(\n          data,\n          this.connectionManager.realtime._MsgPack,\n          this.connectionManager.realtime._RealtimePresence,\n          this.format\n        )\n      );\n    } catch (e) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"WebSocketTransport.onWsData()\",\n        \"Unexpected exception handing channel message: \" + e.stack\n      );\n    }\n  }\n  onWsOpen() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"WebSocketTransport.onWsOpen()\", \"opened WebSocket\");\n    this.emit(\"preconnect\");\n  }\n  onWsClose(ev) {\n    let wasClean, code;\n    if (typeof ev == \"object\") {\n      code = ev.code;\n      wasClean = ev.wasClean || code === 1e3;\n    } else {\n      code = ev;\n      wasClean = code == 1e3;\n    }\n    delete this.wsConnection;\n    if (wasClean) {\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"WebSocketTransport.onWsClose()\", \"Cleanly closed WebSocket\");\n      const err = new ErrorInfo(\"Websocket closed\", 80003, 400);\n      this.finish(\"disconnected\", err);\n    } else {\n      const msg = \"Unclean disconnection of WebSocket ; code = \" + code, err = new ErrorInfo(msg, 80003, 400);\n      logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"WebSocketTransport.onWsClose()\", msg);\n      this.finish(\"disconnected\", err);\n    }\n    this.emit(\"disposed\");\n  }\n  onWsError(err) {\n    logger_default.logAction(\n      this.logger,\n      logger_default.LOG_MINOR,\n      \"WebSocketTransport.onError()\",\n      \"Error from WebSocket: \" + err.message\n    );\n    Platform.Config.nextTick(() => {\n      this.disconnect(Error(err.message));\n    });\n  }\n  dispose() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"WebSocketTransport.dispose()\", \"\");\n    this.isDisposed = true;\n    const wsConnection = this.wsConnection;\n    if (wsConnection) {\n      wsConnection.onmessage = function() {\n      };\n      delete this.wsConnection;\n      Platform.Config.nextTick(() => {\n        logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"WebSocketTransport.dispose()\", \"closing websocket\");\n        if (!wsConnection) {\n          throw new Error(\"WebSocketTransport.dispose(): wsConnection is not defined\");\n        }\n        wsConnection.close();\n      });\n    }\n  }\n};\nvar websockettransport_default = WebSocketTransport;\n\n// src/common/lib/client/filteredsubscriptions.ts\nvar FilteredSubscriptions = class {\n  static subscribeFilter(channel, filter, listener) {\n    const filteredListener = (m) => {\n      var _a2, _b, _c, _d, _e, _f;\n      const mapping = {\n        name: m.name,\n        refTimeserial: (_b = (_a2 = m.extras) == null ? void 0 : _a2.ref) == null ? void 0 : _b.timeserial,\n        refType: (_d = (_c = m.extras) == null ? void 0 : _c.ref) == null ? void 0 : _d.type,\n        isRef: !!((_f = (_e = m.extras) == null ? void 0 : _e.ref) == null ? void 0 : _f.timeserial),\n        clientId: m.clientId\n      };\n      if (Object.entries(filter).find(\n        ([key, value]) => value !== void 0 ? mapping[key] !== value : false\n      )) {\n        return;\n      }\n      listener(m);\n    };\n    this.addFilteredSubscription(channel, filter, listener, filteredListener);\n    channel.subscriptions.on(filteredListener);\n  }\n  // Adds a new filtered subscription\n  static addFilteredSubscription(channel, filter, realListener, filteredListener) {\n    var _a2;\n    if (!channel.filteredSubscriptions) {\n      channel.filteredSubscriptions = /* @__PURE__ */ new Map();\n    }\n    if (channel.filteredSubscriptions.has(realListener)) {\n      const realListenerMap = channel.filteredSubscriptions.get(realListener);\n      realListenerMap.set(filter, ((_a2 = realListenerMap == null ? void 0 : realListenerMap.get(filter)) == null ? void 0 : _a2.concat(filteredListener)) || [filteredListener]);\n    } else {\n      channel.filteredSubscriptions.set(\n        realListener,\n        /* @__PURE__ */ new Map([[filter, [filteredListener]]])\n      );\n    }\n  }\n  static getAndDeleteFilteredSubscriptions(channel, filter, realListener) {\n    if (!channel.filteredSubscriptions) {\n      return [];\n    }\n    if (!realListener && filter) {\n      return Array.from(channel.filteredSubscriptions.entries()).map(([key, filterMaps]) => {\n        var _a2;\n        let listenerMaps = filterMaps.get(filter);\n        filterMaps.delete(filter);\n        if (filterMaps.size === 0) {\n          (_a2 = channel.filteredSubscriptions) == null ? void 0 : _a2.delete(key);\n        }\n        return listenerMaps;\n      }).reduce(\n        (prev, cur) => cur ? prev.concat(...cur) : prev,\n        []\n      );\n    }\n    if (!realListener || !channel.filteredSubscriptions.has(realListener)) {\n      return [];\n    }\n    const realListenerMap = channel.filteredSubscriptions.get(realListener);\n    if (!filter) {\n      const listeners2 = Array.from(realListenerMap.values()).reduce((prev, cur) => prev.concat(...cur), []);\n      channel.filteredSubscriptions.delete(realListener);\n      return listeners2;\n    }\n    let listeners = realListenerMap.get(filter);\n    realListenerMap.delete(filter);\n    return listeners || [];\n  }\n};\n\n// src/common/lib/client/defaultrealtime.ts\nvar _DefaultRealtime = class _DefaultRealtime extends baserealtime_default {\n  // The public typings declare that this requires an argument to be passed, but since we want to emit a good error message in the case where a non-TypeScript user does not pass an argument, tell the compiler that this is possible so that it forces us to handle it.\n  constructor(options) {\n    var _a2;\n    const MsgPack = _DefaultRealtime._MsgPack;\n    if (!MsgPack) {\n      throw new Error(\"Expected DefaultRealtime._MsgPack to have been set\");\n    }\n    super(\n      defaults_default.objectifyOptions(options, true, \"Realtime\", logger_default.defaultLogger, __spreadProps(__spreadValues({}, allCommonModularPlugins), {\n        Crypto: (_a2 = _DefaultRealtime.Crypto) != null ? _a2 : void 0,\n        MsgPack,\n        RealtimePresence: {\n          RealtimePresence: realtimepresence_default,\n          presenceMessageFromValues: fromValues2,\n          presenceMessagesFromValuesArray: fromValuesArray2\n        },\n        WebSocketTransport: websockettransport_default,\n        MessageInteractions: FilteredSubscriptions\n      }))\n    );\n  }\n  static get Crypto() {\n    if (this._Crypto === null) {\n      throw new Error(\"Encryption not enabled; use ably.encryption.js instead\");\n    }\n    return this._Crypto;\n  }\n  static set Crypto(newValue) {\n    this._Crypto = newValue;\n  }\n};\n_DefaultRealtime.Utils = utils_exports;\n_DefaultRealtime.ConnectionManager = connectionmanager_default;\n_DefaultRealtime.ProtocolMessage = protocolmessage_default;\n_DefaultRealtime._Crypto = null;\n_DefaultRealtime.Message = DefaultMessage;\n_DefaultRealtime.PresenceMessage = DefaultPresenceMessage;\n_DefaultRealtime._MsgPack = null;\n// Used by tests\n_DefaultRealtime._Http = Http;\nvar DefaultRealtime = _DefaultRealtime;\n\n// src/platform/web/lib/util/hmac-sha256.ts\nvar uint8Array = Uint8Array;\nvar uint32Array = Uint32Array;\nvar pow = Math.pow;\nvar DEFAULT_STATE = new uint32Array(8);\nvar ROUND_CONSTANTS = [];\nvar M = new uint32Array(64);\nfunction getFractionalBits(n2) {\n  return (n2 - (n2 | 0)) * pow(2, 32) | 0;\n}\nvar n = 2;\nvar nPrime = 0;\nwhile (nPrime < 64) {\n  isPrime = true;\n  for (factor = 2; factor <= n / 2; factor++) {\n    if (n % factor === 0) {\n      isPrime = false;\n    }\n  }\n  if (isPrime) {\n    if (nPrime < 8) {\n      DEFAULT_STATE[nPrime] = getFractionalBits(pow(n, 1 / 2));\n    }\n    ROUND_CONSTANTS[nPrime] = getFractionalBits(pow(n, 1 / 3));\n    nPrime++;\n  }\n  n++;\n}\nvar isPrime;\nvar factor;\nvar LittleEndian = !!new uint8Array(new uint32Array([1]).buffer)[0];\nfunction convertEndian(word) {\n  if (LittleEndian) {\n    return (\n      // byte 1 -> byte 4\n      word >>> 24 | // byte 2 -> byte 3\n      (word >>> 16 & 255) << 8 | // byte 3 -> byte 2\n      (word & 65280) << 8 | // byte 4 -> byte 1\n      word << 24\n    );\n  } else {\n    return word;\n  }\n}\nfunction rightRotate(word, bits) {\n  return word >>> bits | word << 32 - bits;\n}\nfunction sha256(data) {\n  var STATE = DEFAULT_STATE.slice();\n  var legth = data.length;\n  var bitLength = legth * 8;\n  var newBitLength = 512 - (bitLength + 64) % 512 - 1 + bitLength + 65;\n  var bytes = new uint8Array(newBitLength / 8);\n  var words = new uint32Array(bytes.buffer);\n  bytes.set(data, 0);\n  bytes[legth] = 128;\n  words[words.length - 1] = convertEndian(bitLength);\n  var round;\n  for (var block = 0; block < newBitLength / 32; block += 16) {\n    var workingState = STATE.slice();\n    for (round = 0; round < 64; round++) {\n      var MRound;\n      if (round < 16) {\n        MRound = convertEndian(words[block + round]);\n      } else {\n        var gamma0x = M[round - 15];\n        var gamma1x = M[round - 2];\n        MRound = M[round - 7] + M[round - 16] + (rightRotate(gamma0x, 7) ^ rightRotate(gamma0x, 18) ^ gamma0x >>> 3) + (rightRotate(gamma1x, 17) ^ rightRotate(gamma1x, 19) ^ gamma1x >>> 10);\n      }\n      M[round] = MRound |= 0;\n      var t1 = (rightRotate(workingState[4], 6) ^ rightRotate(workingState[4], 11) ^ rightRotate(workingState[4], 25)) + (workingState[4] & workingState[5] ^ ~workingState[4] & workingState[6]) + workingState[7] + MRound + ROUND_CONSTANTS[round];\n      var t2 = (rightRotate(workingState[0], 2) ^ rightRotate(workingState[0], 13) ^ rightRotate(workingState[0], 22)) + (workingState[0] & workingState[1] ^ workingState[2] & (workingState[0] ^ workingState[1]));\n      for (var i = 7; i > 0; i--) {\n        workingState[i] = workingState[i - 1];\n      }\n      workingState[0] = t1 + t2 | 0;\n      workingState[4] = workingState[4] + t1 | 0;\n    }\n    for (round = 0; round < 8; round++) {\n      STATE[round] = STATE[round] + workingState[round] | 0;\n    }\n  }\n  return new uint8Array(\n    new uint32Array(\n      STATE.map(function(val) {\n        return convertEndian(val);\n      })\n    ).buffer\n  );\n}\nfunction hmac2(key, data) {\n  if (key.length > 64)\n    key = sha256(key);\n  if (key.length < 64) {\n    const tmp = new Uint8Array(64);\n    tmp.set(key, 0);\n    key = tmp;\n  }\n  var innerKey = new Uint8Array(64);\n  var outerKey = new Uint8Array(64);\n  for (var i = 0; i < 64; i++) {\n    innerKey[i] = 54 ^ key[i];\n    outerKey[i] = 92 ^ key[i];\n  }\n  var msg = new Uint8Array(data.length + 64);\n  msg.set(innerKey, 0);\n  msg.set(data, 64);\n  var result = new Uint8Array(64 + 32);\n  result.set(outerKey, 0);\n  result.set(sha256(msg), 64);\n  return sha256(result);\n}\n\n// src/platform/web/lib/util/bufferutils.ts\nvar BufferUtils = class {\n  constructor() {\n    this.base64CharSet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    this.hexCharSet = \"0123456789abcdef\";\n  }\n  // https://gist.githubusercontent.com/jonleighton/958841/raw/f200e30dfe95212c0165ccf1ae000ca51e9de803/gistfile1.js\n  uint8ViewToBase64(bytes) {\n    let base64 = \"\";\n    const encodings = this.base64CharSet;\n    const byteLength = bytes.byteLength;\n    const byteRemainder = byteLength % 3;\n    const mainLength = byteLength - byteRemainder;\n    let a, b, c, d;\n    let chunk;\n    for (let i = 0; i < mainLength; i = i + 3) {\n      chunk = bytes[i] << 16 | bytes[i + 1] << 8 | bytes[i + 2];\n      a = (chunk & 16515072) >> 18;\n      b = (chunk & 258048) >> 12;\n      c = (chunk & 4032) >> 6;\n      d = chunk & 63;\n      base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n    }\n    if (byteRemainder == 1) {\n      chunk = bytes[mainLength];\n      a = (chunk & 252) >> 2;\n      b = (chunk & 3) << 4;\n      base64 += encodings[a] + encodings[b] + \"==\";\n    } else if (byteRemainder == 2) {\n      chunk = bytes[mainLength] << 8 | bytes[mainLength + 1];\n      a = (chunk & 64512) >> 10;\n      b = (chunk & 1008) >> 4;\n      c = (chunk & 15) << 2;\n      base64 += encodings[a] + encodings[b] + encodings[c] + \"=\";\n    }\n    return base64;\n  }\n  base64ToArrayBuffer(base64) {\n    const binary_string = atob == null ? void 0 : atob(base64);\n    const len = binary_string.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      const ascii = binary_string.charCodeAt(i);\n      bytes[i] = ascii;\n    }\n    return this.toArrayBuffer(bytes);\n  }\n  isBuffer(buffer) {\n    return buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer);\n  }\n  toBuffer(buffer) {\n    if (!ArrayBuffer) {\n      throw new Error(\"Can't convert to Buffer: browser does not support the necessary types\");\n    }\n    if (buffer instanceof ArrayBuffer) {\n      return new Uint8Array(buffer);\n    }\n    if (ArrayBuffer.isView(buffer)) {\n      return new Uint8Array(this.toArrayBuffer(buffer));\n    }\n    throw new Error(\"BufferUtils.toBuffer expected an ArrayBuffer or a view onto one\");\n  }\n  toArrayBuffer(buffer) {\n    if (!ArrayBuffer) {\n      throw new Error(\"Can't convert to ArrayBuffer: browser does not support the necessary types\");\n    }\n    if (buffer instanceof ArrayBuffer) {\n      return buffer;\n    }\n    if (ArrayBuffer.isView(buffer)) {\n      return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n    }\n    throw new Error(\"BufferUtils.toArrayBuffer expected an ArrayBuffer or a view onto one\");\n  }\n  base64Encode(buffer) {\n    return this.uint8ViewToBase64(this.toBuffer(buffer));\n  }\n  base64Decode(str) {\n    if (ArrayBuffer && Platform.Config.atob) {\n      return this.base64ToArrayBuffer(str);\n    } else {\n      throw new Error(\"Expected ArrayBuffer to exist and Platform.Config.atob to be configured\");\n    }\n  }\n  hexEncode(buffer) {\n    const uint8Array2 = this.toBuffer(buffer);\n    return uint8Array2.reduce((accum, byte) => accum + byte.toString(16).padStart(2, \"0\"), \"\");\n  }\n  hexDecode(hexEncodedBytes) {\n    if (hexEncodedBytes.length % 2 !== 0) {\n      throw new Error(\"Can't create a byte array from a hex string of odd length\");\n    }\n    const uint8Array2 = new Uint8Array(hexEncodedBytes.length / 2);\n    for (let i = 0; i < uint8Array2.length; i++) {\n      uint8Array2[i] = parseInt(hexEncodedBytes.slice(2 * i, 2 * (i + 1)), 16);\n    }\n    return this.toArrayBuffer(uint8Array2);\n  }\n  utf8Encode(string) {\n    if (Platform.Config.TextEncoder) {\n      const encodedByteArray = new Platform.Config.TextEncoder().encode(string);\n      return this.toArrayBuffer(encodedByteArray);\n    } else {\n      throw new Error(\"Expected TextEncoder to be configured\");\n    }\n  }\n  /* For utf8 decoding we apply slightly stricter input validation than to\n   * hexEncode/base64Encode/etc: in those we accept anything that Buffer.from\n   * can take (in particular allowing strings, which are just interpreted as\n   * binary); here we ensure that the input is actually a buffer since trying\n   * to utf8-decode a string to another string is almost certainly a mistake */\n  utf8Decode(buffer) {\n    if (!this.isBuffer(buffer)) {\n      throw new Error(\"Expected input of utf8decode to be an arraybuffer or typed array\");\n    }\n    if (TextDecoder) {\n      return new TextDecoder().decode(buffer);\n    } else {\n      throw new Error(\"Expected TextDecoder to be configured\");\n    }\n  }\n  areBuffersEqual(buffer1, buffer2) {\n    if (!buffer1 || !buffer2)\n      return false;\n    const arrayBuffer1 = this.toArrayBuffer(buffer1);\n    const arrayBuffer2 = this.toArrayBuffer(buffer2);\n    if (arrayBuffer1.byteLength != arrayBuffer2.byteLength)\n      return false;\n    const bytes1 = new Uint8Array(arrayBuffer1);\n    const bytes2 = new Uint8Array(arrayBuffer2);\n    for (var i = 0; i < bytes1.length; i++) {\n      if (bytes1[i] != bytes2[i])\n        return false;\n    }\n    return true;\n  }\n  byteLength(buffer) {\n    if (buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer)) {\n      return buffer.byteLength;\n    }\n    return -1;\n  }\n  arrayBufferViewToBuffer(arrayBufferView) {\n    return this.toArrayBuffer(arrayBufferView);\n  }\n  hmacSha256(message, key) {\n    const hash = hmac2(this.toBuffer(key), this.toBuffer(message));\n    return this.toArrayBuffer(hash);\n  }\n};\nvar bufferutils_default = new BufferUtils();\n\n// src/platform/web/lib/util/crypto.ts\nvar createCryptoClass = function(config, bufferUtils) {\n  var DEFAULT_ALGORITHM = \"aes\";\n  var DEFAULT_KEYLENGTH = 256;\n  var DEFAULT_MODE = \"cbc\";\n  var DEFAULT_BLOCKLENGTH = 16;\n  function validateCipherParams(params) {\n    if (params.algorithm === \"aes\" && params.mode === \"cbc\") {\n      if (params.keyLength === 128 || params.keyLength === 256) {\n        return;\n      }\n      throw new Error(\n        \"Unsupported key length \" + params.keyLength + \" for aes-cbc encryption. Encryption key must be 128 or 256 bits (16 or 32 ASCII characters)\"\n      );\n    }\n  }\n  function normaliseBase64(string) {\n    return string.replace(\"_\", \"/\").replace(\"-\", \"+\");\n  }\n  function isCipherParams(params) {\n    return params instanceof CipherParams;\n  }\n  class CipherParams {\n    constructor(algorithm, keyLength, mode, key) {\n      this.algorithm = algorithm;\n      this.keyLength = keyLength;\n      this.mode = mode;\n      this.key = key;\n    }\n  }\n  class Crypto2 {\n    /**\n     * Obtain a complete CipherParams instance from the provided params, filling\n     * in any not provided with default values, calculating a keyLength from\n     * the supplied key, and validating the result.\n     * @param params an object containing at a minimum a `key` key with value the\n     * key, as either a binary or a base64-encoded string.\n     * May optionally also contain: algorithm (defaults to AES),\n     * mode (defaults to 'cbc')\n     */\n    static getDefaultParams(params) {\n      var key;\n      if (!params.key) {\n        throw new Error(\"Crypto.getDefaultParams: a key is required\");\n      }\n      if (typeof params.key === \"string\") {\n        key = bufferUtils.toArrayBuffer(bufferUtils.base64Decode(normaliseBase64(params.key)));\n      } else if (params.key instanceof ArrayBuffer) {\n        key = params.key;\n      } else {\n        key = bufferUtils.toArrayBuffer(params.key);\n      }\n      var algorithm = params.algorithm || DEFAULT_ALGORITHM;\n      var keyLength = key.byteLength * 8;\n      var mode = params.mode || DEFAULT_MODE;\n      var cipherParams = new CipherParams(algorithm, keyLength, mode, key);\n      if (params.keyLength && params.keyLength !== cipherParams.keyLength) {\n        throw new Error(\n          \"Crypto.getDefaultParams: a keyLength of \" + params.keyLength + \" was specified, but the key actually has length \" + cipherParams.keyLength\n        );\n      }\n      validateCipherParams(cipherParams);\n      return cipherParams;\n    }\n    /**\n     * Generate a random encryption key from the supplied keylength (or the\n     * default keyLength if none supplied) as an ArrayBuffer\n     * @param keyLength (optional) the required keyLength in bits\n     */\n    static async generateRandomKey(keyLength) {\n      try {\n        return config.getRandomArrayBuffer((keyLength || DEFAULT_KEYLENGTH) / 8);\n      } catch (err) {\n        throw new ErrorInfo(\"Failed to generate random key: \" + err.message, 400, 5e4, err);\n      }\n    }\n    /**\n     * Internal; get a ChannelCipher instance based on the given cipherParams\n     * @param params either a CipherParams instance or some subset of its\n     * fields that includes a key\n     */\n    static getCipher(params, logger) {\n      var _a2;\n      var cipherParams = isCipherParams(params) ? params : this.getDefaultParams(params);\n      return {\n        cipherParams,\n        cipher: new CBCCipher(cipherParams, (_a2 = params.iv) != null ? _a2 : null, logger)\n      };\n    }\n  }\n  Crypto2.CipherParams = CipherParams;\n  Crypto2;\n  class CBCCipher {\n    constructor(params, iv, logger) {\n      this.logger = logger;\n      if (!crypto.subtle) {\n        if (isSecureContext) {\n          throw new Error(\n            \"Crypto operations are not possible since the browser\\u2019s SubtleCrypto class is unavailable (reason unknown).\"\n          );\n        } else {\n          throw new Error(\n            \"Crypto operations are is not possible since the current environment is a non-secure context and hence the browser\\u2019s SubtleCrypto class is not available.\"\n          );\n        }\n      }\n      this.algorithm = params.algorithm + \"-\" + String(params.keyLength) + \"-\" + params.mode;\n      this.webCryptoAlgorithm = params.algorithm + \"-\" + params.mode;\n      this.key = bufferUtils.toArrayBuffer(params.key);\n      this.iv = iv ? bufferUtils.toArrayBuffer(iv) : null;\n    }\n    concat(buffer1, buffer2) {\n      const output = new ArrayBuffer(buffer1.byteLength + buffer2.byteLength);\n      const outputView = new DataView(output);\n      const buffer1View = new DataView(bufferUtils.toArrayBuffer(buffer1));\n      for (let i = 0; i < buffer1View.byteLength; i++) {\n        outputView.setInt8(i, buffer1View.getInt8(i));\n      }\n      const buffer2View = new DataView(bufferUtils.toArrayBuffer(buffer2));\n      for (let i = 0; i < buffer2View.byteLength; i++) {\n        outputView.setInt8(buffer1View.byteLength + i, buffer2View.getInt8(i));\n      }\n      return output;\n    }\n    async encrypt(plaintext) {\n      logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"CBCCipher.encrypt()\", \"\");\n      const iv = await this.getIv();\n      const cryptoKey = await crypto.subtle.importKey(\"raw\", this.key, this.webCryptoAlgorithm, false, [\"encrypt\"]);\n      const ciphertext = await crypto.subtle.encrypt({ name: this.webCryptoAlgorithm, iv }, cryptoKey, plaintext);\n      return this.concat(iv, ciphertext);\n    }\n    async decrypt(ciphertext) {\n      logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"CBCCipher.decrypt()\", \"\");\n      const ciphertextArrayBuffer = bufferUtils.toArrayBuffer(ciphertext);\n      const iv = ciphertextArrayBuffer.slice(0, DEFAULT_BLOCKLENGTH);\n      const ciphertextBody = ciphertextArrayBuffer.slice(DEFAULT_BLOCKLENGTH);\n      const cryptoKey = await crypto.subtle.importKey(\"raw\", this.key, this.webCryptoAlgorithm, false, [\"decrypt\"]);\n      return crypto.subtle.decrypt({ name: this.webCryptoAlgorithm, iv }, cryptoKey, ciphertextBody);\n    }\n    async getIv() {\n      if (this.iv) {\n        var iv = this.iv;\n        this.iv = null;\n        return iv;\n      }\n      const randomBlock = await config.getRandomArrayBuffer(DEFAULT_BLOCKLENGTH);\n      return bufferUtils.toArrayBuffer(randomBlock);\n    }\n  }\n  return Crypto2;\n};\n\n// src/common/constants/XHRStates.ts\nvar XHRStates = /* @__PURE__ */ ((XHRStates2) => {\n  XHRStates2[XHRStates2[\"REQ_SEND\"] = 0] = \"REQ_SEND\";\n  XHRStates2[XHRStates2[\"REQ_RECV\"] = 1] = \"REQ_RECV\";\n  XHRStates2[XHRStates2[\"REQ_RECV_POLL\"] = 2] = \"REQ_RECV_POLL\";\n  XHRStates2[XHRStates2[\"REQ_RECV_STREAM\"] = 3] = \"REQ_RECV_STREAM\";\n  return XHRStates2;\n})(XHRStates || {});\nvar XHRStates_default = XHRStates;\n\n// src/platform/web/lib/http/http.ts\nfunction createMissingImplementationError() {\n  return new ErrorInfo(\n    \"No HTTP request plugin provided. Provide at least one of the FetchRequest or XHRRequest plugins.\",\n    400,\n    4e4\n  );\n}\nvar _a;\nvar Http2 = (_a = class {\n  constructor(client) {\n    this.checksInProgress = null;\n    this.checkConnectivity = void 0;\n    this.supportsAuthHeaders = false;\n    this.supportsLinkHeaders = false;\n    var _a2;\n    this.client = client != null ? client : null;\n    const connectivityCheckUrl = (client == null ? void 0 : client.options.connectivityCheckUrl) || defaults_default.connectivityCheckUrl;\n    const connectivityCheckParams = (_a2 = client == null ? void 0 : client.options.connectivityCheckParams) != null ? _a2 : null;\n    const connectivityUrlIsDefault = !(client == null ? void 0 : client.options.connectivityCheckUrl);\n    const requestImplementations = __spreadValues(__spreadValues({}, Http2.bundledRequestImplementations), client == null ? void 0 : client._additionalHTTPRequestImplementations);\n    const xhrRequestImplementation = requestImplementations.XHRRequest;\n    const fetchRequestImplementation = requestImplementations.FetchRequest;\n    const hasImplementation = !!(xhrRequestImplementation || fetchRequestImplementation);\n    if (!hasImplementation) {\n      throw createMissingImplementationError();\n    }\n    if (Platform.Config.xhrSupported && xhrRequestImplementation) {\n      this.supportsAuthHeaders = true;\n      this.Request = async function(method, uri, headers, params, body) {\n        return new Promise((resolve) => {\n          var _a3;\n          const req = xhrRequestImplementation.createRequest(\n            uri,\n            headers,\n            params,\n            body,\n            XHRStates_default.REQ_SEND,\n            (_a3 = client && client.options.timeouts) != null ? _a3 : null,\n            this.logger,\n            method\n          );\n          req.once(\n            \"complete\",\n            (error, body2, headers2, unpacked, statusCode) => resolve({ error, body: body2, headers: headers2, unpacked, statusCode })\n          );\n          req.exec();\n        });\n      };\n      if (client == null ? void 0 : client.options.disableConnectivityCheck) {\n        this.checkConnectivity = async function() {\n          return true;\n        };\n      } else {\n        this.checkConnectivity = async function() {\n          var _a3;\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_MICRO,\n            \"(XHRRequest)Http.checkConnectivity()\",\n            \"Sending; \" + connectivityCheckUrl\n          );\n          const requestResult = await this.doUri(\n            HttpMethods_default.Get,\n            connectivityCheckUrl,\n            null,\n            null,\n            connectivityCheckParams\n          );\n          let result = false;\n          if (!connectivityUrlIsDefault) {\n            result = !requestResult.error && isSuccessCode(requestResult.statusCode);\n          } else {\n            result = !requestResult.error && ((_a3 = requestResult.body) == null ? void 0 : _a3.replace(/\\n/, \"\")) == \"yes\";\n          }\n          logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"(XHRRequest)Http.checkConnectivity()\", \"Result: \" + result);\n          return result;\n        };\n      }\n    } else if (Platform.Config.fetchSupported && fetchRequestImplementation) {\n      this.supportsAuthHeaders = true;\n      this.Request = async (method, uri, headers, params, body) => {\n        return fetchRequestImplementation(method, client != null ? client : null, uri, headers, params, body);\n      };\n      this.checkConnectivity = async function() {\n        var _a3;\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_MICRO,\n          \"(Fetch)Http.checkConnectivity()\",\n          \"Sending; \" + connectivityCheckUrl\n        );\n        const requestResult = await this.doUri(HttpMethods_default.Get, connectivityCheckUrl, null, null, null);\n        const result = !requestResult.error && ((_a3 = requestResult.body) == null ? void 0 : _a3.replace(/\\n/, \"\")) == \"yes\";\n        logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"(Fetch)Http.checkConnectivity()\", \"Result: \" + result);\n        return result;\n      };\n    } else {\n      this.Request = async () => {\n        const error = hasImplementation ? new PartialErrorInfo(\"no supported HTTP transports available\", null, 400) : createMissingImplementationError();\n        return { error };\n      };\n    }\n  }\n  get logger() {\n    var _a2, _b;\n    return (_b = (_a2 = this.client) == null ? void 0 : _a2.logger) != null ? _b : logger_default.defaultLogger;\n  }\n  async doUri(method, uri, headers, body, params) {\n    if (!this.Request) {\n      return { error: new PartialErrorInfo(\"Request invoked before assigned to\", null, 500) };\n    }\n    return this.Request(method, uri, headers, params, body);\n  }\n  shouldFallback(errorInfo) {\n    const statusCode = errorInfo.statusCode;\n    return statusCode === 408 && !errorInfo.code || statusCode === 400 && !errorInfo.code || statusCode >= 500 && statusCode <= 504;\n  }\n}, _a.methods = [HttpMethods_default.Get, HttpMethods_default.Delete, HttpMethods_default.Post, HttpMethods_default.Put, HttpMethods_default.Patch], _a.methodsWithoutBody = [HttpMethods_default.Get, HttpMethods_default.Delete], _a.methodsWithBody = [HttpMethods_default.Post, HttpMethods_default.Put, HttpMethods_default.Patch], _a);\nvar http_default = Http2;\n\n// src/platform/web/lib/util/webstorage.ts\nvar test = \"ablyjs-storage-test\";\nvar globalObject3 = typeof __webpack_require__.g !== \"undefined\" ? __webpack_require__.g : typeof window !== \"undefined\" ? window : self;\nvar Webstorage = class {\n  constructor() {\n    try {\n      globalObject3.sessionStorage.setItem(test, test);\n      globalObject3.sessionStorage.removeItem(test);\n      this.sessionSupported = true;\n    } catch (e) {\n      this.sessionSupported = false;\n    }\n    try {\n      globalObject3.localStorage.setItem(test, test);\n      globalObject3.localStorage.removeItem(test);\n      this.localSupported = true;\n    } catch (e) {\n      this.localSupported = false;\n    }\n  }\n  get(name) {\n    return this._get(name, false);\n  }\n  getSession(name) {\n    return this._get(name, true);\n  }\n  remove(name) {\n    return this._remove(name, false);\n  }\n  removeSession(name) {\n    return this._remove(name, true);\n  }\n  set(name, value, ttl) {\n    return this._set(name, value, ttl, false);\n  }\n  setSession(name, value, ttl) {\n    return this._set(name, value, ttl, true);\n  }\n  _set(name, value, ttl, session) {\n    const wrappedValue = { value };\n    if (ttl) {\n      wrappedValue.expires = Date.now() + ttl;\n    }\n    return this.storageInterface(session).setItem(name, JSON.stringify(wrappedValue));\n  }\n  _get(name, session) {\n    if (session && !this.sessionSupported)\n      throw new Error(\"Session Storage not supported\");\n    if (!session && !this.localSupported)\n      throw new Error(\"Local Storage not supported\");\n    const rawItem = this.storageInterface(session).getItem(name);\n    if (!rawItem)\n      return null;\n    const wrappedValue = JSON.parse(rawItem);\n    if (wrappedValue.expires && wrappedValue.expires < Date.now()) {\n      this.storageInterface(session).removeItem(name);\n      return null;\n    }\n    return wrappedValue.value;\n  }\n  _remove(name, session) {\n    return this.storageInterface(session).removeItem(name);\n  }\n  storageInterface(session) {\n    return session ? globalObject3.sessionStorage : globalObject3.localStorage;\n  }\n};\nvar webstorage_default = new Webstorage();\n\n// src/platform/web/config.ts\nvar globalObject4 = getGlobalObject();\nvar isVercelEdgeRuntime = typeof EdgeRuntime === \"string\";\nif (typeof Window === \"undefined\" && typeof WorkerGlobalScope === \"undefined\" && !isVercelEdgeRuntime) {\n  console.log(\n    \"Warning: this distribution of Ably is intended for browsers. On nodejs, please use the 'ably' package on npm\"\n  );\n}\nfunction allowComet() {\n  const loc = globalObject4.location;\n  return !globalObject4.WebSocket || !loc || !loc.origin || loc.origin.indexOf(\"http\") > -1;\n}\nfunction isWebWorkerContext() {\n  if (typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope) {\n    return true;\n  } else {\n    return false;\n  }\n}\nvar userAgent = globalObject4.navigator && globalObject4.navigator.userAgent.toString();\nvar currentUrl = globalObject4.location && globalObject4.location.href;\nvar Config = {\n  agent: \"browser\",\n  logTimestamps: true,\n  userAgent,\n  currentUrl,\n  binaryType: \"arraybuffer\",\n  WebSocket: globalObject4.WebSocket,\n  fetchSupported: !!globalObject4.fetch,\n  xhrSupported: globalObject4.XMLHttpRequest && \"withCredentials\" in new XMLHttpRequest(),\n  allowComet: allowComet(),\n  useProtocolHeartbeats: true,\n  supportsBinary: !!globalObject4.TextDecoder,\n  /* Per Paddy (https://ably-real-time.slack.com/archives/CURL4U2FP/p1705674537763479) web intentionally prefers JSON to MessagePack:\n   *\n   * > browsers' support for binary types in general was historically poor, and JSON transport performance is significantly better in a browser than msgpack. In modern browsers then binary is supported consistently, but I'd still expect that JSON encode/decode performance is dramatically better than msgpack in a browser.\n   */\n  preferBinary: false,\n  ArrayBuffer: globalObject4.ArrayBuffer,\n  atob: globalObject4.atob,\n  nextTick: typeof globalObject4.setImmediate !== \"undefined\" ? globalObject4.setImmediate.bind(globalObject4) : function(f) {\n    setTimeout(f, 0);\n  },\n  addEventListener: globalObject4.addEventListener,\n  inspect: JSON.stringify,\n  stringByteSize: function(str) {\n    return globalObject4.TextDecoder && new globalObject4.TextEncoder().encode(str).length || str.length;\n  },\n  TextEncoder: globalObject4.TextEncoder,\n  TextDecoder: globalObject4.TextDecoder,\n  getRandomArrayBuffer: async function(byteLength) {\n    const byteArray = new Uint8Array(byteLength);\n    globalObject4.crypto.getRandomValues(byteArray);\n    return byteArray.buffer;\n  },\n  isWebworker: isWebWorkerContext(),\n  push: {\n    platform: \"browser\" /* Browser */,\n    formFactor: \"desktop\" /* Desktop */,\n    storage: webstorage_default\n  }\n};\nvar config_default = Config;\n\n// src/common/lib/transport/comettransport.ts\nfunction shouldBeErrorAction(err) {\n  const UNRESOLVABLE_ERROR_CODES = [80015, 80017, 80030];\n  if (err.code) {\n    if (auth_default.isTokenErr(err))\n      return false;\n    if (UNRESOLVABLE_ERROR_CODES.includes(err.code))\n      return true;\n    return err.code >= 4e4 && err.code < 5e4;\n  } else {\n    return false;\n  }\n}\nfunction protocolMessageFromRawError(err) {\n  if (shouldBeErrorAction(err)) {\n    return [fromValues3({ action: actions2.ERROR, error: err })];\n  } else {\n    return [fromValues3({ action: actions2.DISCONNECTED, error: err })];\n  }\n}\nvar CometTransport = class extends transport_default {\n  constructor(connectionManager, auth, params) {\n    super(\n      connectionManager,\n      auth,\n      params,\n      /* binary not supported for comet so force JSON protocol */\n      true\n    );\n    /* Historical comment, back from when we supported JSONP:\n     *\n     * > For comet, we could do the auth update by aborting the current recv and\n     * > starting a new one with the new token, that'd be sufficient for realtime.\n     * > Problem is JSONP - you can't cancel truly abort a recv once started. So\n     * > we need to send an AUTH for jsonp. In which case it's simpler to keep all\n     * > comet transports the same and do it for all of them. So we send the AUTH\n     * > instead, and don't need to abort the recv\n     *\n     * Now that we’ve dropped JSONP support, we may be able to revisit the above;\n     * see https://github.com/ably/ably-js/issues/1214.\n     */\n    this.onAuthUpdated = (tokenDetails) => {\n      this.authParams = { access_token: tokenDetails.token };\n    };\n    this.stream = \"stream\" in params ? params.stream : true;\n    this.sendRequest = null;\n    this.recvRequest = null;\n    this.pendingCallback = null;\n    this.pendingItems = null;\n  }\n  connect() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"CometTransport.connect()\", \"starting\");\n    transport_default.prototype.connect.call(this);\n    const params = this.params;\n    const options = params.options;\n    const host = defaults_default.getHost(options, params.host);\n    const port = defaults_default.getPort(options);\n    const cometScheme = options.tls ? \"https://\" : \"http://\";\n    this.baseUri = cometScheme + host + \":\" + port + \"/comet/\";\n    const connectUri = this.baseUri + \"connect\";\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"CometTransport.connect()\", \"uri: \" + connectUri);\n    whenPromiseSettles(this.auth.getAuthParams(), (err, authParams) => {\n      if (err) {\n        this.disconnect(err);\n        return;\n      }\n      if (this.isDisposed) {\n        return;\n      }\n      this.authParams = authParams;\n      const connectParams = this.params.getConnectParams(authParams);\n      if (\"stream\" in connectParams)\n        this.stream = connectParams.stream;\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_MINOR,\n        \"CometTransport.connect()\",\n        \"connectParams:\" + toQueryString(connectParams)\n      );\n      let preconnected = false;\n      const connectRequest = this.recvRequest = this.createRequest(\n        connectUri,\n        null,\n        connectParams,\n        null,\n        this.stream ? XHRStates_default.REQ_RECV_STREAM : XHRStates_default.REQ_RECV\n      );\n      connectRequest.on(\"data\", (data) => {\n        if (!this.recvRequest) {\n          return;\n        }\n        if (!preconnected) {\n          preconnected = true;\n          this.emit(\"preconnect\");\n        }\n        this.onData(data);\n      });\n      connectRequest.on(\"complete\", (err2) => {\n        if (!this.recvRequest) {\n          err2 = err2 || new ErrorInfo(\"Request cancelled\", 80003, 400);\n        }\n        this.recvRequest = null;\n        if (!preconnected && !err2) {\n          preconnected = true;\n          this.emit(\"preconnect\");\n        }\n        this.onActivity();\n        if (err2) {\n          if (err2.code) {\n            this.onData(protocolMessageFromRawError(err2));\n          } else {\n            this.disconnect(err2);\n          }\n          return;\n        }\n        Platform.Config.nextTick(() => {\n          this.recv();\n        });\n      });\n      connectRequest.exec();\n    });\n  }\n  requestClose() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"CometTransport.requestClose()\");\n    this._requestCloseOrDisconnect(true);\n  }\n  requestDisconnect() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"CometTransport.requestDisconnect()\");\n    this._requestCloseOrDisconnect(false);\n  }\n  _requestCloseOrDisconnect(closing) {\n    const closeOrDisconnectUri = closing ? this.closeUri : this.disconnectUri;\n    if (closeOrDisconnectUri) {\n      const request = this.createRequest(closeOrDisconnectUri, null, this.authParams, null, XHRStates_default.REQ_SEND);\n      request.on(\"complete\", (err) => {\n        if (err) {\n          logger_default.logAction(\n            this.logger,\n            logger_default.LOG_ERROR,\n            \"CometTransport.request\" + (closing ? \"Close()\" : \"Disconnect()\"),\n            \"request returned err = \" + inspectError(err)\n          );\n          this.finish(\"disconnected\", err);\n        }\n      });\n      request.exec();\n    }\n  }\n  dispose() {\n    logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"CometTransport.dispose()\", \"\");\n    if (!this.isDisposed) {\n      this.isDisposed = true;\n      if (this.recvRequest) {\n        logger_default.logAction(this.logger, logger_default.LOG_MINOR, \"CometTransport.dispose()\", \"aborting recv request\");\n        this.recvRequest.abort();\n        this.recvRequest = null;\n      }\n      this.finish(\"disconnected\", connectionerrors_default.disconnected());\n      Platform.Config.nextTick(() => {\n        this.emit(\"disposed\");\n      });\n    }\n  }\n  onConnect(message) {\n    var _a2;\n    if (this.isDisposed) {\n      return;\n    }\n    const connectionStr = (_a2 = message.connectionDetails) == null ? void 0 : _a2.connectionKey;\n    transport_default.prototype.onConnect.call(this, message);\n    const baseConnectionUri = this.baseUri + connectionStr;\n    logger_default.logAction(this.logger, logger_default.LOG_MICRO, \"CometTransport.onConnect()\", \"baseUri = \" + baseConnectionUri);\n    this.sendUri = baseConnectionUri + \"/send\";\n    this.recvUri = baseConnectionUri + \"/recv\";\n    this.closeUri = baseConnectionUri + \"/close\";\n    this.disconnectUri = baseConnectionUri + \"/disconnect\";\n  }\n  send(message) {\n    if (this.sendRequest) {\n      this.pendingItems = this.pendingItems || [];\n      this.pendingItems.push(message);\n      return;\n    }\n    const pendingItems = this.pendingItems || [];\n    pendingItems.push(message);\n    this.pendingItems = null;\n    this.sendItems(pendingItems);\n  }\n  sendAnyPending() {\n    const pendingItems = this.pendingItems;\n    if (!pendingItems) {\n      return;\n    }\n    this.pendingItems = null;\n    this.sendItems(pendingItems);\n  }\n  sendItems(items) {\n    const sendRequest = this.sendRequest = this.createRequest(\n      this.sendUri,\n      null,\n      this.authParams,\n      this.encodeRequest(items),\n      XHRStates_default.REQ_SEND\n    );\n    sendRequest.on(\"complete\", (err, data) => {\n      if (err)\n        logger_default.logAction(\n          this.logger,\n          logger_default.LOG_ERROR,\n          \"CometTransport.sendItems()\",\n          \"on complete: err = \" + inspectError(err)\n        );\n      this.sendRequest = null;\n      if (err) {\n        if (err.code) {\n          this.onData(protocolMessageFromRawError(err));\n        } else {\n          this.disconnect(err);\n        }\n        return;\n      }\n      if (data) {\n        this.onData(data);\n      }\n      if (this.pendingItems) {\n        Platform.Config.nextTick(() => {\n          if (!this.sendRequest) {\n            this.sendAnyPending();\n          }\n        });\n      }\n    });\n    sendRequest.exec();\n  }\n  recv() {\n    if (this.recvRequest)\n      return;\n    if (!this.isConnected)\n      return;\n    const recvRequest = this.recvRequest = this.createRequest(\n      this.recvUri,\n      null,\n      this.authParams,\n      null,\n      this.stream ? XHRStates_default.REQ_RECV_STREAM : XHRStates_default.REQ_RECV_POLL\n    );\n    recvRequest.on(\"data\", (data) => {\n      this.onData(data);\n    });\n    recvRequest.on(\"complete\", (err) => {\n      this.recvRequest = null;\n      this.onActivity();\n      if (err) {\n        if (err.code) {\n          this.onData(protocolMessageFromRawError(err));\n        } else {\n          this.disconnect(err);\n        }\n        return;\n      }\n      Platform.Config.nextTick(() => {\n        this.recv();\n      });\n    });\n    recvRequest.exec();\n  }\n  onData(responseData) {\n    try {\n      const items = this.decodeResponse(responseData);\n      if (items && items.length)\n        for (let i = 0; i < items.length; i++)\n          this.onProtocolMessage(\n            fromDeserialized(items[i], this.connectionManager.realtime._RealtimePresence)\n          );\n    } catch (e) {\n      logger_default.logAction(\n        this.logger,\n        logger_default.LOG_ERROR,\n        \"CometTransport.onData()\",\n        \"Unexpected exception handing channel event: \" + e.stack\n      );\n    }\n  }\n  encodeRequest(requestItems) {\n    return JSON.stringify(requestItems);\n  }\n  decodeResponse(responseData) {\n    if (typeof responseData == \"string\")\n      return JSON.parse(responseData);\n    return responseData;\n  }\n};\nvar comettransport_default = CometTransport;\n\n// src/platform/web/lib/http/request/xhrrequest.ts\nfunction isAblyError(responseBody, headers) {\n  return allToLowerCase(keysArray(headers)).includes(\"x-ably-errorcode\");\n}\nfunction getAblyError(responseBody, headers) {\n  if (isAblyError(responseBody, headers)) {\n    return responseBody.error && ErrorInfo.fromValues(responseBody.error);\n  }\n}\nvar noop3 = function() {\n};\nvar idCounter = 0;\nvar pendingRequests = {};\nfunction getHeader(xhr, header) {\n  return xhr.getResponseHeader && xhr.getResponseHeader(header);\n}\nfunction isEncodingChunked(xhr) {\n  return xhr.getResponseHeader && (xhr.getResponseHeader(\"transfer-encoding\") || !xhr.getResponseHeader(\"content-length\"));\n}\nfunction getHeadersAsObject(xhr) {\n  const headerPairs = xhr.getAllResponseHeaders().trim().split(\"\\r\\n\");\n  const headers = {};\n  for (let i = 0; i < headerPairs.length; i++) {\n    const parts = headerPairs[i].split(\":\").map((x) => x.trim());\n    headers[parts[0].toLowerCase()] = parts[1];\n  }\n  return headers;\n}\nvar XHRRequest = class _XHRRequest extends eventemitter_default {\n  constructor(uri, headers, params, body, requestMode, timeouts, logger, method) {\n    super(logger);\n    params = params || {};\n    params.rnd = cheapRandStr();\n    this.uri = uri + toQueryString(params);\n    this.headers = headers || {};\n    this.body = body;\n    this.method = method ? method.toUpperCase() : isNil(body) ? \"GET\" : \"POST\";\n    this.requestMode = requestMode;\n    this.timeouts = timeouts;\n    this.timedOut = false;\n    this.requestComplete = false;\n    this.id = String(++idCounter);\n    pendingRequests[this.id] = this;\n  }\n  static createRequest(uri, headers, params, body, requestMode, timeouts, logger, method) {\n    const _timeouts = timeouts || defaults_default.TIMEOUTS;\n    return new _XHRRequest(\n      uri,\n      headers,\n      copy(params),\n      body,\n      requestMode,\n      _timeouts,\n      logger,\n      method\n    );\n  }\n  complete(err, body, headers, unpacked, statusCode) {\n    if (!this.requestComplete) {\n      this.requestComplete = true;\n      if (!err && body) {\n        this.emit(\"data\", body);\n      }\n      this.emit(\"complete\", err, body, headers, unpacked, statusCode);\n      this.dispose();\n    }\n  }\n  abort() {\n    this.dispose();\n  }\n  exec() {\n    let headers = this.headers;\n    const timeout = this.requestMode == XHRStates_default.REQ_SEND ? this.timeouts.httpRequestTimeout : this.timeouts.recvTimeout, timer = this.timer = setTimeout(() => {\n      this.timedOut = true;\n      xhr.abort();\n    }, timeout), method = this.method, xhr = this.xhr = new XMLHttpRequest(), accept = headers[\"accept\"];\n    let body = this.body;\n    let responseType = \"text\";\n    if (!accept) {\n      headers[\"accept\"] = \"application/json\";\n    } else if (accept.indexOf(\"application/x-msgpack\") === 0) {\n      responseType = \"arraybuffer\";\n    }\n    if (body) {\n      const contentType = headers[\"content-type\"] || (headers[\"content-type\"] = \"application/json\");\n      if (contentType.indexOf(\"application/json\") > -1 && typeof body != \"string\")\n        body = JSON.stringify(body);\n    }\n    xhr.open(method, this.uri, true);\n    xhr.responseType = responseType;\n    if (\"authorization\" in headers) {\n      xhr.withCredentials = true;\n    }\n    for (const h in headers)\n      xhr.setRequestHeader(h, headers[h]);\n    const errorHandler = (errorEvent, message, code, statusCode2) => {\n      var _a2;\n      let errorMessage = message + \" (event type: \" + errorEvent.type + \")\";\n      if ((_a2 = this == null ? void 0 : this.xhr) == null ? void 0 : _a2.statusText)\n        errorMessage += \", current statusText is \" + this.xhr.statusText;\n      logger_default.logAction(this.logger, logger_default.LOG_ERROR, \"Request.on\" + errorEvent.type + \"()\", errorMessage);\n      this.complete(new PartialErrorInfo(errorMessage, code, statusCode2));\n    };\n    xhr.onerror = function(errorEvent) {\n      errorHandler(errorEvent, \"XHR error occurred\", null, 400);\n    };\n    xhr.onabort = (errorEvent) => {\n      if (this.timedOut) {\n        errorHandler(errorEvent, \"Request aborted due to request timeout expiring\", null, 408);\n      } else {\n        errorHandler(errorEvent, \"Request cancelled\", null, 400);\n      }\n    };\n    xhr.ontimeout = function(errorEvent) {\n      errorHandler(errorEvent, \"Request timed out\", null, 408);\n    };\n    let streaming;\n    let statusCode;\n    let successResponse;\n    let streamPos = 0;\n    let unpacked = false;\n    const onResponse = () => {\n      clearTimeout(timer);\n      successResponse = statusCode < 400;\n      if (statusCode == 204) {\n        this.complete(null, null, null, null, statusCode);\n        return;\n      }\n      streaming = this.requestMode == XHRStates_default.REQ_RECV_STREAM && successResponse && isEncodingChunked(xhr);\n    };\n    const onEnd = () => {\n      let parsedResponse;\n      try {\n        const contentType = getHeader(xhr, \"content-type\");\n        const json = contentType ? contentType.indexOf(\"application/json\") >= 0 : xhr.responseType == \"text\";\n        if (json) {\n          const jsonResponseBody = xhr.responseType === \"arraybuffer\" ? Platform.BufferUtils.utf8Decode(xhr.response) : String(xhr.responseText);\n          if (jsonResponseBody.length) {\n            parsedResponse = JSON.parse(jsonResponseBody);\n          } else {\n            parsedResponse = jsonResponseBody;\n          }\n          unpacked = true;\n        } else {\n          parsedResponse = xhr.response;\n        }\n        if (parsedResponse.response !== void 0) {\n          statusCode = parsedResponse.statusCode;\n          successResponse = statusCode < 400;\n          headers = parsedResponse.headers;\n          parsedResponse = parsedResponse.response;\n        } else {\n          headers = getHeadersAsObject(xhr);\n        }\n      } catch (e) {\n        this.complete(new PartialErrorInfo(\"Malformed response body from server: \" + e.message, null, 400));\n        return;\n      }\n      if (successResponse || Array.isArray(parsedResponse)) {\n        this.complete(null, parsedResponse, headers, unpacked, statusCode);\n        return;\n      }\n      let err = getAblyError(parsedResponse, headers);\n      if (!err) {\n        err = new PartialErrorInfo(\n          \"Error response received from server: \" + statusCode + \" body was: \" + Platform.Config.inspect(parsedResponse),\n          null,\n          statusCode\n        );\n      }\n      this.complete(err, parsedResponse, headers, unpacked, statusCode);\n    };\n    function onProgress() {\n      const responseText = xhr.responseText;\n      const bodyEnd = responseText.length - 1;\n      let idx, chunk;\n      while (streamPos < bodyEnd && (idx = responseText.indexOf(\"\\n\", streamPos)) > -1) {\n        chunk = responseText.slice(streamPos, idx);\n        streamPos = idx + 1;\n        onChunk(chunk);\n      }\n    }\n    const onChunk = (chunk) => {\n      try {\n        chunk = JSON.parse(chunk);\n      } catch (e) {\n        this.complete(new PartialErrorInfo(\"Malformed response body from server: \" + e.message, null, 400));\n        return;\n      }\n      this.emit(\"data\", chunk);\n    };\n    const onStreamEnd = () => {\n      onProgress();\n      this.streamComplete = true;\n      Platform.Config.nextTick(() => {\n        this.complete();\n      });\n    };\n    xhr.onreadystatechange = function() {\n      const readyState = xhr.readyState;\n      if (readyState < 3)\n        return;\n      if (xhr.status !== 0) {\n        if (statusCode === void 0) {\n          statusCode = xhr.status;\n          onResponse();\n        }\n        if (readyState == 3 && streaming) {\n          onProgress();\n        } else if (readyState == 4) {\n          if (streaming)\n            onStreamEnd();\n          else\n            onEnd();\n        }\n      }\n    };\n    xhr.send(body);\n  }\n  dispose() {\n    const xhr = this.xhr;\n    if (xhr) {\n      xhr.onreadystatechange = xhr.onerror = xhr.onabort = xhr.ontimeout = noop3;\n      this.xhr = null;\n      const timer = this.timer;\n      if (timer) {\n        clearTimeout(timer);\n        this.timer = null;\n      }\n      if (!this.requestComplete)\n        xhr.abort();\n    }\n    delete pendingRequests[this.id];\n  }\n};\nvar xhrrequest_default = XHRRequest;\n\n// src/platform/web/lib/transport/xhrpollingtransport.ts\nvar shortName2 = TransportNames.XhrPolling;\nvar XHRPollingTransport = class extends comettransport_default {\n  constructor(connectionManager, auth, params) {\n    super(connectionManager, auth, params);\n    this.shortName = shortName2;\n    params.stream = false;\n    this.shortName = shortName2;\n  }\n  static isAvailable() {\n    return !!(Platform.Config.xhrSupported && Platform.Config.allowComet);\n  }\n  toString() {\n    return \"XHRPollingTransport; uri=\" + this.baseUri + \"; isConnected=\" + this.isConnected;\n  }\n  createRequest(uri, headers, params, body, requestMode) {\n    return xhrrequest_default.createRequest(uri, headers, params, body, requestMode, this.timeouts, this.logger);\n  }\n};\nvar xhrpollingtransport_default = XHRPollingTransport;\n\n// src/platform/web/lib/transport/index.ts\nvar order = [\"xhr_polling\"];\nvar defaultTransports = {\n  order,\n  bundledImplementations: {\n    web_socket: websockettransport_default,\n    xhr_polling: xhrpollingtransport_default\n  }\n};\nvar transport_default2 = defaultTransports;\n\n// src/platform/web/lib/util/defaults.ts\nvar Defaults2 = {\n  connectivityCheckUrl: \"https://internet-up.ably-realtime.com/is-the-internet-up.txt\",\n  wsConnectivityUrl: \"wss://ws-up.ably-realtime.com\",\n  /* Order matters here: the base transport is the leftmost one in the\n   * intersection of baseTransportOrder and the transports clientOption that's\n   * supported. */\n  defaultTransports: [TransportNames.XhrPolling, TransportNames.WebSocket]\n};\nvar defaults_default2 = Defaults2;\n\n// src/platform/web/lib/util/msgpack.ts\nfunction inspect(buffer) {\n  if (buffer === void 0)\n    return \"undefined\";\n  let view;\n  let type;\n  if (buffer instanceof ArrayBuffer) {\n    type = \"ArrayBuffer\";\n    view = new DataView(buffer);\n  } else if (buffer instanceof DataView) {\n    type = \"DataView\";\n    view = buffer;\n  }\n  if (!view)\n    return JSON.stringify(buffer);\n  const bytes = [];\n  for (let i = 0; i < buffer.byteLength; i++) {\n    if (i > 20) {\n      bytes.push(\"...\");\n      break;\n    }\n    let byte_ = view.getUint8(i).toString(16);\n    if (byte_.length === 1)\n      byte_ = \"0\" + byte_;\n    bytes.push(byte_);\n  }\n  return \"<\" + type + \" \" + bytes.join(\" \") + \">\";\n}\nfunction utf8Write(view, offset, string) {\n  for (let i = 0, l = string.length; i < l; i++) {\n    const codePoint = string.charCodeAt(i);\n    if (codePoint < 128) {\n      view.setUint8(offset++, codePoint >>> 0 & 127 | 0);\n      continue;\n    }\n    if (codePoint < 2048) {\n      view.setUint8(offset++, codePoint >>> 6 & 31 | 192);\n      view.setUint8(offset++, codePoint >>> 0 & 63 | 128);\n      continue;\n    }\n    if (codePoint < 65536) {\n      view.setUint8(offset++, codePoint >>> 12 & 15 | 224);\n      view.setUint8(offset++, codePoint >>> 6 & 63 | 128);\n      view.setUint8(offset++, codePoint >>> 0 & 63 | 128);\n      continue;\n    }\n    if (codePoint < 1114112) {\n      view.setUint8(offset++, codePoint >>> 18 & 7 | 240);\n      view.setUint8(offset++, codePoint >>> 12 & 63 | 128);\n      view.setUint8(offset++, codePoint >>> 6 & 63 | 128);\n      view.setUint8(offset++, codePoint >>> 0 & 63 | 128);\n      continue;\n    }\n    throw new Error(\"bad codepoint \" + codePoint);\n  }\n}\nfunction utf8Read(view, offset, length) {\n  let string = \"\";\n  for (let i = offset, end = offset + length; i < end; i++) {\n    const byte_ = view.getUint8(i);\n    if ((byte_ & 128) === 0) {\n      string += String.fromCharCode(byte_);\n      continue;\n    }\n    if ((byte_ & 224) === 192) {\n      string += String.fromCharCode((byte_ & 15) << 6 | view.getUint8(++i) & 63);\n      continue;\n    }\n    if ((byte_ & 240) === 224) {\n      string += String.fromCharCode(\n        (byte_ & 15) << 12 | (view.getUint8(++i) & 63) << 6 | (view.getUint8(++i) & 63) << 0\n      );\n      continue;\n    }\n    if ((byte_ & 248) === 240) {\n      string += String.fromCharCode(\n        (byte_ & 7) << 18 | (view.getUint8(++i) & 63) << 12 | (view.getUint8(++i) & 63) << 6 | (view.getUint8(++i) & 63) << 0\n      );\n      continue;\n    }\n    throw new Error(\"Invalid byte \" + byte_.toString(16));\n  }\n  return string;\n}\nfunction utf8ByteCount(string) {\n  let count = 0;\n  for (let i = 0, l = string.length; i < l; i++) {\n    const codePoint = string.charCodeAt(i);\n    if (codePoint < 128) {\n      count += 1;\n      continue;\n    }\n    if (codePoint < 2048) {\n      count += 2;\n      continue;\n    }\n    if (codePoint < 65536) {\n      count += 3;\n      continue;\n    }\n    if (codePoint < 1114112) {\n      count += 4;\n      continue;\n    }\n    throw new Error(\"bad codepoint \" + codePoint);\n  }\n  return count;\n}\nfunction encode2(value, sparse) {\n  const size = sizeof(value, sparse);\n  if (size === 0)\n    return void 0;\n  const buffer = new ArrayBuffer(size);\n  const view = new DataView(buffer);\n  _encode(value, view, 0, sparse);\n  return buffer;\n}\nvar SH_L_32 = (1 << 16) * (1 << 16);\nvar SH_R_32 = 1 / SH_L_32;\nfunction getInt64(view, offset) {\n  offset = offset || 0;\n  return view.getInt32(offset) * SH_L_32 + view.getUint32(offset + 4);\n}\nfunction getUint64(view, offset) {\n  offset = offset || 0;\n  return view.getUint32(offset) * SH_L_32 + view.getUint32(offset + 4);\n}\nfunction setInt64(view, offset, val) {\n  if (val < 9223372036854776e3) {\n    view.setInt32(offset, Math.floor(val * SH_R_32));\n    view.setInt32(offset + 4, val & -1);\n  } else {\n    view.setUint32(offset, 2147483647);\n    view.setUint32(offset + 4, 2147483647);\n  }\n}\nfunction setUint64(view, offset, val) {\n  if (val < 18446744073709552e3) {\n    view.setUint32(offset, Math.floor(val * SH_R_32));\n    view.setInt32(offset + 4, val & -1);\n  } else {\n    view.setUint32(offset, 4294967295);\n    view.setUint32(offset + 4, 4294967295);\n  }\n}\nvar Decoder = class {\n  constructor(view, offset) {\n    this.map = (length) => {\n      const value = {};\n      for (let i = 0; i < length; i++) {\n        const key = this.parse();\n        value[key] = this.parse();\n      }\n      return value;\n    };\n    this.bin = (length) => {\n      const value = new ArrayBuffer(length);\n      new Uint8Array(value).set(new Uint8Array(this.view.buffer, this.offset, length), 0);\n      this.offset += length;\n      return value;\n    };\n    this.buf = this.bin;\n    this.str = (length) => {\n      const value = utf8Read(this.view, this.offset, length);\n      this.offset += length;\n      return value;\n    };\n    this.array = (length) => {\n      const value = new Array(length);\n      for (let i = 0; i < length; i++) {\n        value[i] = this.parse();\n      }\n      return value;\n    };\n    this.ext = (length) => {\n      this.offset += length;\n      return {\n        type: this.view.getInt8(this.offset),\n        data: this.buf(length)\n      };\n    };\n    this.parse = () => {\n      const type = this.view.getUint8(this.offset);\n      let value, length;\n      if ((type & 128) === 0) {\n        this.offset++;\n        return type;\n      }\n      if ((type & 240) === 128) {\n        length = type & 15;\n        this.offset++;\n        return this.map(length);\n      }\n      if ((type & 240) === 144) {\n        length = type & 15;\n        this.offset++;\n        return this.array(length);\n      }\n      if ((type & 224) === 160) {\n        length = type & 31;\n        this.offset++;\n        return this.str(length);\n      }\n      if ((type & 224) === 224) {\n        value = this.view.getInt8(this.offset);\n        this.offset++;\n        return value;\n      }\n      switch (type) {\n        case 192:\n          this.offset++;\n          return null;\n        case 193:\n          this.offset++;\n          return void 0;\n        case 194:\n          this.offset++;\n          return false;\n        case 195:\n          this.offset++;\n          return true;\n        case 196:\n          length = this.view.getUint8(this.offset + 1);\n          this.offset += 2;\n          return this.bin(length);\n        case 197:\n          length = this.view.getUint16(this.offset + 1);\n          this.offset += 3;\n          return this.bin(length);\n        case 198:\n          length = this.view.getUint32(this.offset + 1);\n          this.offset += 5;\n          return this.bin(length);\n        case 199:\n          length = this.view.getUint8(this.offset + 1);\n          this.offset += 2;\n          return this.ext(length);\n        case 200:\n          length = this.view.getUint16(this.offset + 1);\n          this.offset += 3;\n          return this.ext(length);\n        case 201:\n          length = this.view.getUint32(this.offset + 1);\n          this.offset += 5;\n          return this.ext(length);\n        case 202:\n          value = this.view.getFloat32(this.offset + 1);\n          this.offset += 5;\n          return value;\n        case 203:\n          value = this.view.getFloat64(this.offset + 1);\n          this.offset += 9;\n          return value;\n        case 204:\n          value = this.view.getUint8(this.offset + 1);\n          this.offset += 2;\n          return value;\n        case 205:\n          value = this.view.getUint16(this.offset + 1);\n          this.offset += 3;\n          return value;\n        case 206:\n          value = this.view.getUint32(this.offset + 1);\n          this.offset += 5;\n          return value;\n        case 207:\n          value = getUint64(this.view, this.offset + 1);\n          this.offset += 9;\n          return value;\n        case 208:\n          value = this.view.getInt8(this.offset + 1);\n          this.offset += 2;\n          return value;\n        case 209:\n          value = this.view.getInt16(this.offset + 1);\n          this.offset += 3;\n          return value;\n        case 210:\n          value = this.view.getInt32(this.offset + 1);\n          this.offset += 5;\n          return value;\n        case 211:\n          value = getInt64(this.view, this.offset + 1);\n          this.offset += 9;\n          return value;\n        case 212:\n          length = 1;\n          this.offset++;\n          return this.ext(length);\n        case 213:\n          length = 2;\n          this.offset++;\n          return this.ext(length);\n        case 214:\n          length = 4;\n          this.offset++;\n          return this.ext(length);\n        case 215:\n          length = 8;\n          this.offset++;\n          return this.ext(length);\n        case 216:\n          length = 16;\n          this.offset++;\n          return this.ext(length);\n        case 217:\n          length = this.view.getUint8(this.offset + 1);\n          this.offset += 2;\n          return this.str(length);\n        case 218:\n          length = this.view.getUint16(this.offset + 1);\n          this.offset += 3;\n          return this.str(length);\n        case 219:\n          length = this.view.getUint32(this.offset + 1);\n          this.offset += 5;\n          return this.str(length);\n        case 220:\n          length = this.view.getUint16(this.offset + 1);\n          this.offset += 3;\n          return this.array(length);\n        case 221:\n          length = this.view.getUint32(this.offset + 1);\n          this.offset += 5;\n          return this.array(length);\n        case 222:\n          length = this.view.getUint16(this.offset + 1);\n          this.offset += 3;\n          return this.map(length);\n        case 223:\n          length = this.view.getUint32(this.offset + 1);\n          this.offset += 5;\n          return this.map(length);\n      }\n      throw new Error(\"Unknown type 0x\" + type.toString(16));\n    };\n    this.offset = offset || 0;\n    this.view = view;\n  }\n};\nfunction decode3(buffer) {\n  const view = new DataView(buffer);\n  const decoder = new Decoder(view);\n  const value = decoder.parse();\n  if (decoder.offset !== buffer.byteLength)\n    throw new Error(buffer.byteLength - decoder.offset + \" trailing bytes\");\n  return value;\n}\nfunction encodeableKeys(value, sparse) {\n  return Object.keys(value).filter(function(e) {\n    const val = value[e], type = typeof val;\n    return (!sparse || val !== void 0 && val !== null) && (\"function\" !== type || !!val.toJSON);\n  });\n}\nfunction _encode(value, view, offset, sparse) {\n  const type = typeof value;\n  if (typeof value === \"string\") {\n    const length = utf8ByteCount(value);\n    if (length < 32) {\n      view.setUint8(offset, length | 160);\n      utf8Write(view, offset + 1, value);\n      return 1 + length;\n    }\n    if (length < 256) {\n      view.setUint8(offset, 217);\n      view.setUint8(offset + 1, length);\n      utf8Write(view, offset + 2, value);\n      return 2 + length;\n    }\n    if (length < 65536) {\n      view.setUint8(offset, 218);\n      view.setUint16(offset + 1, length);\n      utf8Write(view, offset + 3, value);\n      return 3 + length;\n    }\n    if (length < 4294967296) {\n      view.setUint8(offset, 219);\n      view.setUint32(offset + 1, length);\n      utf8Write(view, offset + 5, value);\n      return 5 + length;\n    }\n  }\n  if (ArrayBuffer.isView && ArrayBuffer.isView(value)) {\n    value = value.buffer;\n  }\n  if (value instanceof ArrayBuffer) {\n    const length = value.byteLength;\n    if (length < 256) {\n      view.setUint8(offset, 196);\n      view.setUint8(offset + 1, length);\n      new Uint8Array(view.buffer).set(new Uint8Array(value), offset + 2);\n      return 2 + length;\n    }\n    if (length < 65536) {\n      view.setUint8(offset, 197);\n      view.setUint16(offset + 1, length);\n      new Uint8Array(view.buffer).set(new Uint8Array(value), offset + 3);\n      return 3 + length;\n    }\n    if (length < 4294967296) {\n      view.setUint8(offset, 198);\n      view.setUint32(offset + 1, length);\n      new Uint8Array(view.buffer).set(new Uint8Array(value), offset + 5);\n      return 5 + length;\n    }\n  }\n  if (typeof value === \"number\") {\n    if (Math.floor(value) !== value) {\n      view.setUint8(offset, 203);\n      view.setFloat64(offset + 1, value);\n      return 9;\n    }\n    if (value >= 0) {\n      if (value < 128) {\n        view.setUint8(offset, value);\n        return 1;\n      }\n      if (value < 256) {\n        view.setUint8(offset, 204);\n        view.setUint8(offset + 1, value);\n        return 2;\n      }\n      if (value < 65536) {\n        view.setUint8(offset, 205);\n        view.setUint16(offset + 1, value);\n        return 3;\n      }\n      if (value < 4294967296) {\n        view.setUint8(offset, 206);\n        view.setUint32(offset + 1, value);\n        return 5;\n      }\n      if (value < 18446744073709552e3) {\n        view.setUint8(offset, 207);\n        setUint64(view, offset + 1, value);\n        return 9;\n      }\n      throw new Error(\"Number too big 0x\" + value.toString(16));\n    }\n    if (value >= -32) {\n      view.setInt8(offset, value);\n      return 1;\n    }\n    if (value >= -128) {\n      view.setUint8(offset, 208);\n      view.setInt8(offset + 1, value);\n      return 2;\n    }\n    if (value >= -32768) {\n      view.setUint8(offset, 209);\n      view.setInt16(offset + 1, value);\n      return 3;\n    }\n    if (value >= -2147483648) {\n      view.setUint8(offset, 210);\n      view.setInt32(offset + 1, value);\n      return 5;\n    }\n    if (value >= -9223372036854776e3) {\n      view.setUint8(offset, 211);\n      setInt64(view, offset + 1, value);\n      return 9;\n    }\n    throw new Error(\"Number too small -0x\" + (-value).toString(16).substr(1));\n  }\n  if (type === \"undefined\") {\n    if (sparse)\n      return 0;\n    view.setUint8(offset, 212);\n    view.setUint8(offset + 1, 0);\n    view.setUint8(offset + 2, 0);\n    return 3;\n  }\n  if (value === null) {\n    if (sparse)\n      return 0;\n    view.setUint8(offset, 192);\n    return 1;\n  }\n  if (type === \"boolean\") {\n    view.setUint8(offset, value ? 195 : 194);\n    return 1;\n  }\n  if (\"function\" === typeof value.toJSON)\n    return _encode(value.toJSON(), view, offset, sparse);\n  if (type === \"object\") {\n    let length, size = 0;\n    let keys;\n    const isArray = Array.isArray(value);\n    if (isArray) {\n      length = value.length;\n    } else {\n      keys = encodeableKeys(value, sparse);\n      length = keys.length;\n    }\n    if (length < 16) {\n      view.setUint8(offset, length | (isArray ? 144 : 128));\n      size = 1;\n    } else if (length < 65536) {\n      view.setUint8(offset, isArray ? 220 : 222);\n      view.setUint16(offset + 1, length);\n      size = 3;\n    } else if (length < 4294967296) {\n      view.setUint8(offset, isArray ? 221 : 223);\n      view.setUint32(offset + 1, length);\n      size = 5;\n    }\n    if (isArray) {\n      for (let i = 0; i < length; i++) {\n        size += _encode(value[i], view, offset + size, sparse);\n      }\n    } else if (keys) {\n      for (let i = 0; i < length; i++) {\n        const key = keys[i];\n        size += _encode(key, view, offset + size);\n        size += _encode(value[key], view, offset + size, sparse);\n      }\n    }\n    return size;\n  }\n  if (type === \"function\")\n    return 0;\n  throw new Error(\"Unknown type \" + type);\n}\nfunction sizeof(value, sparse) {\n  const type = typeof value;\n  if (type === \"string\") {\n    const length = utf8ByteCount(value);\n    if (length < 32) {\n      return 1 + length;\n    }\n    if (length < 256) {\n      return 2 + length;\n    }\n    if (length < 65536) {\n      return 3 + length;\n    }\n    if (length < 4294967296) {\n      return 5 + length;\n    }\n  }\n  if (ArrayBuffer.isView && ArrayBuffer.isView(value)) {\n    value = value.buffer;\n  }\n  if (value instanceof ArrayBuffer) {\n    const length = value.byteLength;\n    if (length < 256) {\n      return 2 + length;\n    }\n    if (length < 65536) {\n      return 3 + length;\n    }\n    if (length < 4294967296) {\n      return 5 + length;\n    }\n  }\n  if (typeof value === \"number\") {\n    if (Math.floor(value) !== value)\n      return 9;\n    if (value >= 0) {\n      if (value < 128)\n        return 1;\n      if (value < 256)\n        return 2;\n      if (value < 65536)\n        return 3;\n      if (value < 4294967296)\n        return 5;\n      if (value < 18446744073709552e3)\n        return 9;\n      throw new Error(\"Number too big 0x\" + value.toString(16));\n    }\n    if (value >= -32)\n      return 1;\n    if (value >= -128)\n      return 2;\n    if (value >= -32768)\n      return 3;\n    if (value >= -2147483648)\n      return 5;\n    if (value >= -9223372036854776e3)\n      return 9;\n    throw new Error(\"Number too small -0x\" + value.toString(16).substr(1));\n  }\n  if (type === \"boolean\")\n    return 1;\n  if (value === null)\n    return sparse ? 0 : 1;\n  if (value === void 0)\n    return sparse ? 0 : 3;\n  if (\"function\" === typeof value.toJSON)\n    return sizeof(value.toJSON(), sparse);\n  if (type === \"object\") {\n    let length, size = 0;\n    if (Array.isArray(value)) {\n      length = value.length;\n      for (let i = 0; i < length; i++) {\n        size += sizeof(value[i], sparse);\n      }\n    } else {\n      const keys = encodeableKeys(value, sparse);\n      length = keys.length;\n      for (let i = 0; i < length; i++) {\n        const key = keys[i];\n        size += sizeof(key) + sizeof(value[key], sparse);\n      }\n    }\n    if (length < 16) {\n      return 1 + size;\n    }\n    if (length < 65536) {\n      return 3 + size;\n    }\n    if (length < 4294967296) {\n      return 5 + size;\n    }\n    throw new Error(\"Array or object too long 0x\" + length.toString(16));\n  }\n  if (type === \"function\")\n    return 0;\n  throw new Error(\"Unknown type \" + type);\n}\nvar msgpack_default = {\n  encode: encode2,\n  decode: decode3,\n  inspect,\n  utf8Write,\n  utf8Read,\n  utf8ByteCount\n};\n\n// src/platform/web/lib/http/request/fetchrequest.ts\nfunction isAblyError2(responseBody, headers) {\n  return !!headers.get(\"x-ably-errorcode\");\n}\nfunction getAblyError2(responseBody, headers) {\n  if (isAblyError2(responseBody, headers)) {\n    return responseBody.error && ErrorInfo.fromValues(responseBody.error);\n  }\n}\nfunction convertHeaders(headers) {\n  const result = {};\n  headers.forEach((value, key) => {\n    result[key] = value;\n  });\n  return result;\n}\nasync function fetchRequest(method, client, uri, headers, params, body) {\n  const fetchHeaders = new Headers(headers || {});\n  const _method = method ? method.toUpperCase() : isNil(body) ? \"GET\" : \"POST\";\n  const controller = new AbortController();\n  let timeout;\n  const timeoutPromise = new Promise((resolve) => {\n    timeout = setTimeout(\n      () => {\n        controller.abort();\n        resolve({ error: new PartialErrorInfo(\"Request timed out\", null, 408) });\n      },\n      client ? client.options.timeouts.httpRequestTimeout : defaults_default.TIMEOUTS.httpRequestTimeout\n    );\n  });\n  const requestInit = {\n    method: _method,\n    headers: fetchHeaders,\n    body,\n    signal: controller.signal\n  };\n  if (!Platform.Config.isWebworker) {\n    requestInit.credentials = fetchHeaders.has(\"authorization\") ? \"include\" : \"same-origin\";\n  }\n  const resultPromise = (async () => {\n    try {\n      const res = await getGlobalObject().fetch(uri + \"?\" + new URLSearchParams(params || {}), requestInit);\n      clearTimeout(timeout);\n      if (res.status == 204) {\n        return { error: null, statusCode: res.status };\n      }\n      const contentType = res.headers.get(\"Content-Type\");\n      let body2;\n      if (contentType && contentType.indexOf(\"application/x-msgpack\") > -1) {\n        body2 = await res.arrayBuffer();\n      } else if (contentType && contentType.indexOf(\"application/json\") > -1) {\n        body2 = await res.json();\n      } else {\n        body2 = await res.text();\n      }\n      const unpacked = !!contentType && contentType.indexOf(\"application/x-msgpack\") === -1;\n      const headers2 = convertHeaders(res.headers);\n      if (!res.ok) {\n        const error = getAblyError2(body2, res.headers) || new PartialErrorInfo(\n          \"Error response received from server: \" + res.status + \" body was: \" + Platform.Config.inspect(body2),\n          null,\n          res.status\n        );\n        return { error, body: body2, headers: headers2, unpacked, statusCode: res.status };\n      } else {\n        return { error: null, body: body2, headers: headers2, unpacked, statusCode: res.status };\n      }\n    } catch (error) {\n      clearTimeout(timeout);\n      return { error };\n    }\n  })();\n  return Promise.race([timeoutPromise, resultPromise]);\n}\n\n// src/platform/web/lib/http/request/index.ts\nvar defaultBundledRequestImplementations = {\n  XHRRequest: xhrrequest_default,\n  FetchRequest: fetchRequest\n};\n\n// src/platform/web/index.ts\nvar Crypto = createCryptoClass(config_default, bufferutils_default);\nPlatform.Crypto = Crypto;\nPlatform.BufferUtils = bufferutils_default;\nPlatform.Http = http_default;\nPlatform.Config = config_default;\nPlatform.Transports = transport_default2;\nPlatform.WebStorage = webstorage_default;\nfor (const clientClass of [DefaultRest, DefaultRealtime]) {\n  clientClass.Crypto = Crypto;\n  clientClass._MsgPack = msgpack_default;\n}\nhttp_default.bundledRequestImplementations = defaultBundledRequestImplementations;\nlogger_default.initLogHandlers();\nPlatform.Defaults = getDefaults(defaults_default2);\nif (Platform.Config.agent) {\n  Platform.Defaults.agent += \" \" + Platform.Config.agent;\n}\nvar web_default = {\n  ErrorInfo,\n  Rest: DefaultRest,\n  Realtime: DefaultRealtime,\n  msgpack: msgpack_default\n};\nif (typeof module.exports == \"object\" && typeof exports == \"object\") {\n  var __cp = (to, from, except, desc) => {\n    if ((from && typeof from === \"object\") || typeof from === \"function\") {\n      for (let key of Object.getOwnPropertyNames(from)) {\n        if (!Object.prototype.hasOwnProperty.call(to, key) && key !== except)\n        Object.defineProperty(to, key, {\n          get: () => from[key],\n          enumerable: !(desc = Object.getOwnPropertyDescriptor(from, key)) || desc.enumerable,\n        });\n      }\n    }\n    return to;\n  };\n  module.exports = __cp(module.exports, exports);\n}\nreturn module.exports;\n}))\n//# sourceMappingURL=ably.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9hYmx5QDIuMy4xX3JlYWN0LWRvbUAxOC4zLjFfcmVhY3RAMTguMy4xX19yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL2FibHkvYnVpbGQvYWJseS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsUUFBUSxJQUF1RDtBQUMvRDtBQUNBLE1BQU0sS0FBSyxFQU1OO0FBQ0wsR0FBRztBQUNIO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RSw2REFBNkQ7QUFDM0k7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7O0FBRW5GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEIscUJBQU0sbUJBQW1CLHFCQUFNO0FBQ3pEO0FBQ0EsWUFBWSxZQUFZO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGFBQWEseURBQXlELElBQUk7QUFDM0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUSx5Q0FBeUMsUUFBUSx1Q0FBdUMsUUFBUSxnQkFBZ0IsUUFBUTtBQUMvSTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVSxjQUFjLFFBQVEsa0NBQWtDLFFBQVEsdUNBQXVDLFFBQVEsZ0JBQWdCLFFBQVE7QUFDNUo7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsUUFBUTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvUUFBb1Esd0JBQXdCO0FBQzVSO0FBQ0EsNkZBQTZGO0FBQzdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNEJBQTRCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNEJBQTRCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxtQkFBbUI7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsY0FBYztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixjQUFjO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHFCQUFNO0FBQ25CLFdBQVcscUJBQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsVUFBVTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSwwQkFBMEIsWUFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLHVCQUF1QixpR0FBaUcsdUJBQXVCO0FBQ3BMLGtFQUFrRSxzQkFBc0I7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHVCQUF1QiwrQ0FBK0M7QUFDN0Ysc0VBQXNFLHNCQUFzQjtBQUM1RjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLE1BQU07QUFDTjtBQUNBLHVCQUF1Qix1QkFBdUIsaURBQWlEO0FBQy9GLHNFQUFzRSxzQkFBc0I7QUFDNUY7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsaUJBQWlCLHlDQUF5QyxpREFBaUQ7QUFDM0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsSUFBSTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxJQUFJO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxtQkFBbUI7QUFDcEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHVCQUF1QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsWUFBWSx3Q0FBd0M7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHNDQUFzQztBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsbUNBQW1DO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGlFQUFpRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0VBQXNFLDRDQUE0QztBQUNsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSwwR0FBMEc7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdEO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWSx3Q0FBd0M7QUFDcEQ7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWixzQkFBc0IsOEJBQThCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0ZBQXdGO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRTtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixTQUFTO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkUsMkJBQTJCO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSwrS0FBK0sscUJBQXFCLGVBQWUscUVBQXFFLGNBQWM7QUFDdFM7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0NBQXNDO0FBQzdEO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHNDQUFzQyw4Q0FBOEMsdUNBQXVDO0FBQzVJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixzQ0FBc0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLHlEQUF5RCwyQkFBMkIsMEJBQTBCLG9CQUFvQjtBQUM5SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RkFBOEYsNkNBQTZDO0FBQzNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLGVBQWUscURBQXFELGtCQUFrQjtBQUN0RjtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMseURBQXlELDJCQUEyQiwwQkFBMEIsb0JBQW9CO0FBQzlLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixlQUFlLHdEQUF3RCxrQkFBa0I7QUFDekY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdKQUF3SixxQkFBcUIsZUFBZTtBQUM1TDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhGQUE4RjtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFdBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsMENBQTBDLGFBQWEsMEJBQTBCO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxpQkFBaUI7QUFDakIsUUFBUTtBQUNSLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFVBQVUsbUVBQW1FO0FBQzdFO0FBQ0EsMENBQTBDLGFBQWEsc0JBQXNCO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHVDQUF1QztBQUM5RDtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQix1Q0FBdUMsOENBQThDLHVDQUF1QztBQUM3STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3Q0FBd0M7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHVCQUF1QjtBQUN6QyxzREFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvSUFBb0k7QUFDcEksTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixXQUFXO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtS0FBbUssUUFBUTtBQUMzSyx5QkFBeUIsV0FBVztBQUNwQztBQUNBO0FBQ0Esc0JBQXNCLGtCQUFrQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUtBQW1LLFFBQVE7QUFDM0s7QUFDQTtBQUNBLHNCQUFzQixrQkFBa0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdMQUF3TCxRQUFRO0FBQ2hNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJQQUEyUCxRQUFRO0FBQ25RO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSx3TEFBd0wsUUFBUSxjQUFjO0FBQzlNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixrQkFBa0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3TEFBd0wsUUFBUTtBQUNoTTtBQUNBO0FBQ0Esc0JBQXNCLGtCQUFrQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1LQUFtSyxRQUFRO0FBQzNLO0FBQ0E7QUFDQSxzQkFBc0Isa0JBQWtCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyUEFBMlAsUUFBUTtBQUNuUTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esd0xBQXdMLFFBQVE7QUFDaE07QUFDQTtBQUNBLHNCQUFzQixrQkFBa0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsMlBBQTJQLFFBQVE7QUFDblE7QUFDQTtBQUNBLHNCQUFzQixrQkFBa0I7QUFDeEM7QUFDQTtBQUNBLHNCQUFzQix1QkFBdUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFO0FBQzlFO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCwwREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFdBQVc7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxQkFBcUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsV0FBVztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMlFBQTJRLFFBQVE7QUFDblI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpR0FBaUc7QUFDakc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDJCQUEyQjtBQUMxRDtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ1JBQWdSLFFBQVE7QUFDeFI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpUUFBaVEsUUFBUTtBQUN6UTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxrRkFBa0YsUUFBUTtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbVJBQW1SLFFBQVE7QUFDM1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHdCQUF3QjtBQUM5QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHdCQUF3QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsaUdBQWlHLG1DQUFtQywrREFBK0QsbUNBQW1DO0FBQ3RPO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsNktBQTZLLFFBQVE7QUFDckw7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZLQUE2SyxRQUFRO0FBQ3JMO0FBQ0E7QUFDQTtBQUNBLHFGQUFxRix5QkFBeUI7QUFDOUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGVBQWUsR0FBRyxnQkFBZ0I7QUFDbEYsS0FBSztBQUNMLDZLQUE2SyxRQUFRO0FBQ3JMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3R0FBd0csTUFBTTtBQUM5RztBQUNBOztBQUVBO0FBQ0EsZ0NBQWdDOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEhBQTRIO0FBQzVIO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQywrQ0FBK0M7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQkFBcUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IscUJBQXFCO0FBQzNDO0FBQ0E7QUFDQSw2RUFBNkUsbUJBQW1CLFVBQVU7QUFDMUc7QUFDQTtBQUNBLDBDQUEwQywyRkFBMkY7QUFDckk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIscUNBQXFDLENBQVU7QUFDaEU7QUFDQTtBQUNBLDRCQUE0Qix1Q0FBdUM7QUFDbkU7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxrSEFBa0g7QUFDbEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsdUJBQXVCO0FBQ3ZEO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQyx3QkFBd0I7QUFDekQsc0NBQXNDLDZCQUE2QjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRIQUE0SDtBQUM1SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLDREQUE0RDtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFO0FBQzFFO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwrQkFBK0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSx1QkFBdUI7QUFDakM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3Q0FBd0M7O0FBRXpDO0FBQ0EsMkJBQTJCLHFCQUFNLG1CQUFtQixxQkFBTTtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLGdCQUFnQiw2RkFBNkY7QUFDN0csZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtCQUFrQjtBQUNoRCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIscUJBQXFCO0FBQ25ELFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RDtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNGQUFzRjtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsWUFBWTtBQUNaLCtCQUErQiwwQ0FBMEM7QUFDekU7QUFDQSxZQUFZO0FBQ1o7QUFDQSxpQ0FBaUMsa0VBQWtFO0FBQ25HO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTix5QkFBeUIsMkJBQTJCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0hBQStILHlDQUF5QztBQUN4SztBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyw4QkFBOEIsbUVBQW1FO0FBQzVJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixzQ0FBc0M7QUFDakU7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGtDQUFrQztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixrQ0FBa0M7QUFDN0Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLG9CQUFvQjtBQUMvQztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixxQkFBcUI7QUFDL0MsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIscUJBQXFCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIscURBQXFEO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlCQUFpQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDViw4QkFBOEIscUJBQXFCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxvQkFBb0I7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsNkJBQTZCO0FBQ3RELE1BQU07QUFDTix5QkFBeUIsNkJBQTZCO0FBQ3RELE1BQU07QUFDTiwyRUFBMkU7QUFDM0U7QUFDQSx5QkFBeUIsNkRBQTZEO0FBQ3RGLE1BQU07QUFDTjtBQUNBO0FBQ0EseUJBQXlCLHlFQUF5RTtBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMscUJBQXFCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGtCQUFrQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDBCQUEwQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRztBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLCtCQUErQiw4QkFBOEI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRyxnQkFBZ0I7QUFDbkg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5R0FBeUcsZ0JBQWdCO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsNkNBQTZDO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0Q7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLDJDQUEyQztBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw4QkFBOEI7QUFDOUM7QUFDQTtBQUNBLHdCQUF3QixxQkFBcUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxQkFBcUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlLQUFpSztBQUNqSztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsZ0NBQWdDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLElBQUksV0FBVztBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLE9BQU8sRUFBRSxxQkFBcUIsR0FBRyxrQkFBa0I7QUFDM0U7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0VBQXNFO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3QkFBd0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw4QkFBOEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNCQUFzQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQSxzQkFBc0IsaUNBQWlDO0FBQ3ZEO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDhCQUE4QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sd0RBQXdEO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdJQUFnSTtBQUNoSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsaUJBQWlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMkJBQTJCO0FBQ2pEO0FBQ0Esb0JBQW9CLFlBQVk7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLE9BQU87QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixXQUFXO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFFBQVE7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3QkFBd0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw0QkFBNEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDRCQUE0QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELG1DQUFtQztBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLG1DQUFtQztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsaUJBQWlCO0FBQ2xCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUU7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSw2REFBNkQ7QUFDckk7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBLDJCQUEyQixxQkFBTSxtQkFBbUIscUJBQU07QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixvQ0FBb0M7QUFDOUQsSUFBSTtBQUNKLDBCQUEwQiwyQ0FBMkM7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQywwQkFBMEI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsdUJBQXVCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxPQUFPO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFNBQVM7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLE9BQU87QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsWUFBWTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixZQUFZO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixZQUFZO0FBQ2xDO0FBQ0E7QUFDQSxNQUFNO0FBQ04sc0JBQXNCLFlBQVk7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixZQUFZO0FBQ2xDO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLHNCQUFzQixZQUFZO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsNkRBQTZEO0FBQy9FLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RkFBNEY7QUFDNUY7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLFFBQVE7QUFDUixpQkFBaUI7QUFDakI7QUFDQSxNQUFNO0FBQ047QUFDQSxlQUFlO0FBQ2Y7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2FibHlAMi4zLjFfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjFfX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvYWJseS9idWlsZC9hYmx5LmpzP2I5OTAiXSwic291cmNlc0NvbnRlbnQiOlsiLypAbGljZW5zZSBDb3B5cmlnaHQgMjAxNS0yMDIyIEFibHkgUmVhbC10aW1lIEx0ZCAoYWJseS5jb20pXG5cbkFibHkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYyLjMuMVxuaHR0cHM6Ly9naXRodWIuY29tL2FibHkvYWJseS1qc1xuXG5SZWxlYXNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2VuY2UgdjIuMCovKGZ1bmN0aW9uIChnLCBmKSB7XG4gICAgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIGV4cG9ydHMgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgbW9kdWxlKSB7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGYoKTtcbiAgICB9IGVsc2UgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgICAgIGRlZmluZShbXSwgZik7XG4gICAgfSBlbHNlIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBleHBvcnRzKSB7XG4gICAgICBleHBvcnRzW1wiQWJseVwiXSA9IGYoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ1tcIkFibHlcIl0gPSBmKCk7XG4gICAgfVxuICB9KHRoaXMsICgpID0+IHtcbnZhciBleHBvcnRzID0ge307XG52YXIgbW9kdWxlID0geyBleHBvcnRzIH07XG5cInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZQcm9wcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzO1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcERlc2NzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldE93blByb3BTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fcHJvcElzRW51bSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19zcHJlYWRWYWx1ZXMgPSAoYSwgYikgPT4ge1xuICBmb3IgKHZhciBwcm9wIGluIGIgfHwgKGIgPSB7fSkpXG4gICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKGIsIHByb3ApKVxuICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICBpZiAoX19nZXRPd25Qcm9wU3ltYm9scylcbiAgICBmb3IgKHZhciBwcm9wIG9mIF9fZ2V0T3duUHJvcFN5bWJvbHMoYikpIHtcbiAgICAgIGlmIChfX3Byb3BJc0VudW0uY2FsbChiLCBwcm9wKSlcbiAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICAgIH1cbiAgcmV0dXJuIGE7XG59O1xudmFyIF9fc3ByZWFkUHJvcHMgPSAoYSwgYikgPT4gX19kZWZQcm9wcyhhLCBfX2dldE93blByb3BEZXNjcyhiKSk7XG52YXIgX19vYmpSZXN0ID0gKHNvdXJjZSwgZXhjbHVkZSkgPT4ge1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIGZvciAodmFyIHByb3AgaW4gc291cmNlKVxuICAgIGlmIChfX2hhc093blByb3AuY2FsbChzb3VyY2UsIHByb3ApICYmIGV4Y2x1ZGUuaW5kZXhPZihwcm9wKSA8IDApXG4gICAgICB0YXJnZXRbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gIGlmIChzb3VyY2UgIT0gbnVsbCAmJiBfX2dldE93blByb3BTeW1ib2xzKVxuICAgIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyhzb3VyY2UpKSB7XG4gICAgICBpZiAoZXhjbHVkZS5pbmRleE9mKHByb3ApIDwgMCAmJiBfX3Byb3BJc0VudW0uY2FsbChzb3VyY2UsIHByb3ApKVxuICAgICAgICB0YXJnZXRbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgfVxuICByZXR1cm4gdGFyZ2V0O1xufTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvcGxhdGZvcm0vd2ViL2luZGV4LnRzXG52YXIgd2ViX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHdlYl9leHBvcnRzLCB7XG4gIEVycm9ySW5mbzogKCkgPT4gRXJyb3JJbmZvLFxuICBSZWFsdGltZTogKCkgPT4gRGVmYXVsdFJlYWx0aW1lLFxuICBSZXN0OiAoKSA9PiBEZWZhdWx0UmVzdCxcbiAgZGVmYXVsdDogKCkgPT4gd2ViX2RlZmF1bHQsXG4gIG1zZ3BhY2s6ICgpID0+IG1zZ3BhY2tfZGVmYXVsdCxcbiAgcHJvdG9jb2xNZXNzYWdlRnJvbURlc2VyaWFsaXplZDogKCkgPT4gZnJvbURlc2VyaWFsaXplZEluY2x1ZGluZ0RlcGVuZGVuY2llc1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyh3ZWJfZXhwb3J0cyk7XG5cbi8vIHNyYy9jb21tb24vcGxhdGZvcm0udHNcbnZhciBQbGF0Zm9ybSA9IGNsYXNzIHtcbn07XG5cbi8vIHNyYy9jb21tb24vbGliL3V0aWwvbG9nZ2VyLnRzXG52YXIgZ2xvYmFsT2JqZWN0ID0gdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBzZWxmO1xuZnVuY3Rpb24gcGFkKHRpbWVTZWdtZW50LCB0aHJlZSkge1xuICByZXR1cm4gYCR7dGltZVNlZ21lbnR9YC5wYWRTdGFydCh0aHJlZSA/IDMgOiAyLCBcIjBcIik7XG59XG5mdW5jdGlvbiBnZXRIYW5kbGVyKGxvZ2dlcikge1xuICByZXR1cm4gUGxhdGZvcm0uQ29uZmlnLmxvZ1RpbWVzdGFtcHMgPyBmdW5jdGlvbihtc2cpIHtcbiAgICBjb25zdCB0aW1lID0gLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCk7XG4gICAgbG9nZ2VyKFxuICAgICAgcGFkKHRpbWUuZ2V0SG91cnMoKSkgKyBcIjpcIiArIHBhZCh0aW1lLmdldE1pbnV0ZXMoKSkgKyBcIjpcIiArIHBhZCh0aW1lLmdldFNlY29uZHMoKSkgKyBcIi5cIiArIHBhZCh0aW1lLmdldE1pbGxpc2Vjb25kcygpLCAxKSArIFwiIFwiICsgbXNnXG4gICAgKTtcbiAgfSA6IGZ1bmN0aW9uKG1zZykge1xuICAgIGxvZ2dlcihtc2cpO1xuICB9O1xufVxudmFyIGdldERlZmF1bHRMb2dnZXJzID0gKCkgPT4ge1xuICB2YXIgX2EyO1xuICBsZXQgY29uc29sZUxvZ2dlcjtcbiAgbGV0IGVycm9yTG9nZ2VyO1xuICBpZiAodHlwZW9mICgoX2EyID0gZ2xvYmFsT2JqZWN0ID09IG51bGwgPyB2b2lkIDAgOiBnbG9iYWxPYmplY3QuY29uc29sZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5sb2cpID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjb25zb2xlTG9nZ2VyID0gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJncyk7XG4gICAgfTtcbiAgICBlcnJvckxvZ2dlciA9IGNvbnNvbGUud2FybiA/IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICB9IDogY29uc29sZUxvZ2dlcjtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlTG9nZ2VyID0gZXJyb3JMb2dnZXIgPSBmdW5jdGlvbigpIHtcbiAgICB9O1xuICB9XG4gIHJldHVybiBbY29uc29sZUxvZ2dlciwgZXJyb3JMb2dnZXJdLm1hcChnZXRIYW5kbGVyKTtcbn07XG52YXIgX0xvZ2dlciA9IGNsYXNzIF9Mb2dnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRlcHJlY2F0ZWQgPSAoZGVzY3JpcHRpb24sIG1zZykgPT4ge1xuICAgICAgdGhpcy5kZXByZWNhdGlvbldhcm5pbmcoYCR7ZGVzY3JpcHRpb259IGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uLiAke21zZ31gKTtcbiAgICB9O1xuICAgIC8qIFdoZXJlIGEgbG9nZ2luZyBvcGVyYXRpb24gaXMgZXhwZW5zaXZlLCBzdWNoIGFzIHNlcmlhbGlzYXRpb24gb2YgZGF0YSwgdXNlIHNob3VsZExvZyB3aWxsIHByZXZlbnRcbiAgICAgIHRoZSBvYmplY3QgYmVpbmcgc2VyaWFsaXNlZCBpZiB0aGUgbG9nIGxldmVsIHdpbGwgbm90IG91dHB1dCB0aGUgbWVzc2FnZSAqL1xuICAgIHRoaXMuc2hvdWxkTG9nID0gKGxldmVsKSA9PiB7XG4gICAgICByZXR1cm4gbGV2ZWwgPD0gdGhpcy5sb2dMZXZlbDtcbiAgICB9O1xuICAgIHRoaXMuc2V0TG9nID0gKGxldmVsLCBoYW5kbGVyKSA9PiB7XG4gICAgICBpZiAobGV2ZWwgIT09IHZvaWQgMClcbiAgICAgICAgdGhpcy5sb2dMZXZlbCA9IGxldmVsO1xuICAgICAgaWYgKGhhbmRsZXIgIT09IHZvaWQgMClcbiAgICAgICAgdGhpcy5sb2dIYW5kbGVyID0gdGhpcy5sb2dFcnJvckhhbmRsZXIgPSBoYW5kbGVyO1xuICAgIH07XG4gICAgdGhpcy5sb2dMZXZlbCA9IF9Mb2dnZXIuZGVmYXVsdExvZ0xldmVsO1xuICAgIHRoaXMubG9nSGFuZGxlciA9IF9Mb2dnZXIuZGVmYXVsdExvZ0hhbmRsZXI7XG4gICAgdGhpcy5sb2dFcnJvckhhbmRsZXIgPSBfTG9nZ2VyLmRlZmF1bHRMb2dFcnJvckhhbmRsZXI7XG4gIH1cbiAgc3RhdGljIGluaXRMb2dIYW5kbGVycygpIHtcbiAgICBjb25zdCBbbG9nSGFuZGxlciwgbG9nRXJyb3JIYW5kbGVyXSA9IGdldERlZmF1bHRMb2dnZXJzKCk7XG4gICAgdGhpcy5kZWZhdWx0TG9nSGFuZGxlciA9IGxvZ0hhbmRsZXI7XG4gICAgdGhpcy5kZWZhdWx0TG9nRXJyb3JIYW5kbGVyID0gbG9nRXJyb3JIYW5kbGVyO1xuICAgIHRoaXMuZGVmYXVsdExvZ2dlciA9IG5ldyBfTG9nZ2VyKCk7XG4gIH1cbiAgLyoqXG4gICAqIENhbGxzIHRvIHRoaXMgbWV0aG9kIGFyZSBuZXZlciBzdHJpcHBlZCBieSB0aGUgYHN0cmlwTG9nc2AgZXNidWlsZCBwbHVnaW4uIFVzZSBpdCBmb3IgbG9nIHN0YXRlbWVudHMgdGhhdCB5b3Ugd2lzaCB0byBhbHdheXMgYmUgaW5jbHVkZWQgaW4gdGhlIG1vZHVsYXIgdmFyaWFudCBvZiB0aGUgU0RLLlxuICAgKi9cbiAgc3RhdGljIGxvZ0FjdGlvbk5vU3RyaXAobG9nZ2VyLCBsZXZlbCwgYWN0aW9uLCBtZXNzYWdlKSB7XG4gICAgbG9nZ2VyLmxvZ0FjdGlvbihsZXZlbCwgYWN0aW9uLCBtZXNzYWdlKTtcbiAgfVxuICBsb2dBY3Rpb24obGV2ZWwsIGFjdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmICh0aGlzLnNob3VsZExvZyhsZXZlbCkpIHtcbiAgICAgIChsZXZlbCA9PT0gMSAvKiBFcnJvciAqLyA/IHRoaXMubG9nRXJyb3JIYW5kbGVyIDogdGhpcy5sb2dIYW5kbGVyKShcIkFibHk6IFwiICsgYWN0aW9uICsgXCI6IFwiICsgbWVzc2FnZSwgbGV2ZWwpO1xuICAgIH1cbiAgfVxuICByZW5hbWVkQ2xpZW50T3B0aW9uKG9sZE5hbWUsIG5ld05hbWUpIHtcbiAgICB0aGlzLmRlcHJlY2F0aW9uV2FybmluZyhcbiAgICAgIGBUaGUgXFxgJHtvbGROYW1lfVxcYCBjbGllbnQgb3B0aW9uIGhhcyBiZWVuIHJlbmFtZWQgdG8gXFxgJHtuZXdOYW1lfVxcYC4gUGxlYXNlIHVwZGF0ZSB5b3VyIGNvZGUgdG8gdXNlIFxcYCR7bmV3TmFtZX1cXGAgaW5zdGVhZC4gXFxgJHtvbGROYW1lfVxcYCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi5gXG4gICAgKTtcbiAgfVxuICByZW5hbWVkTWV0aG9kKGNsYXNzTmFtZSwgb2xkTmFtZSwgbmV3TmFtZSkge1xuICAgIHRoaXMuZGVwcmVjYXRpb25XYXJuaW5nKFxuICAgICAgYFxcYCR7Y2xhc3NOYW1lfVxcYFxcdTIwMTlzIFxcYCR7b2xkTmFtZX1cXGAgbWV0aG9kIGhhcyBiZWVuIHJlbmFtZWQgdG8gXFxgJHtuZXdOYW1lfVxcYC4gUGxlYXNlIHVwZGF0ZSB5b3VyIGNvZGUgdG8gdXNlIFxcYCR7bmV3TmFtZX1cXGAgaW5zdGVhZC4gXFxgJHtvbGROYW1lfVxcYCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi5gXG4gICAgKTtcbiAgfVxuICBkZXByZWNhdGlvbldhcm5pbmcobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLnNob3VsZExvZygxIC8qIEVycm9yICovKSkge1xuICAgICAgdGhpcy5sb2dFcnJvckhhbmRsZXIoYEFibHk6IERlcHJlY2F0aW9uIHdhcm5pbmcgLSAke21lc3NhZ2V9YCwgMSAvKiBFcnJvciAqLyk7XG4gICAgfVxuICB9XG59O1xuX0xvZ2dlci5kZWZhdWx0TG9nTGV2ZWwgPSAxIC8qIEVycm9yICovO1xuLy8gcHVibGljIGNvbnN0YW50c1xuX0xvZ2dlci5MT0dfTk9ORSA9IDAgLyogTm9uZSAqLztcbl9Mb2dnZXIuTE9HX0VSUk9SID0gMSAvKiBFcnJvciAqLztcbl9Mb2dnZXIuTE9HX01BSk9SID0gMiAvKiBNYWpvciAqLztcbl9Mb2dnZXIuTE9HX01JTk9SID0gMyAvKiBNaW5vciAqLztcbl9Mb2dnZXIuTE9HX01JQ1JPID0gNCAvKiBNaWNybyAqLztcbi8qIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb25zICovXG4vKipcbiAqIEluIHRoZSBtb2R1bGFyIHZhcmlhbnQgb2YgdGhlIFNESywgdGhlIGBzdHJpcExvZ3NgIGVzYnVpbGQgcGx1Z2luIHN0cmlwcyBvdXQgYWxsIGNhbGxzIHRvIHRoaXMgbWV0aG9kICh3aGVuIGludm9rZWQgYXMgYExvZ2dlci5sb2dBY3Rpb24oLi4uKWApIGV4Y2VwdCB3aGVuIGNhbGxlZCB3aXRoIGxldmVsIGBMb2dnZXIuTE9HX0VSUk9SYC4gSWYgeW91IHdpc2ggZm9yIGEgbG9nIHN0YXRlbWVudCB0byBuZXZlciBiZSBzdHJpcHBlZCwgdXNlIHRoZSB7QGxpbmsgbG9nQWN0aW9uTm9TdHJpcH0gbWV0aG9kIGluc3RlYWQuXG4gKlxuICogVGhlIGFmb3JlbWVudGlvbmVkIHBsdWdpbiBleHBlY3RzIGBsZXZlbGAgdG8gYmUgYW4gZXhwcmVzc2lvbiBvZiB0aGUgZm9ybSBgTG9nZ2VyLkxPR18qYDsgdGhhdCBpcywgeW91IGNhbuKAmXQgZHluYW1pY2FsbHkgc3BlY2lmeSB0aGUgbG9nIGxldmVsLlxuICovXG5fTG9nZ2VyLmxvZ0FjdGlvbiA9IChsb2dnZXIsIGxldmVsLCBhY3Rpb24sIG1lc3NhZ2UpID0+IHtcbiAgX0xvZ2dlci5sb2dBY3Rpb25Ob1N0cmlwKGxvZ2dlciwgbGV2ZWwsIGFjdGlvbiwgbWVzc2FnZSk7XG59O1xudmFyIExvZ2dlciA9IF9Mb2dnZXI7XG52YXIgbG9nZ2VyX2RlZmF1bHQgPSBMb2dnZXI7XG5cbi8vIHNyYy9jb21tb24vbGliL3V0aWwvdXRpbHMudHNcbnZhciB1dGlsc19leHBvcnRzID0ge307XG5fX2V4cG9ydCh1dGlsc19leHBvcnRzLCB7XG4gIEZvcm1hdDogKCkgPT4gRm9ybWF0LFxuICBhbGxTYW1lOiAoKSA9PiBhbGxTYW1lLFxuICBhbGxUb0xvd2VyQ2FzZTogKCkgPT4gYWxsVG9Mb3dlckNhc2UsXG4gIGFsbFRvVXBwZXJDYXNlOiAoKSA9PiBhbGxUb1VwcGVyQ2FzZSxcbiAgYXJyQ2hvb3NlTjogKCkgPT4gYXJyQ2hvb3NlTixcbiAgYXJyRGVsZXRlVmFsdWU6ICgpID0+IGFyckRlbGV0ZVZhbHVlLFxuICBhcnJFcXVhbHM6ICgpID0+IGFyckVxdWFscyxcbiAgYXJySW50ZXJzZWN0OiAoKSA9PiBhcnJJbnRlcnNlY3QsXG4gIGFyckludGVyc2VjdE9iOiAoKSA9PiBhcnJJbnRlcnNlY3RPYixcbiAgYXJyUG9wUmFuZG9tRWxlbWVudDogKCkgPT4gYXJyUG9wUmFuZG9tRWxlbWVudCxcbiAgYXJyU3VidHJhY3Q6ICgpID0+IGFyclN1YnRyYWN0LFxuICBhcnJXaXRob3V0VmFsdWU6ICgpID0+IGFycldpdGhvdXRWYWx1ZSxcbiAgY2hlYXBSYW5kU3RyOiAoKSA9PiBjaGVhcFJhbmRTdHIsXG4gIGNvbnRhaW5zVmFsdWU6ICgpID0+IGNvbnRhaW5zVmFsdWUsXG4gIGNvcHk6ICgpID0+IGNvcHksXG4gIGNyZWF0ZU1pc3NpbmdQbHVnaW5FcnJvcjogKCkgPT4gY3JlYXRlTWlzc2luZ1BsdWdpbkVycm9yLFxuICBkYXRhU2l6ZUJ5dGVzOiAoKSA9PiBkYXRhU2l6ZUJ5dGVzLFxuICBkZWNvZGVCb2R5OiAoKSA9PiBkZWNvZGVCb2R5LFxuICBlbmNvZGVCb2R5OiAoKSA9PiBlbmNvZGVCb2R5LFxuICBlbnN1cmVBcnJheTogKCkgPT4gZW5zdXJlQXJyYXksXG4gIGZvckluT3duTm9uTnVsbFByb3BlcnRpZXM6ICgpID0+IGZvckluT3duTm9uTnVsbFByb3BlcnRpZXMsXG4gIGdldEJhY2tvZmZDb2VmZmljaWVudDogKCkgPT4gZ2V0QmFja29mZkNvZWZmaWNpZW50LFxuICBnZXRHbG9iYWxPYmplY3Q6ICgpID0+IGdldEdsb2JhbE9iamVjdCxcbiAgZ2V0Sml0dGVyQ29lZmZpY2llbnQ6ICgpID0+IGdldEppdHRlckNvZWZmaWNpZW50LFxuICBnZXRSZXRyeVRpbWU6ICgpID0+IGdldFJldHJ5VGltZSxcbiAgaW5oZXJpdHM6ICgpID0+IGluaGVyaXRzLFxuICBpbnNwZWN0Qm9keTogKCkgPT4gaW5zcGVjdEJvZHksXG4gIGluc3BlY3RFcnJvcjogKCkgPT4gaW5zcGVjdEVycm9yLFxuICBpbnRlcnNlY3Q6ICgpID0+IGludGVyc2VjdCxcbiAgaXNFbXB0eTogKCkgPT4gaXNFbXB0eSxcbiAgaXNFcnJvckluZm9PclBhcnRpYWxFcnJvckluZm86ICgpID0+IGlzRXJyb3JJbmZvT3JQYXJ0aWFsRXJyb3JJbmZvLFxuICBpc05pbDogKCkgPT4gaXNOaWwsXG4gIGlzT2JqZWN0OiAoKSA9PiBpc09iamVjdCxcbiAga2V5c0FycmF5OiAoKSA9PiBrZXlzQXJyYXksXG4gIG1hdGNoRGVyaXZlZENoYW5uZWw6ICgpID0+IG1hdGNoRGVyaXZlZENoYW5uZWwsXG4gIG1peGluOiAoKSA9PiBtaXhpbixcbiAgcGFyc2VRdWVyeVN0cmluZzogKCkgPT4gcGFyc2VRdWVyeVN0cmluZyxcbiAgcHJvdG90eXBpY2FsQ2xvbmU6ICgpID0+IHByb3RvdHlwaWNhbENsb25lLFxuICByYW5kb21TdHJpbmc6ICgpID0+IHJhbmRvbVN0cmluZyxcbiAgc2hhbGxvd0Nsb25lOiAoKSA9PiBzaGFsbG93Q2xvbmUsXG4gIHNoYWxsb3dFcXVhbHM6ICgpID0+IHNoYWxsb3dFcXVhbHMsXG4gIHRocm93TWlzc2luZ1BsdWdpbkVycm9yOiAoKSA9PiB0aHJvd01pc3NpbmdQbHVnaW5FcnJvcixcbiAgdG9CYXNlNjQ6ICgpID0+IHRvQmFzZTY0LFxuICB0b1F1ZXJ5U3RyaW5nOiAoKSA9PiB0b1F1ZXJ5U3RyaW5nLFxuICB2YWx1ZXNBcnJheTogKCkgPT4gdmFsdWVzQXJyYXksXG4gIHdoZW5Qcm9taXNlU2V0dGxlczogKCkgPT4gd2hlblByb21pc2VTZXR0bGVzLFxuICB3aXRoVGltZW91dEFzeW5jOiAoKSA9PiB3aXRoVGltZW91dEFzeW5jXG59KTtcblxuLy8gc3JjL2NvbW1vbi9saWIvdHlwZXMvZXJyb3JpbmZvLnRzXG5mdW5jdGlvbiB0b1N0cmluZyhlcnIpIHtcbiAgbGV0IHJlc3VsdCA9IFwiW1wiICsgZXJyLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChlcnIubWVzc2FnZSlcbiAgICByZXN1bHQgKz0gXCI6IFwiICsgZXJyLm1lc3NhZ2U7XG4gIGlmIChlcnIuc3RhdHVzQ29kZSlcbiAgICByZXN1bHQgKz0gXCI7IHN0YXR1c0NvZGU9XCIgKyBlcnIuc3RhdHVzQ29kZTtcbiAgaWYgKGVyci5jb2RlKVxuICAgIHJlc3VsdCArPSBcIjsgY29kZT1cIiArIGVyci5jb2RlO1xuICBpZiAoZXJyLmNhdXNlKVxuICAgIHJlc3VsdCArPSBcIjsgY2F1c2U9XCIgKyBpbnNwZWN0RXJyb3IoZXJyLmNhdXNlKTtcbiAgaWYgKGVyci5ocmVmICYmICEoZXJyLm1lc3NhZ2UgJiYgZXJyLm1lc3NhZ2UuaW5kZXhPZihcImhlbHAuYWJseS5pb1wiKSA+IC0xKSlcbiAgICByZXN1bHQgKz0gXCI7IHNlZSBcIiArIGVyci5ocmVmICsgXCIgXCI7XG4gIHJlc3VsdCArPSBcIl1cIjtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBFcnJvckluZm8gPSBjbGFzcyBfRXJyb3JJbmZvIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjb2RlLCBzdGF0dXNDb2RlLCBjYXVzZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIGlmICh0eXBlb2YgT2JqZWN0LnNldFByb3RvdHlwZU9mICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgX0Vycm9ySW5mby5wcm90b3R5cGUpO1xuICAgIH1cbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0b1N0cmluZyh0aGlzKTtcbiAgfVxuICBzdGF0aWMgZnJvbVZhbHVlcyh2YWx1ZXMpIHtcbiAgICBjb25zdCB7IG1lc3NhZ2UsIGNvZGUsIHN0YXR1c0NvZGUgfSA9IHZhbHVlcztcbiAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGNvZGUgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHN0YXR1c0NvZGUgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9ySW5mby5mcm9tVmFsdWVzKCk6IGludmFsaWQgdmFsdWVzOiBcIiArIFBsYXRmb3JtLkNvbmZpZy5pbnNwZWN0KHZhbHVlcykpO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBPYmplY3QuYXNzaWduKG5ldyBfRXJyb3JJbmZvKG1lc3NhZ2UsIGNvZGUsIHN0YXR1c0NvZGUpLCB2YWx1ZXMpO1xuICAgIGlmIChyZXN1bHQuY29kZSAmJiAhcmVzdWx0LmhyZWYpIHtcbiAgICAgIHJlc3VsdC5ocmVmID0gXCJodHRwczovL2hlbHAuYWJseS5pby9lcnJvci9cIiArIHJlc3VsdC5jb2RlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xudmFyIFBhcnRpYWxFcnJvckluZm8gPSBjbGFzcyBfUGFydGlhbEVycm9ySW5mbyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgY29kZSwgc3RhdHVzQ29kZSwgY2F1c2UpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICBpZiAodHlwZW9mIE9iamVjdC5zZXRQcm90b3R5cGVPZiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIF9QYXJ0aWFsRXJyb3JJbmZvLnByb3RvdHlwZSk7XG4gICAgfVxuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcbiAgICB0aGlzLmNhdXNlID0gY2F1c2U7XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nKHRoaXMpO1xuICB9XG4gIHN0YXRpYyBmcm9tVmFsdWVzKHZhbHVlcykge1xuICAgIGNvbnN0IHsgbWVzc2FnZSwgY29kZSwgc3RhdHVzQ29kZSB9ID0gdmFsdWVzO1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gXCJzdHJpbmdcIiB8fCAhaXNOaWwoY29kZSkgJiYgdHlwZW9mIGNvZGUgIT09IFwibnVtYmVyXCIgfHwgIWlzTmlsKHN0YXR1c0NvZGUpICYmIHR5cGVvZiBzdGF0dXNDb2RlICE9PSBcIm51bWJlclwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXJ0aWFsRXJyb3JJbmZvLmZyb21WYWx1ZXMoKTogaW52YWxpZCB2YWx1ZXM6IFwiICsgUGxhdGZvcm0uQ29uZmlnLmluc3BlY3QodmFsdWVzKSk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5hc3NpZ24obmV3IF9QYXJ0aWFsRXJyb3JJbmZvKG1lc3NhZ2UsIGNvZGUsIHN0YXR1c0NvZGUpLCB2YWx1ZXMpO1xuICAgIGlmIChyZXN1bHQuY29kZSAmJiAhcmVzdWx0LmhyZWYpIHtcbiAgICAgIHJlc3VsdC5ocmVmID0gXCJodHRwczovL2hlbHAuYWJseS5pby9lcnJvci9cIiArIHJlc3VsdC5jb2RlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuXG4vLyBzcmMvY29tbW9uL2xpYi91dGlsL3V0aWxzLnRzXG5mdW5jdGlvbiByYW5kb21Qb3NuKGFyck9yU3RyKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhcnJPclN0ci5sZW5ndGgpO1xufVxuZnVuY3Rpb24gbWl4aW4odGFyZ2V0LCAuLi5hcmdzKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHNvdXJjZSA9IGFyZ3NbaV07XG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBjb3B5KHNyYykge1xuICByZXR1cm4gbWl4aW4oe30sIHNyYyk7XG59XG5mdW5jdGlvbiBlbnN1cmVBcnJheShvYmopIHtcbiAgaWYgKGlzTmlsKG9iaikpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgcmV0dXJuIFtvYmpdO1xufVxuZnVuY3Rpb24gaXNPYmplY3Qob2IpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYikgPT0gXCJbb2JqZWN0IE9iamVjdF1cIjtcbn1cbmZ1bmN0aW9uIGlzRW1wdHkob2IpIHtcbiAgZm9yIChjb25zdCBwcm9wIGluIG9iKVxuICAgIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBpc05pbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZnVuY3Rpb24gc2hhbGxvd0Nsb25lKG9iKSB7XG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBPYmplY3QoKTtcbiAgZm9yIChjb25zdCBwcm9wIGluIG9iKVxuICAgIHJlc3VsdFtwcm9wXSA9IG9iW3Byb3BdO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcHJvdG90eXBpY2FsQ2xvbmUob2IsIG93blByb3BlcnRpZXMpIHtcbiAgY2xhc3MgRiB7XG4gIH1cbiAgRi5wcm90b3R5cGUgPSBvYjtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IEYoKTtcbiAgaWYgKG93blByb3BlcnRpZXMpXG4gICAgbWl4aW4ocmVzdWx0LCBvd25Qcm9wZXJ0aWVzKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBpbmhlcml0cyA9IGZ1bmN0aW9uKGN0b3IsIHN1cGVyQ3Rvcikge1xuICBpZiAoUGxhdGZvcm0uQ29uZmlnLmluaGVyaXRzKSB7XG4gICAgUGxhdGZvcm0uQ29uZmlnLmluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICBjdG9yLnByb3RvdHlwZSA9IHByb3RvdHlwaWNhbENsb25lKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IGN0b3IgfSk7XG59O1xuZnVuY3Rpb24gY29udGFpbnNWYWx1ZShvYiwgdmFsKSB7XG4gIGZvciAoY29uc3QgaSBpbiBvYikge1xuICAgIGlmIChvYltpXSA9PSB2YWwpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpbnRlcnNlY3QoYXJyLCBvYikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShvYikgPyBhcnJJbnRlcnNlY3QoYXJyLCBvYikgOiBhcnJJbnRlcnNlY3RPYihhcnIsIG9iKTtcbn1cbmZ1bmN0aW9uIGFyckludGVyc2VjdChhcnIxLCBhcnIyKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycjEubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBtZW1iZXIgPSBhcnIxW2ldO1xuICAgIGlmIChhcnIyLmluZGV4T2YobWVtYmVyKSAhPSAtMSlcbiAgICAgIHJlc3VsdC5wdXNoKG1lbWJlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGFyckludGVyc2VjdE9iKGFyciwgb2IpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgbWVtYmVyID0gYXJyW2ldO1xuICAgIGlmIChtZW1iZXIgaW4gb2IpXG4gICAgICByZXN1bHQucHVzaChtZW1iZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBhcnJTdWJ0cmFjdChhcnIxLCBhcnIyKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycjEubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyMVtpXTtcbiAgICBpZiAoYXJyMi5pbmRleE9mKGVsZW1lbnQpID09IC0xKVxuICAgICAgcmVzdWx0LnB1c2goZWxlbWVudCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGFyckRlbGV0ZVZhbHVlKGFyciwgdmFsKSB7XG4gIGNvbnN0IGlkeCA9IGFyci5pbmRleE9mKHZhbCk7XG4gIGNvbnN0IHJlcyA9IGlkeCAhPSAtMTtcbiAgaWYgKHJlcylcbiAgICBhcnIuc3BsaWNlKGlkeCwgMSk7XG4gIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBhcnJXaXRob3V0VmFsdWUoYXJyLCB2YWwpIHtcbiAgY29uc3QgbmV3QXJyID0gYXJyLnNsaWNlKCk7XG4gIGFyckRlbGV0ZVZhbHVlKG5ld0FyciwgdmFsKTtcbiAgcmV0dXJuIG5ld0Fycjtcbn1cbmZ1bmN0aW9uIGtleXNBcnJheShvYiwgb3duT25seSkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgZm9yIChjb25zdCBwcm9wIGluIG9iKSB7XG4gICAgaWYgKG93bk9ubHkgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYiwgcHJvcCkpXG4gICAgICBjb250aW51ZTtcbiAgICByZXN1bHQucHVzaChwcm9wKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gdmFsdWVzQXJyYXkob2IsIG93bk9ubHkpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAoY29uc3QgcHJvcCBpbiBvYikge1xuICAgIGlmIChvd25Pbmx5ICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2IsIHByb3ApKVxuICAgICAgY29udGludWU7XG4gICAgcmVzdWx0LnB1c2gob2JbcHJvcF0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBmb3JJbk93bk5vbk51bGxQcm9wZXJ0aWVzKG9iLCBmbikge1xuICBmb3IgKGNvbnN0IHByb3AgaW4gb2IpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iLCBwcm9wKSAmJiBvYltwcm9wXSkge1xuICAgICAgZm4ocHJvcCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBhbGxTYW1lKGFyciwgcHJvcCkge1xuICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IGZpcnN0ID0gYXJyWzBdW3Byb3BdO1xuICByZXR1cm4gYXJyLmV2ZXJ5KGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbVtwcm9wXSA9PT0gZmlyc3Q7XG4gIH0pO1xufVxudmFyIEZvcm1hdCA9IC8qIEBfX1BVUkVfXyAqLyAoKEZvcm1hdDIpID0+IHtcbiAgRm9ybWF0MltcIm1zZ3BhY2tcIl0gPSBcIm1zZ3BhY2tcIjtcbiAgRm9ybWF0MltcImpzb25cIl0gPSBcImpzb25cIjtcbiAgcmV0dXJuIEZvcm1hdDI7XG59KShGb3JtYXQgfHwge30pO1xuZnVuY3Rpb24gYXJyUG9wUmFuZG9tRWxlbWVudChhcnIpIHtcbiAgcmV0dXJuIGFyci5zcGxpY2UocmFuZG9tUG9zbihhcnIpLCAxKVswXTtcbn1cbmZ1bmN0aW9uIHRvUXVlcnlTdHJpbmcocGFyYW1zKSB7XG4gIGNvbnN0IHBhcnRzID0gW107XG4gIGlmIChwYXJhbXMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpXG4gICAgICBwYXJ0cy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQocGFyYW1zW2tleV0pKTtcbiAgfVxuICByZXR1cm4gcGFydHMubGVuZ3RoID8gXCI/XCIgKyBwYXJ0cy5qb2luKFwiJlwiKSA6IFwiXCI7XG59XG5mdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nKHF1ZXJ5KSB7XG4gIGxldCBtYXRjaDtcbiAgY29uc3Qgc2VhcmNoID0gLyhbXj8mPV0rKT0/KFteJl0qKS9nO1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgd2hpbGUgKG1hdGNoID0gc2VhcmNoLmV4ZWMocXVlcnkpKVxuICAgIHJlc3VsdFtkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMV0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFsyXSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBpc0Vycm9ySW5mb09yUGFydGlhbEVycm9ySW5mbyhlcnIpIHtcbiAgcmV0dXJuIHR5cGVvZiBlcnIgPT0gXCJvYmplY3RcIiAmJiBlcnIgIT09IG51bGwgJiYgKGVyciBpbnN0YW5jZW9mIEVycm9ySW5mbyB8fCBlcnIgaW5zdGFuY2VvZiBQYXJ0aWFsRXJyb3JJbmZvKTtcbn1cbmZ1bmN0aW9uIGluc3BlY3RFcnJvcihlcnIpIHtcbiAgdmFyIF9hMiwgX2I7XG4gIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvciB8fCAoKF9hMiA9IGVyciA9PSBudWxsID8gdm9pZCAwIDogZXJyLmNvbnN0cnVjdG9yKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLm5hbWUpID09PSBcIkVycm9ySW5mb1wiIHx8ICgoX2IgPSBlcnIgPT0gbnVsbCA/IHZvaWQgMCA6IGVyci5jb25zdHJ1Y3RvcikgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLm5hbWUpID09PSBcIlBhcnRpYWxFcnJvckluZm9cIilcbiAgICByZXR1cm4gZXJyLnRvU3RyaW5nKCk7XG4gIHJldHVybiBQbGF0Zm9ybS5Db25maWcuaW5zcGVjdChlcnIpO1xufVxuZnVuY3Rpb24gaW5zcGVjdEJvZHkoYm9keSkge1xuICBpZiAoUGxhdGZvcm0uQnVmZmVyVXRpbHMuaXNCdWZmZXIoYm9keSkpIHtcbiAgICByZXR1cm4gYm9keS50b1N0cmluZygpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGJvZHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFBsYXRmb3JtLkNvbmZpZy5pbnNwZWN0KGJvZHkpO1xuICB9XG59XG5mdW5jdGlvbiBkYXRhU2l6ZUJ5dGVzKGRhdGEpIHtcbiAgaWYgKFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgcmV0dXJuIFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmJ5dGVMZW5ndGgoZGF0YSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIFBsYXRmb3JtLkNvbmZpZy5zdHJpbmdCeXRlU2l6ZShkYXRhKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBpbnB1dCBvZiBVdGlscy5kYXRhU2l6ZUJ5dGVzIHRvIGJlIGEgYnVmZmVyIG9yIHN0cmluZywgYnV0IHdhczogXCIgKyB0eXBlb2YgZGF0YSk7XG59XG5mdW5jdGlvbiBjaGVhcFJhbmRTdHIoKSB7XG4gIHJldHVybiBTdHJpbmcoTWF0aC5yYW5kb20oKSkuc3Vic3RyKDIpO1xufVxudmFyIHJhbmRvbVN0cmluZyA9IGFzeW5jIChudW1CeXRlcykgPT4ge1xuICBjb25zdCBidWZmZXIgPSBhd2FpdCBQbGF0Zm9ybS5Db25maWcuZ2V0UmFuZG9tQXJyYXlCdWZmZXIobnVtQnl0ZXMpO1xuICByZXR1cm4gUGxhdGZvcm0uQnVmZmVyVXRpbHMuYmFzZTY0RW5jb2RlKGJ1ZmZlcik7XG59O1xuZnVuY3Rpb24gYXJyQ2hvb3NlTihhcnIsIG4yKSB7XG4gIGNvbnN0IG51bUl0ZW1zID0gTWF0aC5taW4objIsIGFyci5sZW5ndGgpLCBtdXRhYmxlQXJyID0gYXJyLnNsaWNlKCksIHJlc3VsdCA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUl0ZW1zOyBpKyspIHtcbiAgICByZXN1bHQucHVzaChhcnJQb3BSYW5kb21FbGVtZW50KG11dGFibGVBcnIpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gd2hlblByb21pc2VTZXR0bGVzKHByb21pc2UsIGNhbGxiYWNrKSB7XG4gIHByb21pc2UudGhlbigocmVzdWx0KSA9PiB7XG4gICAgY2FsbGJhY2sgPT0gbnVsbCA/IHZvaWQgMCA6IGNhbGxiYWNrKG51bGwsIHJlc3VsdCk7XG4gIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICBjYWxsYmFjayA9PSBudWxsID8gdm9pZCAwIDogY2FsbGJhY2soZXJyKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBkZWNvZGVCb2R5KGJvZHksIE1zZ1BhY2ssIGZvcm1hdCkge1xuICBpZiAoZm9ybWF0ID09IFwibXNncGFja1wiKSB7XG4gICAgaWYgKCFNc2dQYWNrKSB7XG4gICAgICB0aHJvd01pc3NpbmdQbHVnaW5FcnJvcihcIk1zZ1BhY2tcIik7XG4gICAgfVxuICAgIHJldHVybiBNc2dQYWNrLmRlY29kZShib2R5KTtcbiAgfVxuICByZXR1cm4gSlNPTi5wYXJzZShTdHJpbmcoYm9keSkpO1xufVxuZnVuY3Rpb24gZW5jb2RlQm9keShib2R5LCBNc2dQYWNrLCBmb3JtYXQpIHtcbiAgaWYgKGZvcm1hdCA9PSBcIm1zZ3BhY2tcIikge1xuICAgIGlmICghTXNnUGFjaykge1xuICAgICAgdGhyb3dNaXNzaW5nUGx1Z2luRXJyb3IoXCJNc2dQYWNrXCIpO1xuICAgIH1cbiAgICByZXR1cm4gTXNnUGFjay5lbmNvZGUoYm9keSwgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGJvZHkpO1xufVxuZnVuY3Rpb24gYWxsVG9Mb3dlckNhc2UoYXJyKSB7XG4gIHJldHVybiBhcnIubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50LnRvTG93ZXJDYXNlKCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gYWxsVG9VcHBlckNhc2UoYXJyKSB7XG4gIHJldHVybiBhcnIubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50LnRvVXBwZXJDYXNlKCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0QmFja29mZkNvZWZmaWNpZW50KGNvdW50KSB7XG4gIHJldHVybiBNYXRoLm1pbigoY291bnQgKyAyKSAvIDMsIDIpO1xufVxuZnVuY3Rpb24gZ2V0Sml0dGVyQ29lZmZpY2llbnQoKSB7XG4gIHJldHVybiAxIC0gTWF0aC5yYW5kb20oKSAqIDAuMjtcbn1cbmZ1bmN0aW9uIGdldFJldHJ5VGltZShpbml0aWFsVGltZW91dCwgcmV0cnlBdHRlbXB0KSB7XG4gIHJldHVybiBpbml0aWFsVGltZW91dCAqIGdldEJhY2tvZmZDb2VmZmljaWVudChyZXRyeUF0dGVtcHQpICogZ2V0Sml0dGVyQ29lZmZpY2llbnQoKTtcbn1cbmZ1bmN0aW9uIGdldEdsb2JhbE9iamVjdCgpIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gZ2xvYmFsO1xuICB9XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuICByZXR1cm4gc2VsZjtcbn1cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbHMoc291cmNlLCB0YXJnZXQpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkuZXZlcnkoKGtleSkgPT4gc291cmNlW2tleV0gPT09IHRhcmdldFtrZXldKSAmJiBPYmplY3Qua2V5cyh0YXJnZXQpLmV2ZXJ5KChrZXkpID0+IHRhcmdldFtrZXldID09PSBzb3VyY2Vba2V5XSk7XG59XG5mdW5jdGlvbiBtYXRjaERlcml2ZWRDaGFubmVsKG5hbWUpIHtcbiAgY29uc3QgcmVnZXggPSAvXihcXFsoW14/XSopKD86KC4qKSlcXF0pPyguKykkLztcbiAgY29uc3QgbWF0Y2ggPSBuYW1lLm1hdGNoKHJlZ2V4KTtcbiAgaWYgKCFtYXRjaCB8fCAhbWF0Y2gubGVuZ3RoIHx8IG1hdGNoLmxlbmd0aCA8IDUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwicmVnZXggbWF0Y2ggZmFpbGVkXCIsIDQwMCwgNDAwMTApO1xuICB9XG4gIGlmIChtYXRjaFsyXSkge1xuICAgIHRocm93IG5ldyBFcnJvckluZm8oYGNhbm5vdCB1c2UgYSBkZXJpdmVkIG9wdGlvbiB3aXRoIGEgJHttYXRjaFsyXX0gY2hhbm5lbGAsIDQwMCwgNDAwMTApO1xuICB9XG4gIHJldHVybiB7XG4gICAgcXVhbGlmaWVyUGFyYW06IG1hdGNoWzNdIHx8IFwiXCIsXG4gICAgY2hhbm5lbE5hbWU6IG1hdGNoWzRdXG4gIH07XG59XG5mdW5jdGlvbiB0b0Jhc2U2NChzdHIpIHtcbiAgY29uc3QgYnVmZmVyVXRpbHMgPSBQbGF0Zm9ybS5CdWZmZXJVdGlscztcbiAgY29uc3QgdGV4dEJ1ZmZlciA9IGJ1ZmZlclV0aWxzLnV0ZjhFbmNvZGUoc3RyKTtcbiAgcmV0dXJuIGJ1ZmZlclV0aWxzLmJhc2U2NEVuY29kZSh0ZXh0QnVmZmVyKTtcbn1cbmZ1bmN0aW9uIGFyckVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbih2YWwsIGkpIHtcbiAgICByZXR1cm4gdmFsID09PSBiW2ldO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU1pc3NpbmdQbHVnaW5FcnJvcihwbHVnaW5OYW1lKSB7XG4gIHJldHVybiBuZXcgRXJyb3JJbmZvKGAke3BsdWdpbk5hbWV9IHBsdWdpbiBub3QgcHJvdmlkZWRgLCA0MDAxOSwgNDAwKTtcbn1cbmZ1bmN0aW9uIHRocm93TWlzc2luZ1BsdWdpbkVycm9yKHBsdWdpbk5hbWUpIHtcbiAgdGhyb3cgY3JlYXRlTWlzc2luZ1BsdWdpbkVycm9yKHBsdWdpbk5hbWUpO1xufVxuYXN5bmMgZnVuY3Rpb24gd2l0aFRpbWVvdXRBc3luYyhwcm9taXNlLCB0aW1lb3V0ID0gNWUzLCBlcnIgPSBcIlRpbWVvdXQgZXhwaXJlZFwiKSB7XG4gIGNvbnN0IGUgPSBuZXcgRXJyb3JJbmZvKGVyciwgNWU0LCA1MDApO1xuICByZXR1cm4gUHJvbWlzZS5yYWNlKFtwcm9taXNlLCBuZXcgUHJvbWlzZSgoX3Jlc29sdmUsIHJlamVjdCkgPT4gc2V0VGltZW91dCgoKSA9PiByZWplY3QoZSksIHRpbWVvdXQpKV0pO1xufVxuXG4vLyBwYWNrYWdlLmpzb25cbnZhciB2ZXJzaW9uID0gXCIyLjMuMVwiO1xuXG4vLyBzcmMvY29tbW9uL2xpYi91dGlsL2RlZmF1bHRzLnRzXG52YXIgYWdlbnQgPSBcImFibHktanMvXCIgKyB2ZXJzaW9uO1xudmFyIERlZmF1bHRzID0ge1xuICBFTlZJUk9OTUVOVDogXCJcIixcbiAgUkVTVF9IT1NUOiBcInJlc3QuYWJseS5pb1wiLFxuICBSRUFMVElNRV9IT1NUOiBcInJlYWx0aW1lLmFibHkuaW9cIixcbiAgRkFMTEJBQ0tfSE9TVFM6IFtcbiAgICBcIkEuYWJseS1yZWFsdGltZS5jb21cIixcbiAgICBcIkIuYWJseS1yZWFsdGltZS5jb21cIixcbiAgICBcIkMuYWJseS1yZWFsdGltZS5jb21cIixcbiAgICBcIkQuYWJseS1yZWFsdGltZS5jb21cIixcbiAgICBcIkUuYWJseS1yZWFsdGltZS5jb21cIlxuICBdLFxuICBQT1JUOiA4MCxcbiAgVExTX1BPUlQ6IDQ0MyxcbiAgVElNRU9VVFM6IHtcbiAgICAvKiBEb2N1bWVudGVkIGFzIG9wdGlvbnMgcGFyYW1zOiAqL1xuICAgIGRpc2Nvbm5lY3RlZFJldHJ5VGltZW91dDogMTVlMyxcbiAgICBzdXNwZW5kZWRSZXRyeVRpbWVvdXQ6IDNlNCxcbiAgICAvKiBVbmRvY3VtZW50ZWQsIGJ1dCBwYXJ0IG9mIHRoZSBhcGkgYW5kIGNhbiBiZSB1c2VkIGJ5IGN1c3RvbWVyczogKi9cbiAgICBodHRwUmVxdWVzdFRpbWVvdXQ6IDFlNCxcbiAgICBodHRwTWF4UmV0cnlEdXJhdGlvbjogMTVlMyxcbiAgICBjaGFubmVsUmV0cnlUaW1lb3V0OiAxNWUzLFxuICAgIGZhbGxiYWNrUmV0cnlUaW1lb3V0OiA2ZTUsXG4gICAgLyogRm9yIGludGVybmFsIC8gdGVzdCB1c2Ugb25seTogKi9cbiAgICBjb25uZWN0aW9uU3RhdGVUdGw6IDEyZTQsXG4gICAgcmVhbHRpbWVSZXF1ZXN0VGltZW91dDogMWU0LFxuICAgIHJlY3ZUaW1lb3V0OiA5ZTQsXG4gICAgd2ViU29ja2V0Q29ubmVjdFRpbWVvdXQ6IDFlNCxcbiAgICB3ZWJTb2NrZXRTbG93VGltZW91dDogNGUzXG4gIH0sXG4gIGh0dHBNYXhSZXRyeUNvdW50OiAzLFxuICBtYXhNZXNzYWdlU2l6ZTogNjU1MzYsXG4gIHZlcnNpb24sXG4gIHByb3RvY29sVmVyc2lvbjogMyxcbiAgYWdlbnQsXG4gIGdldEhvc3QsXG4gIGdldFBvcnQsXG4gIGdldEh0dHBTY2hlbWUsXG4gIGVudmlyb25tZW50RmFsbGJhY2tIb3N0cyxcbiAgZ2V0RmFsbGJhY2tIb3N0cyxcbiAgZ2V0SG9zdHMsXG4gIGNoZWNrSG9zdCxcbiAgb2JqZWN0aWZ5T3B0aW9ucyxcbiAgbm9ybWFsaXNlT3B0aW9ucyxcbiAgZGVmYXVsdEdldEhlYWRlcnMsXG4gIGRlZmF1bHRQb3N0SGVhZGVyc1xufTtcbmZ1bmN0aW9uIGdldEhvc3Qob3B0aW9ucywgaG9zdCwgd3MpIHtcbiAgaWYgKHdzKVxuICAgIGhvc3QgPSBob3N0ID09IG9wdGlvbnMucmVzdEhvc3QgJiYgb3B0aW9ucy5yZWFsdGltZUhvc3QgfHwgaG9zdCB8fCBvcHRpb25zLnJlYWx0aW1lSG9zdDtcbiAgZWxzZVxuICAgIGhvc3QgPSBob3N0IHx8IG9wdGlvbnMucmVzdEhvc3Q7XG4gIHJldHVybiBob3N0O1xufVxuZnVuY3Rpb24gZ2V0UG9ydChvcHRpb25zLCB0bHMpIHtcbiAgcmV0dXJuIHRscyB8fCBvcHRpb25zLnRscyA/IG9wdGlvbnMudGxzUG9ydCA6IG9wdGlvbnMucG9ydDtcbn1cbmZ1bmN0aW9uIGdldEh0dHBTY2hlbWUob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy50bHMgPyBcImh0dHBzOi8vXCIgOiBcImh0dHA6Ly9cIjtcbn1cbmZ1bmN0aW9uIGVudmlyb25tZW50RmFsbGJhY2tIb3N0cyhlbnZpcm9ubWVudCkge1xuICByZXR1cm4gW1xuICAgIGVudmlyb25tZW50ICsgXCItYS1mYWxsYmFjay5hYmx5LXJlYWx0aW1lLmNvbVwiLFxuICAgIGVudmlyb25tZW50ICsgXCItYi1mYWxsYmFjay5hYmx5LXJlYWx0aW1lLmNvbVwiLFxuICAgIGVudmlyb25tZW50ICsgXCItYy1mYWxsYmFjay5hYmx5LXJlYWx0aW1lLmNvbVwiLFxuICAgIGVudmlyb25tZW50ICsgXCItZC1mYWxsYmFjay5hYmx5LXJlYWx0aW1lLmNvbVwiLFxuICAgIGVudmlyb25tZW50ICsgXCItZS1mYWxsYmFjay5hYmx5LXJlYWx0aW1lLmNvbVwiXG4gIF07XG59XG5mdW5jdGlvbiBnZXRGYWxsYmFja0hvc3RzKG9wdGlvbnMpIHtcbiAgY29uc3QgZmFsbGJhY2tIb3N0cyA9IG9wdGlvbnMuZmFsbGJhY2tIb3N0cywgaHR0cE1heFJldHJ5Q291bnQgPSB0eXBlb2Ygb3B0aW9ucy5odHRwTWF4UmV0cnlDb3VudCAhPT0gXCJ1bmRlZmluZWRcIiA/IG9wdGlvbnMuaHR0cE1heFJldHJ5Q291bnQgOiBEZWZhdWx0cy5odHRwTWF4UmV0cnlDb3VudDtcbiAgcmV0dXJuIGZhbGxiYWNrSG9zdHMgPyBhcnJDaG9vc2VOKGZhbGxiYWNrSG9zdHMsIGh0dHBNYXhSZXRyeUNvdW50KSA6IFtdO1xufVxuZnVuY3Rpb24gZ2V0SG9zdHMob3B0aW9ucywgd3MpIHtcbiAgY29uc3QgaG9zdHMgPSBbb3B0aW9ucy5yZXN0SG9zdF0uY29uY2F0KGdldEZhbGxiYWNrSG9zdHMob3B0aW9ucykpO1xuICByZXR1cm4gd3MgPyBob3N0cy5tYXAoKGhvc3QpID0+IGdldEhvc3Qob3B0aW9ucywgaG9zdCwgdHJ1ZSkpIDogaG9zdHM7XG59XG5mdW5jdGlvbiBjaGVja0hvc3QoaG9zdCkge1xuICBpZiAodHlwZW9mIGhvc3QgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwiaG9zdCBtdXN0IGJlIGEgc3RyaW5nOyB3YXMgYSBcIiArIHR5cGVvZiBob3N0LCA0ZTQsIDQwMCk7XG4gIH1cbiAgaWYgKCFob3N0Lmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvckluZm8oXCJob3N0IG11c3Qgbm90IGJlIHplcm8tbGVuZ3RoXCIsIDRlNCwgNDAwKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0UmVhbHRpbWVIb3N0KG9wdGlvbnMsIHByb2R1Y3Rpb24sIGVudmlyb25tZW50LCBsb2dnZXIpIHtcbiAgaWYgKG9wdGlvbnMucmVhbHRpbWVIb3N0KVxuICAgIHJldHVybiBvcHRpb25zLnJlYWx0aW1lSG9zdDtcbiAgaWYgKG9wdGlvbnMucmVzdEhvc3QpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICBsb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICBcIkRlZmF1bHRzLm5vcm1hbGlzZU9wdGlvbnNcIixcbiAgICAgICdyZXN0SG9zdCBpcyBzZXQgdG8gXCInICsgb3B0aW9ucy5yZXN0SG9zdCArICdcIiBidXQgcmVhbHRpbWVIb3N0IGlzIG5vdCBzZXQsIHNvIHNldHRpbmcgcmVhbHRpbWVIb3N0IHRvIFwiJyArIG9wdGlvbnMucmVzdEhvc3QgKyAnXCIgdG9vLiBJZiB0aGlzIGlzIG5vdCB3aGF0IHlvdSB3YW50LCBwbGVhc2Ugc2V0IHJlYWx0aW1lSG9zdCBleHBsaWNpdGx5LidcbiAgICApO1xuICAgIHJldHVybiBvcHRpb25zLnJlc3RIb3N0O1xuICB9XG4gIHJldHVybiBwcm9kdWN0aW9uID8gRGVmYXVsdHMuUkVBTFRJTUVfSE9TVCA6IGVudmlyb25tZW50ICsgXCItXCIgKyBEZWZhdWx0cy5SRUFMVElNRV9IT1NUO1xufVxuZnVuY3Rpb24gZ2V0VGltZW91dHMob3B0aW9ucykge1xuICBjb25zdCB0aW1lb3V0cyA9IHt9O1xuICBmb3IgKGNvbnN0IHByb3AgaW4gRGVmYXVsdHMuVElNRU9VVFMpIHtcbiAgICB0aW1lb3V0c1twcm9wXSA9IG9wdGlvbnNbcHJvcF0gfHwgRGVmYXVsdHMuVElNRU9VVFNbcHJvcF07XG4gIH1cbiAgcmV0dXJuIHRpbWVvdXRzO1xufVxuZnVuY3Rpb24gZ2V0QWdlbnRTdHJpbmcob3B0aW9ucykge1xuICBsZXQgYWdlbnRTdHIgPSBEZWZhdWx0cy5hZ2VudDtcbiAgaWYgKG9wdGlvbnMuYWdlbnRzKSB7XG4gICAgZm9yICh2YXIgYWdlbnQyIGluIG9wdGlvbnMuYWdlbnRzKSB7XG4gICAgICBhZ2VudFN0ciArPSBcIiBcIiArIGFnZW50MiArIFwiL1wiICsgb3B0aW9ucy5hZ2VudHNbYWdlbnQyXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFnZW50U3RyO1xufVxuZnVuY3Rpb24gb2JqZWN0aWZ5T3B0aW9ucyhvcHRpb25zLCBhbGxvd0tleU9yVG9rZW4sIHNvdXJjZUZvckVycm9yTWVzc2FnZSwgbG9nZ2VyLCBtb2R1bGFyUGx1Z2luc1RvSW5jbHVkZSkge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgY29uc3QgbXNnID0gYWxsb3dLZXlPclRva2VuID8gYCR7c291cmNlRm9yRXJyb3JNZXNzYWdlfSBtdXN0IGJlIGluaXRpYWxpemVkIHdpdGggZWl0aGVyIGEgY2xpZW50IG9wdGlvbnMgb2JqZWN0LCBhbiBBYmx5IEFQSSBrZXksIG9yIGFuIEFibHkgVG9rZW5gIDogYCR7c291cmNlRm9yRXJyb3JNZXNzYWdlfSBtdXN0IGJlIGluaXRpYWxpemVkIHdpdGggYSBjbGllbnQgb3B0aW9ucyBvYmplY3RgO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUiwgYCR7c291cmNlRm9yRXJyb3JNZXNzYWdlfSgpYCwgbXNnKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgfVxuICBsZXQgb3B0aW9uc09iajtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKG9wdGlvbnMuaW5kZXhPZihcIjpcIikgPT0gLTEpIHtcbiAgICAgIGlmICghYWxsb3dLZXlPclRva2VuKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGAke3NvdXJjZUZvckVycm9yTWVzc2FnZX0gY2Fubm90IGJlIGluaXRpYWxpemVkIHdpdGgganVzdCBhbiBBYmx5IFRva2VuOyB5b3UgbXVzdCBwcm92aWRlIGEgY2xpZW50IG9wdGlvbnMgb2JqZWN0IHdpdGggYSBcXGBwbHVnaW5zXFxgIHByb3BlcnR5LiAoU2V0IHRoaXMgQWJseSBUb2tlbiBhcyB0aGUgb2JqZWN0XFx1MjAxOXMgXFxgdG9rZW5cXGAgcHJvcGVydHkuKWA7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUiwgYCR7c291cmNlRm9yRXJyb3JNZXNzYWdlfSgpYCwgbXNnKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zT2JqID0geyB0b2tlbjogb3B0aW9ucyB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWFsbG93S2V5T3JUb2tlbikge1xuICAgICAgICBjb25zdCBtc2cgPSBgJHtzb3VyY2VGb3JFcnJvck1lc3NhZ2V9IGNhbm5vdCBiZSBpbml0aWFsaXplZCB3aXRoIGp1c3QgYW4gQWJseSBBUEkga2V5OyB5b3UgbXVzdCBwcm92aWRlIGEgY2xpZW50IG9wdGlvbnMgb2JqZWN0IHdpdGggYSBcXGBwbHVnaW5zXFxgIHByb3BlcnR5LiAoU2V0IHRoaXMgQWJseSBBUEkga2V5IGFzIHRoZSBvYmplY3RcXHUyMDE5cyBcXGBrZXlcXGAgcHJvcGVydHkuKWA7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUiwgYCR7c291cmNlRm9yRXJyb3JNZXNzYWdlfSgpYCwgbXNnKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zT2JqID0geyBrZXk6IG9wdGlvbnMgfTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb3B0aW9uc09iaiA9IG9wdGlvbnM7XG4gIH1cbiAgaWYgKG1vZHVsYXJQbHVnaW5zVG9JbmNsdWRlKSB7XG4gICAgb3B0aW9uc09iaiA9IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG9wdGlvbnNPYmopLCB7IHBsdWdpbnM6IF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHt9LCBtb2R1bGFyUGx1Z2luc1RvSW5jbHVkZSksIG9wdGlvbnNPYmoucGx1Z2lucykgfSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNPYmo7XG59XG5mdW5jdGlvbiBub3JtYWxpc2VPcHRpb25zKG9wdGlvbnMsIE1zZ1BhY2ssIGxvZ2dlcikge1xuICBjb25zdCBsb2dnZXJUb1VzZSA9IGxvZ2dlciAhPSBudWxsID8gbG9nZ2VyIDogbG9nZ2VyX2RlZmF1bHQuZGVmYXVsdExvZ2dlcjtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLnJlY292ZXIgPT09IFwiZnVuY3Rpb25cIiAmJiBvcHRpb25zLmNsb3NlT25VbmxvYWQgPT09IHRydWUpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICBsb2dnZXJUb1VzZSxcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUixcbiAgICAgIFwiRGVmYXVsdHMubm9ybWFsaXNlT3B0aW9uc1wiLFxuICAgICAgXCJjbG9zZU9uVW5sb2FkIHdhcyB0cnVlIGFuZCBhIHNlc3Npb24gcmVjb3ZlcnkgZnVuY3Rpb24gd2FzIHNldCAtIHRoZXNlIGFyZSBtdXR1YWxseSBleGNsdXNpdmUsIHNvIHVuc2V0dGluZyB0aGUgbGF0dGVyXCJcbiAgICApO1xuICAgIG9wdGlvbnMucmVjb3ZlciA9IHZvaWQgMDtcbiAgfVxuICBpZiAoIShcImNsb3NlT25VbmxvYWRcIiBpbiBvcHRpb25zKSkge1xuICAgIG9wdGlvbnMuY2xvc2VPblVubG9hZCA9ICFvcHRpb25zLnJlY292ZXI7XG4gIH1cbiAgaWYgKCEoXCJxdWV1ZU1lc3NhZ2VzXCIgaW4gb3B0aW9ucykpXG4gICAgb3B0aW9ucy5xdWV1ZU1lc3NhZ2VzID0gdHJ1ZTtcbiAgY29uc3QgZW52aXJvbm1lbnQgPSBvcHRpb25zLmVudmlyb25tZW50ICYmIFN0cmluZyhvcHRpb25zLmVudmlyb25tZW50KS50b0xvd2VyQ2FzZSgpIHx8IERlZmF1bHRzLkVOVklST05NRU5UO1xuICBjb25zdCBwcm9kdWN0aW9uID0gIWVudmlyb25tZW50IHx8IGVudmlyb25tZW50ID09PSBcInByb2R1Y3Rpb25cIjtcbiAgaWYgKCFvcHRpb25zLmZhbGxiYWNrSG9zdHMgJiYgIW9wdGlvbnMucmVzdEhvc3QgJiYgIW9wdGlvbnMucmVhbHRpbWVIb3N0ICYmICFvcHRpb25zLnBvcnQgJiYgIW9wdGlvbnMudGxzUG9ydCkge1xuICAgIG9wdGlvbnMuZmFsbGJhY2tIb3N0cyA9IHByb2R1Y3Rpb24gPyBEZWZhdWx0cy5GQUxMQkFDS19IT1NUUyA6IGVudmlyb25tZW50RmFsbGJhY2tIb3N0cyhlbnZpcm9ubWVudCk7XG4gIH1cbiAgY29uc3QgcmVzdEhvc3QgPSBvcHRpb25zLnJlc3RIb3N0IHx8IChwcm9kdWN0aW9uID8gRGVmYXVsdHMuUkVTVF9IT1NUIDogZW52aXJvbm1lbnQgKyBcIi1cIiArIERlZmF1bHRzLlJFU1RfSE9TVCk7XG4gIGNvbnN0IHJlYWx0aW1lSG9zdCA9IGdldFJlYWx0aW1lSG9zdChvcHRpb25zLCBwcm9kdWN0aW9uLCBlbnZpcm9ubWVudCwgbG9nZ2VyVG9Vc2UpO1xuICAob3B0aW9ucy5mYWxsYmFja0hvc3RzIHx8IFtdKS5jb25jYXQocmVzdEhvc3QsIHJlYWx0aW1lSG9zdCkuZm9yRWFjaChjaGVja0hvc3QpO1xuICBvcHRpb25zLnBvcnQgPSBvcHRpb25zLnBvcnQgfHwgRGVmYXVsdHMuUE9SVDtcbiAgb3B0aW9ucy50bHNQb3J0ID0gb3B0aW9ucy50bHNQb3J0IHx8IERlZmF1bHRzLlRMU19QT1JUO1xuICBpZiAoIShcInRsc1wiIGluIG9wdGlvbnMpKVxuICAgIG9wdGlvbnMudGxzID0gdHJ1ZTtcbiAgY29uc3QgdGltZW91dHMgPSBnZXRUaW1lb3V0cyhvcHRpb25zKTtcbiAgaWYgKE1zZ1BhY2spIHtcbiAgICBpZiAoXCJ1c2VCaW5hcnlQcm90b2NvbFwiIGluIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPSBQbGF0Zm9ybS5Db25maWcuc3VwcG9ydHNCaW5hcnkgJiYgb3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA9IFBsYXRmb3JtLkNvbmZpZy5wcmVmZXJCaW5hcnk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPSBmYWxzZTtcbiAgfVxuICBjb25zdCBoZWFkZXJzID0ge307XG4gIGlmIChvcHRpb25zLmNsaWVudElkKSB7XG4gICAgaGVhZGVyc1tcIlgtQWJseS1DbGllbnRJZFwiXSA9IFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmJhc2U2NEVuY29kZShQbGF0Zm9ybS5CdWZmZXJVdGlscy51dGY4RW5jb2RlKG9wdGlvbnMuY2xpZW50SWQpKTtcbiAgfVxuICBpZiAoIShcImlkZW1wb3RlbnRSZXN0UHVibGlzaGluZ1wiIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5pZGVtcG90ZW50UmVzdFB1Ymxpc2hpbmcgPSB0cnVlO1xuICB9XG4gIGxldCBjb25uZWN0aXZpdHlDaGVja1BhcmFtcyA9IG51bGw7XG4gIGxldCBjb25uZWN0aXZpdHlDaGVja1VybCA9IG9wdGlvbnMuY29ubmVjdGl2aXR5Q2hlY2tVcmw7XG4gIGlmIChvcHRpb25zLmNvbm5lY3Rpdml0eUNoZWNrVXJsKSB7XG4gICAgbGV0IFt1cmksIHFzXSA9IG9wdGlvbnMuY29ubmVjdGl2aXR5Q2hlY2tVcmwuc3BsaXQoXCI/XCIpO1xuICAgIGNvbm5lY3Rpdml0eUNoZWNrUGFyYW1zID0gcXMgPyBwYXJzZVF1ZXJ5U3RyaW5nKHFzKSA6IHt9O1xuICAgIGlmICh1cmkuaW5kZXhPZihcIjovL1wiKSA9PT0gLTEpIHtcbiAgICAgIHVyaSA9IFwiaHR0cHM6Ly9cIiArIHVyaTtcbiAgICB9XG4gICAgY29ubmVjdGl2aXR5Q2hlY2tVcmwgPSB1cmk7XG4gIH1cbiAgcmV0dXJuIF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG9wdGlvbnMpLCB7XG4gICAgcmVhbHRpbWVIb3N0LFxuICAgIHJlc3RIb3N0LFxuICAgIG1heE1lc3NhZ2VTaXplOiBvcHRpb25zLm1heE1lc3NhZ2VTaXplIHx8IERlZmF1bHRzLm1heE1lc3NhZ2VTaXplLFxuICAgIHRpbWVvdXRzLFxuICAgIGNvbm5lY3Rpdml0eUNoZWNrUGFyYW1zLFxuICAgIGNvbm5lY3Rpdml0eUNoZWNrVXJsLFxuICAgIGhlYWRlcnNcbiAgfSk7XG59XG5mdW5jdGlvbiBub3JtYWxpc2VDaGFubmVsT3B0aW9ucyhDcnlwdG8yLCBsb2dnZXIsIG9wdGlvbnMpIHtcbiAgY29uc3QgY2hhbm5lbE9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAoY2hhbm5lbE9wdGlvbnMuY2lwaGVyKSB7XG4gICAgaWYgKCFDcnlwdG8yKVxuICAgICAgdGhyb3dNaXNzaW5nUGx1Z2luRXJyb3IoXCJDcnlwdG9cIik7XG4gICAgY29uc3QgY2lwaGVyID0gQ3J5cHRvMi5nZXRDaXBoZXIoY2hhbm5lbE9wdGlvbnMuY2lwaGVyLCBsb2dnZXIpO1xuICAgIGNoYW5uZWxPcHRpb25zLmNpcGhlciA9IGNpcGhlci5jaXBoZXJQYXJhbXM7XG4gICAgY2hhbm5lbE9wdGlvbnMuY2hhbm5lbENpcGhlciA9IGNpcGhlci5jaXBoZXI7XG4gIH0gZWxzZSBpZiAoXCJjaXBoZXJcIiBpbiBjaGFubmVsT3B0aW9ucykge1xuICAgIGNoYW5uZWxPcHRpb25zLmNpcGhlciA9IHZvaWQgMDtcbiAgICBjaGFubmVsT3B0aW9ucy5jaGFubmVsQ2lwaGVyID0gbnVsbDtcbiAgfVxuICByZXR1cm4gY2hhbm5lbE9wdGlvbnM7XG59XG52YXIgY29udGVudFR5cGVzID0ge1xuICBqc29uOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgeG1sOiBcImFwcGxpY2F0aW9uL3htbFwiLFxuICBodG1sOiBcInRleHQvaHRtbFwiLFxuICBtc2dwYWNrOiBcImFwcGxpY2F0aW9uL3gtbXNncGFja1wiLFxuICB0ZXh0OiBcInRleHQvcGxhaW5cIlxufTtcbnZhciBkZWZhdWx0SGVhZGVyc09wdGlvbnMgPSB7XG4gIGZvcm1hdDogXCJqc29uXCIgLyoganNvbiAqLyxcbiAgcHJvdG9jb2xWZXJzaW9uOiBEZWZhdWx0cy5wcm90b2NvbFZlcnNpb25cbn07XG5mdW5jdGlvbiBkZWZhdWx0R2V0SGVhZGVycyhvcHRpb25zLCB7XG4gIGZvcm1hdCA9IGRlZmF1bHRIZWFkZXJzT3B0aW9ucy5mb3JtYXQsXG4gIHByb3RvY29sVmVyc2lvbiA9IGRlZmF1bHRIZWFkZXJzT3B0aW9ucy5wcm90b2NvbFZlcnNpb25cbn0gPSB7fSkge1xuICBjb25zdCBhY2NlcHQgPSBjb250ZW50VHlwZXNbZm9ybWF0XTtcbiAgcmV0dXJuIHtcbiAgICBhY2NlcHQsXG4gICAgXCJYLUFibHktVmVyc2lvblwiOiBwcm90b2NvbFZlcnNpb24udG9TdHJpbmcoKSxcbiAgICBcIkFibHktQWdlbnRcIjogZ2V0QWdlbnRTdHJpbmcob3B0aW9ucylcbiAgfTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRQb3N0SGVhZGVycyhvcHRpb25zLCB7XG4gIGZvcm1hdCA9IGRlZmF1bHRIZWFkZXJzT3B0aW9ucy5mb3JtYXQsXG4gIHByb3RvY29sVmVyc2lvbiA9IGRlZmF1bHRIZWFkZXJzT3B0aW9ucy5wcm90b2NvbFZlcnNpb25cbn0gPSB7fSkge1xuICBsZXQgY29udGVudFR5cGU7XG4gIGNvbnN0IGFjY2VwdCA9IGNvbnRlbnRUeXBlID0gY29udGVudFR5cGVzW2Zvcm1hdF07XG4gIHJldHVybiB7XG4gICAgYWNjZXB0LFxuICAgIFwiY29udGVudC10eXBlXCI6IGNvbnRlbnRUeXBlLFxuICAgIFwiWC1BYmx5LVZlcnNpb25cIjogcHJvdG9jb2xWZXJzaW9uLnRvU3RyaW5nKCksXG4gICAgXCJBYmx5LUFnZW50XCI6IGdldEFnZW50U3RyaW5nKG9wdGlvbnMpXG4gIH07XG59XG52YXIgZGVmYXVsdHNfZGVmYXVsdCA9IERlZmF1bHRzO1xuZnVuY3Rpb24gZ2V0RGVmYXVsdHMocGxhdGZvcm1EZWZhdWx0cykge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihEZWZhdWx0cywgcGxhdGZvcm1EZWZhdWx0cyk7XG59XG5cbi8vIHNyYy9jb21tb24vbGliL3V0aWwvbXVsdGljYXN0ZXIudHNcbnZhciBNdWx0aWNhc3RlciA9IGNsYXNzIF9NdWx0aWNhc3RlciB7XG4gIC8vIFByaXZhdGUgY29uc3RydWN0b3I7IHVzZSBzdGF0aWMgTXVsdGljYXN0ZXIuY3JlYXRlIGluc3RlYWRcbiAgY29uc3RydWN0b3IobG9nZ2VyLCBtZW1iZXJzKSB7XG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgdGhpcy5tZW1iZXJzID0gbWVtYmVycyB8fCBbXTtcbiAgfVxuICBjYWxsKGVyciwgcmVzdWx0KSB7XG4gICAgZm9yIChjb25zdCBtZW1iZXIgb2YgdGhpcy5tZW1iZXJzKSB7XG4gICAgICBpZiAobWVtYmVyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbWVtYmVyKGVyciwgcmVzdWx0KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICAgICAgXCJNdWx0aWNhc3RlciBtdWx0aXBsZSBjYWxsYmFjayBoYW5kbGVyXCIsXG4gICAgICAgICAgICBcIlVuZXhwZWN0ZWQgZXhjZXB0aW9uOiBcIiArIGUgKyBcIjsgc3RhY2sgPSBcIiArIGUuc3RhY2tcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHB1c2goLi4uYXJncykge1xuICAgIHRoaXMubWVtYmVycy5wdXNoKC4uLmFyZ3MpO1xuICB9XG4gIGNyZWF0ZVByb21pc2UoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMucHVzaCgoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICByZXNvbHZlQWxsKHJlc3VsdCkge1xuICAgIHRoaXMuY2FsbChudWxsLCByZXN1bHQpO1xuICB9XG4gIHJlamVjdEFsbChlcnIpIHtcbiAgICB0aGlzLmNhbGwoZXJyKTtcbiAgfVxuICBzdGF0aWMgY3JlYXRlKGxvZ2dlciwgbWVtYmVycykge1xuICAgIGNvbnN0IGluc3RhbmNlID0gbmV3IF9NdWx0aWNhc3Rlcihsb2dnZXIsIG1lbWJlcnMpO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKChlcnIsIHJlc3VsdCkgPT4gaW5zdGFuY2UuY2FsbChlcnIsIHJlc3VsdCksIHtcbiAgICAgIHB1c2g6IChmbikgPT4gaW5zdGFuY2UucHVzaChmbiksXG4gICAgICBjcmVhdGVQcm9taXNlOiAoKSA9PiBpbnN0YW5jZS5jcmVhdGVQcm9taXNlKCksXG4gICAgICByZXNvbHZlQWxsOiAocmVzdWx0KSA9PiBpbnN0YW5jZS5yZXNvbHZlQWxsKHJlc3VsdCksXG4gICAgICByZWplY3RBbGw6IChlcnIpID0+IGluc3RhbmNlLnJlamVjdEFsbChlcnIpXG4gICAgfSk7XG4gIH1cbn07XG52YXIgbXVsdGljYXN0ZXJfZGVmYXVsdCA9IE11bHRpY2FzdGVyO1xuXG4vLyBzcmMvY29tbW9uL2NvbnN0YW50cy9IdHRwTWV0aG9kcy50c1xudmFyIEh0dHBNZXRob2RzID0gLyogQF9fUFVSRV9fICovICgoSHR0cE1ldGhvZHMyKSA9PiB7XG4gIEh0dHBNZXRob2RzMltcIkdldFwiXSA9IFwiZ2V0XCI7XG4gIEh0dHBNZXRob2RzMltcIkRlbGV0ZVwiXSA9IFwiZGVsZXRlXCI7XG4gIEh0dHBNZXRob2RzMltcIlBvc3RcIl0gPSBcInBvc3RcIjtcbiAgSHR0cE1ldGhvZHMyW1wiUHV0XCJdID0gXCJwdXRcIjtcbiAgSHR0cE1ldGhvZHMyW1wiUGF0Y2hcIl0gPSBcInBhdGNoXCI7XG4gIHJldHVybiBIdHRwTWV0aG9kczI7XG59KShIdHRwTWV0aG9kcyB8fCB7fSk7XG52YXIgSHR0cE1ldGhvZHNfZGVmYXVsdCA9IEh0dHBNZXRob2RzO1xuXG4vLyBzcmMvY29tbW9uL2NvbnN0YW50cy9IdHRwU3RhdHVzQ29kZXMudHNcbnZhciBIdHRwU3RhdHVzQ29kZXMgPSAvKiBAX19QVVJFX18gKi8gKChIdHRwU3RhdHVzQ29kZXMyKSA9PiB7XG4gIEh0dHBTdGF0dXNDb2RlczJbSHR0cFN0YXR1c0NvZGVzMltcIlN1Y2Nlc3NcIl0gPSAyMDBdID0gXCJTdWNjZXNzXCI7XG4gIEh0dHBTdGF0dXNDb2RlczJbSHR0cFN0YXR1c0NvZGVzMltcIk5vQ29udGVudFwiXSA9IDIwNF0gPSBcIk5vQ29udGVudFwiO1xuICBIdHRwU3RhdHVzQ29kZXMyW0h0dHBTdGF0dXNDb2RlczJbXCJCYWRSZXF1ZXN0XCJdID0gNDAwXSA9IFwiQmFkUmVxdWVzdFwiO1xuICBIdHRwU3RhdHVzQ29kZXMyW0h0dHBTdGF0dXNDb2RlczJbXCJVbmF1dGhvcml6ZWRcIl0gPSA0MDFdID0gXCJVbmF1dGhvcml6ZWRcIjtcbiAgSHR0cFN0YXR1c0NvZGVzMltIdHRwU3RhdHVzQ29kZXMyW1wiRm9yYmlkZGVuXCJdID0gNDAzXSA9IFwiRm9yYmlkZGVuXCI7XG4gIEh0dHBTdGF0dXNDb2RlczJbSHR0cFN0YXR1c0NvZGVzMltcIlJlcXVlc3RUaW1lb3V0XCJdID0gNDA4XSA9IFwiUmVxdWVzdFRpbWVvdXRcIjtcbiAgSHR0cFN0YXR1c0NvZGVzMltIdHRwU3RhdHVzQ29kZXMyW1wiSW50ZXJuYWxTZXJ2ZXJFcnJvclwiXSA9IDUwMF0gPSBcIkludGVybmFsU2VydmVyRXJyb3JcIjtcbiAgcmV0dXJuIEh0dHBTdGF0dXNDb2RlczI7XG59KShIdHRwU3RhdHVzQ29kZXMgfHwge30pO1xuZnVuY3Rpb24gaXNTdWNjZXNzQ29kZShzdGF0dXNDb2RlKSB7XG4gIHJldHVybiBzdGF0dXNDb2RlID49IDIwMCAvKiBTdWNjZXNzICovICYmIHN0YXR1c0NvZGUgPCA0MDAgLyogQmFkUmVxdWVzdCAqLztcbn1cbnZhciBIdHRwU3RhdHVzQ29kZXNfZGVmYXVsdCA9IEh0dHBTdGF0dXNDb2RlcztcblxuLy8gc3JjL2NvbW1vbi9saWIvY2xpZW50L2F1dGgudHNcbnZhciBNQVhfVE9LRU5fTEVOR1RIID0gTWF0aC5wb3coMiwgMTcpO1xuZnVuY3Rpb24gcmFuZG9tKCkge1xuICByZXR1cm4gKFwiMDAwMDAwXCIgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxZTE2KSkuc2xpY2UoLTE2KTtcbn1cbmZ1bmN0aW9uIGlzUmVhbHRpbWUoY2xpZW50KSB7XG4gIHJldHVybiAhIWNsaWVudC5jb25uZWN0aW9uO1xufVxuZnVuY3Rpb24gbm9ybWFsaXNlQXV0aGNhbGxiYWNrRXJyb3IoZXJyKSB7XG4gIGlmICghaXNFcnJvckluZm9PclBhcnRpYWxFcnJvckluZm8oZXJyKSkge1xuICAgIHJldHVybiBuZXcgRXJyb3JJbmZvKGluc3BlY3RFcnJvcihlcnIpLCBlcnIuY29kZSB8fCA0MDE3MCwgZXJyLnN0YXR1c0NvZGUgfHwgNDAxKTtcbiAgfVxuICBpZiAoIWVyci5jb2RlKSB7XG4gICAgaWYgKGVyci5zdGF0dXNDb2RlID09PSA0MDMpIHtcbiAgICAgIGVyci5jb2RlID0gNDAzMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVyci5jb2RlID0gNDAxNzA7XG4gICAgICBlcnIuc3RhdHVzQ29kZSA9IDQwMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGVycjtcbn1cbnZhciBobWFjID0gKHRleHQsIGtleSkgPT4ge1xuICBjb25zdCBidWZmZXJVdGlscyA9IFBsYXRmb3JtLkJ1ZmZlclV0aWxzO1xuICBjb25zdCB0ZXh0QnVmZmVyID0gYnVmZmVyVXRpbHMudXRmOEVuY29kZSh0ZXh0KTtcbiAgY29uc3Qga2V5QnVmZmVyID0gYnVmZmVyVXRpbHMudXRmOEVuY29kZShrZXkpO1xuICBjb25zdCBkaWdlc3QgPSBidWZmZXJVdGlscy5obWFjU2hhMjU2KHRleHRCdWZmZXIsIGtleUJ1ZmZlcik7XG4gIHJldHVybiBidWZmZXJVdGlscy5iYXNlNjRFbmNvZGUoZGlnZXN0KTtcbn07XG5mdW5jdGlvbiBjMTRuKGNhcGFiaWxpdHkpIHtcbiAgaWYgKCFjYXBhYmlsaXR5KVxuICAgIHJldHVybiBcIlwiO1xuICBpZiAodHlwZW9mIGNhcGFiaWxpdHkgPT0gXCJzdHJpbmdcIilcbiAgICBjYXBhYmlsaXR5ID0gSlNPTi5wYXJzZShjYXBhYmlsaXR5KTtcbiAgY29uc3QgYzE0bkNhcGFiaWxpdHkgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3Qga2V5cyA9IGtleXNBcnJheShjYXBhYmlsaXR5LCB0cnVlKTtcbiAgaWYgKCFrZXlzKVxuICAgIHJldHVybiBcIlwiO1xuICBrZXlzLnNvcnQoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgYzE0bkNhcGFiaWxpdHlba2V5c1tpXV0gPSBjYXBhYmlsaXR5W2tleXNbaV1dLnNvcnQoKTtcbiAgfVxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYzE0bkNhcGFiaWxpdHkpO1xufVxuZnVuY3Rpb24gbG9nQW5kVmFsaWRhdGVUb2tlbkF1dGhNZXRob2QoYXV0aE9wdGlvbnMsIGxvZ2dlcikge1xuICBpZiAoYXV0aE9wdGlvbnMuYXV0aENhbGxiYWNrKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKGxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIkF1dGgoKVwiLCBcInVzaW5nIHRva2VuIGF1dGggd2l0aCBhdXRoQ2FsbGJhY2tcIik7XG4gIH0gZWxzZSBpZiAoYXV0aE9wdGlvbnMuYXV0aFVybCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJBdXRoKClcIiwgXCJ1c2luZyB0b2tlbiBhdXRoIHdpdGggYXV0aFVybFwiKTtcbiAgfSBlbHNlIGlmIChhdXRoT3B0aW9ucy5rZXkpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQXV0aCgpXCIsIFwidXNpbmcgdG9rZW4gYXV0aCB3aXRoIGNsaWVudC1zaWRlIHNpZ25pbmdcIik7XG4gIH0gZWxzZSBpZiAoYXV0aE9wdGlvbnMudG9rZW5EZXRhaWxzKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKGxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIkF1dGgoKVwiLCBcInVzaW5nIHRva2VuIGF1dGggd2l0aCBzdXBwbGllZCB0b2tlbiBvbmx5XCIpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG1zZyA9IFwiYXV0aE9wdGlvbnMgbXVzdCBpbmNsdWRlIHZhbGlkIGF1dGhlbnRpY2F0aW9uIHBhcmFtZXRlcnNcIjtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwiQXV0aCgpXCIsIG1zZyk7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGJhc2ljQXV0aEZvcmNlZChvcHRpb25zKSB7XG4gIHJldHVybiBcInVzZVRva2VuQXV0aFwiIGluIG9wdGlvbnMgJiYgIW9wdGlvbnMudXNlVG9rZW5BdXRoO1xufVxuZnVuY3Rpb24gdXNlVG9rZW5BdXRoKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMudXNlVG9rZW5BdXRoIHx8ICFiYXNpY0F1dGhGb3JjZWQob3B0aW9ucykgJiYgKG9wdGlvbnMuYXV0aENhbGxiYWNrIHx8IG9wdGlvbnMuYXV0aFVybCB8fCBvcHRpb25zLnRva2VuIHx8IG9wdGlvbnMudG9rZW5EZXRhaWxzKTtcbn1cbmZ1bmN0aW9uIG5vV2F5VG9SZW5ldyhvcHRpb25zKSB7XG4gIHJldHVybiAhb3B0aW9ucy5rZXkgJiYgIW9wdGlvbnMuYXV0aENhbGxiYWNrICYmICFvcHRpb25zLmF1dGhVcmw7XG59XG52YXIgdHJJZCA9IDA7XG5mdW5jdGlvbiBnZXRUb2tlblJlcXVlc3RJZCgpIHtcbiAgcmV0dXJuIHRySWQrKztcbn1cbnZhciBBdXRoID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIG9wdGlvbnMpIHtcbiAgICAvLyBUaGlzIGluaXRpYWxpemF0aW9uIGlzIGFsd2F5cyBvdmVyd3JpdHRlbiBhbmQgb25seSB1c2VkIHRvIHByZXZlbnQgYSBUeXBlU2NyaXB0IGNvbXBpbGVyIGVycm9yXG4gICAgdGhpcy5hdXRoT3B0aW9ucyA9IHt9O1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMudG9rZW5QYXJhbXMgPSBvcHRpb25zLmRlZmF1bHRUb2tlblBhcmFtcyB8fCB7fTtcbiAgICB0aGlzLmN1cnJlbnRUb2tlblJlcXVlc3RJZCA9IG51bGw7XG4gICAgdGhpcy53YWl0aW5nRm9yVG9rZW5SZXF1ZXN0ID0gbnVsbDtcbiAgICBpZiAodXNlVG9rZW5BdXRoKG9wdGlvbnMpKSB7XG4gICAgICBpZiAobm9XYXlUb1JlbmV3KG9wdGlvbnMpKSB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgICAgXCJBdXRoKClcIixcbiAgICAgICAgICBcIldhcm5pbmc6IGxpYnJhcnkgaW5pdGlhbGl6ZWQgd2l0aCBhIHRva2VuIGxpdGVyYWwgd2l0aG91dCBhbnkgd2F5IHRvIHJlbmV3IHRoZSB0b2tlbiB3aGVuIGl0IGV4cGlyZXMgKG5vIGF1dGhVcmwsIGF1dGhDYWxsYmFjaywgb3Iga2V5KS4gU2VlIGh0dHBzOi8vaGVscC5hYmx5LmlvL2Vycm9yLzQwMTcxIGZvciBoZWxwXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3NhdmVUb2tlbk9wdGlvbnMob3B0aW9ucy5kZWZhdWx0VG9rZW5QYXJhbXMsIG9wdGlvbnMpO1xuICAgICAgbG9nQW5kVmFsaWRhdGVUb2tlbkF1dGhNZXRob2QodGhpcy5hdXRoT3B0aW9ucywgdGhpcy5sb2dnZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIW9wdGlvbnMua2V5KSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IFwiTm8gYXV0aGVudGljYXRpb24gb3B0aW9ucyBwcm92aWRlZDsgbmVlZCBvbmUgb2Y6IGtleSwgYXV0aFVybCwgb3IgYXV0aENhbGxiYWNrIChvciBmb3IgdGVzdGluZyBvbmx5LCB0b2tlbiBvciB0b2tlbkRldGFpbHMpXCI7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLCBcIkF1dGgoKVwiLCBtc2cpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKG1zZywgNDAxNjAsIDQwMSk7XG4gICAgICB9XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJBdXRoKClcIiwgXCJhbm9ueW1vdXMsIHVzaW5nIGJhc2ljIGF1dGhcIik7XG4gICAgICB0aGlzLl9zYXZlQmFzaWNPcHRpb25zKG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuICBnZXQgbG9nZ2VyKCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5sb2dnZXI7XG4gIH1cbiAgYXN5bmMgYXV0aG9yaXplKHRva2VuUGFyYW1zLCBhdXRoT3B0aW9ucykge1xuICAgIGlmIChhdXRoT3B0aW9ucyAmJiBhdXRoT3B0aW9ucy5rZXkgJiYgdGhpcy5hdXRoT3B0aW9ucy5rZXkgIT09IGF1dGhPcHRpb25zLmtleSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcIlVuYWJsZSB0byB1cGRhdGUgYXV0aCBvcHRpb25zIHdpdGggaW5jb21wYXRpYmxlIGtleVwiLCA0MDEwMiwgNDAxKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGxldCB0b2tlbkRldGFpbHMgPSBhd2FpdCB0aGlzLl9mb3JjZU5ld1Rva2VuKHRva2VuUGFyYW1zICE9IG51bGwgPyB0b2tlblBhcmFtcyA6IG51bGwsIGF1dGhPcHRpb25zICE9IG51bGwgPyBhdXRoT3B0aW9ucyA6IG51bGwpO1xuICAgICAgaWYgKGlzUmVhbHRpbWUodGhpcy5jbGllbnQpKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgdGhpcy5jbGllbnQuY29ubmVjdGlvbi5jb25uZWN0aW9uTWFuYWdlci5vbkF1dGhVcGRhdGVkKFxuICAgICAgICAgICAgdG9rZW5EZXRhaWxzLFxuICAgICAgICAgICAgKGVyciwgdG9rZW5EZXRhaWxzMikgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKHRva2VuRGV0YWlsczIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdG9rZW5EZXRhaWxzO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKHRoaXMuY2xpZW50LmNvbm5lY3Rpb24gJiYgZXJyLnN0YXR1c0NvZGUgPT09IEh0dHBTdGF0dXNDb2Rlc19kZWZhdWx0LkZvcmJpZGRlbikge1xuICAgICAgICB0aGlzLmNsaWVudC5jb25uZWN0aW9uLmNvbm5lY3Rpb25NYW5hZ2VyLmFjdE9uRXJyb3JGcm9tQXV0aG9yaXplKGVycik7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG4gIC8qIEZvciBpbnRlcm5hbCB1c2UsIGVnIGJ5IGNvbm5lY3Rpb25NYW5hZ2VyIC0gdXNlZnVsIHdoZW4gd2FudCB0byBjYWxsIGJhY2tcbiAgICogYXMgc29vbiBhcyB3ZSBoYXZlIHRoZSBuZXcgdG9rZW4sIHJhdGhlciB0aGFuIHdhaXRpbmcgZm9yIGl0IHRvIHRha2VcbiAgICogZWZmZWN0IG9uIHRoZSBjb25uZWN0aW9uIGFzICNhdXRob3JpemUgZG9lcyAqL1xuICBhc3luYyBfZm9yY2VOZXdUb2tlbih0b2tlblBhcmFtcywgYXV0aE9wdGlvbnMpIHtcbiAgICB0aGlzLnRva2VuRGV0YWlscyA9IG51bGw7XG4gICAgdGhpcy5fc2F2ZVRva2VuT3B0aW9ucyh0b2tlblBhcmFtcywgYXV0aE9wdGlvbnMpO1xuICAgIGxvZ0FuZFZhbGlkYXRlVG9rZW5BdXRoTWV0aG9kKHRoaXMuYXV0aE9wdGlvbnMsIHRoaXMubG9nZ2VyKTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Vuc3VyZVZhbGlkQXV0aENyZWRlbnRpYWxzKHRydWUpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBkZWxldGUgdGhpcy50b2tlblBhcmFtcy50aW1lc3RhbXA7XG4gICAgICBkZWxldGUgdGhpcy5hdXRoT3B0aW9ucy5xdWVyeVRpbWU7XG4gICAgfVxuICB9XG4gIGFzeW5jIHJlcXVlc3RUb2tlbih0b2tlblBhcmFtcywgYXV0aE9wdGlvbnMpIHtcbiAgICBjb25zdCByZXNvbHZlZEF1dGhPcHRpb25zID0gYXV0aE9wdGlvbnMgfHwgdGhpcy5hdXRoT3B0aW9ucztcbiAgICBjb25zdCByZXNvbHZlZFRva2VuUGFyYW1zID0gdG9rZW5QYXJhbXMgfHwgY29weSh0aGlzLnRva2VuUGFyYW1zKTtcbiAgICBsZXQgdG9rZW5SZXF1ZXN0Q2FsbGJhY2ssIGNsaWVudCA9IHRoaXMuY2xpZW50O1xuICAgIGlmIChyZXNvbHZlZEF1dGhPcHRpb25zLmF1dGhDYWxsYmFjaykge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQXV0aC5yZXF1ZXN0VG9rZW4oKVwiLCBcInVzaW5nIHRva2VuIGF1dGggd2l0aCBhdXRoQ2FsbGJhY2tcIik7XG4gICAgICB0b2tlblJlcXVlc3RDYWxsYmFjayA9IHJlc29sdmVkQXV0aE9wdGlvbnMuYXV0aENhbGxiYWNrO1xuICAgIH0gZWxzZSBpZiAocmVzb2x2ZWRBdXRoT3B0aW9ucy5hdXRoVXJsKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJBdXRoLnJlcXVlc3RUb2tlbigpXCIsIFwidXNpbmcgdG9rZW4gYXV0aCB3aXRoIGF1dGhVcmxcIik7XG4gICAgICB0b2tlblJlcXVlc3RDYWxsYmFjayA9IChwYXJhbXMsIGNiKSA9PiB7XG4gICAgICAgIGNvbnN0IGF1dGhIZWFkZXJzID0gbWl4aW4oXG4gICAgICAgICAgeyBhY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpblwiIH0sXG4gICAgICAgICAgcmVzb2x2ZWRBdXRoT3B0aW9ucy5hdXRoSGVhZGVyc1xuICAgICAgICApO1xuICAgICAgICBjb25zdCB1c2VQb3N0ID0gcmVzb2x2ZWRBdXRoT3B0aW9ucy5hdXRoTWV0aG9kICYmIHJlc29sdmVkQXV0aE9wdGlvbnMuYXV0aE1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBcInBvc3RcIjtcbiAgICAgICAgbGV0IHByb3ZpZGVkUXNQYXJhbXM7XG4gICAgICAgIGNvbnN0IHF1ZXJ5SWR4ID0gcmVzb2x2ZWRBdXRoT3B0aW9ucy5hdXRoVXJsLmluZGV4T2YoXCI/XCIpO1xuICAgICAgICBpZiAocXVlcnlJZHggPiAtMSkge1xuICAgICAgICAgIHByb3ZpZGVkUXNQYXJhbXMgPSBwYXJzZVF1ZXJ5U3RyaW5nKHJlc29sdmVkQXV0aE9wdGlvbnMuYXV0aFVybC5zbGljZShxdWVyeUlkeCkpO1xuICAgICAgICAgIHJlc29sdmVkQXV0aE9wdGlvbnMuYXV0aFVybCA9IHJlc29sdmVkQXV0aE9wdGlvbnMuYXV0aFVybC5zbGljZSgwLCBxdWVyeUlkeCk7XG4gICAgICAgICAgaWYgKCF1c2VQb3N0KSB7XG4gICAgICAgICAgICByZXNvbHZlZEF1dGhPcHRpb25zLmF1dGhQYXJhbXMgPSBtaXhpbihcbiAgICAgICAgICAgICAgcHJvdmlkZWRRc1BhcmFtcyxcbiAgICAgICAgICAgICAgcmVzb2x2ZWRBdXRoT3B0aW9ucy5hdXRoUGFyYW1zXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhdXRoUGFyYW1zID0gbWl4aW4oe30sIHJlc29sdmVkQXV0aE9wdGlvbnMuYXV0aFBhcmFtcyB8fCB7fSwgcGFyYW1zKTtcbiAgICAgICAgY29uc3QgYXV0aFVybFJlcXVlc3RDYWxsYmFjayA9IChyZXN1bHQpID0+IHtcbiAgICAgICAgICB2YXIgX2EyLCBfYjtcbiAgICAgICAgICBsZXQgYm9keSA9IChfYTIgPSByZXN1bHQuYm9keSkgIT0gbnVsbCA/IF9hMiA6IG51bGw7XG4gICAgICAgICAgbGV0IGNvbnRlbnRUeXBlID0gbnVsbDtcbiAgICAgICAgICBpZiAocmVzdWx0LmVycm9yKSB7XG4gICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgICAgICAgIFwiQXV0aC5yZXF1ZXN0VG9rZW4oKS50b2tlblJlcXVlc3RDYWxsYmFja1wiLFxuICAgICAgICAgICAgICBcIlJlY2VpdmVkIEVycm9yOiBcIiArIGluc3BlY3RFcnJvcihyZXN1bHQuZXJyb3IpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50VHlwZUhlYWRlck9ySGVhZGVycyA9IChfYiA9IHJlc3VsdC5oZWFkZXJzW1wiY29udGVudC10eXBlXCJdKSAhPSBudWxsID8gX2IgOiBudWxsO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29udGVudFR5cGVIZWFkZXJPckhlYWRlcnMpKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnRUeXBlID0gY29udGVudFR5cGVIZWFkZXJPckhlYWRlcnMuam9pbihcIiwgXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29udGVudFR5cGUgPSBjb250ZW50VHlwZUhlYWRlck9ySGVhZGVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgICAgICAgICAgXCJBdXRoLnJlcXVlc3RUb2tlbigpLnRva2VuUmVxdWVzdENhbGxiYWNrXCIsXG4gICAgICAgICAgICAgIFwiUmVjZWl2ZWQ7IGNvbnRlbnQtdHlwZTogXCIgKyBjb250ZW50VHlwZSArIFwiOyBib2R5OiBcIiArIGluc3BlY3RCb2R5KGJvZHkpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0LmVycm9yKSB7XG4gICAgICAgICAgICBjYihyZXN1bHQuZXJyb3IsIG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0LnVucGFja2VkKSB7XG4gICAgICAgICAgICBjYihudWxsLCBib2R5KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmlzQnVmZmVyKGJvZHkpKVxuICAgICAgICAgICAgYm9keSA9IGJvZHkudG9TdHJpbmcoKTtcbiAgICAgICAgICBpZiAoIWNvbnRlbnRUeXBlKSB7XG4gICAgICAgICAgICBjYihuZXcgRXJyb3JJbmZvKFwiYXV0aFVybCByZXNwb25zZSBpcyBtaXNzaW5nIGEgY29udGVudC10eXBlIGhlYWRlclwiLCA0MDE3MCwgNDAxKSwgbnVsbCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGpzb24gPSBjb250ZW50VHlwZS5pbmRleE9mKFwiYXBwbGljYXRpb24vanNvblwiKSA+IC0xLCB0ZXh0ID0gY29udGVudFR5cGUuaW5kZXhPZihcInRleHQvcGxhaW5cIikgPiAtMSB8fCBjb250ZW50VHlwZS5pbmRleE9mKFwiYXBwbGljYXRpb24vand0XCIpID4gLTE7XG4gICAgICAgICAgaWYgKCFqc29uICYmICF0ZXh0KSB7XG4gICAgICAgICAgICBjYihcbiAgICAgICAgICAgICAgbmV3IEVycm9ySW5mbyhcbiAgICAgICAgICAgICAgICBcImF1dGhVcmwgcmVzcG9uZGVkIHdpdGggdW5hY2NlcHRhYmxlIGNvbnRlbnQtdHlwZSBcIiArIGNvbnRlbnRUeXBlICsgXCIsIHNob3VsZCBiZSBlaXRoZXIgdGV4dC9wbGFpbiwgYXBwbGljYXRpb24vand0IG9yIGFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgICAgICA0MDE3MCxcbiAgICAgICAgICAgICAgICA0MDFcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGpzb24pIHtcbiAgICAgICAgICAgIGlmIChib2R5Lmxlbmd0aCA+IE1BWF9UT0tFTl9MRU5HVEgpIHtcbiAgICAgICAgICAgICAgY2IobmV3IEVycm9ySW5mbyhcImF1dGhVcmwgcmVzcG9uc2UgZXhjZWVkZWQgbWF4IHBlcm1pdHRlZCBsZW5ndGhcIiwgNDAxNzAsIDQwMSksIG51bGwpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBib2R5ID0gSlNPTi5wYXJzZShib2R5KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY2IoXG4gICAgICAgICAgICAgICAgbmV3IEVycm9ySW5mbyhcbiAgICAgICAgICAgICAgICAgIFwiVW5leHBlY3RlZCBlcnJvciBwcm9jZXNzaW5nIGF1dGhVUkwgcmVzcG9uc2U7IGVyciA9IFwiICsgZS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgNDAxNzAsXG4gICAgICAgICAgICAgICAgICA0MDFcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjYihudWxsLCBib2R5LCBjb250ZW50VHlwZSk7XG4gICAgICAgIH07XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgICAgXCJBdXRoLnJlcXVlc3RUb2tlbigpLnRva2VuUmVxdWVzdENhbGxiYWNrXCIsXG4gICAgICAgICAgXCJSZXF1ZXN0aW5nIHRva2VuIGZyb20gXCIgKyByZXNvbHZlZEF1dGhPcHRpb25zLmF1dGhVcmwgKyBcIjsgUGFyYW1zOiBcIiArIEpTT04uc3RyaW5naWZ5KGF1dGhQYXJhbXMpICsgXCI7IG1ldGhvZDogXCIgKyAodXNlUG9zdCA/IFwiUE9TVFwiIDogXCJHRVRcIilcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHVzZVBvc3QpIHtcbiAgICAgICAgICBjb25zdCBoZWFkZXJzID0gYXV0aEhlYWRlcnMgfHwge307XG4gICAgICAgICAgaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG4gICAgICAgICAgY29uc3QgYm9keSA9IHRvUXVlcnlTdHJpbmcoYXV0aFBhcmFtcykuc2xpY2UoMSk7XG4gICAgICAgICAgd2hlblByb21pc2VTZXR0bGVzKFxuICAgICAgICAgICAgdGhpcy5jbGllbnQuaHR0cC5kb1VyaShcbiAgICAgICAgICAgICAgSHR0cE1ldGhvZHNfZGVmYXVsdC5Qb3N0LFxuICAgICAgICAgICAgICByZXNvbHZlZEF1dGhPcHRpb25zLmF1dGhVcmwsXG4gICAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAgIHByb3ZpZGVkUXNQYXJhbXNcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICAoZXJyLCByZXN1bHQpID0+IGVyciA/IGF1dGhVcmxSZXF1ZXN0Q2FsbGJhY2soZXJyKSA6IGF1dGhVcmxSZXF1ZXN0Q2FsbGJhY2socmVzdWx0KVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2hlblByb21pc2VTZXR0bGVzKFxuICAgICAgICAgICAgdGhpcy5jbGllbnQuaHR0cC5kb1VyaShIdHRwTWV0aG9kc19kZWZhdWx0LkdldCwgcmVzb2x2ZWRBdXRoT3B0aW9ucy5hdXRoVXJsLCBhdXRoSGVhZGVycyB8fCB7fSwgbnVsbCwgYXV0aFBhcmFtcyksXG4gICAgICAgICAgICAoZXJyLCByZXN1bHQpID0+IGVyciA/IGF1dGhVcmxSZXF1ZXN0Q2FsbGJhY2soZXJyKSA6IGF1dGhVcmxSZXF1ZXN0Q2FsbGJhY2socmVzdWx0KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChyZXNvbHZlZEF1dGhPcHRpb25zLmtleSkge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICBcIkF1dGgucmVxdWVzdFRva2VuKClcIixcbiAgICAgICAgXCJ1c2luZyB0b2tlbiBhdXRoIHdpdGggY2xpZW50LXNpZGUgc2lnbmluZ1wiXG4gICAgICApO1xuICAgICAgdG9rZW5SZXF1ZXN0Q2FsbGJhY2sgPSAocGFyYW1zLCBjYikgPT4ge1xuICAgICAgICB3aGVuUHJvbWlzZVNldHRsZXMoXG4gICAgICAgICAgdGhpcy5jcmVhdGVUb2tlblJlcXVlc3QocGFyYW1zLCByZXNvbHZlZEF1dGhPcHRpb25zKSxcbiAgICAgICAgICAoZXJyLCByZXN1bHQpID0+IGNiKGVyciwgcmVzdWx0ICE9IG51bGwgPyByZXN1bHQgOiBudWxsKVxuICAgICAgICApO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbXNnID0gXCJOZWVkIGEgbmV3IHRva2VuLCBidXQgYXV0aE9wdGlvbnMgZG9lcyBub3QgaW5jbHVkZSBhbnkgd2F5IHRvIHJlcXVlc3Qgb25lIChubyBhdXRoVXJsLCBhdXRoQ2FsbGJhY2ssIG9yIGtleSlcIjtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUixcbiAgICAgICAgXCJBdXRoKClcIixcbiAgICAgICAgXCJsaWJyYXJ5IGluaXRpYWxpemVkIHdpdGggYSB0b2tlbiBsaXRlcmFsIHdpdGhvdXQgYW55IHdheSB0byByZW5ldyB0aGUgdG9rZW4gd2hlbiBpdCBleHBpcmVzIChubyBhdXRoVXJsLCBhdXRoQ2FsbGJhY2ssIG9yIGtleSkuIFNlZSBodHRwczovL2hlbHAuYWJseS5pby9lcnJvci80MDE3MSBmb3IgaGVscFwiXG4gICAgICApO1xuICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhtc2csIDQwMTcxLCA0MDMpO1xuICAgIH1cbiAgICBpZiAoXCJjYXBhYmlsaXR5XCIgaW4gcmVzb2x2ZWRUb2tlblBhcmFtcylcbiAgICAgIHJlc29sdmVkVG9rZW5QYXJhbXMuY2FwYWJpbGl0eSA9IGMxNG4oXG4gICAgICAgIHJlc29sdmVkVG9rZW5QYXJhbXMuY2FwYWJpbGl0eVxuICAgICAgKTtcbiAgICBjb25zdCB0b2tlblJlcXVlc3QgPSAoc2lnbmVkVG9rZW5QYXJhbXMsIHRva2VuQ2IpID0+IHtcbiAgICAgIGNvbnN0IGtleU5hbWUgPSBzaWduZWRUb2tlblBhcmFtcy5rZXlOYW1lLCBwYXRoID0gXCIva2V5cy9cIiArIGtleU5hbWUgKyBcIi9yZXF1ZXN0VG9rZW5cIiwgdG9rZW5VcmkgPSBmdW5jdGlvbihob3N0KSB7XG4gICAgICAgIHJldHVybiBjbGllbnQuYmFzZVVyaShob3N0KSArIHBhdGg7XG4gICAgICB9O1xuICAgICAgY29uc3QgcmVxdWVzdEhlYWRlcnMgPSBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRQb3N0SGVhZGVycyh0aGlzLmNsaWVudC5vcHRpb25zKTtcbiAgICAgIGlmIChyZXNvbHZlZEF1dGhPcHRpb25zLnJlcXVlc3RIZWFkZXJzKVxuICAgICAgICBtaXhpbihyZXF1ZXN0SGVhZGVycywgcmVzb2x2ZWRBdXRoT3B0aW9ucy5yZXF1ZXN0SGVhZGVycyk7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgIFwiQXV0aC5yZXF1ZXN0VG9rZW4oKS5yZXF1ZXN0VG9rZW5cIixcbiAgICAgICAgXCJTZW5kaW5nIFBPU1QgdG8gXCIgKyBwYXRoICsgXCI7IFRva2VuIHBhcmFtczogXCIgKyBKU09OLnN0cmluZ2lmeShzaWduZWRUb2tlblBhcmFtcylcbiAgICAgICk7XG4gICAgICB3aGVuUHJvbWlzZVNldHRsZXMoXG4gICAgICAgIHRoaXMuY2xpZW50Lmh0dHAuZG8oSHR0cE1ldGhvZHNfZGVmYXVsdC5Qb3N0LCB0b2tlblVyaSwgcmVxdWVzdEhlYWRlcnMsIEpTT04uc3RyaW5naWZ5KHNpZ25lZFRva2VuUGFyYW1zKSwgbnVsbCksXG4gICAgICAgIChlcnIsIHJlc3VsdCkgPT4gZXJyID8gdG9rZW5DYihlcnIpIDogdG9rZW5DYihyZXN1bHQuZXJyb3IsIHJlc3VsdC5ib2R5LCByZXN1bHQudW5wYWNrZWQpXG4gICAgICApO1xuICAgIH07XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCB0b2tlblJlcXVlc3RDYWxsYmFja1RpbWVvdXRFeHBpcmVkID0gZmFsc2UsIHRpbWVvdXRMZW5ndGggPSB0aGlzLmNsaWVudC5vcHRpb25zLnRpbWVvdXRzLnJlYWx0aW1lUmVxdWVzdFRpbWVvdXQsIHRva2VuUmVxdWVzdENhbGxiYWNrVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0b2tlblJlcXVlc3RDYWxsYmFja1RpbWVvdXRFeHBpcmVkID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgbXNnID0gXCJUb2tlbiByZXF1ZXN0IGNhbGxiYWNrIHRpbWVkIG91dCBhZnRlciBcIiArIHRpbWVvdXRMZW5ndGggLyAxZTMgKyBcIiBzZWNvbmRzXCI7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLCBcIkF1dGgucmVxdWVzdFRva2VuKClcIiwgbXNnKTtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvckluZm8obXNnLCA0MDE3MCwgNDAxKSk7XG4gICAgICB9LCB0aW1lb3V0TGVuZ3RoKTtcbiAgICAgIHRva2VuUmVxdWVzdENhbGxiYWNrKHJlc29sdmVkVG9rZW5QYXJhbXMsIChlcnIsIHRva2VuUmVxdWVzdE9yRGV0YWlscywgY29udGVudFR5cGUpID0+IHtcbiAgICAgICAgaWYgKHRva2VuUmVxdWVzdENhbGxiYWNrVGltZW91dEV4cGlyZWQpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjbGVhclRpbWVvdXQodG9rZW5SZXF1ZXN0Q2FsbGJhY2tUaW1lb3V0KTtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICAgICAgXCJBdXRoLnJlcXVlc3RUb2tlbigpXCIsXG4gICAgICAgICAgICBcInRva2VuIHJlcXVlc3Qgc2lnbmluZyBjYWxsIHJldHVybmVkIGVycm9yOyBlcnIgPSBcIiArIGluc3BlY3RFcnJvcihlcnIpXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZWplY3Qobm9ybWFsaXNlQXV0aGNhbGxiYWNrRXJyb3IoZXJyKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW5SZXF1ZXN0T3JEZXRhaWxzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgaWYgKHRva2VuUmVxdWVzdE9yRGV0YWlscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3JJbmZvKFwiVG9rZW4gc3RyaW5nIGlzIGVtcHR5XCIsIDQwMTcwLCA0MDEpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuUmVxdWVzdE9yRGV0YWlscy5sZW5ndGggPiBNQVhfVE9LRU5fTEVOR1RIKSB7XG4gICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgIG5ldyBFcnJvckluZm8oXG4gICAgICAgICAgICAgICAgXCJUb2tlbiBzdHJpbmcgZXhjZWVkZWQgbWF4IHBlcm1pdHRlZCBsZW5ndGggKHdhcyBcIiArIHRva2VuUmVxdWVzdE9yRGV0YWlscy5sZW5ndGggKyBcIiBieXRlcylcIixcbiAgICAgICAgICAgICAgICA0MDE3MCxcbiAgICAgICAgICAgICAgICA0MDFcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuUmVxdWVzdE9yRGV0YWlscyA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0b2tlblJlcXVlc3RPckRldGFpbHMgPT09IFwibnVsbFwiKSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9ySW5mbyhcIlRva2VuIHN0cmluZyB3YXMgbGl0ZXJhbCBudWxsL3VuZGVmaW5lZFwiLCA0MDE3MCwgNDAxKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0b2tlblJlcXVlc3RPckRldGFpbHNbMF0gPT09IFwie1wiICYmICEoY29udGVudFR5cGUgJiYgY29udGVudFR5cGUuaW5kZXhPZihcImFwcGxpY2F0aW9uL2p3dFwiKSA+IC0xKSkge1xuICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICBuZXcgRXJyb3JJbmZvKFxuICAgICAgICAgICAgICAgIFwiVG9rZW4gd2FzIGRvdWJsZS1lbmNvZGVkOyBtYWtlIHN1cmUgeW91J3JlIG5vdCBKU09OLWVuY29kaW5nIGFuIGFscmVhZHkgZW5jb2RlZCB0b2tlbiByZXF1ZXN0IG9yIGRldGFpbHNcIixcbiAgICAgICAgICAgICAgICA0MDE3MCxcbiAgICAgICAgICAgICAgICA0MDFcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZSh7IHRva2VuOiB0b2tlblJlcXVlc3RPckRldGFpbHMgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRva2VuUmVxdWVzdE9yRGV0YWlscyAhPT0gXCJvYmplY3RcIiB8fCB0b2tlblJlcXVlc3RPckRldGFpbHMgPT09IG51bGwpIHtcbiAgICAgICAgICBjb25zdCBtc2cgPSBcIkV4cGVjdGVkIHRva2VuIHJlcXVlc3QgY2FsbGJhY2sgdG8gY2FsbCBiYWNrIHdpdGggYSB0b2tlbiBzdHJpbmcgb3IgdG9rZW4gcmVxdWVzdC9kZXRhaWxzIG9iamVjdCwgYnV0IGdvdCBhIFwiICsgdHlwZW9mIHRva2VuUmVxdWVzdE9yRGV0YWlscztcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUiwgXCJBdXRoLnJlcXVlc3RUb2tlbigpXCIsIG1zZyk7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvckluZm8obXNnLCA0MDE3MCwgNDAxKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9iamVjdFNpemUgPSBKU09OLnN0cmluZ2lmeSh0b2tlblJlcXVlc3RPckRldGFpbHMpLmxlbmd0aDtcbiAgICAgICAgaWYgKG9iamVjdFNpemUgPiBNQVhfVE9LRU5fTEVOR1RIICYmICFyZXNvbHZlZEF1dGhPcHRpb25zLnN1cHByZXNzTWF4TGVuZ3RoQ2hlY2spIHtcbiAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICBuZXcgRXJyb3JJbmZvKFxuICAgICAgICAgICAgICBcIlRva2VuIHJlcXVlc3QvZGV0YWlscyBvYmplY3QgZXhjZWVkZWQgbWF4IHBlcm1pdHRlZCBzdHJpbmdpZmllZCBzaXplICh3YXMgXCIgKyBvYmplY3RTaXplICsgXCIgYnl0ZXMpXCIsXG4gICAgICAgICAgICAgIDQwMTcwLFxuICAgICAgICAgICAgICA0MDFcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJpc3N1ZWRcIiBpbiB0b2tlblJlcXVlc3RPckRldGFpbHMpIHtcbiAgICAgICAgICByZXNvbHZlKHRva2VuUmVxdWVzdE9yRGV0YWlscyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKFwia2V5TmFtZVwiIGluIHRva2VuUmVxdWVzdE9yRGV0YWlscykpIHtcbiAgICAgICAgICBjb25zdCBtc2cgPSBcIkV4cGVjdGVkIHRva2VuIHJlcXVlc3QgY2FsbGJhY2sgdG8gY2FsbCBiYWNrIHdpdGggYSB0b2tlbiBzdHJpbmcsIHRva2VuIHJlcXVlc3Qgb2JqZWN0LCBvciB0b2tlbiBkZXRhaWxzIG9iamVjdFwiO1xuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLCBcIkF1dGgucmVxdWVzdFRva2VuKClcIiwgbXNnKTtcbiAgICAgICAgICByZWplY3QobmV3IEVycm9ySW5mbyhtc2csIDQwMTcwLCA0MDEpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdG9rZW5SZXF1ZXN0KHRva2VuUmVxdWVzdE9yRGV0YWlscywgKGVycjIsIHRva2VuUmVzcG9uc2UsIHVucGFja2VkKSA9PiB7XG4gICAgICAgICAgaWYgKGVycjIpIHtcbiAgICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUixcbiAgICAgICAgICAgICAgXCJBdXRoLnJlcXVlc3RUb2tlbigpXCIsXG4gICAgICAgICAgICAgIFwidG9rZW4gcmVxdWVzdCBBUEkgY2FsbCByZXR1cm5lZCBlcnJvcjsgZXJyID0gXCIgKyBpbnNwZWN0RXJyb3IoZXJyMilcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZWplY3Qobm9ybWFsaXNlQXV0aGNhbGxiYWNrRXJyb3IoZXJyMikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXVucGFja2VkKVxuICAgICAgICAgICAgdG9rZW5SZXNwb25zZSA9IEpTT04ucGFyc2UodG9rZW5SZXNwb25zZSk7XG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQXV0aC5nZXRUb2tlbigpXCIsIFwidG9rZW4gcmVjZWl2ZWRcIik7XG4gICAgICAgICAgcmVzb2x2ZSh0b2tlblJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCBzaWduIGEgdG9rZW4gcmVxdWVzdCBiYXNlZCBvbiB0aGUgZ2l2ZW4gb3B0aW9ucy5cbiAgICogTk9URSB0aGlzIGNhbiBvbmx5IGJlIHVzZWQgd2hlbiB0aGUga2V5IHZhbHVlIGlzIGF2YWlsYWJsZSBsb2NhbGx5LlxuICAgKiBPdGhlcndpc2UsIHNpZ25lZCB0b2tlbiByZXF1ZXN0cyBtdXN0IGJlIG9idGFpbmVkIGZyb20gdGhlIGtleVxuICAgKiBvd25lciAoZWl0aGVyIHVzaW5nIHRoZSB0b2tlbiByZXF1ZXN0IGNhbGxiYWNrIG9yIHVybCkuXG4gICAqXG4gICAqIEBwYXJhbSBhdXRoT3B0aW9uc1xuICAgKiBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgcmVxdWVzdCBvcHRpb25zOlxuICAgKiAtIGtleTogICAgICAgICAgIHRoZSBrZXkgdG8gdXNlLiBJZiBub3Qgc3BlY2lmaWVkLCBhIGtleSBwYXNzZWQgaW4gY29uc3RydWN0aW5nXG4gICAqICAgICAgICAgICAgICAgICAgdGhlIFJlc3QgaW50ZXJmYWNlIHdpbGwgYmUgdXNlZFxuICAgKlxuICAgKiAtIHF1ZXJ5VGltZSAgICAgIChvcHRpb25hbCkgYm9vbGVhbiBpbmRpY2F0aW5nIHRoYXQgdGhlIGFibHkgc3lzdGVtIHNob3VsZCBiZVxuICAgKiAgICAgICAgICAgICAgICAgIHF1ZXJpZWQgZm9yIHRoZSBjdXJyZW50IHRpbWUgd2hlbiBub25lIGlzIHNwZWNpZmllZCBleHBsaWNpdGx5XG4gICAqXG4gICAqIC0gcmVxdWVzdEhlYWRlcnMgKG9wdGlvbmFsLCB1bnN1cHBvcnRlZCwgZm9yIHRlc3Rpbmcgb25seSkgZXh0cmEgaGVhZGVycyB0byBhZGQgdG8gdGhlXG4gICAqICAgICAgICAgICAgICAgICAgcmVxdWVzdFRva2VuIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHRva2VuUGFyYW1zXG4gICAqIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBwYXJhbWV0ZXJzIGZvciB0aGUgcmVxdWVzdGVkIHRva2VuOlxuICAgKiAtIHR0bDogICAgICAgKG9wdGlvbmFsKSB0aGUgcmVxdWVzdGVkIGxpZmUgb2YgdGhlIHRva2VuIGluIG1zLiBJZiBub25lIGlzIHNwZWNpZmllZFxuICAgKiAgICAgICAgICAgICAgICAgIGEgZGVmYXVsdCBvZiAxIGhvdXIgaXMgcHJvdmlkZWQuIFRoZSBtYXhpbXVtIGxpZmV0aW1lIGlzIDI0aG91cnM7IGFueSByZXF1ZXN0XG4gICAqICAgICAgICAgICAgICAgICAgZXhjZWVkaW5nIHRoYXQgbGlmZXRpbWUgd2lsbCBiZSByZWplY3RlZCB3aXRoIGFuIGVycm9yLlxuICAgKlxuICAgKiAtIGNhcGFiaWxpdHk6ICAgIChvcHRpb25hbCkgdGhlIGNhcGFiaWxpdHkgdG8gYXNzb2NpYXRlIHdpdGggdGhlIGFjY2VzcyB0b2tlbi5cbiAgICogICAgICAgICAgICAgICAgICBJZiBub25lIGlzIHNwZWNpZmllZCwgYSB0b2tlbiB3aWxsIGJlIHJlcXVlc3RlZCB3aXRoIGFsbCBvZiB0aGVcbiAgICogICAgICAgICAgICAgICAgICBjYXBhYmlsaXRpZXMgb2YgdGhlIHNwZWNpZmllZCBrZXkuXG4gICAqXG4gICAqIC0gY2xpZW50SWQ6ICAgICAgKG9wdGlvbmFsKSBhIGNsaWVudCBJRCB0byBhc3NvY2lhdGUgd2l0aCB0aGUgdG9rZW47IGlmIG5vdFxuICAgKiAgICAgICAgICAgICAgICAgIHNwZWNpZmllZCwgYSBjbGllbnRJZCBwYXNzZWQgaW4gY29uc3RydWN0aW5nIHRoZSBSZXN0IGludGVyZmFjZSB3aWxsIGJlIHVzZWRcbiAgICpcbiAgICogLSB0aW1lc3RhbXA6ICAgICAob3B0aW9uYWwpIHRoZSB0aW1lIGluIG1zIHNpbmNlIHRoZSBlcG9jaC4gSWYgbm9uZSBpcyBzcGVjaWZpZWQsXG4gICAqICAgICAgICAgICAgICAgICAgdGhlIHN5c3RlbSB3aWxsIGJlIHF1ZXJpZWQgZm9yIGEgdGltZSB2YWx1ZSB0byB1c2UuXG4gICAqL1xuICBhc3luYyBjcmVhdGVUb2tlblJlcXVlc3QodG9rZW5QYXJhbXMsIGF1dGhPcHRpb25zKSB7XG4gICAgYXV0aE9wdGlvbnMgPSBhdXRoT3B0aW9ucyB8fCB0aGlzLmF1dGhPcHRpb25zO1xuICAgIHRva2VuUGFyYW1zID0gdG9rZW5QYXJhbXMgfHwgY29weSh0aGlzLnRva2VuUGFyYW1zKTtcbiAgICBjb25zdCBrZXkgPSBhdXRoT3B0aW9ucy5rZXk7XG4gICAgaWYgKCFrZXkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXCJObyBrZXkgc3BlY2lmaWVkXCIsIDQwMTAxLCA0MDMpO1xuICAgIH1cbiAgICBjb25zdCBrZXlQYXJ0cyA9IGtleS5zcGxpdChcIjpcIiksIGtleU5hbWUgPSBrZXlQYXJ0c1swXSwga2V5U2VjcmV0ID0ga2V5UGFydHNbMV07XG4gICAgaWYgKCFrZXlTZWNyZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXCJJbnZhbGlkIGtleSBzcGVjaWZpZWRcIiwgNDAxMDEsIDQwMyk7XG4gICAgfVxuICAgIGlmICh0b2tlblBhcmFtcy5jbGllbnRJZCA9PT0gXCJcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcImNsaWVudElkIGNhblxcdTIwMTl0IGJlIGFuIGVtcHR5IHN0cmluZ1wiLCA0MDAxMiwgNDAwKTtcbiAgICB9XG4gICAgaWYgKFwiY2FwYWJpbGl0eVwiIGluIHRva2VuUGFyYW1zKSB7XG4gICAgICB0b2tlblBhcmFtcy5jYXBhYmlsaXR5ID0gYzE0bih0b2tlblBhcmFtcy5jYXBhYmlsaXR5KTtcbiAgICB9XG4gICAgY29uc3QgcmVxdWVzdCA9IG1peGluKHsga2V5TmFtZSB9LCB0b2tlblBhcmFtcyksIGNsaWVudElkID0gdG9rZW5QYXJhbXMuY2xpZW50SWQgfHwgXCJcIiwgdHRsID0gdG9rZW5QYXJhbXMudHRsIHx8IFwiXCIsIGNhcGFiaWxpdHkgPSB0b2tlblBhcmFtcy5jYXBhYmlsaXR5IHx8IFwiXCI7XG4gICAgaWYgKCFyZXF1ZXN0LnRpbWVzdGFtcCkge1xuICAgICAgcmVxdWVzdC50aW1lc3RhbXAgPSBhd2FpdCB0aGlzLmdldFRpbWVzdGFtcChhdXRoT3B0aW9ucyAmJiBhdXRoT3B0aW9ucy5xdWVyeVRpbWUpO1xuICAgIH1cbiAgICBjb25zdCBub25jZSA9IHJlcXVlc3Qubm9uY2UgfHwgKHJlcXVlc3Qubm9uY2UgPSByYW5kb20oKSksIHRpbWVzdGFtcCA9IHJlcXVlc3QudGltZXN0YW1wO1xuICAgIGNvbnN0IHNpZ25UZXh0ID0gcmVxdWVzdC5rZXlOYW1lICsgXCJcXG5cIiArIHR0bCArIFwiXFxuXCIgKyBjYXBhYmlsaXR5ICsgXCJcXG5cIiArIGNsaWVudElkICsgXCJcXG5cIiArIHRpbWVzdGFtcCArIFwiXFxuXCIgKyBub25jZSArIFwiXFxuXCI7XG4gICAgcmVxdWVzdC5tYWMgPSByZXF1ZXN0Lm1hYyB8fCBobWFjKHNpZ25UZXh0LCBrZXlTZWNyZXQpO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIkF1dGguZ2V0VG9rZW5SZXF1ZXN0KClcIiwgXCJnZW5lcmF0ZWQgc2lnbmVkIHJlcXVlc3RcIik7XG4gICAgcmV0dXJuIHJlcXVlc3Q7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgYXV0aCBxdWVyeSBwYXJhbXMgdG8gdXNlIGZvciBhIHdlYnNvY2tldCBjb25uZWN0aW9uLFxuICAgKiBiYXNlZCBvbiB0aGUgY3VycmVudCBhdXRoIHBhcmFtZXRlcnNcbiAgICovXG4gIGFzeW5jIGdldEF1dGhQYXJhbXMoKSB7XG4gICAgaWYgKHRoaXMubWV0aG9kID09IFwiYmFzaWNcIilcbiAgICAgIHJldHVybiB7IGtleTogdGhpcy5rZXkgfTtcbiAgICBlbHNlIHtcbiAgICAgIGxldCB0b2tlbkRldGFpbHMgPSBhd2FpdCB0aGlzLl9lbnN1cmVWYWxpZEF1dGhDcmVkZW50aWFscyhmYWxzZSk7XG4gICAgICBpZiAoIXRva2VuRGV0YWlscykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdXRoLmdldEF1dGhQYXJhbXMoKTogX2Vuc3VyZVZhbGlkQXV0aENyZWRlbnRpYWxzIHJldHVybmVkIG5vIGVycm9yIG9yIHRva2VuRGV0YWlsc1wiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGFjY2Vzc190b2tlbjogdG9rZW5EZXRhaWxzLnRva2VuIH07XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGF1dGhvcml6YXRpb24gaGVhZGVyIHRvIHVzZSBmb3IgYSBSRVNUIG9yIGNvbWV0IHJlcXVlc3QsXG4gICAqIGJhc2VkIG9uIHRoZSBjdXJyZW50IGF1dGggcGFyYW1ldGVyc1xuICAgKi9cbiAgYXN5bmMgZ2V0QXV0aEhlYWRlcnMoKSB7XG4gICAgaWYgKHRoaXMubWV0aG9kID09IFwiYmFzaWNcIikge1xuICAgICAgcmV0dXJuIHsgYXV0aG9yaXphdGlvbjogXCJCYXNpYyBcIiArIHRoaXMuYmFzaWNLZXkgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdG9rZW5EZXRhaWxzID0gYXdhaXQgdGhpcy5fZW5zdXJlVmFsaWRBdXRoQ3JlZGVudGlhbHMoZmFsc2UpO1xuICAgICAgaWYgKCF0b2tlbkRldGFpbHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXV0aC5nZXRBdXRoUGFyYW1zKCk6IF9lbnN1cmVWYWxpZEF1dGhDcmVkZW50aWFscyByZXR1cm5lZCBubyBlcnJvciBvciB0b2tlbkRldGFpbHNcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4geyBhdXRob3JpemF0aW9uOiBcIkJlYXJlciBcIiArIHRvQmFzZTY0KHRva2VuRGV0YWlscy50b2tlbikgfTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCB0aW1lIGJhc2VkIG9uIHRoZSBsb2NhbCBjbG9jayxcbiAgICogb3IgaWYgdGhlIG9wdGlvbiBxdWVyeVRpbWUgaXMgdHJ1ZSwgcmV0dXJuIHRoZSBzZXJ2ZXIgdGltZS5cbiAgICogVGhlIHNlcnZlciB0aW1lIG9mZnNldCBmcm9tIHRoZSBsb2NhbCB0aW1lIGlzIHN0b3JlZCBzbyB0aGF0XG4gICAqIG9ubHkgb25lIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB0byBnZXQgdGhlIHRpbWUgaXMgZXZlciBuZWVkZWRcbiAgICovXG4gIGFzeW5jIGdldFRpbWVzdGFtcChxdWVyeVRpbWUpIHtcbiAgICBpZiAoIXRoaXMuaXNUaW1lT2Zmc2V0U2V0KCkgJiYgKHF1ZXJ5VGltZSB8fCB0aGlzLmF1dGhPcHRpb25zLnF1ZXJ5VGltZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNsaWVudC50aW1lKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFRpbWVzdGFtcFVzaW5nT2Zmc2V0KCk7XG4gICAgfVxuICB9XG4gIGdldFRpbWVzdGFtcFVzaW5nT2Zmc2V0KCkge1xuICAgIHJldHVybiBEYXRlLm5vdygpICsgKHRoaXMuY2xpZW50LnNlcnZlclRpbWVPZmZzZXQgfHwgMCk7XG4gIH1cbiAgaXNUaW1lT2Zmc2V0U2V0KCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5zZXJ2ZXJUaW1lT2Zmc2V0ICE9PSBudWxsO1xuICB9XG4gIF9zYXZlQmFzaWNPcHRpb25zKGF1dGhPcHRpb25zKSB7XG4gICAgdGhpcy5tZXRob2QgPSBcImJhc2ljXCI7XG4gICAgdGhpcy5rZXkgPSBhdXRoT3B0aW9ucy5rZXk7XG4gICAgdGhpcy5iYXNpY0tleSA9IHRvQmFzZTY0KGF1dGhPcHRpb25zLmtleSk7XG4gICAgdGhpcy5hdXRoT3B0aW9ucyA9IGF1dGhPcHRpb25zIHx8IHt9O1xuICAgIGlmIChcImNsaWVudElkXCIgaW4gYXV0aE9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX3VzZXJTZXRDbGllbnRJZChhdXRoT3B0aW9ucy5jbGllbnRJZCk7XG4gICAgfVxuICB9XG4gIF9zYXZlVG9rZW5PcHRpb25zKHRva2VuUGFyYW1zLCBhdXRoT3B0aW9ucykge1xuICAgIHRoaXMubWV0aG9kID0gXCJ0b2tlblwiO1xuICAgIGlmICh0b2tlblBhcmFtcykge1xuICAgICAgdGhpcy50b2tlblBhcmFtcyA9IHRva2VuUGFyYW1zO1xuICAgIH1cbiAgICBpZiAoYXV0aE9wdGlvbnMpIHtcbiAgICAgIGlmIChhdXRoT3B0aW9ucy50b2tlbikge1xuICAgICAgICBhdXRoT3B0aW9ucy50b2tlbkRldGFpbHMgPSB0eXBlb2YgYXV0aE9wdGlvbnMudG9rZW4gPT09IFwic3RyaW5nXCIgPyB7IHRva2VuOiBhdXRoT3B0aW9ucy50b2tlbiB9IDogYXV0aE9wdGlvbnMudG9rZW47XG4gICAgICB9XG4gICAgICBpZiAoYXV0aE9wdGlvbnMudG9rZW5EZXRhaWxzKSB7XG4gICAgICAgIHRoaXMudG9rZW5EZXRhaWxzID0gYXV0aE9wdGlvbnMudG9rZW5EZXRhaWxzO1xuICAgICAgfVxuICAgICAgaWYgKFwiY2xpZW50SWRcIiBpbiBhdXRoT3B0aW9ucykge1xuICAgICAgICB0aGlzLl91c2VyU2V0Q2xpZW50SWQoYXV0aE9wdGlvbnMuY2xpZW50SWQpO1xuICAgICAgfVxuICAgICAgdGhpcy5hdXRoT3B0aW9ucyA9IGF1dGhPcHRpb25zO1xuICAgIH1cbiAgfVxuICAvKiBAcGFyYW0gZm9yY2VTdXBlcnNlZGU6IGZvcmNlIGEgbmV3IHRva2VuIHJlcXVlc3QgZXZlbiBpZiB0aGVyZSdzIG9uZSBpblxuICAgKiBwcm9ncmVzcywgbWFraW5nIGFsbCBwZW5kaW5nIGNhbGxiYWNrcyB3YWl0IGZvciB0aGUgbmV3IG9uZSAqL1xuICBhc3luYyBfZW5zdXJlVmFsaWRBdXRoQ3JlZGVudGlhbHMoZm9yY2VTdXBlcnNlZGUpIHtcbiAgICBjb25zdCB0b2tlbiA9IHRoaXMudG9rZW5EZXRhaWxzO1xuICAgIGlmICh0b2tlbikge1xuICAgICAgaWYgKHRoaXMuX3Rva2VuQ2xpZW50SWRNaXNtYXRjaCh0b2tlbi5jbGllbnRJZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcbiAgICAgICAgICBcIk1pc21hdGNoIGJldHdlZW4gY2xpZW50SWQgaW4gdG9rZW4gKFwiICsgdG9rZW4uY2xpZW50SWQgKyBcIikgYW5kIGN1cnJlbnQgY2xpZW50SWQgKFwiICsgdGhpcy5jbGllbnRJZCArIFwiKVwiLFxuICAgICAgICAgIDQwMTAyLFxuICAgICAgICAgIDQwM1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmlzVGltZU9mZnNldFNldCgpIHx8ICF0b2tlbi5leHBpcmVzIHx8IHRva2VuLmV4cGlyZXMgPj0gdGhpcy5nZXRUaW1lc3RhbXBVc2luZ09mZnNldCgpKSB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgICAgXCJBdXRoLmdldFRva2VuKClcIixcbiAgICAgICAgICBcInVzaW5nIGNhY2hlZCB0b2tlbjsgZXhwaXJlcyA9IFwiICsgdG9rZW4uZXhwaXJlc1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJBdXRoLmdldFRva2VuKClcIiwgXCJkZWxldGluZyBleHBpcmVkIHRva2VuXCIpO1xuICAgICAgdGhpcy50b2tlbkRldGFpbHMgPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCBwcm9taXNlID0gKHRoaXMud2FpdGluZ0ZvclRva2VuUmVxdWVzdCB8fCAodGhpcy53YWl0aW5nRm9yVG9rZW5SZXF1ZXN0ID0gbXVsdGljYXN0ZXJfZGVmYXVsdC5jcmVhdGUodGhpcy5sb2dnZXIpKSkuY3JlYXRlUHJvbWlzZSgpO1xuICAgIGlmICh0aGlzLmN1cnJlbnRUb2tlblJlcXVlc3RJZCAhPT0gbnVsbCAmJiAhZm9yY2VTdXBlcnNlZGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICBjb25zdCB0b2tlblJlcXVlc3RJZCA9IHRoaXMuY3VycmVudFRva2VuUmVxdWVzdElkID0gZ2V0VG9rZW5SZXF1ZXN0SWQoKTtcbiAgICBsZXQgdG9rZW5SZXNwb25zZSwgY2F1Z2h0RXJyb3IgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICB0b2tlblJlc3BvbnNlID0gYXdhaXQgdGhpcy5yZXF1ZXN0VG9rZW4odGhpcy50b2tlblBhcmFtcywgdGhpcy5hdXRoT3B0aW9ucyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjYXVnaHRFcnJvciA9IGVycjtcbiAgICB9XG4gICAgaWYgKHRoaXMuY3VycmVudFRva2VuUmVxdWVzdElkID4gdG9rZW5SZXF1ZXN0SWQpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgICAgXCJBdXRoLl9lbnN1cmVWYWxpZEF1dGhDcmVkZW50aWFscygpXCIsXG4gICAgICAgIFwiRGlzY2FyZGluZyB0b2tlbiByZXF1ZXN0IHJlc3BvbnNlOyBvdmVydGFrZW4gYnkgbmV3ZXIgb25lXCJcbiAgICAgICk7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50VG9rZW5SZXF1ZXN0SWQgPSBudWxsO1xuICAgIGNvbnN0IG11bHRpY2FzdGVyID0gdGhpcy53YWl0aW5nRm9yVG9rZW5SZXF1ZXN0O1xuICAgIHRoaXMud2FpdGluZ0ZvclRva2VuUmVxdWVzdCA9IG51bGw7XG4gICAgaWYgKGNhdWdodEVycm9yKSB7XG4gICAgICBtdWx0aWNhc3RlciA9PSBudWxsID8gdm9pZCAwIDogbXVsdGljYXN0ZXIucmVqZWN0QWxsKGNhdWdodEVycm9yKTtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICBtdWx0aWNhc3RlciA9PSBudWxsID8gdm9pZCAwIDogbXVsdGljYXN0ZXIucmVzb2x2ZUFsbCh0aGlzLnRva2VuRGV0YWlscyA9IHRva2VuUmVzcG9uc2UpO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG4gIC8qIFVzZXItc2V0OiBjaGVjayB0eXBlcywgJyonIGlzIGRpc2FsbG93ZWQsIHRocm93IGFueSBlcnJvcnMgKi9cbiAgX3VzZXJTZXRDbGllbnRJZChjbGllbnRJZCkge1xuICAgIGlmICghKHR5cGVvZiBjbGllbnRJZCA9PT0gXCJzdHJpbmdcIiB8fCBjbGllbnRJZCA9PT0gbnVsbCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXCJjbGllbnRJZCBtdXN0IGJlIGVpdGhlciBhIHN0cmluZyBvciBudWxsXCIsIDQwMDEyLCA0MDApO1xuICAgIH0gZWxzZSBpZiAoY2xpZW50SWQgPT09IFwiKlwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFxuICAgICAgICAnQ2FuXFx1MjAxOXQgdXNlIFwiKlwiIGFzIGEgY2xpZW50SWQgYXMgdGhhdCBzdHJpbmcgaXMgcmVzZXJ2ZWQuIChUbyBjaGFuZ2UgdGhlIGRlZmF1bHQgdG9rZW4gcmVxdWVzdCBiZWhhdmlvdXIgdG8gdXNlIGEgd2lsZGNhcmQgY2xpZW50SWQsIGluc3RhbnRpYXRlIHRoZSBsaWJyYXJ5IHdpdGgge2RlZmF1bHRUb2tlblBhcmFtczoge2NsaWVudElkOiBcIipcIn19KSwgb3IgaWYgY2FsbGluZyBhdXRob3JpemUoKSwgcGFzcyBpdCBpbiBhcyBhIHRva2VuUGFyYW06IGF1dGhvcml6ZSh7Y2xpZW50SWQ6IFwiKlwifSwgYXV0aE9wdGlvbnMpJyxcbiAgICAgICAgNDAwMTIsXG4gICAgICAgIDQwMFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZXJyID0gdGhpcy5fdW5jaGVja2VkU2V0Q2xpZW50SWQoY2xpZW50SWQpO1xuICAgICAgaWYgKGVycilcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuICAvKiBBYmx5LXNldDogbm8gdHlwZWNoZWNraW5nLCAnKicgaXMgYWxsb3dlZCBidXQgbm90IHNldCBvbiB0aGlzLmNsaWVudElkKSwgcmV0dXJuIGVycm9ycyB0byB0aGUgY2FsbGVyICovXG4gIF91bmNoZWNrZWRTZXRDbGllbnRJZChjbGllbnRJZCkge1xuICAgIGlmICh0aGlzLl90b2tlbkNsaWVudElkTWlzbWF0Y2goY2xpZW50SWQpKSB7XG4gICAgICBjb25zdCBtc2cgPSBcIlVuZXhwZWN0ZWQgY2xpZW50SWQgbWlzbWF0Y2g6IGNsaWVudCBoYXMgXCIgKyB0aGlzLmNsaWVudElkICsgXCIsIHJlcXVlc3RlZCBcIiArIGNsaWVudElkO1xuICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9ySW5mbyhtc2csIDQwMTAyLCA0MDEpO1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwiQXV0aC5fdW5jaGVja2VkU2V0Q2xpZW50SWQoKVwiLCBtc2cpO1xuICAgICAgcmV0dXJuIGVycjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jbGllbnRJZCA9IHRoaXMudG9rZW5QYXJhbXMuY2xpZW50SWQgPSBjbGllbnRJZDtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBfdG9rZW5DbGllbnRJZE1pc21hdGNoKHRva2VuQ2xpZW50SWQpIHtcbiAgICByZXR1cm4gISEodGhpcy5jbGllbnRJZCAmJiB0aGlzLmNsaWVudElkICE9PSBcIipcIiAmJiB0b2tlbkNsaWVudElkICYmIHRva2VuQ2xpZW50SWQgIT09IFwiKlwiICYmIHRoaXMuY2xpZW50SWQgIT09IHRva2VuQ2xpZW50SWQpO1xuICB9XG4gIHN0YXRpYyBpc1Rva2VuRXJyKGVycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yLmNvZGUgJiYgZXJyb3IuY29kZSA+PSA0MDE0MCAmJiBlcnJvci5jb2RlIDwgNDAxNTA7XG4gIH1cbiAgcmV2b2tlVG9rZW5zKHNwZWNpZmllcnMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucmVzdC5yZXZva2VUb2tlbnMoc3BlY2lmaWVycywgb3B0aW9ucyk7XG4gIH1cbn07XG52YXIgYXV0aF9kZWZhdWx0ID0gQXV0aDtcblxuLy8gc3JjL2NvbW1vbi90eXBlcy9odHRwLnRzXG5mdW5jdGlvbiBwYXJhbVN0cmluZyhwYXJhbXMpIHtcbiAgY29uc3QgcGFyYW1QYWlycyA9IFtdO1xuICBpZiAocGFyYW1zKSB7XG4gICAgZm9yIChjb25zdCBuZWVkbGUgaW4gcGFyYW1zKSB7XG4gICAgICBwYXJhbVBhaXJzLnB1c2gobmVlZGxlICsgXCI9XCIgKyBwYXJhbXNbbmVlZGxlXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJhbVBhaXJzLmpvaW4oXCImXCIpO1xufVxuZnVuY3Rpb24gYXBwZW5kaW5nUGFyYW1zKHVyaSwgcGFyYW1zKSB7XG4gIHJldHVybiB1cmkgKyAocGFyYW1zID8gXCI/XCIgOiBcIlwiKSArIHBhcmFtU3RyaW5nKHBhcmFtcyk7XG59XG5mdW5jdGlvbiBsb2dSZXN1bHQocmVzdWx0LCBtZXRob2QsIHVyaSwgcGFyYW1zLCBsb2dnZXIpIHtcbiAgaWYgKHJlc3VsdC5lcnJvcikge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbk5vU3RyaXAoXG4gICAgICBsb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICBcIkh0dHAuXCIgKyBtZXRob2QgKyBcIigpXCIsXG4gICAgICBcIlJlY2VpdmVkIEVycm9yOyBcIiArIGFwcGVuZGluZ1BhcmFtcyh1cmksIHBhcmFtcykgKyBcIjsgRXJyb3I6IFwiICsgaW5zcGVjdEVycm9yKHJlc3VsdC5lcnJvcilcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbk5vU3RyaXAoXG4gICAgICBsb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICBcIkh0dHAuXCIgKyBtZXRob2QgKyBcIigpXCIsXG4gICAgICBcIlJlY2VpdmVkOyBcIiArIGFwcGVuZGluZ1BhcmFtcyh1cmksIHBhcmFtcykgKyBcIjsgSGVhZGVyczogXCIgKyBwYXJhbVN0cmluZyhyZXN1bHQuaGVhZGVycykgKyBcIjsgU3RhdHVzQ29kZTogXCIgKyByZXN1bHQuc3RhdHVzQ29kZSArIFwiOyBCb2R5XCIgKyAoUGxhdGZvcm0uQnVmZmVyVXRpbHMuaXNCdWZmZXIocmVzdWx0LmJvZHkpID8gXCIgKEJhc2U2NCk6IFwiICsgUGxhdGZvcm0uQnVmZmVyVXRpbHMuYmFzZTY0RW5jb2RlKHJlc3VsdC5ib2R5KSA6IFwiOiBcIiArIHJlc3VsdC5ib2R5KVxuICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIGxvZ1JlcXVlc3QobWV0aG9kLCB1cmksIGJvZHksIHBhcmFtcywgbG9nZ2VyKSB7XG4gIGlmIChsb2dnZXIuc2hvdWxkTG9nKGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTykpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb25Ob1N0cmlwKFxuICAgICAgbG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJIdHRwLlwiICsgbWV0aG9kICsgXCIoKVwiLFxuICAgICAgXCJTZW5kaW5nOyBcIiArIGFwcGVuZGluZ1BhcmFtcyh1cmksIHBhcmFtcykgKyBcIjsgQm9keVwiICsgKFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmlzQnVmZmVyKGJvZHkpID8gXCIgKEJhc2U2NCk6IFwiICsgUGxhdGZvcm0uQnVmZmVyVXRpbHMuYmFzZTY0RW5jb2RlKGJvZHkpIDogXCI6IFwiICsgYm9keSlcbiAgICApO1xuICB9XG59XG52YXIgSHR0cCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5wbGF0Zm9ybUh0dHAgPSBuZXcgUGxhdGZvcm0uSHR0cChjbGllbnQpO1xuICAgIHRoaXMuY2hlY2tDb25uZWN0aXZpdHkgPSB0aGlzLnBsYXRmb3JtSHR0cC5jaGVja0Nvbm5lY3Rpdml0eSA/ICgpID0+IHRoaXMucGxhdGZvcm1IdHRwLmNoZWNrQ29ubmVjdGl2aXR5KCkgOiB2b2lkIDA7XG4gIH1cbiAgZ2V0IGxvZ2dlcigpIHtcbiAgICB2YXIgX2EyLCBfYjtcbiAgICByZXR1cm4gKF9iID0gKF9hMiA9IHRoaXMuY2xpZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmxvZ2dlcikgIT0gbnVsbCA/IF9iIDogbG9nZ2VyX2RlZmF1bHQuZGVmYXVsdExvZ2dlcjtcbiAgfVxuICBnZXQgc3VwcG9ydHNBdXRoSGVhZGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF0Zm9ybUh0dHAuc3VwcG9ydHNBdXRoSGVhZGVycztcbiAgfVxuICBnZXQgc3VwcG9ydHNMaW5rSGVhZGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF0Zm9ybUh0dHAuc3VwcG9ydHNMaW5rSGVhZGVycztcbiAgfVxuICBfZ2V0SG9zdHMoY2xpZW50KSB7XG4gICAgY29uc3QgY29ubmVjdGlvbiA9IGNsaWVudC5jb25uZWN0aW9uLCBjb25uZWN0aW9uSG9zdCA9IGNvbm5lY3Rpb24gJiYgY29ubmVjdGlvbi5jb25uZWN0aW9uTWFuYWdlci5ob3N0O1xuICAgIGlmIChjb25uZWN0aW9uSG9zdCkge1xuICAgICAgcmV0dXJuIFtjb25uZWN0aW9uSG9zdF0uY29uY2F0KGRlZmF1bHRzX2RlZmF1bHQuZ2V0RmFsbGJhY2tIb3N0cyhjbGllbnQub3B0aW9ucykpO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdHNfZGVmYXVsdC5nZXRIb3N0cyhjbGllbnQub3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgbm90IHRocm93IGFueSBlcnJvcnM7IHJhdGhlciwgaXQgd2lsbCBjb21tdW5pY2F0ZSBhbnkgZXJyb3IgYnkgcG9wdWxhdGluZyB0aGUge0BsaW5rIFJlcXVlc3RSZXN1bHQuZXJyb3J9IHByb3BlcnR5IG9mIHRoZSByZXR1cm5lZCB7QGxpbmsgUmVxdWVzdFJlc3VsdH0uXG4gICAqL1xuICBhc3luYyBkbyhtZXRob2QsIHBhdGgsIGhlYWRlcnMsIGJvZHksIHBhcmFtcykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNsaWVudDtcbiAgICAgIGlmICghY2xpZW50KSB7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiBuZXcgRXJyb3JJbmZvKFwiaHR0cC5kbyBjYWxsZWQgd2l0aG91dCBjbGllbnRcIiwgNWU0LCA1MDApIH07XG4gICAgICB9XG4gICAgICBjb25zdCB1cmlGcm9tSG9zdCA9IHR5cGVvZiBwYXRoID09PSBcImZ1bmN0aW9uXCIgPyBwYXRoIDogZnVuY3Rpb24oaG9zdCkge1xuICAgICAgICByZXR1cm4gY2xpZW50LmJhc2VVcmkoaG9zdCkgKyBwYXRoO1xuICAgICAgfTtcbiAgICAgIGNvbnN0IGN1cnJlbnRGYWxsYmFjayA9IGNsaWVudC5fY3VycmVudEZhbGxiYWNrO1xuICAgICAgaWYgKGN1cnJlbnRGYWxsYmFjaykge1xuICAgICAgICBpZiAoY3VycmVudEZhbGxiYWNrLnZhbGlkVW50aWwgPiBEYXRlLm5vdygpKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5kb1VyaShtZXRob2QsIHVyaUZyb21Ib3N0KGN1cnJlbnRGYWxsYmFjay5ob3N0KSwgaGVhZGVycywgYm9keSwgcGFyYW1zKTtcbiAgICAgICAgICBpZiAocmVzdWx0LmVycm9yICYmIHRoaXMucGxhdGZvcm1IdHRwLnNob3VsZEZhbGxiYWNrKHJlc3VsdC5lcnJvcikpIHtcbiAgICAgICAgICAgIGNsaWVudC5fY3VycmVudEZhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRvKG1ldGhvZCwgcGF0aCwgaGVhZGVycywgYm9keSwgcGFyYW1zKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbGllbnQuX2N1cnJlbnRGYWxsYmFjayA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGhvc3RzID0gdGhpcy5fZ2V0SG9zdHMoY2xpZW50KTtcbiAgICAgIGlmIChob3N0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9VcmkobWV0aG9kLCB1cmlGcm9tSG9zdChob3N0c1swXSksIGhlYWRlcnMsIGJvZHksIHBhcmFtcyk7XG4gICAgICB9XG4gICAgICBsZXQgdHJ5QUhvc3RTdGFydGVkQXQgPSBudWxsO1xuICAgICAgY29uc3QgdHJ5QUhvc3QgPSBhc3luYyAoY2FuZGlkYXRlSG9zdHMsIHBlcnNpc3RPblN1Y2Nlc3MpID0+IHtcbiAgICAgICAgY29uc3QgaG9zdCA9IGNhbmRpZGF0ZUhvc3RzLnNoaWZ0KCk7XG4gICAgICAgIHRyeUFIb3N0U3RhcnRlZEF0ID0gdHJ5QUhvc3RTdGFydGVkQXQgIT0gbnVsbCA/IHRyeUFIb3N0U3RhcnRlZEF0IDogLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZG9VcmkobWV0aG9kLCB1cmlGcm9tSG9zdChob3N0KSwgaGVhZGVycywgYm9keSwgcGFyYW1zKTtcbiAgICAgICAgaWYgKHJlc3VsdC5lcnJvciAmJiB0aGlzLnBsYXRmb3JtSHR0cC5zaG91bGRGYWxsYmFjayhyZXN1bHQuZXJyb3IpICYmIGNhbmRpZGF0ZUhvc3RzLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnN0IGVsYXBzZWRUaW1lID0gRGF0ZS5ub3coKSAtIHRyeUFIb3N0U3RhcnRlZEF0LmdldFRpbWUoKTtcbiAgICAgICAgICBpZiAoZWxhcHNlZFRpbWUgPiBjbGllbnQub3B0aW9ucy50aW1lb3V0cy5odHRwTWF4UmV0cnlEdXJhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgZXJyb3I6IG5ldyBFcnJvckluZm8oXG4gICAgICAgICAgICAgICAgYFRpbWVvdXQgZm9yIHRyeWluZyBmYWxsYmFjayBob3N0cyByZXRyaWVzLiBUb3RhbCBlbGFwc2VkIHRpbWUgZXhjZWVkZWQgdGhlICR7Y2xpZW50Lm9wdGlvbnMudGltZW91dHMuaHR0cE1heFJldHJ5RHVyYXRpb259bXMgbGltaXRgLFxuICAgICAgICAgICAgICAgIDUwMDAzLFxuICAgICAgICAgICAgICAgIDUwMFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ5QUhvc3QoY2FuZGlkYXRlSG9zdHMsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwZXJzaXN0T25TdWNjZXNzKSB7XG4gICAgICAgICAgY2xpZW50Ll9jdXJyZW50RmFsbGJhY2sgPSB7XG4gICAgICAgICAgICBob3N0LFxuICAgICAgICAgICAgdmFsaWRVbnRpbDogRGF0ZS5ub3coKSArIGNsaWVudC5vcHRpb25zLnRpbWVvdXRzLmZhbGxiYWNrUmV0cnlUaW1lb3V0XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIHJldHVybiB0cnlBSG9zdChob3N0cyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyBlcnJvcjogbmV3IEVycm9ySW5mbyhgVW5leHBlY3RlZCBlcnJvciBpbiBIdHRwLmRvOiAke2luc3BlY3RFcnJvcihlcnIpfWAsIDUwMCwgNWU0KSB9O1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVGhpcyBtZXRob2Qgd2lsbCBub3QgdGhyb3cgYW55IGVycm9yczsgcmF0aGVyLCBpdCB3aWxsIGNvbW11bmljYXRlIGFueSBlcnJvciBieSBwb3B1bGF0aW5nIHRoZSB7QGxpbmsgUmVxdWVzdFJlc3VsdC5lcnJvcn0gcHJvcGVydHkgb2YgdGhlIHJldHVybmVkIHtAbGluayBSZXF1ZXN0UmVzdWx0fS5cbiAgICovXG4gIGFzeW5jIGRvVXJpKG1ldGhvZCwgdXJpLCBoZWFkZXJzLCBib2R5LCBwYXJhbXMpIHtcbiAgICB0cnkge1xuICAgICAgbG9nUmVxdWVzdChtZXRob2QsIHVyaSwgYm9keSwgcGFyYW1zLCB0aGlzLmxvZ2dlcik7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBsYXRmb3JtSHR0cC5kb1VyaShtZXRob2QsIHVyaSwgaGVhZGVycywgYm9keSwgcGFyYW1zKTtcbiAgICAgIGlmICh0aGlzLmxvZ2dlci5zaG91bGRMb2cobG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPKSkge1xuICAgICAgICBsb2dSZXN1bHQocmVzdWx0LCBtZXRob2QsIHVyaSwgcGFyYW1zLCB0aGlzLmxvZ2dlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgZXJyb3I6IG5ldyBFcnJvckluZm8oYFVuZXhwZWN0ZWQgZXJyb3IgaW4gSHR0cC5kb1VyaTogJHtpbnNwZWN0RXJyb3IoZXJyKX1gLCA1MDAsIDVlNCkgfTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tb24vbGliL2NsaWVudC9iYXNlY2xpZW50LnRzXG52YXIgQmFzZUNsaWVudCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIC8qKlxuICAgICAqIFRoZXNlIGV4cG9ydHMgYXJlIGZvciB1c2UgYnkgVU1EIHBsdWdpbnM7IHJlYXNvbiBiZWluZyBzbyB0aGF0IGNvbnN0cnVjdG9ycyBhbmQgc3RhdGljIG1ldGhvZHMgY2FuIGJlIGFjY2Vzc2VkIGJ5IHRoZXNlIHBsdWdpbnMgd2l0aG91dCBuZWVkaW5nIHRvIGltcG9ydCB0aGUgY2xhc3NlcyBkaXJlY3RseSBhbmQgcmVzdWx0IGluIHRoZSBjbGFzcyBleGlzdGluZyBpbiBib3RoIHRoZSBwbHVnaW4gYW5kIHRoZSBjb3JlIGxpYnJhcnkuXG4gICAgICovXG4gICAgdGhpcy5QbGF0Zm9ybSA9IFBsYXRmb3JtO1xuICAgIHRoaXMuRXJyb3JJbmZvID0gRXJyb3JJbmZvO1xuICAgIHRoaXMuTG9nZ2VyID0gbG9nZ2VyX2RlZmF1bHQ7XG4gICAgdGhpcy5EZWZhdWx0cyA9IGRlZmF1bHRzX2RlZmF1bHQ7XG4gICAgdGhpcy5VdGlscyA9IHV0aWxzX2V4cG9ydHM7XG4gICAgdmFyIF9hMiwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2g7XG4gICAgdGhpcy5fYWRkaXRpb25hbEhUVFBSZXF1ZXN0SW1wbGVtZW50YXRpb25zID0gKF9hMiA9IG9wdGlvbnMucGx1Z2lucykgIT0gbnVsbCA/IF9hMiA6IG51bGw7XG4gICAgdGhpcy5sb2dnZXIgPSBuZXcgbG9nZ2VyX2RlZmF1bHQoKTtcbiAgICB0aGlzLmxvZ2dlci5zZXRMb2cob3B0aW9ucy5sb2dMZXZlbCwgb3B0aW9ucy5sb2dIYW5kbGVyKTtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgIFwiQmFzZUNsaWVudCgpXCIsXG4gICAgICBcImluaXRpYWxpemVkIHdpdGggY2xpZW50T3B0aW9ucyBcIiArIFBsYXRmb3JtLkNvbmZpZy5pbnNwZWN0KG9wdGlvbnMpXG4gICAgKTtcbiAgICB0aGlzLl9Nc2dQYWNrID0gKF9jID0gKF9iID0gb3B0aW9ucy5wbHVnaW5zKSA9PSBudWxsID8gdm9pZCAwIDogX2IuTXNnUGFjaykgIT0gbnVsbCA/IF9jIDogbnVsbDtcbiAgICBjb25zdCBub3JtYWxPcHRpb25zID0gdGhpcy5vcHRpb25zID0gZGVmYXVsdHNfZGVmYXVsdC5ub3JtYWxpc2VPcHRpb25zKG9wdGlvbnMsIHRoaXMuX01zZ1BhY2ssIHRoaXMubG9nZ2VyKTtcbiAgICBpZiAobm9ybWFsT3B0aW9ucy5rZXkpIHtcbiAgICAgIGNvbnN0IGtleU1hdGNoID0gbm9ybWFsT3B0aW9ucy5rZXkubWF0Y2goL14oW146XFxzXSspOihbXjouXFxzXSspJC8pO1xuICAgICAgaWYgKCFrZXlNYXRjaCkge1xuICAgICAgICBjb25zdCBtc2cgPSBcImludmFsaWQga2V5IHBhcmFtZXRlclwiO1xuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUiwgXCJCYXNlQ2xpZW50KClcIiwgbXNnKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhtc2csIDQwNDAwLCA0MDQpO1xuICAgICAgfVxuICAgICAgbm9ybWFsT3B0aW9ucy5rZXlOYW1lID0ga2V5TWF0Y2hbMV07XG4gICAgICBub3JtYWxPcHRpb25zLmtleVNlY3JldCA9IGtleU1hdGNoWzJdO1xuICAgIH1cbiAgICBpZiAoXCJjbGllbnRJZFwiIGluIG5vcm1hbE9wdGlvbnMpIHtcbiAgICAgIGlmICghKHR5cGVvZiBub3JtYWxPcHRpb25zLmNsaWVudElkID09PSBcInN0cmluZ1wiIHx8IG5vcm1hbE9wdGlvbnMuY2xpZW50SWQgPT09IG51bGwpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwiY2xpZW50SWQgbXVzdCBiZSBlaXRoZXIgYSBzdHJpbmcgb3IgbnVsbFwiLCA0MDAxMiwgNDAwKTtcbiAgICAgIGVsc2UgaWYgKG5vcm1hbE9wdGlvbnMuY2xpZW50SWQgPT09IFwiKlwiKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFxuICAgICAgICAgICdDYW5cXHUyMDE5dCB1c2UgXCIqXCIgYXMgYSBjbGllbnRJZCBhcyB0aGF0IHN0cmluZyBpcyByZXNlcnZlZC4gKFRvIGNoYW5nZSB0aGUgZGVmYXVsdCB0b2tlbiByZXF1ZXN0IGJlaGF2aW91ciB0byB1c2UgYSB3aWxkY2FyZCBjbGllbnRJZCwgdXNlIHtkZWZhdWx0VG9rZW5QYXJhbXM6IHtjbGllbnRJZDogXCIqXCJ9fSknLFxuICAgICAgICAgIDQwMDEyLFxuICAgICAgICAgIDQwMFxuICAgICAgICApO1xuICAgIH1cbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJCYXNlQ2xpZW50KClcIiwgXCJzdGFydGVkOyB2ZXJzaW9uID0gXCIgKyBkZWZhdWx0c19kZWZhdWx0LnZlcnNpb24pO1xuICAgIHRoaXMuX2N1cnJlbnRGYWxsYmFjayA9IG51bGw7XG4gICAgdGhpcy5zZXJ2ZXJUaW1lT2Zmc2V0ID0gbnVsbDtcbiAgICB0aGlzLmh0dHAgPSBuZXcgSHR0cCh0aGlzKTtcbiAgICB0aGlzLmF1dGggPSBuZXcgYXV0aF9kZWZhdWx0KHRoaXMsIG5vcm1hbE9wdGlvbnMpO1xuICAgIHRoaXMuX3Jlc3QgPSAoKF9kID0gb3B0aW9ucy5wbHVnaW5zKSA9PSBudWxsID8gdm9pZCAwIDogX2QuUmVzdCkgPyBuZXcgb3B0aW9ucy5wbHVnaW5zLlJlc3QodGhpcykgOiBudWxsO1xuICAgIHRoaXMuX0NyeXB0byA9IChfZiA9IChfZSA9IG9wdGlvbnMucGx1Z2lucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9lLkNyeXB0bykgIT0gbnVsbCA/IF9mIDogbnVsbDtcbiAgICB0aGlzLl9fRmlsdGVyZWRTdWJzY3JpcHRpb25zID0gKF9oID0gKF9nID0gb3B0aW9ucy5wbHVnaW5zKSA9PSBudWxsID8gdm9pZCAwIDogX2cuTWVzc2FnZUludGVyYWN0aW9ucykgIT0gbnVsbCA/IF9oIDogbnVsbDtcbiAgfVxuICBnZXQgcmVzdCgpIHtcbiAgICBpZiAoIXRoaXMuX3Jlc3QpIHtcbiAgICAgIHRocm93TWlzc2luZ1BsdWdpbkVycm9yKFwiUmVzdFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3Jlc3Q7XG4gIH1cbiAgZ2V0IF9GaWx0ZXJlZFN1YnNjcmlwdGlvbnMoKSB7XG4gICAgaWYgKCF0aGlzLl9fRmlsdGVyZWRTdWJzY3JpcHRpb25zKSB7XG4gICAgICB0aHJvd01pc3NpbmdQbHVnaW5FcnJvcihcIk1lc3NhZ2VJbnRlcmFjdGlvbnNcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9fRmlsdGVyZWRTdWJzY3JpcHRpb25zO1xuICB9XG4gIGdldCBjaGFubmVscygpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0LmNoYW5uZWxzO1xuICB9XG4gIGdldCBwdXNoKCkge1xuICAgIHJldHVybiB0aGlzLnJlc3QucHVzaDtcbiAgfVxuICBnZXQgZGV2aWNlKCkge1xuICAgIHZhciBfYTI7XG4gICAgaWYgKCEoKF9hMiA9IHRoaXMub3B0aW9ucy5wbHVnaW5zKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLlB1c2gpIHx8ICF0aGlzLnB1c2guTG9jYWxEZXZpY2UpIHtcbiAgICAgIHRocm93TWlzc2luZ1BsdWdpbkVycm9yKFwiUHVzaFwiKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9kZXZpY2UpIHtcbiAgICAgIHRoaXMuX2RldmljZSA9IHRoaXMucHVzaC5Mb2NhbERldmljZS5sb2FkKHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZGV2aWNlO1xuICB9XG4gIGJhc2VVcmkoaG9zdCkge1xuICAgIHJldHVybiBkZWZhdWx0c19kZWZhdWx0LmdldEh0dHBTY2hlbWUodGhpcy5vcHRpb25zKSArIGhvc3QgKyBcIjpcIiArIGRlZmF1bHRzX2RlZmF1bHQuZ2V0UG9ydCh0aGlzLm9wdGlvbnMsIGZhbHNlKTtcbiAgfVxuICBhc3luYyBzdGF0cyhwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0LnN0YXRzKHBhcmFtcyk7XG4gIH1cbiAgYXN5bmMgdGltZShwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0LnRpbWUocGFyYW1zKTtcbiAgfVxuICBhc3luYyByZXF1ZXN0KG1ldGhvZCwgcGF0aCwgdmVyc2lvbjIsIHBhcmFtcywgYm9keSwgY3VzdG9tSGVhZGVycykge1xuICAgIHJldHVybiB0aGlzLnJlc3QucmVxdWVzdChtZXRob2QsIHBhdGgsIHZlcnNpb24yLCBwYXJhbXMsIGJvZHksIGN1c3RvbUhlYWRlcnMpO1xuICB9XG4gIGJhdGNoUHVibGlzaChzcGVjT3JTcGVjcykge1xuICAgIHJldHVybiB0aGlzLnJlc3QuYmF0Y2hQdWJsaXNoKHNwZWNPclNwZWNzKTtcbiAgfVxuICBiYXRjaFByZXNlbmNlKGNoYW5uZWxzKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5iYXRjaFByZXNlbmNlKGNoYW5uZWxzKTtcbiAgfVxuICBzZXRMb2cobG9nT3B0aW9ucykge1xuICAgIHRoaXMubG9nZ2VyLnNldExvZyhsb2dPcHRpb25zLmxldmVsLCBsb2dPcHRpb25zLmhhbmRsZXIpO1xuICB9XG59O1xuQmFzZUNsaWVudC5QbGF0Zm9ybSA9IFBsYXRmb3JtO1xudmFyIGJhc2VjbGllbnRfZGVmYXVsdCA9IEJhc2VDbGllbnQ7XG5cbi8vIHNyYy9jb21tb24vbGliL3R5cGVzL2RldmljZWRldGFpbHMudHNcbnZhciBEZXZpY2VEZXRhaWxzID0gY2xhc3MgX0RldmljZURldGFpbHMge1xuICB0b0pTT04oKSB7XG4gICAgdmFyIF9hMiwgX2IsIF9jO1xuICAgIHJldHVybiB7XG4gICAgICBpZDogdGhpcy5pZCxcbiAgICAgIGRldmljZVNlY3JldDogdGhpcy5kZXZpY2VTZWNyZXQsXG4gICAgICBwbGF0Zm9ybTogdGhpcy5wbGF0Zm9ybSxcbiAgICAgIGZvcm1GYWN0b3I6IHRoaXMuZm9ybUZhY3RvcixcbiAgICAgIGNsaWVudElkOiB0aGlzLmNsaWVudElkLFxuICAgICAgbWV0YWRhdGE6IHRoaXMubWV0YWRhdGEsXG4gICAgICBkZXZpY2VJZGVudGl0eVRva2VuOiB0aGlzLmRldmljZUlkZW50aXR5VG9rZW4sXG4gICAgICBwdXNoOiB7XG4gICAgICAgIHJlY2lwaWVudDogKF9hMiA9IHRoaXMucHVzaCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5yZWNpcGllbnQsXG4gICAgICAgIHN0YXRlOiAoX2IgPSB0aGlzLnB1c2gpID09IG51bGwgPyB2b2lkIDAgOiBfYi5zdGF0ZSxcbiAgICAgICAgZXJyb3I6IChfYyA9IHRoaXMucHVzaCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmVycm9yXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICB2YXIgX2EyLCBfYiwgX2MsIF9kO1xuICAgIGxldCByZXN1bHQgPSBcIltEZXZpY2VEZXRhaWxzXCI7XG4gICAgaWYgKHRoaXMuaWQpXG4gICAgICByZXN1bHQgKz0gXCI7IGlkPVwiICsgdGhpcy5pZDtcbiAgICBpZiAodGhpcy5wbGF0Zm9ybSlcbiAgICAgIHJlc3VsdCArPSBcIjsgcGxhdGZvcm09XCIgKyB0aGlzLnBsYXRmb3JtO1xuICAgIGlmICh0aGlzLmZvcm1GYWN0b3IpXG4gICAgICByZXN1bHQgKz0gXCI7IGZvcm1GYWN0b3I9XCIgKyB0aGlzLmZvcm1GYWN0b3I7XG4gICAgaWYgKHRoaXMuY2xpZW50SWQpXG4gICAgICByZXN1bHQgKz0gXCI7IGNsaWVudElkPVwiICsgdGhpcy5jbGllbnRJZDtcbiAgICBpZiAodGhpcy5tZXRhZGF0YSlcbiAgICAgIHJlc3VsdCArPSBcIjsgbWV0YWRhdGE9XCIgKyB0aGlzLm1ldGFkYXRhO1xuICAgIGlmICh0aGlzLmRldmljZUlkZW50aXR5VG9rZW4pXG4gICAgICByZXN1bHQgKz0gXCI7IGRldmljZUlkZW50aXR5VG9rZW49XCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLmRldmljZUlkZW50aXR5VG9rZW4pO1xuICAgIGlmICgoX2EyID0gdGhpcy5wdXNoKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLnJlY2lwaWVudClcbiAgICAgIHJlc3VsdCArPSBcIjsgcHVzaC5yZWNpcGllbnQ9XCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLnB1c2gucmVjaXBpZW50KTtcbiAgICBpZiAoKF9iID0gdGhpcy5wdXNoKSA9PSBudWxsID8gdm9pZCAwIDogX2Iuc3RhdGUpXG4gICAgICByZXN1bHQgKz0gXCI7IHB1c2guc3RhdGU9XCIgKyB0aGlzLnB1c2guc3RhdGU7XG4gICAgaWYgKChfYyA9IHRoaXMucHVzaCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmVycm9yKVxuICAgICAgcmVzdWx0ICs9IFwiOyBwdXNoLmVycm9yPVwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy5wdXNoLmVycm9yKTtcbiAgICBpZiAoKF9kID0gdGhpcy5wdXNoKSA9PSBudWxsID8gdm9pZCAwIDogX2QubWV0YWRhdGEpXG4gICAgICByZXN1bHQgKz0gXCI7IHB1c2gubWV0YWRhdGE9XCIgKyB0aGlzLnB1c2gubWV0YWRhdGE7XG4gICAgcmVzdWx0ICs9IFwiXVwiO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgc3RhdGljIHRvUmVxdWVzdEJvZHkoYm9keSwgTXNnUGFjaywgZm9ybWF0KSB7XG4gICAgcmV0dXJuIGVuY29kZUJvZHkoYm9keSwgTXNnUGFjaywgZm9ybWF0KTtcbiAgfVxuICBzdGF0aWMgZnJvbVJlc3BvbnNlQm9keShib2R5LCBNc2dQYWNrLCBmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0KSB7XG4gICAgICBib2R5ID0gZGVjb2RlQm9keShib2R5LCBNc2dQYWNrLCBmb3JtYXQpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShib2R5KSkge1xuICAgICAgcmV0dXJuIF9EZXZpY2VEZXRhaWxzLmZyb21WYWx1ZXNBcnJheShib2R5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIF9EZXZpY2VEZXRhaWxzLmZyb21WYWx1ZXMoYm9keSk7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBmcm9tVmFsdWVzKHZhbHVlcykge1xuICAgIHZhbHVlcy5lcnJvciA9IHZhbHVlcy5lcnJvciAmJiBFcnJvckluZm8uZnJvbVZhbHVlcyh2YWx1ZXMuZXJyb3IpO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBfRGV2aWNlRGV0YWlscygpLCB2YWx1ZXMpO1xuICB9XG4gIHN0YXRpYyBmcm9tTG9jYWxEZXZpY2UoZGV2aWNlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IF9EZXZpY2VEZXRhaWxzKCksIGRldmljZSk7XG4gIH1cbiAgc3RhdGljIGZyb21WYWx1ZXNBcnJheSh2YWx1ZXMpIHtcbiAgICBjb25zdCBjb3VudCA9IHZhbHVlcy5sZW5ndGgsIHJlc3VsdCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKVxuICAgICAgcmVzdWx0W2ldID0gX0RldmljZURldGFpbHMuZnJvbVZhbHVlcyh2YWx1ZXNbaV0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG52YXIgZGV2aWNlZGV0YWlsc19kZWZhdWx0ID0gRGV2aWNlRGV0YWlscztcblxuLy8gc3JjL2NvbW1vbi9saWIvY2xpZW50L3Jlc291cmNlLnRzXG5hc3luYyBmdW5jdGlvbiB3aXRoQXV0aERldGFpbHMoY2xpZW50LCBoZWFkZXJzLCBwYXJhbXMsIG9wQ2FsbGJhY2spIHtcbiAgaWYgKGNsaWVudC5odHRwLnN1cHBvcnRzQXV0aEhlYWRlcnMpIHtcbiAgICBjb25zdCBhdXRoSGVhZGVycyA9IGF3YWl0IGNsaWVudC5hdXRoLmdldEF1dGhIZWFkZXJzKCk7XG4gICAgcmV0dXJuIG9wQ2FsbGJhY2sobWl4aW4oYXV0aEhlYWRlcnMsIGhlYWRlcnMpLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGF1dGhQYXJhbXMgPSBhd2FpdCBjbGllbnQuYXV0aC5nZXRBdXRoUGFyYW1zKCk7XG4gICAgcmV0dXJuIG9wQ2FsbGJhY2soaGVhZGVycywgbWl4aW4oYXV0aFBhcmFtcywgcGFyYW1zKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHVuZW52ZWxvcGUocmVzdWx0LCBNc2dQYWNrLCBmb3JtYXQpIHtcbiAgaWYgKHJlc3VsdC5lcnIgJiYgIXJlc3VsdC5ib2R5KSB7XG4gICAgcmV0dXJuIHsgZXJyOiByZXN1bHQuZXJyIH07XG4gIH1cbiAgaWYgKHJlc3VsdC5zdGF0dXNDb2RlID09PSBIdHRwU3RhdHVzQ29kZXNfZGVmYXVsdC5Ob0NvbnRlbnQpIHtcbiAgICByZXR1cm4gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgcmVzdWx0KSwgeyBib2R5OiBbXSwgdW5wYWNrZWQ6IHRydWUgfSk7XG4gIH1cbiAgbGV0IGJvZHkgPSByZXN1bHQuYm9keTtcbiAgaWYgKCFyZXN1bHQudW5wYWNrZWQpIHtcbiAgICB0cnkge1xuICAgICAgYm9keSA9IGRlY29kZUJvZHkoYm9keSwgTXNnUGFjaywgZm9ybWF0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoaXNFcnJvckluZm9PclBhcnRpYWxFcnJvckluZm8oZSkpIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyOiBlIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4geyBlcnI6IG5ldyBQYXJ0aWFsRXJyb3JJbmZvKGluc3BlY3RFcnJvcihlKSwgbnVsbCkgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFib2R5KSB7XG4gICAgcmV0dXJuIHsgZXJyOiBuZXcgUGFydGlhbEVycm9ySW5mbyhcInVuZW52ZWxvcGUoKTogUmVzcG9uc2UgYm9keSBpcyBtaXNzaW5nXCIsIG51bGwpIH07XG4gIH1cbiAgY29uc3QgeyBzdGF0dXNDb2RlOiB3cmFwcGVkU3RhdHVzQ29kZSwgcmVzcG9uc2UsIGhlYWRlcnM6IHdyYXBwZWRIZWFkZXJzIH0gPSBib2R5O1xuICBpZiAod3JhcHBlZFN0YXR1c0NvZGUgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCByZXN1bHQpLCB7IGJvZHksIHVucGFja2VkOiB0cnVlIH0pO1xuICB9XG4gIGlmICh3cmFwcGVkU3RhdHVzQ29kZSA8IDIwMCB8fCB3cmFwcGVkU3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICBsZXQgd3JhcHBlZEVyciA9IHJlc3BvbnNlICYmIHJlc3BvbnNlLmVycm9yIHx8IHJlc3VsdC5lcnI7XG4gICAgaWYgKCF3cmFwcGVkRXJyKSB7XG4gICAgICB3cmFwcGVkRXJyID0gbmV3IEVycm9yKFwiRXJyb3IgaW4gdW5lbnZlbG9waW5nIFwiICsgYm9keSk7XG4gICAgICB3cmFwcGVkRXJyLnN0YXR1c0NvZGUgPSB3cmFwcGVkU3RhdHVzQ29kZTtcbiAgICB9XG4gICAgcmV0dXJuIHsgZXJyOiB3cmFwcGVkRXJyLCBib2R5OiByZXNwb25zZSwgaGVhZGVyczogd3JhcHBlZEhlYWRlcnMsIHVucGFja2VkOiB0cnVlLCBzdGF0dXNDb2RlOiB3cmFwcGVkU3RhdHVzQ29kZSB9O1xuICB9XG4gIHJldHVybiB7IGVycjogcmVzdWx0LmVyciwgYm9keTogcmVzcG9uc2UsIGhlYWRlcnM6IHdyYXBwZWRIZWFkZXJzLCB1bnBhY2tlZDogdHJ1ZSwgc3RhdHVzQ29kZTogd3JhcHBlZFN0YXR1c0NvZGUgfTtcbn1cbmZ1bmN0aW9uIGxvZ1Jlc3VsdDIocmVzdWx0LCBtZXRob2QsIHBhdGgsIHBhcmFtcywgbG9nZ2VyKSB7XG4gIGlmIChyZXN1bHQuZXJyKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgbG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJSZXNvdXJjZS5cIiArIG1ldGhvZCArIFwiKClcIixcbiAgICAgIFwiUmVjZWl2ZWQgRXJyb3I7IFwiICsgYXBwZW5kaW5nUGFyYW1zKHBhdGgsIHBhcmFtcykgKyBcIjsgRXJyb3I6IFwiICsgaW5zcGVjdEVycm9yKHJlc3VsdC5lcnIpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICBsb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICBcIlJlc291cmNlLlwiICsgbWV0aG9kICsgXCIoKVwiLFxuICAgICAgXCJSZWNlaXZlZDsgXCIgKyBhcHBlbmRpbmdQYXJhbXMocGF0aCwgcGFyYW1zKSArIFwiOyBIZWFkZXJzOiBcIiArIHBhcmFtU3RyaW5nKHJlc3VsdC5oZWFkZXJzKSArIFwiOyBTdGF0dXNDb2RlOiBcIiArIHJlc3VsdC5zdGF0dXNDb2RlICsgXCI7IEJvZHk6IFwiICsgKFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmlzQnVmZmVyKHJlc3VsdC5ib2R5KSA/IFwiIChCYXNlNjQpOiBcIiArIFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmJhc2U2NEVuY29kZShyZXN1bHQuYm9keSkgOiBcIjogXCIgKyBQbGF0Zm9ybS5Db25maWcuaW5zcGVjdChyZXN1bHQuYm9keSkpXG4gICAgKTtcbiAgfVxufVxudmFyIFJlc291cmNlID0gY2xhc3MgX1Jlc291cmNlIHtcbiAgc3RhdGljIGFzeW5jIGdldChjbGllbnQsIHBhdGgsIGhlYWRlcnMsIHBhcmFtcywgZW52ZWxvcGUsIHRocm93RXJyb3IpIHtcbiAgICByZXR1cm4gX1Jlc291cmNlLmRvKEh0dHBNZXRob2RzX2RlZmF1bHQuR2V0LCBjbGllbnQsIHBhdGgsIG51bGwsIGhlYWRlcnMsIHBhcmFtcywgZW52ZWxvcGUsIHRocm93RXJyb3IgIT0gbnVsbCA/IHRocm93RXJyb3IgOiBmYWxzZSk7XG4gIH1cbiAgc3RhdGljIGFzeW5jIGRlbGV0ZShjbGllbnQsIHBhdGgsIGhlYWRlcnMsIHBhcmFtcywgZW52ZWxvcGUsIHRocm93RXJyb3IpIHtcbiAgICByZXR1cm4gX1Jlc291cmNlLmRvKEh0dHBNZXRob2RzX2RlZmF1bHQuRGVsZXRlLCBjbGllbnQsIHBhdGgsIG51bGwsIGhlYWRlcnMsIHBhcmFtcywgZW52ZWxvcGUsIHRocm93RXJyb3IpO1xuICB9XG4gIHN0YXRpYyBhc3luYyBwb3N0KGNsaWVudCwgcGF0aCwgYm9keSwgaGVhZGVycywgcGFyYW1zLCBlbnZlbG9wZSwgdGhyb3dFcnJvcikge1xuICAgIHJldHVybiBfUmVzb3VyY2UuZG8oSHR0cE1ldGhvZHNfZGVmYXVsdC5Qb3N0LCBjbGllbnQsIHBhdGgsIGJvZHksIGhlYWRlcnMsIHBhcmFtcywgZW52ZWxvcGUsIHRocm93RXJyb3IpO1xuICB9XG4gIHN0YXRpYyBhc3luYyBwYXRjaChjbGllbnQsIHBhdGgsIGJvZHksIGhlYWRlcnMsIHBhcmFtcywgZW52ZWxvcGUsIHRocm93RXJyb3IpIHtcbiAgICByZXR1cm4gX1Jlc291cmNlLmRvKEh0dHBNZXRob2RzX2RlZmF1bHQuUGF0Y2gsIGNsaWVudCwgcGF0aCwgYm9keSwgaGVhZGVycywgcGFyYW1zLCBlbnZlbG9wZSwgdGhyb3dFcnJvcik7XG4gIH1cbiAgc3RhdGljIGFzeW5jIHB1dChjbGllbnQsIHBhdGgsIGJvZHksIGhlYWRlcnMsIHBhcmFtcywgZW52ZWxvcGUsIHRocm93RXJyb3IpIHtcbiAgICByZXR1cm4gX1Jlc291cmNlLmRvKEh0dHBNZXRob2RzX2RlZmF1bHQuUHV0LCBjbGllbnQsIHBhdGgsIGJvZHksIGhlYWRlcnMsIHBhcmFtcywgZW52ZWxvcGUsIHRocm93RXJyb3IpO1xuICB9XG4gIHN0YXRpYyBhc3luYyBkbyhtZXRob2QsIGNsaWVudCwgcGF0aCwgYm9keSwgaGVhZGVycywgcGFyYW1zLCBlbnZlbG9wZSwgdGhyb3dFcnJvcikge1xuICAgIGlmIChlbnZlbG9wZSkge1xuICAgICAgKHBhcmFtcyA9IHBhcmFtcyB8fCB7fSlbXCJlbnZlbG9wZVwiXSA9IGVudmVsb3BlO1xuICAgIH1cbiAgICBjb25zdCBsb2dnZXIgPSBjbGllbnQubG9nZ2VyO1xuICAgIGFzeW5jIGZ1bmN0aW9uIGRvUmVxdWVzdChoZWFkZXJzMiwgcGFyYW1zMikge1xuICAgICAgdmFyIF9hMjtcbiAgICAgIGlmIChsb2dnZXIuc2hvdWxkTG9nKGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTykpIHtcbiAgICAgICAgbGV0IGRlY29kZWRCb2R5ID0gYm9keTtcbiAgICAgICAgaWYgKCgoX2EyID0gaGVhZGVyczJbXCJjb250ZW50LXR5cGVcIl0pID09IG51bGwgPyB2b2lkIDAgOiBfYTIuaW5kZXhPZihcIm1zZ3BhY2tcIikpID4gMCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIWNsaWVudC5fTXNnUGFjaykge1xuICAgICAgICAgICAgICB0aHJvd01pc3NpbmdQbHVnaW5FcnJvcihcIk1zZ1BhY2tcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWNvZGVkQm9keSA9IGNsaWVudC5fTXNnUGFjay5kZWNvZGUoYm9keSk7XG4gICAgICAgICAgfSBjYXRjaCAoZGVjb2RlRXJyKSB7XG4gICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgICAgIGxvZ2dlcixcbiAgICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICAgICAgICBcIlJlc291cmNlLlwiICsgbWV0aG9kICsgXCIoKVwiLFxuICAgICAgICAgICAgICBcIlNlbmRpbmcgTXNnUGFjayBEZWNvZGluZyBFcnJvcjogXCIgKyBpbnNwZWN0RXJyb3IoZGVjb2RlRXJyKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgIGxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgICAgXCJSZXNvdXJjZS5cIiArIG1ldGhvZCArIFwiKClcIixcbiAgICAgICAgICBcIlNlbmRpbmc7IFwiICsgYXBwZW5kaW5nUGFyYW1zKHBhdGgsIHBhcmFtczIpICsgXCI7IEJvZHk6IFwiICsgZGVjb2RlZEJvZHlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGh0dHBSZXN1bHQgPSBhd2FpdCBjbGllbnQuaHR0cC5kbyhtZXRob2QsIHBhdGgsIGhlYWRlcnMyLCBib2R5LCBwYXJhbXMyKTtcbiAgICAgIGlmIChodHRwUmVzdWx0LmVycm9yICYmIGF1dGhfZGVmYXVsdC5pc1Rva2VuRXJyKGh0dHBSZXN1bHQuZXJyb3IpKSB7XG4gICAgICAgIGF3YWl0IGNsaWVudC5hdXRoLmF1dGhvcml6ZShudWxsLCBudWxsKTtcbiAgICAgICAgcmV0dXJuIHdpdGhBdXRoRGV0YWlscyhjbGllbnQsIGhlYWRlcnMyLCBwYXJhbXMyLCBkb1JlcXVlc3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXJyOiBodHRwUmVzdWx0LmVycm9yLFxuICAgICAgICBib2R5OiBodHRwUmVzdWx0LmJvZHksXG4gICAgICAgIGhlYWRlcnM6IGh0dHBSZXN1bHQuaGVhZGVycyxcbiAgICAgICAgdW5wYWNrZWQ6IGh0dHBSZXN1bHQudW5wYWNrZWQsXG4gICAgICAgIHN0YXR1c0NvZGU6IGh0dHBSZXN1bHQuc3RhdHVzQ29kZVxuICAgICAgfTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHdpdGhBdXRoRGV0YWlscyhjbGllbnQsIGhlYWRlcnMsIHBhcmFtcywgZG9SZXF1ZXN0KTtcbiAgICBpZiAoZW52ZWxvcGUpIHtcbiAgICAgIHJlc3VsdCA9IHVuZW52ZWxvcGUocmVzdWx0LCBjbGllbnQuX01zZ1BhY2ssIGVudmVsb3BlKTtcbiAgICB9XG4gICAgaWYgKGxvZ2dlci5zaG91bGRMb2cobG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPKSkge1xuICAgICAgbG9nUmVzdWx0MihyZXN1bHQsIG1ldGhvZCwgcGF0aCwgcGFyYW1zLCBsb2dnZXIpO1xuICAgIH1cbiAgICBpZiAodGhyb3dFcnJvcikge1xuICAgICAgaWYgKHJlc3VsdC5lcnIpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0LmVycjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gX19zcHJlYWRWYWx1ZXMoe30sIHJlc3VsdCk7XG4gICAgICAgIGRlbGV0ZSByZXNwb25zZS5lcnI7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbnZhciByZXNvdXJjZV9kZWZhdWx0ID0gUmVzb3VyY2U7XG5cbi8vIHNyYy9jb21tb24vbGliL2NsaWVudC9wYWdpbmF0ZWRyZXNvdXJjZS50c1xuZnVuY3Rpb24gZ2V0UmVsUGFyYW1zKGxpbmtVcmwpIHtcbiAgY29uc3QgdXJsTWF0Y2ggPSBsaW5rVXJsLm1hdGNoKC9eXFwuXFwvKFxcdyspXFw/KC4qKSQvKTtcbiAgcmV0dXJuIHVybE1hdGNoICYmIHVybE1hdGNoWzJdICYmIHBhcnNlUXVlcnlTdHJpbmcodXJsTWF0Y2hbMl0pO1xufVxuZnVuY3Rpb24gcGFyc2VSZWxMaW5rcyhsaW5rSGVhZGVyKSB7XG4gIGlmICh0eXBlb2YgbGlua0hlYWRlciA9PSBcInN0cmluZ1wiKVxuICAgIGxpbmtIZWFkZXIgPSBsaW5rSGVhZGVyLnNwbGl0KFwiLFwiKTtcbiAgY29uc3QgcmVsUGFyYW1zID0ge307XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGlua0hlYWRlci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGxpbmtNYXRjaCA9IGxpbmtIZWFkZXJbaV0ubWF0Y2goL15cXHMqPCguKyk+O1xccypyZWw9XCIoXFx3KylcIiQvKTtcbiAgICBpZiAobGlua01hdGNoKSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSBnZXRSZWxQYXJhbXMobGlua01hdGNoWzFdKTtcbiAgICAgIGlmIChwYXJhbXMpXG4gICAgICAgIHJlbFBhcmFtc1tsaW5rTWF0Y2hbMl1dID0gcGFyYW1zO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVsUGFyYW1zO1xufVxuZnVuY3Rpb24gcmV0dXJuRXJyT25seShlcnIsIGJvZHksIHVzZUhQUikge1xuICByZXR1cm4gISh1c2VIUFIgJiYgKGJvZHkgfHwgdHlwZW9mIGVyci5jb2RlID09PSBcIm51bWJlclwiKSk7XG59XG52YXIgUGFnaW5hdGVkUmVzb3VyY2UgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCwgcGF0aCwgaGVhZGVycywgZW52ZWxvcGUsIGJvZHlIYW5kbGVyLCB1c2VIdHRwUGFnaW5hdGVkUmVzcG9uc2UpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgIHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgdGhpcy5lbnZlbG9wZSA9IGVudmVsb3BlICE9IG51bGwgPyBlbnZlbG9wZSA6IG51bGw7XG4gICAgdGhpcy5ib2R5SGFuZGxlciA9IGJvZHlIYW5kbGVyO1xuICAgIHRoaXMudXNlSHR0cFBhZ2luYXRlZFJlc3BvbnNlID0gdXNlSHR0cFBhZ2luYXRlZFJlc3BvbnNlIHx8IGZhbHNlO1xuICB9XG4gIGdldCBsb2dnZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmxvZ2dlcjtcbiAgfVxuICBhc3luYyBnZXQocGFyYW1zKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzb3VyY2VfZGVmYXVsdC5nZXQodGhpcy5jbGllbnQsIHRoaXMucGF0aCwgdGhpcy5oZWFkZXJzLCBwYXJhbXMsIHRoaXMuZW52ZWxvcGUsIGZhbHNlKTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVQYWdlKHJlc3VsdCk7XG4gIH1cbiAgYXN5bmMgZGVsZXRlKHBhcmFtcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc291cmNlX2RlZmF1bHQuZGVsZXRlKHRoaXMuY2xpZW50LCB0aGlzLnBhdGgsIHRoaXMuaGVhZGVycywgcGFyYW1zLCB0aGlzLmVudmVsb3BlLCBmYWxzZSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUGFnZShyZXN1bHQpO1xuICB9XG4gIGFzeW5jIHBvc3QocGFyYW1zLCBib2R5KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzb3VyY2VfZGVmYXVsdC5wb3N0KHRoaXMuY2xpZW50LCB0aGlzLnBhdGgsIGJvZHksIHRoaXMuaGVhZGVycywgcGFyYW1zLCB0aGlzLmVudmVsb3BlLCBmYWxzZSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUGFnZShyZXN1bHQpO1xuICB9XG4gIGFzeW5jIHB1dChwYXJhbXMsIGJvZHkpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNvdXJjZV9kZWZhdWx0LnB1dCh0aGlzLmNsaWVudCwgdGhpcy5wYXRoLCBib2R5LCB0aGlzLmhlYWRlcnMsIHBhcmFtcywgdGhpcy5lbnZlbG9wZSwgZmFsc2UpO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVBhZ2UocmVzdWx0KTtcbiAgfVxuICBhc3luYyBwYXRjaChwYXJhbXMsIGJvZHkpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNvdXJjZV9kZWZhdWx0LnBhdGNoKHRoaXMuY2xpZW50LCB0aGlzLnBhdGgsIGJvZHksIHRoaXMuaGVhZGVycywgcGFyYW1zLCB0aGlzLmVudmVsb3BlLCBmYWxzZSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUGFnZShyZXN1bHQpO1xuICB9XG4gIGFzeW5jIGhhbmRsZVBhZ2UocmVzdWx0KSB7XG4gICAgaWYgKHJlc3VsdC5lcnIgJiYgcmV0dXJuRXJyT25seShyZXN1bHQuZXJyLCByZXN1bHQuYm9keSwgdGhpcy51c2VIdHRwUGFnaW5hdGVkUmVzcG9uc2UpKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgIFwiUGFnaW5hdGVkUmVzb3VyY2UuaGFuZGxlUGFnZSgpXCIsXG4gICAgICAgIFwiVW5leHBlY3RlZCBlcnJvciBnZXR0aW5nIHJlc291cmNlOiBlcnIgPSBcIiArIGluc3BlY3RFcnJvcihyZXN1bHQuZXJyKVxuICAgICAgKTtcbiAgICAgIHRocm93IHJlc3VsdC5lcnI7XG4gICAgfVxuICAgIGxldCBpdGVtcywgbGlua0hlYWRlciwgcmVsUGFyYW1zO1xuICAgIHRyeSB7XG4gICAgICBpdGVtcyA9IHJlc3VsdC5zdGF0dXNDb2RlID09IEh0dHBTdGF0dXNDb2Rlc19kZWZhdWx0Lk5vQ29udGVudCA/IFtdIDogYXdhaXQgdGhpcy5ib2R5SGFuZGxlcihyZXN1bHQuYm9keSwgcmVzdWx0LmhlYWRlcnMgfHwge30sIHJlc3VsdC51bnBhY2tlZCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgcmVzdWx0LmVyciB8fCBlO1xuICAgIH1cbiAgICBpZiAocmVzdWx0LmhlYWRlcnMgJiYgKGxpbmtIZWFkZXIgPSByZXN1bHQuaGVhZGVyc1tcIkxpbmtcIl0gfHwgcmVzdWx0LmhlYWRlcnNbXCJsaW5rXCJdKSkge1xuICAgICAgcmVsUGFyYW1zID0gcGFyc2VSZWxMaW5rcyhsaW5rSGVhZGVyKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudXNlSHR0cFBhZ2luYXRlZFJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gbmV3IEh0dHBQYWdpbmF0ZWRSZXNwb25zZShcbiAgICAgICAgdGhpcyxcbiAgICAgICAgaXRlbXMsXG4gICAgICAgIHJlc3VsdC5oZWFkZXJzIHx8IHt9LFxuICAgICAgICByZXN1bHQuc3RhdHVzQ29kZSxcbiAgICAgICAgcmVsUGFyYW1zLFxuICAgICAgICByZXN1bHQuZXJyXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IFBhZ2luYXRlZFJlc3VsdCh0aGlzLCBpdGVtcywgcmVsUGFyYW1zKTtcbiAgICB9XG4gIH1cbn07XG52YXIgUGFnaW5hdGVkUmVzdWx0ID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihyZXNvdXJjZSwgaXRlbXMsIHJlbFBhcmFtcykge1xuICAgIHRoaXMucmVzb3VyY2UgPSByZXNvdXJjZTtcbiAgICB0aGlzLml0ZW1zID0gaXRlbXM7XG4gICAgY29uc3Qgc2VsZjIgPSB0aGlzO1xuICAgIGlmIChyZWxQYXJhbXMpIHtcbiAgICAgIGlmIChcImZpcnN0XCIgaW4gcmVsUGFyYW1zKSB7XG4gICAgICAgIHRoaXMuZmlyc3QgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZjIuZ2V0KHJlbFBhcmFtcy5maXJzdCk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAoXCJjdXJyZW50XCIgaW4gcmVsUGFyYW1zKSB7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBzZWxmMi5nZXQocmVsUGFyYW1zLmN1cnJlbnQpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdGhpcy5uZXh0ID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChcIm5leHRcIiBpbiByZWxQYXJhbXMpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZjIuZ2V0KHJlbFBhcmFtcy5uZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMuaGFzTmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gXCJuZXh0XCIgaW4gcmVsUGFyYW1zO1xuICAgICAgfTtcbiAgICAgIHRoaXMuaXNMYXN0ID0gKCkgPT4ge1xuICAgICAgICB2YXIgX2EyO1xuICAgICAgICByZXR1cm4gISgoX2EyID0gdGhpcy5oYXNOZXh0KSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmNhbGwodGhpcykpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgLyogV2UgYXNzdW1lIHRoYXQgb25seSB0aGUgaW5pdGlhbCByZXF1ZXN0IGNhbiBiZSBhIFBPU1QsIGFuZCB0aGF0IGFjY2Vzc2luZ1xuICAgKiB0aGUgcmVzdCBvZiBhIG11bHRpcGFnZSBzZXQgb2YgcmVzdWx0cyBjYW4gYWx3YXlzIGJlIGRvbmUgd2l0aCBHRVQgKi9cbiAgYXN5bmMgZ2V0KHBhcmFtcykge1xuICAgIGNvbnN0IHJlcyA9IHRoaXMucmVzb3VyY2U7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzb3VyY2VfZGVmYXVsdC5nZXQocmVzLmNsaWVudCwgcmVzLnBhdGgsIHJlcy5oZWFkZXJzLCBwYXJhbXMsIHJlcy5lbnZlbG9wZSwgZmFsc2UpO1xuICAgIHJldHVybiByZXMuaGFuZGxlUGFnZShyZXN1bHQpO1xuICB9XG59O1xudmFyIEh0dHBQYWdpbmF0ZWRSZXNwb25zZSA9IGNsYXNzIGV4dGVuZHMgUGFnaW5hdGVkUmVzdWx0IHtcbiAgY29uc3RydWN0b3IocmVzb3VyY2UsIGl0ZW1zLCBoZWFkZXJzLCBzdGF0dXNDb2RlLCByZWxQYXJhbXMsIGVycikge1xuICAgIHN1cGVyKHJlc291cmNlLCBpdGVtcywgcmVsUGFyYW1zKTtcbiAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgIHRoaXMuc3VjY2VzcyA9IHN0YXR1c0NvZGUgPCAzMDAgJiYgc3RhdHVzQ29kZSA+PSAyMDA7XG4gICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgICB0aGlzLmVycm9yQ29kZSA9IGVyciAmJiBlcnIuY29kZTtcbiAgICB0aGlzLmVycm9yTWVzc2FnZSA9IGVyciAmJiBlcnIubWVzc2FnZTtcbiAgfVxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGl0ZW1zOiB0aGlzLml0ZW1zLFxuICAgICAgc3RhdHVzQ29kZTogdGhpcy5zdGF0dXNDb2RlLFxuICAgICAgc3VjY2VzczogdGhpcy5zdWNjZXNzLFxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxuICAgICAgZXJyb3JDb2RlOiB0aGlzLmVycm9yQ29kZSxcbiAgICAgIGVycm9yTWVzc2FnZTogdGhpcy5lcnJvck1lc3NhZ2VcbiAgICB9O1xuICB9XG59O1xudmFyIHBhZ2luYXRlZHJlc291cmNlX2RlZmF1bHQgPSBQYWdpbmF0ZWRSZXNvdXJjZTtcblxuLy8gc3JjL2NvbW1vbi9saWIvdHlwZXMvcHVzaGNoYW5uZWxzdWJzY3JpcHRpb24udHNcbnZhciBfUHVzaENoYW5uZWxTdWJzY3JpcHRpb24gPSBjbGFzcyBfUHVzaENoYW5uZWxTdWJzY3JpcHRpb24ge1xuICAvKipcbiAgICogT3ZlcmxvYWQgdG9KU09OKCkgdG8gaW50ZXJjZXB0IEpTT04uc3RyaW5naWZ5KClcbiAgICogQHJldHVybiB7Kn1cbiAgICovXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2hhbm5lbDogdGhpcy5jaGFubmVsLFxuICAgICAgZGV2aWNlSWQ6IHRoaXMuZGV2aWNlSWQsXG4gICAgICBjbGllbnRJZDogdGhpcy5jbGllbnRJZFxuICAgIH07XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IHJlc3VsdCA9IFwiW1B1c2hDaGFubmVsU3Vic2NyaXB0aW9uXCI7XG4gICAgaWYgKHRoaXMuY2hhbm5lbClcbiAgICAgIHJlc3VsdCArPSBcIjsgY2hhbm5lbD1cIiArIHRoaXMuY2hhbm5lbDtcbiAgICBpZiAodGhpcy5kZXZpY2VJZClcbiAgICAgIHJlc3VsdCArPSBcIjsgZGV2aWNlSWQ9XCIgKyB0aGlzLmRldmljZUlkO1xuICAgIGlmICh0aGlzLmNsaWVudElkKVxuICAgICAgcmVzdWx0ICs9IFwiOyBjbGllbnRJZD1cIiArIHRoaXMuY2xpZW50SWQ7XG4gICAgcmVzdWx0ICs9IFwiXVwiO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgc3RhdGljIGZyb21SZXNwb25zZUJvZHkoYm9keSwgTXNnUGFjaywgZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCkge1xuICAgICAgYm9keSA9IGRlY29kZUJvZHkoYm9keSwgTXNnUGFjaywgZm9ybWF0KTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYm9keSkpIHtcbiAgICAgIHJldHVybiBfUHVzaENoYW5uZWxTdWJzY3JpcHRpb24uZnJvbVZhbHVlc0FycmF5KGJvZHkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gX1B1c2hDaGFubmVsU3Vic2NyaXB0aW9uLmZyb21WYWx1ZXMoYm9keSk7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBmcm9tVmFsdWVzKHZhbHVlcykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBfUHVzaENoYW5uZWxTdWJzY3JpcHRpb24oKSwgdmFsdWVzKTtcbiAgfVxuICBzdGF0aWMgZnJvbVZhbHVlc0FycmF5KHZhbHVlcykge1xuICAgIGNvbnN0IGNvdW50ID0gdmFsdWVzLmxlbmd0aCwgcmVzdWx0ID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspXG4gICAgICByZXN1bHRbaV0gPSBfUHVzaENoYW5uZWxTdWJzY3JpcHRpb24uZnJvbVZhbHVlcyh2YWx1ZXNbaV0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5fUHVzaENoYW5uZWxTdWJzY3JpcHRpb24udG9SZXF1ZXN0Qm9keSA9IGVuY29kZUJvZHk7XG52YXIgUHVzaENoYW5uZWxTdWJzY3JpcHRpb24gPSBfUHVzaENoYW5uZWxTdWJzY3JpcHRpb247XG52YXIgcHVzaGNoYW5uZWxzdWJzY3JpcHRpb25fZGVmYXVsdCA9IFB1c2hDaGFubmVsU3Vic2NyaXB0aW9uO1xuXG4vLyBzcmMvY29tbW9uL2xpYi9jbGllbnQvcHVzaC50c1xudmFyIFB1c2ggPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHZhciBfYTI7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5hZG1pbiA9IG5ldyBBZG1pbihjbGllbnQpO1xuICAgIGlmIChQbGF0Zm9ybS5Db25maWcucHVzaCAmJiAoKF9hMiA9IGNsaWVudC5vcHRpb25zLnBsdWdpbnMpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuUHVzaCkpIHtcbiAgICAgIHRoaXMuc3RhdGVNYWNoaW5lID0gbmV3IGNsaWVudC5vcHRpb25zLnBsdWdpbnMuUHVzaC5BY3RpdmF0aW9uU3RhdGVNYWNoaW5lKGNsaWVudCk7XG4gICAgICB0aGlzLkxvY2FsRGV2aWNlID0gY2xpZW50Lm9wdGlvbnMucGx1Z2lucy5QdXNoLmxvY2FsRGV2aWNlRmFjdG9yeShkZXZpY2VkZXRhaWxzX2RlZmF1bHQpO1xuICAgIH1cbiAgfVxuICBhc3luYyBhY3RpdmF0ZShyZWdpc3RlckNhbGxiYWNrLCB1cGRhdGVGYWlsZWRDYWxsYmFjaykge1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHZhciBfYTI7XG4gICAgICBpZiAoISgoX2EyID0gdGhpcy5jbGllbnQub3B0aW9ucy5wbHVnaW5zKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLlB1c2gpKSB7XG4gICAgICAgIHJlamVjdChjcmVhdGVNaXNzaW5nUGx1Z2luRXJyb3IoXCJQdXNoXCIpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLnN0YXRlTWFjaGluZSkge1xuICAgICAgICByZWplY3QobmV3IEVycm9ySW5mbyhcIlRoaXMgcGxhdGZvcm0gaXMgbm90IHN1cHBvcnRlZCBhcyBhIHRhcmdldCBvZiBwdXNoIG5vdGlmaWNhdGlvbnNcIiwgNGU0LCA0MDApKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RhdGVNYWNoaW5lLmFjdGl2YXRlZENhbGxiYWNrKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3JJbmZvKFwiQWN0aXZhdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzXCIsIDRlNCwgNDAwKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhdGVNYWNoaW5lLmFjdGl2YXRlZENhbGxiYWNrID0gKGVycikgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH07XG4gICAgICB0aGlzLnN0YXRlTWFjaGluZS51cGRhdGVGYWlsZWRDYWxsYmFjayA9IHVwZGF0ZUZhaWxlZENhbGxiYWNrO1xuICAgICAgdGhpcy5zdGF0ZU1hY2hpbmUuaGFuZGxlRXZlbnQoXG4gICAgICAgIG5ldyB0aGlzLmNsaWVudC5vcHRpb25zLnBsdWdpbnMuUHVzaC5DYWxsZWRBY3RpdmF0ZSh0aGlzLnN0YXRlTWFjaGluZSwgcmVnaXN0ZXJDYWxsYmFjaylcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgZGVhY3RpdmF0ZShkZXJlZ2lzdGVyQ2FsbGJhY2spIHtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB2YXIgX2EyO1xuICAgICAgaWYgKCEoKF9hMiA9IHRoaXMuY2xpZW50Lm9wdGlvbnMucGx1Z2lucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5QdXNoKSkge1xuICAgICAgICByZWplY3QoY3JlYXRlTWlzc2luZ1BsdWdpbkVycm9yKFwiUHVzaFwiKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5zdGF0ZU1hY2hpbmUpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvckluZm8oXCJUaGlzIHBsYXRmb3JtIGlzIG5vdCBzdXBwb3J0ZWQgYXMgYSB0YXJnZXQgb2YgcHVzaCBub3RpZmljYXRpb25zXCIsIDRlNCwgNDAwKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN0YXRlTWFjaGluZS5kZWFjdGl2YXRlZENhbGxiYWNrKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3JJbmZvKFwiRGVhY3RpdmF0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3NcIiwgNGU0LCA0MDApKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5zdGF0ZU1hY2hpbmUuZGVhY3RpdmF0ZWRDYWxsYmFjayA9IChlcnIpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICAgICAgdGhpcy5zdGF0ZU1hY2hpbmUuaGFuZGxlRXZlbnQoXG4gICAgICAgIG5ldyB0aGlzLmNsaWVudC5vcHRpb25zLnBsdWdpbnMuUHVzaC5DYWxsZWREZWFjdGl2YXRlKHRoaXMuc3RhdGVNYWNoaW5lLCBkZXJlZ2lzdGVyQ2FsbGJhY2spXG4gICAgICApO1xuICAgIH0pO1xuICB9XG59O1xudmFyIEFkbWluID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLmRldmljZVJlZ2lzdHJhdGlvbnMgPSBuZXcgRGV2aWNlUmVnaXN0cmF0aW9ucyhjbGllbnQpO1xuICAgIHRoaXMuY2hhbm5lbFN1YnNjcmlwdGlvbnMgPSBuZXcgQ2hhbm5lbFN1YnNjcmlwdGlvbnMoY2xpZW50KTtcbiAgfVxuICBhc3luYyBwdWJsaXNoKHJlY2lwaWVudCwgcGF5bG9hZCkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuY2xpZW50O1xuICAgIGNvbnN0IGZvcm1hdCA9IGNsaWVudC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gXCJtc2dwYWNrXCIgLyogbXNncGFjayAqLyA6IFwianNvblwiIC8qIGpzb24gKi8sIGhlYWRlcnMgPSBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRQb3N0SGVhZGVycyhjbGllbnQub3B0aW9ucywgeyBmb3JtYXQgfSksIHBhcmFtcyA9IHt9O1xuICAgIGNvbnN0IGJvZHkgPSBtaXhpbih7IHJlY2lwaWVudCB9LCBwYXlsb2FkKTtcbiAgICBtaXhpbihoZWFkZXJzLCBjbGllbnQub3B0aW9ucy5oZWFkZXJzKTtcbiAgICBpZiAoY2xpZW50Lm9wdGlvbnMucHVzaEZ1bGxXYWl0KVxuICAgICAgbWl4aW4ocGFyYW1zLCB7IGZ1bGxXYWl0OiBcInRydWVcIiB9KTtcbiAgICBjb25zdCByZXF1ZXN0Qm9keSA9IGVuY29kZUJvZHkoYm9keSwgY2xpZW50Ll9Nc2dQYWNrLCBmb3JtYXQpO1xuICAgIGF3YWl0IHJlc291cmNlX2RlZmF1bHQucG9zdChjbGllbnQsIFwiL3B1c2gvcHVibGlzaFwiLCByZXF1ZXN0Qm9keSwgaGVhZGVycywgcGFyYW1zLCBudWxsLCB0cnVlKTtcbiAgfVxufTtcbnZhciBEZXZpY2VSZWdpc3RyYXRpb25zID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuICBhc3luYyBzYXZlKGRldmljZSkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuY2xpZW50O1xuICAgIGNvbnN0IGJvZHkgPSBkZXZpY2VkZXRhaWxzX2RlZmF1bHQuZnJvbVZhbHVlcyhkZXZpY2UpO1xuICAgIGNvbnN0IGZvcm1hdCA9IGNsaWVudC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gXCJtc2dwYWNrXCIgLyogbXNncGFjayAqLyA6IFwianNvblwiIC8qIGpzb24gKi8sIGhlYWRlcnMgPSBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRQb3N0SGVhZGVycyhjbGllbnQub3B0aW9ucywgeyBmb3JtYXQgfSksIHBhcmFtcyA9IHt9O1xuICAgIG1peGluKGhlYWRlcnMsIGNsaWVudC5vcHRpb25zLmhlYWRlcnMpO1xuICAgIGlmIChjbGllbnQub3B0aW9ucy5wdXNoRnVsbFdhaXQpXG4gICAgICBtaXhpbihwYXJhbXMsIHsgZnVsbFdhaXQ6IFwidHJ1ZVwiIH0pO1xuICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0gZW5jb2RlQm9keShib2R5LCBjbGllbnQuX01zZ1BhY2ssIGZvcm1hdCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXNvdXJjZV9kZWZhdWx0LnB1dChcbiAgICAgIGNsaWVudCxcbiAgICAgIFwiL3B1c2gvZGV2aWNlUmVnaXN0cmF0aW9ucy9cIiArIGVuY29kZVVSSUNvbXBvbmVudChkZXZpY2UuaWQpLFxuICAgICAgcmVxdWVzdEJvZHksXG4gICAgICBoZWFkZXJzLFxuICAgICAgcGFyYW1zLFxuICAgICAgbnVsbCxcbiAgICAgIHRydWVcbiAgICApO1xuICAgIHJldHVybiBkZXZpY2VkZXRhaWxzX2RlZmF1bHQuZnJvbVJlc3BvbnNlQm9keShcbiAgICAgIHJlc3BvbnNlLmJvZHksXG4gICAgICBjbGllbnQuX01zZ1BhY2ssXG4gICAgICByZXNwb25zZS51bnBhY2tlZCA/IHZvaWQgMCA6IGZvcm1hdFxuICAgICk7XG4gIH1cbiAgYXN5bmMgZ2V0KGRldmljZUlkT3JEZXRhaWxzKSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5jbGllbnQsIGZvcm1hdCA9IGNsaWVudC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gXCJtc2dwYWNrXCIgLyogbXNncGFjayAqLyA6IFwianNvblwiIC8qIGpzb24gKi8sIGhlYWRlcnMgPSBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRHZXRIZWFkZXJzKGNsaWVudC5vcHRpb25zLCB7IGZvcm1hdCB9KSwgZGV2aWNlSWQgPSBkZXZpY2VJZE9yRGV0YWlscy5pZCB8fCBkZXZpY2VJZE9yRGV0YWlscztcbiAgICBpZiAodHlwZW9mIGRldmljZUlkICE9PSBcInN0cmluZ1wiIHx8ICFkZXZpY2VJZC5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXG4gICAgICAgIFwiRmlyc3QgYXJndW1lbnQgdG8gRGV2aWNlUmVnaXN0cmF0aW9ucyNnZXQgbXVzdCBiZSBhIGRldmljZUlkIHN0cmluZyBvciBEZXZpY2VEZXRhaWxzXCIsXG4gICAgICAgIDRlNCxcbiAgICAgICAgNDAwXG4gICAgICApO1xuICAgIH1cbiAgICBtaXhpbihoZWFkZXJzLCBjbGllbnQub3B0aW9ucy5oZWFkZXJzKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc291cmNlX2RlZmF1bHQuZ2V0KFxuICAgICAgY2xpZW50LFxuICAgICAgXCIvcHVzaC9kZXZpY2VSZWdpc3RyYXRpb25zL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGRldmljZUlkKSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICB7fSxcbiAgICAgIG51bGwsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICByZXR1cm4gZGV2aWNlZGV0YWlsc19kZWZhdWx0LmZyb21SZXNwb25zZUJvZHkoXG4gICAgICByZXNwb25zZS5ib2R5LFxuICAgICAgY2xpZW50Ll9Nc2dQYWNrLFxuICAgICAgcmVzcG9uc2UudW5wYWNrZWQgPyB2b2lkIDAgOiBmb3JtYXRcbiAgICApO1xuICB9XG4gIGFzeW5jIGxpc3QocGFyYW1zKSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5jbGllbnQsIGZvcm1hdCA9IGNsaWVudC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gXCJtc2dwYWNrXCIgLyogbXNncGFjayAqLyA6IFwianNvblwiIC8qIGpzb24gKi8sIGVudmVsb3BlID0gdGhpcy5jbGllbnQuaHR0cC5zdXBwb3J0c0xpbmtIZWFkZXJzID8gdm9pZCAwIDogZm9ybWF0LCBoZWFkZXJzID0gZGVmYXVsdHNfZGVmYXVsdC5kZWZhdWx0R2V0SGVhZGVycyhjbGllbnQub3B0aW9ucywgeyBmb3JtYXQgfSk7XG4gICAgbWl4aW4oaGVhZGVycywgY2xpZW50Lm9wdGlvbnMuaGVhZGVycyk7XG4gICAgcmV0dXJuIG5ldyBwYWdpbmF0ZWRyZXNvdXJjZV9kZWZhdWx0KGNsaWVudCwgXCIvcHVzaC9kZXZpY2VSZWdpc3RyYXRpb25zXCIsIGhlYWRlcnMsIGVudmVsb3BlLCBhc3luYyBmdW5jdGlvbihib2R5LCBoZWFkZXJzMiwgdW5wYWNrZWQpIHtcbiAgICAgIHJldHVybiBkZXZpY2VkZXRhaWxzX2RlZmF1bHQuZnJvbVJlc3BvbnNlQm9keShcbiAgICAgICAgYm9keSxcbiAgICAgICAgY2xpZW50Ll9Nc2dQYWNrLFxuICAgICAgICB1bnBhY2tlZCA/IHZvaWQgMCA6IGZvcm1hdFxuICAgICAgKTtcbiAgICB9KS5nZXQocGFyYW1zKTtcbiAgfVxuICBhc3luYyByZW1vdmUoZGV2aWNlSWRPckRldGFpbHMpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNsaWVudCwgZm9ybWF0ID0gY2xpZW50Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLywgaGVhZGVycyA9IGRlZmF1bHRzX2RlZmF1bHQuZGVmYXVsdEdldEhlYWRlcnMoY2xpZW50Lm9wdGlvbnMsIHsgZm9ybWF0IH0pLCBwYXJhbXMgPSB7fSwgZGV2aWNlSWQgPSBkZXZpY2VJZE9yRGV0YWlscy5pZCB8fCBkZXZpY2VJZE9yRGV0YWlscztcbiAgICBpZiAodHlwZW9mIGRldmljZUlkICE9PSBcInN0cmluZ1wiIHx8ICFkZXZpY2VJZC5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXG4gICAgICAgIFwiRmlyc3QgYXJndW1lbnQgdG8gRGV2aWNlUmVnaXN0cmF0aW9ucyNyZW1vdmUgbXVzdCBiZSBhIGRldmljZUlkIHN0cmluZyBvciBEZXZpY2VEZXRhaWxzXCIsXG4gICAgICAgIDRlNCxcbiAgICAgICAgNDAwXG4gICAgICApO1xuICAgIH1cbiAgICBtaXhpbihoZWFkZXJzLCBjbGllbnQub3B0aW9ucy5oZWFkZXJzKTtcbiAgICBpZiAoY2xpZW50Lm9wdGlvbnMucHVzaEZ1bGxXYWl0KVxuICAgICAgbWl4aW4ocGFyYW1zLCB7IGZ1bGxXYWl0OiBcInRydWVcIiB9KTtcbiAgICBhd2FpdCByZXNvdXJjZV9kZWZhdWx0W1wiZGVsZXRlXCJdKFxuICAgICAgY2xpZW50LFxuICAgICAgXCIvcHVzaC9kZXZpY2VSZWdpc3RyYXRpb25zL1wiICsgZW5jb2RlVVJJQ29tcG9uZW50KGRldmljZUlkKSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICBwYXJhbXMsXG4gICAgICBudWxsLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gIH1cbiAgYXN5bmMgcmVtb3ZlV2hlcmUocGFyYW1zKSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5jbGllbnQsIGZvcm1hdCA9IGNsaWVudC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gXCJtc2dwYWNrXCIgLyogbXNncGFjayAqLyA6IFwianNvblwiIC8qIGpzb24gKi8sIGhlYWRlcnMgPSBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRHZXRIZWFkZXJzKGNsaWVudC5vcHRpb25zLCB7IGZvcm1hdCB9KTtcbiAgICBtaXhpbihoZWFkZXJzLCBjbGllbnQub3B0aW9ucy5oZWFkZXJzKTtcbiAgICBpZiAoY2xpZW50Lm9wdGlvbnMucHVzaEZ1bGxXYWl0KVxuICAgICAgbWl4aW4ocGFyYW1zLCB7IGZ1bGxXYWl0OiBcInRydWVcIiB9KTtcbiAgICBhd2FpdCByZXNvdXJjZV9kZWZhdWx0W1wiZGVsZXRlXCJdKGNsaWVudCwgXCIvcHVzaC9kZXZpY2VSZWdpc3RyYXRpb25zXCIsIGhlYWRlcnMsIHBhcmFtcywgbnVsbCwgdHJ1ZSk7XG4gIH1cbn07XG52YXIgQ2hhbm5lbFN1YnNjcmlwdGlvbnMgPSBjbGFzcyBfQ2hhbm5lbFN1YnNjcmlwdGlvbnMge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICAvKiBDaGFubmVsU3Vic2NyaXB0aW9ucyBoYXZlIG5vIHVuaXF1ZSBpZDsgcmVtb3Zpbmcgb25lIGlzIGVxdWl2YWxlbnQgdG8gcmVtb3ZlV2hlcmUgYnkgaXRzIHByb3BlcnRpZXMgKi9cbiAgICB0aGlzLnJlbW92ZSA9IF9DaGFubmVsU3Vic2NyaXB0aW9ucy5wcm90b3R5cGUucmVtb3ZlV2hlcmU7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cbiAgYXN5bmMgc2F2ZShzdWJzY3JpcHRpb24pIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNsaWVudDtcbiAgICBjb25zdCBib2R5ID0gcHVzaGNoYW5uZWxzdWJzY3JpcHRpb25fZGVmYXVsdC5mcm9tVmFsdWVzKHN1YnNjcmlwdGlvbik7XG4gICAgY29uc3QgZm9ybWF0ID0gY2xpZW50Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLywgaGVhZGVycyA9IGRlZmF1bHRzX2RlZmF1bHQuZGVmYXVsdFBvc3RIZWFkZXJzKGNsaWVudC5vcHRpb25zLCB7IGZvcm1hdCB9KSwgcGFyYW1zID0ge307XG4gICAgbWl4aW4oaGVhZGVycywgY2xpZW50Lm9wdGlvbnMuaGVhZGVycyk7XG4gICAgaWYgKGNsaWVudC5vcHRpb25zLnB1c2hGdWxsV2FpdClcbiAgICAgIG1peGluKHBhcmFtcywgeyBmdWxsV2FpdDogXCJ0cnVlXCIgfSk7XG4gICAgY29uc3QgcmVxdWVzdEJvZHkgPSBlbmNvZGVCb2R5KGJvZHksIGNsaWVudC5fTXNnUGFjaywgZm9ybWF0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc291cmNlX2RlZmF1bHQucG9zdChcbiAgICAgIGNsaWVudCxcbiAgICAgIFwiL3B1c2gvY2hhbm5lbFN1YnNjcmlwdGlvbnNcIixcbiAgICAgIHJlcXVlc3RCb2R5LFxuICAgICAgaGVhZGVycyxcbiAgICAgIHBhcmFtcyxcbiAgICAgIG51bGwsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICByZXR1cm4gcHVzaGNoYW5uZWxzdWJzY3JpcHRpb25fZGVmYXVsdC5mcm9tUmVzcG9uc2VCb2R5KFxuICAgICAgcmVzcG9uc2UuYm9keSxcbiAgICAgIGNsaWVudC5fTXNnUGFjayxcbiAgICAgIHJlc3BvbnNlLnVucGFja2VkID8gdm9pZCAwIDogZm9ybWF0XG4gICAgKTtcbiAgfVxuICBhc3luYyBsaXN0KHBhcmFtcykge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuY2xpZW50LCBmb3JtYXQgPSBjbGllbnQub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFwibXNncGFja1wiIC8qIG1zZ3BhY2sgKi8gOiBcImpzb25cIiAvKiBqc29uICovLCBlbnZlbG9wZSA9IHRoaXMuY2xpZW50Lmh0dHAuc3VwcG9ydHNMaW5rSGVhZGVycyA/IHZvaWQgMCA6IGZvcm1hdCwgaGVhZGVycyA9IGRlZmF1bHRzX2RlZmF1bHQuZGVmYXVsdEdldEhlYWRlcnMoY2xpZW50Lm9wdGlvbnMsIHsgZm9ybWF0IH0pO1xuICAgIG1peGluKGhlYWRlcnMsIGNsaWVudC5vcHRpb25zLmhlYWRlcnMpO1xuICAgIHJldHVybiBuZXcgcGFnaW5hdGVkcmVzb3VyY2VfZGVmYXVsdChjbGllbnQsIFwiL3B1c2gvY2hhbm5lbFN1YnNjcmlwdGlvbnNcIiwgaGVhZGVycywgZW52ZWxvcGUsIGFzeW5jIGZ1bmN0aW9uKGJvZHksIGhlYWRlcnMyLCB1bnBhY2tlZCkge1xuICAgICAgcmV0dXJuIHB1c2hjaGFubmVsc3Vic2NyaXB0aW9uX2RlZmF1bHQuZnJvbVJlc3BvbnNlQm9keShcbiAgICAgICAgYm9keSxcbiAgICAgICAgY2xpZW50Ll9Nc2dQYWNrLFxuICAgICAgICB1bnBhY2tlZCA/IHZvaWQgMCA6IGZvcm1hdFxuICAgICAgKTtcbiAgICB9KS5nZXQocGFyYW1zKTtcbiAgfVxuICBhc3luYyByZW1vdmVXaGVyZShwYXJhbXMpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNsaWVudCwgZm9ybWF0ID0gY2xpZW50Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLywgaGVhZGVycyA9IGRlZmF1bHRzX2RlZmF1bHQuZGVmYXVsdEdldEhlYWRlcnMoY2xpZW50Lm9wdGlvbnMsIHsgZm9ybWF0IH0pO1xuICAgIG1peGluKGhlYWRlcnMsIGNsaWVudC5vcHRpb25zLmhlYWRlcnMpO1xuICAgIGlmIChjbGllbnQub3B0aW9ucy5wdXNoRnVsbFdhaXQpXG4gICAgICBtaXhpbihwYXJhbXMsIHsgZnVsbFdhaXQ6IFwidHJ1ZVwiIH0pO1xuICAgIGF3YWl0IHJlc291cmNlX2RlZmF1bHRbXCJkZWxldGVcIl0oY2xpZW50LCBcIi9wdXNoL2NoYW5uZWxTdWJzY3JpcHRpb25zXCIsIGhlYWRlcnMsIHBhcmFtcywgbnVsbCwgdHJ1ZSk7XG4gIH1cbiAgYXN5bmMgbGlzdENoYW5uZWxzKHBhcmFtcykge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuY2xpZW50LCBmb3JtYXQgPSBjbGllbnQub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFwibXNncGFja1wiIC8qIG1zZ3BhY2sgKi8gOiBcImpzb25cIiAvKiBqc29uICovLCBlbnZlbG9wZSA9IHRoaXMuY2xpZW50Lmh0dHAuc3VwcG9ydHNMaW5rSGVhZGVycyA/IHZvaWQgMCA6IGZvcm1hdCwgaGVhZGVycyA9IGRlZmF1bHRzX2RlZmF1bHQuZGVmYXVsdEdldEhlYWRlcnMoY2xpZW50Lm9wdGlvbnMsIHsgZm9ybWF0IH0pO1xuICAgIG1peGluKGhlYWRlcnMsIGNsaWVudC5vcHRpb25zLmhlYWRlcnMpO1xuICAgIGlmIChjbGllbnQub3B0aW9ucy5wdXNoRnVsbFdhaXQpXG4gICAgICBtaXhpbihwYXJhbXMsIHsgZnVsbFdhaXQ6IFwidHJ1ZVwiIH0pO1xuICAgIHJldHVybiBuZXcgcGFnaW5hdGVkcmVzb3VyY2VfZGVmYXVsdChjbGllbnQsIFwiL3B1c2gvY2hhbm5lbHNcIiwgaGVhZGVycywgZW52ZWxvcGUsIGFzeW5jIGZ1bmN0aW9uKGJvZHksIGhlYWRlcnMyLCB1bnBhY2tlZCkge1xuICAgICAgY29uc3QgcGFyc2VkQm9keSA9ICF1bnBhY2tlZCAmJiBmb3JtYXQgPyBkZWNvZGVCb2R5KGJvZHksIGNsaWVudC5fTXNnUGFjaywgZm9ybWF0KSA6IGJvZHk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnNlZEJvZHkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcGFyc2VkQm9keVtpXSA9IFN0cmluZyhwYXJzZWRCb2R5W2ldKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJzZWRCb2R5O1xuICAgIH0pLmdldChwYXJhbXMpO1xuICB9XG59O1xudmFyIHB1c2hfZGVmYXVsdCA9IFB1c2g7XG5cbi8vIHNyYy9jb21tb24vbGliL3R5cGVzL21lc3NhZ2UudHNcbmZ1bmN0aW9uIG5vcm1hbGlzZUNvbnRleHQoY29udGV4dCkge1xuICBpZiAoIWNvbnRleHQgfHwgIWNvbnRleHQuY2hhbm5lbE9wdGlvbnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2hhbm5lbE9wdGlvbnM6IGNvbnRleHQsXG4gICAgICBwbHVnaW5zOiB7fSxcbiAgICAgIGJhc2VFbmNvZGVkUHJldmlvdXNQYXlsb2FkOiB2b2lkIDBcbiAgICB9O1xuICB9XG4gIHJldHVybiBjb250ZXh0O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplQ2lwaGVyT3B0aW9ucyhDcnlwdG8yLCBsb2dnZXIsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5jaXBoZXIpIHtcbiAgICBpZiAoIUNyeXB0bzIpXG4gICAgICB0aHJvd01pc3NpbmdQbHVnaW5FcnJvcihcIkNyeXB0b1wiKTtcbiAgICBjb25zdCBjaXBoZXIgPSBDcnlwdG8yLmdldENpcGhlcihvcHRpb25zLmNpcGhlciwgbG9nZ2VyKTtcbiAgICByZXR1cm4ge1xuICAgICAgY2lwaGVyOiBjaXBoZXIuY2lwaGVyUGFyYW1zLFxuICAgICAgY2hhbm5lbENpcGhlcjogY2lwaGVyLmNpcGhlclxuICAgIH07XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMgOiB7fTtcbn1cbmZ1bmN0aW9uIGdldE1lc3NhZ2VTaXplKG1zZykge1xuICBsZXQgc2l6ZSA9IDA7XG4gIGlmIChtc2cubmFtZSkge1xuICAgIHNpemUgKz0gbXNnLm5hbWUubGVuZ3RoO1xuICB9XG4gIGlmIChtc2cuY2xpZW50SWQpIHtcbiAgICBzaXplICs9IG1zZy5jbGllbnRJZC5sZW5ndGg7XG4gIH1cbiAgaWYgKG1zZy5leHRyYXMpIHtcbiAgICBzaXplICs9IEpTT04uc3RyaW5naWZ5KG1zZy5leHRyYXMpLmxlbmd0aDtcbiAgfVxuICBpZiAobXNnLmRhdGEpIHtcbiAgICBzaXplICs9IGRhdGFTaXplQnl0ZXMobXNnLmRhdGEpO1xuICB9XG4gIHJldHVybiBzaXplO1xufVxuYXN5bmMgZnVuY3Rpb24gZnJvbUVuY29kZWQobG9nZ2VyLCBDcnlwdG8yLCBlbmNvZGVkLCBpbnB1dE9wdGlvbnMpIHtcbiAgY29uc3QgbXNnID0gZnJvbVZhbHVlcyhlbmNvZGVkKTtcbiAgY29uc3Qgb3B0aW9ucyA9IG5vcm1hbGl6ZUNpcGhlck9wdGlvbnMoQ3J5cHRvMiwgbG9nZ2VyLCBpbnB1dE9wdGlvbnMgIT0gbnVsbCA/IGlucHV0T3B0aW9ucyA6IG51bGwpO1xuICB0cnkge1xuICAgIGF3YWl0IGRlY29kZShtc2csIG9wdGlvbnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKGxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLCBcIk1lc3NhZ2UuZnJvbUVuY29kZWQoKVwiLCBlLnRvU3RyaW5nKCkpO1xuICB9XG4gIHJldHVybiBtc2c7XG59XG5hc3luYyBmdW5jdGlvbiBmcm9tRW5jb2RlZEFycmF5KGxvZ2dlciwgQ3J5cHRvMiwgZW5jb2RlZEFycmF5LCBvcHRpb25zKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChcbiAgICBlbmNvZGVkQXJyYXkubWFwKGZ1bmN0aW9uKGVuY29kZWQpIHtcbiAgICAgIHJldHVybiBmcm9tRW5jb2RlZChsb2dnZXIsIENyeXB0bzIsIGVuY29kZWQsIG9wdGlvbnMpO1xuICAgIH0pXG4gICk7XG59XG5hc3luYyBmdW5jdGlvbiBlbmNyeXB0KG1zZywgb3B0aW9ucykge1xuICBsZXQgZGF0YSA9IG1zZy5kYXRhLCBlbmNvZGluZyA9IG1zZy5lbmNvZGluZywgY2lwaGVyID0gb3B0aW9ucy5jaGFubmVsQ2lwaGVyO1xuICBlbmNvZGluZyA9IGVuY29kaW5nID8gZW5jb2RpbmcgKyBcIi9cIiA6IFwiXCI7XG4gIGlmICghUGxhdGZvcm0uQnVmZmVyVXRpbHMuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICBkYXRhID0gUGxhdGZvcm0uQnVmZmVyVXRpbHMudXRmOEVuY29kZShTdHJpbmcoZGF0YSkpO1xuICAgIGVuY29kaW5nID0gZW5jb2RpbmcgKyBcInV0Zi04L1wiO1xuICB9XG4gIGNvbnN0IGNpcGhlcnRleHQgPSBhd2FpdCBjaXBoZXIuZW5jcnlwdChkYXRhKTtcbiAgbXNnLmRhdGEgPSBjaXBoZXJ0ZXh0O1xuICBtc2cuZW5jb2RpbmcgPSBlbmNvZGluZyArIFwiY2lwaGVyK1wiICsgY2lwaGVyLmFsZ29yaXRobTtcbiAgcmV0dXJuIG1zZztcbn1cbmFzeW5jIGZ1bmN0aW9uIGVuY29kZShtc2csIG9wdGlvbnMpIHtcbiAgY29uc3QgZGF0YSA9IG1zZy5kYXRhO1xuICBjb25zdCBuYXRpdmVEYXRhVHlwZSA9IHR5cGVvZiBkYXRhID09IFwic3RyaW5nXCIgfHwgUGxhdGZvcm0uQnVmZmVyVXRpbHMuaXNCdWZmZXIoZGF0YSkgfHwgZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDA7XG4gIGlmICghbmF0aXZlRGF0YVR5cGUpIHtcbiAgICBpZiAoaXNPYmplY3QoZGF0YSkgfHwgQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgbXNnLmRhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICAgIG1zZy5lbmNvZGluZyA9IG1zZy5lbmNvZGluZyA/IG1zZy5lbmNvZGluZyArIFwiL2pzb25cIiA6IFwianNvblwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwiRGF0YSB0eXBlIGlzIHVuc3VwcG9ydGVkXCIsIDQwMDEzLCA0MDApO1xuICAgIH1cbiAgfVxuICBpZiAob3B0aW9ucyAhPSBudWxsICYmIG9wdGlvbnMuY2lwaGVyKSB7XG4gICAgcmV0dXJuIGVuY3J5cHQobXNnLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbXNnO1xuICB9XG59XG5hc3luYyBmdW5jdGlvbiBlbmNvZGVBcnJheShtZXNzYWdlcywgb3B0aW9ucykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwobWVzc2FnZXMubWFwKChtZXNzYWdlKSA9PiBlbmNvZGUobWVzc2FnZSwgb3B0aW9ucykpKTtcbn1cbnZhciBzZXJpYWxpemUgPSBlbmNvZGVCb2R5O1xuYXN5bmMgZnVuY3Rpb24gZGVjb2RlKG1lc3NhZ2UsIGlucHV0Q29udGV4dCkge1xuICBjb25zdCBjb250ZXh0ID0gbm9ybWFsaXNlQ29udGV4dChpbnB1dENvbnRleHQpO1xuICBsZXQgbGFzdFBheWxvYWQgPSBtZXNzYWdlLmRhdGE7XG4gIGNvbnN0IGVuY29kaW5nID0gbWVzc2FnZS5lbmNvZGluZztcbiAgaWYgKGVuY29kaW5nKSB7XG4gICAgY29uc3QgeGZvcm1zID0gZW5jb2Rpbmcuc3BsaXQoXCIvXCIpO1xuICAgIGxldCBsYXN0UHJvY2Vzc2VkRW5jb2RpbmdJbmRleCwgZW5jb2RpbmdzVG9Qcm9jZXNzID0geGZvcm1zLmxlbmd0aCwgZGF0YSA9IG1lc3NhZ2UuZGF0YTtcbiAgICBsZXQgeGZvcm0gPSBcIlwiO1xuICAgIHRyeSB7XG4gICAgICB3aGlsZSAoKGxhc3RQcm9jZXNzZWRFbmNvZGluZ0luZGV4ID0gZW5jb2RpbmdzVG9Qcm9jZXNzKSA+IDApIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB4Zm9ybXNbLS1lbmNvZGluZ3NUb1Byb2Nlc3NdLm1hdGNoKC8oWy1cXHddKykoXFwrKFtcXHctXSspKT8vKTtcbiAgICAgICAgaWYgKCFtYXRjaClcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgeGZvcm0gPSBtYXRjaFsxXTtcbiAgICAgICAgc3dpdGNoICh4Zm9ybSkge1xuICAgICAgICAgIGNhc2UgXCJiYXNlNjRcIjpcbiAgICAgICAgICAgIGRhdGEgPSBQbGF0Zm9ybS5CdWZmZXJVdGlscy5iYXNlNjREZWNvZGUoU3RyaW5nKGRhdGEpKTtcbiAgICAgICAgICAgIGlmIChsYXN0UHJvY2Vzc2VkRW5jb2RpbmdJbmRleCA9PSB4Zm9ybXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGxhc3RQYXlsb2FkID0gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgXCJ1dGYtOFwiOlxuICAgICAgICAgICAgZGF0YSA9IFBsYXRmb3JtLkJ1ZmZlclV0aWxzLnV0ZjhEZWNvZGUoZGF0YSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFwianNvblwiOlxuICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFwiY2lwaGVyXCI6XG4gICAgICAgICAgICBpZiAoY29udGV4dC5jaGFubmVsT3B0aW9ucyAhPSBudWxsICYmIGNvbnRleHQuY2hhbm5lbE9wdGlvbnMuY2lwaGVyICYmIGNvbnRleHQuY2hhbm5lbE9wdGlvbnMuY2hhbm5lbENpcGhlcikge1xuICAgICAgICAgICAgICBjb25zdCB4Zm9ybUFsZ29yaXRobSA9IG1hdGNoWzNdLCBjaXBoZXIgPSBjb250ZXh0LmNoYW5uZWxPcHRpb25zLmNoYW5uZWxDaXBoZXI7XG4gICAgICAgICAgICAgIGlmICh4Zm9ybUFsZ29yaXRobSAhPSBjaXBoZXIuYWxnb3JpdGhtKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGRlY3J5cHQgbWVzc2FnZSB3aXRoIGdpdmVuIGNpcGhlcjsgaW5jb21wYXRpYmxlIGNpcGhlciBwYXJhbXNcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZGF0YSA9IGF3YWl0IGNpcGhlci5kZWNyeXB0KGRhdGEpO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBkZWNyeXB0IG1lc3NhZ2U7IG5vdCBhbiBlbmNyeXB0ZWQgY2hhbm5lbFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwidmNkaWZmXCI6XG4gICAgICAgICAgICBpZiAoIWNvbnRleHQucGx1Z2lucyB8fCAhY29udGV4dC5wbHVnaW5zLnZjZGlmZikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwiTWlzc2luZyBWY2RpZmYgZGVjb2RlciAoaHR0cHM6Ly9naXRodWIuY29tL2FibHktZm9ya3MvdmNkaWZmLWRlY29kZXIpXCIsIDQwMDE5LCA0MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBVaW50OEFycmF5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXG4gICAgICAgICAgICAgICAgXCJEZWx0YSBkZWNvZGluZyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgYnJvd3NlciAobmVlZCBBcnJheUJ1ZmZlciAmIFVpbnQ4QXJyYXkpXCIsXG4gICAgICAgICAgICAgICAgNDAwMjAsXG4gICAgICAgICAgICAgICAgNDAwXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBsZXQgZGVsdGFCYXNlID0gY29udGV4dC5iYXNlRW5jb2RlZFByZXZpb3VzUGF5bG9hZDtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZWx0YUJhc2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBkZWx0YUJhc2UgPSBQbGF0Zm9ybS5CdWZmZXJVdGlscy51dGY4RW5jb2RlKGRlbHRhQmFzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3QgZGVsdGFCYXNlQnVmZmVyID0gUGxhdGZvcm0uQnVmZmVyVXRpbHMudG9CdWZmZXIoZGVsdGFCYXNlKTtcbiAgICAgICAgICAgICAgZGF0YSA9IFBsYXRmb3JtLkJ1ZmZlclV0aWxzLnRvQnVmZmVyKGRhdGEpO1xuICAgICAgICAgICAgICBkYXRhID0gUGxhdGZvcm0uQnVmZmVyVXRpbHMuYXJyYXlCdWZmZXJWaWV3VG9CdWZmZXIoY29udGV4dC5wbHVnaW5zLnZjZGlmZi5kZWNvZGUoZGF0YSwgZGVsdGFCYXNlQnVmZmVyKSk7XG4gICAgICAgICAgICAgIGxhc3RQYXlsb2FkID0gZGF0YTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcIlZjZGlmZiBkZWx0YSBkZWNvZGUgZmFpbGVkIHdpdGggXCIgKyBlLCA0MDAxOCwgNDAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGVuY29kaW5nXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3QgZXJyID0gZTtcbiAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXG4gICAgICAgIFwiRXJyb3IgcHJvY2Vzc2luZyB0aGUgXCIgKyB4Zm9ybSArIFwiIGVuY29kaW5nLCBkZWNvZGVyIHJldHVybmVkIFxcdTIwMThcIiArIGVyci5tZXNzYWdlICsgXCJcXHUyMDE5XCIsXG4gICAgICAgIGVyci5jb2RlIHx8IDQwMDEzLFxuICAgICAgICA0MDBcbiAgICAgICk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIG1lc3NhZ2UuZW5jb2RpbmcgPSBsYXN0UHJvY2Vzc2VkRW5jb2RpbmdJbmRleCA8PSAwID8gbnVsbCA6IHhmb3Jtcy5zbGljZSgwLCBsYXN0UHJvY2Vzc2VkRW5jb2RpbmdJbmRleCkuam9pbihcIi9cIik7XG4gICAgICBtZXNzYWdlLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgfVxuICBjb250ZXh0LmJhc2VFbmNvZGVkUHJldmlvdXNQYXlsb2FkID0gbGFzdFBheWxvYWQ7XG59XG5hc3luYyBmdW5jdGlvbiBmcm9tUmVzcG9uc2VCb2R5KGJvZHksIG9wdGlvbnMsIGxvZ2dlciwgTXNnUGFjaywgZm9ybWF0KSB7XG4gIGlmIChmb3JtYXQpIHtcbiAgICBib2R5ID0gZGVjb2RlQm9keShib2R5LCBNc2dQYWNrLCBmb3JtYXQpO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYm9keS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG1zZyA9IGJvZHlbaV0gPSBmcm9tVmFsdWVzKGJvZHlbaV0pO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBkZWNvZGUobXNnLCBvcHRpb25zKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwiTWVzc2FnZS5mcm9tUmVzcG9uc2VCb2R5KClcIiwgZS50b1N0cmluZygpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJvZHk7XG59XG5mdW5jdGlvbiBmcm9tVmFsdWVzKHZhbHVlcykge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgTWVzc2FnZSgpLCB2YWx1ZXMpO1xufVxuZnVuY3Rpb24gZnJvbVZhbHVlc0FycmF5KHZhbHVlcykge1xuICBjb25zdCBjb3VudCA9IHZhbHVlcy5sZW5ndGgsIHJlc3VsdCA9IG5ldyBBcnJheShjb3VudCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKylcbiAgICByZXN1bHRbaV0gPSBmcm9tVmFsdWVzKHZhbHVlc1tpXSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZXRNZXNzYWdlc1NpemUobWVzc2FnZXMpIHtcbiAgbGV0IG1zZywgdG90YWwgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgbXNnID0gbWVzc2FnZXNbaV07XG4gICAgdG90YWwgKz0gbXNnLnNpemUgfHwgKG1zZy5zaXplID0gZ2V0TWVzc2FnZVNpemUobXNnKSk7XG4gIH1cbiAgcmV0dXJuIHRvdGFsO1xufVxudmFyIE1lc3NhZ2UgPSBjbGFzcyB7XG4gIC8qKlxuICAgKiBPdmVybG9hZCB0b0pTT04oKSB0byBpbnRlcmNlcHQgSlNPTi5zdHJpbmdpZnkoKVxuICAgKiBAcmV0dXJuIHsqfVxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIGxldCBlbmNvZGluZyA9IHRoaXMuZW5jb2Rpbmc7XG4gICAgbGV0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgaWYgKGRhdGEgJiYgUGxhdGZvcm0uQnVmZmVyVXRpbHMuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICBlbmNvZGluZyA9IGVuY29kaW5nID8gZW5jb2RpbmcgKyBcIi9iYXNlNjRcIiA6IFwiYmFzZTY0XCI7XG4gICAgICAgIGRhdGEgPSBQbGF0Zm9ybS5CdWZmZXJVdGlscy5iYXNlNjRFbmNvZGUoZGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhID0gUGxhdGZvcm0uQnVmZmVyVXRpbHMudG9CdWZmZXIoZGF0YSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBpZDogdGhpcy5pZCxcbiAgICAgIGNsaWVudElkOiB0aGlzLmNsaWVudElkLFxuICAgICAgY29ubmVjdGlvbklkOiB0aGlzLmNvbm5lY3Rpb25JZCxcbiAgICAgIGNvbm5lY3Rpb25LZXk6IHRoaXMuY29ubmVjdGlvbktleSxcbiAgICAgIGV4dHJhczogdGhpcy5leHRyYXMsXG4gICAgICBlbmNvZGluZyxcbiAgICAgIGRhdGFcbiAgICB9O1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCByZXN1bHQgPSBcIltNZXNzYWdlXCI7XG4gICAgaWYgKHRoaXMubmFtZSlcbiAgICAgIHJlc3VsdCArPSBcIjsgbmFtZT1cIiArIHRoaXMubmFtZTtcbiAgICBpZiAodGhpcy5pZClcbiAgICAgIHJlc3VsdCArPSBcIjsgaWQ9XCIgKyB0aGlzLmlkO1xuICAgIGlmICh0aGlzLnRpbWVzdGFtcClcbiAgICAgIHJlc3VsdCArPSBcIjsgdGltZXN0YW1wPVwiICsgdGhpcy50aW1lc3RhbXA7XG4gICAgaWYgKHRoaXMuY2xpZW50SWQpXG4gICAgICByZXN1bHQgKz0gXCI7IGNsaWVudElkPVwiICsgdGhpcy5jbGllbnRJZDtcbiAgICBpZiAodGhpcy5jb25uZWN0aW9uSWQpXG4gICAgICByZXN1bHQgKz0gXCI7IGNvbm5lY3Rpb25JZD1cIiArIHRoaXMuY29ubmVjdGlvbklkO1xuICAgIGlmICh0aGlzLmVuY29kaW5nKVxuICAgICAgcmVzdWx0ICs9IFwiOyBlbmNvZGluZz1cIiArIHRoaXMuZW5jb2Rpbmc7XG4gICAgaWYgKHRoaXMuZXh0cmFzKVxuICAgICAgcmVzdWx0ICs9IFwiOyBleHRyYXMgPVwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy5leHRyYXMpO1xuICAgIGlmICh0aGlzLmRhdGEpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5kYXRhID09IFwic3RyaW5nXCIpXG4gICAgICAgIHJlc3VsdCArPSBcIjsgZGF0YT1cIiArIHRoaXMuZGF0YTtcbiAgICAgIGVsc2UgaWYgKFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmlzQnVmZmVyKHRoaXMuZGF0YSkpXG4gICAgICAgIHJlc3VsdCArPSBcIjsgZGF0YSAoYnVmZmVyKT1cIiArIFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmJhc2U2NEVuY29kZSh0aGlzLmRhdGEpO1xuICAgICAgZWxzZVxuICAgICAgICByZXN1bHQgKz0gXCI7IGRhdGEgKGpzb24pPVwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZXh0cmFzKVxuICAgICAgcmVzdWx0ICs9IFwiOyBleHRyYXM9XCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLmV4dHJhcyk7XG4gICAgcmVzdWx0ICs9IFwiXVwiO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG52YXIgbWVzc2FnZV9kZWZhdWx0ID0gTWVzc2FnZTtcblxuLy8gc3JjL2NvbW1vbi9saWIvdHlwZXMvcHJlc2VuY2VtZXNzYWdlLnRzXG52YXIgYWN0aW9ucyA9IFtcImFic2VudFwiLCBcInByZXNlbnRcIiwgXCJlbnRlclwiLCBcImxlYXZlXCIsIFwidXBkYXRlXCJdO1xuZnVuY3Rpb24gdG9BY3Rpb25WYWx1ZShhY3Rpb25TdHJpbmcpIHtcbiAgcmV0dXJuIGFjdGlvbnMuaW5kZXhPZihhY3Rpb25TdHJpbmcpO1xufVxuYXN5bmMgZnVuY3Rpb24gZnJvbUVuY29kZWQyKGxvZ2dlciwgZW5jb2RlZCwgb3B0aW9ucykge1xuICBjb25zdCBtc2cgPSBmcm9tVmFsdWVzMihlbmNvZGVkLCB0cnVlKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBkZWNvZGUyKG1zZywgb3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucyA6IHt9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihsb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUiwgXCJQcmVzZW5jZU1lc3NhZ2UuZnJvbUVuY29kZWQoKVwiLCBlLnRvU3RyaW5nKCkpO1xuICB9XG4gIHJldHVybiBtc2c7XG59XG5hc3luYyBmdW5jdGlvbiBmcm9tRW5jb2RlZEFycmF5Mihsb2dnZXIsIGVuY29kZWRBcnJheSwgb3B0aW9ucykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgZW5jb2RlZEFycmF5Lm1hcChmdW5jdGlvbihlbmNvZGVkKSB7XG4gICAgICByZXR1cm4gZnJvbUVuY29kZWQyKGxvZ2dlciwgZW5jb2RlZCwgb3B0aW9ucyk7XG4gICAgfSlcbiAgKTtcbn1cbmZ1bmN0aW9uIGZyb21WYWx1ZXMyKHZhbHVlcywgc3RyaW5naWZ5QWN0aW9uKSB7XG4gIGlmIChzdHJpbmdpZnlBY3Rpb24pIHtcbiAgICB2YWx1ZXMuYWN0aW9uID0gYWN0aW9uc1t2YWx1ZXMuYWN0aW9uXTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgUHJlc2VuY2VNZXNzYWdlKCksIHZhbHVlcyk7XG59XG52YXIgZGVjb2RlMiA9IGRlY29kZTtcbmFzeW5jIGZ1bmN0aW9uIGZyb21SZXNwb25zZUJvZHkyKGJvZHksIG9wdGlvbnMsIGxvZ2dlciwgTXNnUGFjaywgZm9ybWF0KSB7XG4gIGNvbnN0IG1lc3NhZ2VzID0gW107XG4gIGlmIChmb3JtYXQpIHtcbiAgICBib2R5ID0gZGVjb2RlQm9keShib2R5LCBNc2dQYWNrLCBmb3JtYXQpO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYm9keS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG1zZyA9IG1lc3NhZ2VzW2ldID0gZnJvbVZhbHVlczIoYm9keVtpXSwgdHJ1ZSk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGRlY29kZTIobXNnLCBvcHRpb25zKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24obG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwiUHJlc2VuY2VNZXNzYWdlLmZyb21SZXNwb25zZUJvZHkoKVwiLCBlLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWVzc2FnZXM7XG59XG5mdW5jdGlvbiBmcm9tVmFsdWVzQXJyYXkyKHZhbHVlcykge1xuICBjb25zdCBjb3VudCA9IHZhbHVlcy5sZW5ndGgsIHJlc3VsdCA9IG5ldyBBcnJheShjb3VudCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKylcbiAgICByZXN1bHRbaV0gPSBmcm9tVmFsdWVzMih2YWx1ZXNbaV0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZnJvbURhdGEoZGF0YSkge1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIFByZXNlbmNlTWVzc2FnZSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG4gIHJldHVybiBmcm9tVmFsdWVzMih7XG4gICAgZGF0YVxuICB9KTtcbn1cbnZhciBQcmVzZW5jZU1lc3NhZ2UgPSBjbGFzcyB7XG4gIC8qIFJldHVybnMgd2hldGhlciB0aGlzIHByZXNlbmNlTWVzc2FnZSBpcyBzeW50aGVzaXplZCwgaS5lLiB3YXMgbm90IGFjdHVhbGx5XG4gICAqIHNlbnQgYnkgdGhlIGNvbm5lY3Rpb24gKHVzdWFsbHkgbWVhbnMgYSBsZWF2ZSBldmVudCBzZW50IDE1cyBhZnRlciBhXG4gICAqIGRpc2Nvbm5lY3Rpb24pLiBUaGlzIGlzIHVzZWZ1bCBiZWNhdXNlIHN5bnRoZXNpemVkIG1lc3NhZ2VzIGNhbm5vdCBiZVxuICAgKiBjb21wYXJlZCBmb3IgbmV3bmVzcyBieSBpZCBsZXhpY29ncmFwaGljYWxseSAtIFJUUDJiMVxuICAgKi9cbiAgaXNTeW50aGVzaXplZCgpIHtcbiAgICBpZiAoIXRoaXMuaWQgfHwgIXRoaXMuY29ubmVjdGlvbklkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaWQuc3Vic3RyaW5nKHRoaXMuY29ubmVjdGlvbklkLmxlbmd0aCwgMCkgIT09IHRoaXMuY29ubmVjdGlvbklkO1xuICB9XG4gIC8qIFJUUDJiMiAqL1xuICBwYXJzZUlkKCkge1xuICAgIGlmICghdGhpcy5pZClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInBhcnNlSWQoKTogUHJlc2VuY2UgbWVzc2FnZSBkb2VzIG5vdCBjb250YWluIGFuIGlkXCIpO1xuICAgIGNvbnN0IHBhcnRzID0gdGhpcy5pZC5zcGxpdChcIjpcIik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbm5lY3Rpb25JZDogcGFydHNbMF0sXG4gICAgICBtc2dTZXJpYWw6IHBhcnNlSW50KHBhcnRzWzFdLCAxMCksXG4gICAgICBpbmRleDogcGFyc2VJbnQocGFydHNbMl0sIDEwKVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIE92ZXJsb2FkIHRvSlNPTigpIHRvIGludGVyY2VwdCBKU09OLnN0cmluZ2lmeSgpXG4gICAqIEByZXR1cm4geyp9XG4gICAqL1xuICB0b0pTT04oKSB7XG4gICAgbGV0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgbGV0IGVuY29kaW5nID0gdGhpcy5lbmNvZGluZztcbiAgICBpZiAoZGF0YSAmJiBQbGF0Zm9ybS5CdWZmZXJVdGlscy5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGVuY29kaW5nID0gZW5jb2RpbmcgPyBlbmNvZGluZyArIFwiL2Jhc2U2NFwiIDogXCJiYXNlNjRcIjtcbiAgICAgICAgZGF0YSA9IFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmJhc2U2NEVuY29kZShkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEgPSBQbGF0Zm9ybS5CdWZmZXJVdGlscy50b0J1ZmZlcihkYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgY2xpZW50SWQ6IHRoaXMuY2xpZW50SWQsXG4gICAgICAvKiBDb252ZXJ0IHByZXNlbmNlIGFjdGlvbiBiYWNrIHRvIGFuIGludCBmb3Igc2VuZGluZyB0byBBYmx5ICovXG4gICAgICBhY3Rpb246IHRvQWN0aW9uVmFsdWUodGhpcy5hY3Rpb24pLFxuICAgICAgZGF0YSxcbiAgICAgIGVuY29kaW5nLFxuICAgICAgZXh0cmFzOiB0aGlzLmV4dHJhc1xuICAgIH07XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IHJlc3VsdCA9IFwiW1ByZXNlbmNlTWVzc2FnZVwiO1xuICAgIHJlc3VsdCArPSBcIjsgYWN0aW9uPVwiICsgdGhpcy5hY3Rpb247XG4gICAgaWYgKHRoaXMuaWQpXG4gICAgICByZXN1bHQgKz0gXCI7IGlkPVwiICsgdGhpcy5pZDtcbiAgICBpZiAodGhpcy50aW1lc3RhbXApXG4gICAgICByZXN1bHQgKz0gXCI7IHRpbWVzdGFtcD1cIiArIHRoaXMudGltZXN0YW1wO1xuICAgIGlmICh0aGlzLmNsaWVudElkKVxuICAgICAgcmVzdWx0ICs9IFwiOyBjbGllbnRJZD1cIiArIHRoaXMuY2xpZW50SWQ7XG4gICAgaWYgKHRoaXMuY29ubmVjdGlvbklkKVxuICAgICAgcmVzdWx0ICs9IFwiOyBjb25uZWN0aW9uSWQ9XCIgKyB0aGlzLmNvbm5lY3Rpb25JZDtcbiAgICBpZiAodGhpcy5lbmNvZGluZylcbiAgICAgIHJlc3VsdCArPSBcIjsgZW5jb2Rpbmc9XCIgKyB0aGlzLmVuY29kaW5nO1xuICAgIGlmICh0aGlzLmRhdGEpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5kYXRhID09IFwic3RyaW5nXCIpXG4gICAgICAgIHJlc3VsdCArPSBcIjsgZGF0YT1cIiArIHRoaXMuZGF0YTtcbiAgICAgIGVsc2UgaWYgKFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmlzQnVmZmVyKHRoaXMuZGF0YSkpXG4gICAgICAgIHJlc3VsdCArPSBcIjsgZGF0YSAoYnVmZmVyKT1cIiArIFBsYXRmb3JtLkJ1ZmZlclV0aWxzLmJhc2U2NEVuY29kZSh0aGlzLmRhdGEpO1xuICAgICAgZWxzZVxuICAgICAgICByZXN1bHQgKz0gXCI7IGRhdGEgKGpzb24pPVwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZXh0cmFzKSB7XG4gICAgICByZXN1bHQgKz0gXCI7IGV4dHJhcz1cIiArIEpTT04uc3RyaW5naWZ5KHRoaXMuZXh0cmFzKTtcbiAgICB9XG4gICAgcmVzdWx0ICs9IFwiXVwiO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG52YXIgcHJlc2VuY2VtZXNzYWdlX2RlZmF1bHQgPSBQcmVzZW5jZU1lc3NhZ2U7XG5cbi8vIHNyYy9jb21tb24vbGliL2NsaWVudC9yZXN0cHJlc2VuY2UudHNcbnZhciBSZXN0UHJlc2VuY2UgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGNoYW5uZWwpIHtcbiAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsO1xuICB9XG4gIGdldCBsb2dnZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hhbm5lbC5sb2dnZXI7XG4gIH1cbiAgYXN5bmMgZ2V0KHBhcmFtcykge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIlJlc3RQcmVzZW5jZS5nZXQoKVwiLCBcImNoYW5uZWwgPSBcIiArIHRoaXMuY2hhbm5lbC5uYW1lKTtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNoYW5uZWwuY2xpZW50LCBmb3JtYXQgPSBjbGllbnQub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFwibXNncGFja1wiIC8qIG1zZ3BhY2sgKi8gOiBcImpzb25cIiAvKiBqc29uICovLCBlbnZlbG9wZSA9IHRoaXMuY2hhbm5lbC5jbGllbnQuaHR0cC5zdXBwb3J0c0xpbmtIZWFkZXJzID8gdm9pZCAwIDogZm9ybWF0LCBoZWFkZXJzID0gZGVmYXVsdHNfZGVmYXVsdC5kZWZhdWx0R2V0SGVhZGVycyhjbGllbnQub3B0aW9ucywgeyBmb3JtYXQgfSk7XG4gICAgbWl4aW4oaGVhZGVycywgY2xpZW50Lm9wdGlvbnMuaGVhZGVycyk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuY2hhbm5lbC5jaGFubmVsT3B0aW9ucztcbiAgICByZXR1cm4gbmV3IHBhZ2luYXRlZHJlc291cmNlX2RlZmF1bHQoXG4gICAgICBjbGllbnQsXG4gICAgICB0aGlzLmNoYW5uZWwuY2xpZW50LnJlc3QucHJlc2VuY2VNaXhpbi5iYXNlUGF0aCh0aGlzKSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICBlbnZlbG9wZSxcbiAgICAgIGFzeW5jIChib2R5LCBoZWFkZXJzMiwgdW5wYWNrZWQpID0+IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGZyb21SZXNwb25zZUJvZHkyKFxuICAgICAgICAgIGJvZHksXG4gICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBjbGllbnQuX01zZ1BhY2ssXG4gICAgICAgICAgdW5wYWNrZWQgPyB2b2lkIDAgOiBmb3JtYXRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICApLmdldChwYXJhbXMpO1xuICB9XG4gIGFzeW5jIGhpc3RvcnkocGFyYW1zKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sIFwiUmVzdFByZXNlbmNlLmhpc3RvcnkoKVwiLCBcImNoYW5uZWwgPSBcIiArIHRoaXMuY2hhbm5lbC5uYW1lKTtcbiAgICByZXR1cm4gdGhpcy5jaGFubmVsLmNsaWVudC5yZXN0LnByZXNlbmNlTWl4aW4uaGlzdG9yeSh0aGlzLCBwYXJhbXMpO1xuICB9XG59O1xudmFyIHJlc3RwcmVzZW5jZV9kZWZhdWx0ID0gUmVzdFByZXNlbmNlO1xuXG4vLyBzcmMvY29tbW9uL2xpYi9jbGllbnQvcmVzdGNoYW5uZWwudHNcbnZhciBNU0dfSURfRU5UUk9QWV9CWVRFUyA9IDk7XG5mdW5jdGlvbiBhbGxFbXB0eUlkcyhtZXNzYWdlcykge1xuICByZXR1cm4gbWVzc2FnZXMuZXZlcnkoZnVuY3Rpb24obWVzc2FnZSkge1xuICAgIHJldHVybiAhbWVzc2FnZS5pZDtcbiAgfSk7XG59XG52YXIgUmVzdENoYW5uZWwgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCwgbmFtZSwgY2hhbm5lbE9wdGlvbnMpIHtcbiAgICB2YXIgX2EyLCBfYjtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oY2xpZW50LmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIlJlc3RDaGFubmVsKClcIiwgXCJzdGFydGVkOyBuYW1lID0gXCIgKyBuYW1lKTtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMucHJlc2VuY2UgPSBuZXcgcmVzdHByZXNlbmNlX2RlZmF1bHQodGhpcyk7XG4gICAgdGhpcy5jaGFubmVsT3B0aW9ucyA9IG5vcm1hbGlzZUNoYW5uZWxPcHRpb25zKChfYTIgPSBjbGllbnQuX0NyeXB0bykgIT0gbnVsbCA/IF9hMiA6IG51bGwsIHRoaXMubG9nZ2VyLCBjaGFubmVsT3B0aW9ucyk7XG4gICAgaWYgKChfYiA9IGNsaWVudC5vcHRpb25zLnBsdWdpbnMpID09IG51bGwgPyB2b2lkIDAgOiBfYi5QdXNoKSB7XG4gICAgICB0aGlzLl9wdXNoID0gbmV3IGNsaWVudC5vcHRpb25zLnBsdWdpbnMuUHVzaC5QdXNoQ2hhbm5lbCh0aGlzKTtcbiAgICB9XG4gIH1cbiAgZ2V0IHB1c2goKSB7XG4gICAgaWYgKCF0aGlzLl9wdXNoKSB7XG4gICAgICB0aHJvd01pc3NpbmdQbHVnaW5FcnJvcihcIlB1c2hcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9wdXNoO1xuICB9XG4gIGdldCBsb2dnZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmxvZ2dlcjtcbiAgfVxuICBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICB2YXIgX2EyO1xuICAgIHRoaXMuY2hhbm5lbE9wdGlvbnMgPSBub3JtYWxpc2VDaGFubmVsT3B0aW9ucygoX2EyID0gdGhpcy5jbGllbnQuX0NyeXB0bykgIT0gbnVsbCA/IF9hMiA6IG51bGwsIHRoaXMubG9nZ2VyLCBvcHRpb25zKTtcbiAgfVxuICBhc3luYyBoaXN0b3J5KHBhcmFtcykge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIlJlc3RDaGFubmVsLmhpc3RvcnkoKVwiLCBcImNoYW5uZWwgPSBcIiArIHRoaXMubmFtZSk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnJlc3QuY2hhbm5lbE1peGluLmhpc3RvcnkodGhpcywgcGFyYW1zKTtcbiAgfVxuICBhc3luYyBwdWJsaXNoKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmaXJzdCA9IGFyZ3NbMF0sIHNlY29uZCA9IGFyZ3NbMV07XG4gICAgbGV0IG1lc3NhZ2VzO1xuICAgIGxldCBwYXJhbXM7XG4gICAgaWYgKHR5cGVvZiBmaXJzdCA9PT0gXCJzdHJpbmdcIiB8fCBmaXJzdCA9PT0gbnVsbCkge1xuICAgICAgbWVzc2FnZXMgPSBbZnJvbVZhbHVlcyh7IG5hbWU6IGZpcnN0LCBkYXRhOiBzZWNvbmQgfSldO1xuICAgICAgcGFyYW1zID0gYXJnc1syXTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGZpcnN0KSkge1xuICAgICAgbWVzc2FnZXMgPSBbZnJvbVZhbHVlcyhmaXJzdCldO1xuICAgICAgcGFyYW1zID0gYXJnc1sxXTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZmlyc3QpKSB7XG4gICAgICBtZXNzYWdlcyA9IGZyb21WYWx1ZXNBcnJheShmaXJzdCk7XG4gICAgICBwYXJhbXMgPSBhcmdzWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFxuICAgICAgICBcIlRoZSBzaW5nbGUtYXJndW1lbnQgZm9ybSBvZiBwdWJsaXNoKCkgZXhwZWN0cyBhIG1lc3NhZ2Ugb2JqZWN0IG9yIGFuIGFycmF5IG9mIG1lc3NhZ2Ugb2JqZWN0c1wiLFxuICAgICAgICA0MDAxMyxcbiAgICAgICAgNDAwXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIXBhcmFtcykge1xuICAgICAgcGFyYW1zID0ge307XG4gICAgfVxuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuY2xpZW50LCBvcHRpb25zID0gY2xpZW50Lm9wdGlvbnMsIGZvcm1hdCA9IG9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLywgaWRlbXBvdGVudFJlc3RQdWJsaXNoaW5nID0gY2xpZW50Lm9wdGlvbnMuaWRlbXBvdGVudFJlc3RQdWJsaXNoaW5nLCBoZWFkZXJzID0gZGVmYXVsdHNfZGVmYXVsdC5kZWZhdWx0UG9zdEhlYWRlcnMoY2xpZW50Lm9wdGlvbnMsIHsgZm9ybWF0IH0pO1xuICAgIG1peGluKGhlYWRlcnMsIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgaWYgKGlkZW1wb3RlbnRSZXN0UHVibGlzaGluZyAmJiBhbGxFbXB0eUlkcyhtZXNzYWdlcykpIHtcbiAgICAgIGNvbnN0IG1zZ0lkQmFzZSA9IGF3YWl0IHJhbmRvbVN0cmluZyhNU0dfSURfRU5UUk9QWV9CWVRFUyk7XG4gICAgICBtZXNzYWdlcy5mb3JFYWNoKGZ1bmN0aW9uKG1lc3NhZ2UsIGluZGV4KSB7XG4gICAgICAgIG1lc3NhZ2UuaWQgPSBtc2dJZEJhc2UgKyBcIjpcIiArIGluZGV4LnRvU3RyaW5nKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgYXdhaXQgZW5jb2RlQXJyYXkobWVzc2FnZXMsIHRoaXMuY2hhbm5lbE9wdGlvbnMpO1xuICAgIGNvbnN0IHNpemUgPSBnZXRNZXNzYWdlc1NpemUobWVzc2FnZXMpLCBtYXhNZXNzYWdlU2l6ZSA9IG9wdGlvbnMubWF4TWVzc2FnZVNpemU7XG4gICAgaWYgKHNpemUgPiBtYXhNZXNzYWdlU2l6ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcbiAgICAgICAgXCJNYXhpbXVtIHNpemUgb2YgbWVzc2FnZXMgdGhhdCBjYW4gYmUgcHVibGlzaGVkIGF0IG9uY2UgZXhjZWVkZWQgKCB3YXMgXCIgKyBzaXplICsgXCIgYnl0ZXM7IGxpbWl0IGlzIFwiICsgbWF4TWVzc2FnZVNpemUgKyBcIiBieXRlcylcIixcbiAgICAgICAgNDAwMDksXG4gICAgICAgIDQwMFxuICAgICAgKTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5fcHVibGlzaChzZXJpYWxpemUobWVzc2FnZXMsIGNsaWVudC5fTXNnUGFjaywgZm9ybWF0KSwgaGVhZGVycywgcGFyYW1zKTtcbiAgfVxuICBhc3luYyBfcHVibGlzaChyZXF1ZXN0Qm9keSwgaGVhZGVycywgcGFyYW1zKSB7XG4gICAgYXdhaXQgcmVzb3VyY2VfZGVmYXVsdC5wb3N0KFxuICAgICAgdGhpcy5jbGllbnQsXG4gICAgICB0aGlzLmNsaWVudC5yZXN0LmNoYW5uZWxNaXhpbi5iYXNlUGF0aCh0aGlzKSArIFwiL21lc3NhZ2VzXCIsXG4gICAgICByZXF1ZXN0Qm9keSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICBwYXJhbXMsXG4gICAgICBudWxsLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gIH1cbiAgYXN5bmMgc3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5yZXN0LmNoYW5uZWxNaXhpbi5zdGF0dXModGhpcyk7XG4gIH1cbn07XG52YXIgcmVzdGNoYW5uZWxfZGVmYXVsdCA9IFJlc3RDaGFubmVsO1xuXG4vLyBzcmMvY29tbW9uL2xpYi90eXBlcy9zdGF0cy50c1xudmFyIFN0YXRzID0gY2xhc3MgX1N0YXRzIHtcbiAgY29uc3RydWN0b3IodmFsdWVzKSB7XG4gICAgdGhpcy5lbnRyaWVzID0gdmFsdWVzICYmIHZhbHVlcy5lbnRyaWVzIHx8IHZvaWQgMDtcbiAgICB0aGlzLnNjaGVtYSA9IHZhbHVlcyAmJiB2YWx1ZXMuc2NoZW1hIHx8IHZvaWQgMDtcbiAgICB0aGlzLmFwcElkID0gdmFsdWVzICYmIHZhbHVlcy5hcHBJZCB8fCB2b2lkIDA7XG4gICAgdGhpcy5pblByb2dyZXNzID0gdmFsdWVzICYmIHZhbHVlcy5pblByb2dyZXNzIHx8IHZvaWQgMDtcbiAgICB0aGlzLnVuaXQgPSB2YWx1ZXMgJiYgdmFsdWVzLnVuaXQgfHwgdm9pZCAwO1xuICAgIHRoaXMuaW50ZXJ2YWxJZCA9IHZhbHVlcyAmJiB2YWx1ZXMuaW50ZXJ2YWxJZCB8fCB2b2lkIDA7XG4gIH1cbiAgc3RhdGljIGZyb21WYWx1ZXModmFsdWVzKSB7XG4gICAgcmV0dXJuIG5ldyBfU3RhdHModmFsdWVzKTtcbiAgfVxufTtcbnZhciBzdGF0c19kZWZhdWx0ID0gU3RhdHM7XG5cbi8vIHNyYy9jb21tb24vbGliL2NsaWVudC9yZXN0Y2hhbm5lbG1peGluLnRzXG52YXIgUmVzdENoYW5uZWxNaXhpbiA9IGNsYXNzIHtcbiAgc3RhdGljIGJhc2VQYXRoKGNoYW5uZWwpIHtcbiAgICByZXR1cm4gXCIvY2hhbm5lbHMvXCIgKyBlbmNvZGVVUklDb21wb25lbnQoY2hhbm5lbC5uYW1lKTtcbiAgfVxuICBzdGF0aWMgaGlzdG9yeShjaGFubmVsLCBwYXJhbXMpIHtcbiAgICBjb25zdCBjbGllbnQgPSBjaGFubmVsLmNsaWVudCwgZm9ybWF0ID0gY2xpZW50Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLywgZW52ZWxvcGUgPSBjaGFubmVsLmNsaWVudC5odHRwLnN1cHBvcnRzTGlua0hlYWRlcnMgPyB2b2lkIDAgOiBmb3JtYXQsIGhlYWRlcnMgPSBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRHZXRIZWFkZXJzKGNsaWVudC5vcHRpb25zLCB7IGZvcm1hdCB9KTtcbiAgICBtaXhpbihoZWFkZXJzLCBjbGllbnQub3B0aW9ucy5oZWFkZXJzKTtcbiAgICBjb25zdCBvcHRpb25zID0gY2hhbm5lbC5jaGFubmVsT3B0aW9ucztcbiAgICByZXR1cm4gbmV3IHBhZ2luYXRlZHJlc291cmNlX2RlZmF1bHQoY2xpZW50LCB0aGlzLmJhc2VQYXRoKGNoYW5uZWwpICsgXCIvbWVzc2FnZXNcIiwgaGVhZGVycywgZW52ZWxvcGUsIGFzeW5jIGZ1bmN0aW9uKGJvZHksIGhlYWRlcnMyLCB1bnBhY2tlZCkge1xuICAgICAgcmV0dXJuIGF3YWl0IGZyb21SZXNwb25zZUJvZHkoXG4gICAgICAgIGJvZHksXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIGNoYW5uZWwubG9nZ2VyLFxuICAgICAgICBjbGllbnQuX01zZ1BhY2ssXG4gICAgICAgIHVucGFja2VkID8gdm9pZCAwIDogZm9ybWF0XG4gICAgICApO1xuICAgIH0pLmdldChwYXJhbXMpO1xuICB9XG4gIHN0YXRpYyBhc3luYyBzdGF0dXMoY2hhbm5lbCkge1xuICAgIGNvbnN0IGZvcm1hdCA9IGNoYW5uZWwuY2xpZW50Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLztcbiAgICBjb25zdCBoZWFkZXJzID0gZGVmYXVsdHNfZGVmYXVsdC5kZWZhdWx0UG9zdEhlYWRlcnMoY2hhbm5lbC5jbGllbnQub3B0aW9ucywgeyBmb3JtYXQgfSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXNvdXJjZV9kZWZhdWx0LmdldChcbiAgICAgIGNoYW5uZWwuY2xpZW50LFxuICAgICAgdGhpcy5iYXNlUGF0aChjaGFubmVsKSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICB7fSxcbiAgICAgIGZvcm1hdCxcbiAgICAgIHRydWVcbiAgICApO1xuICAgIHJldHVybiByZXNwb25zZS5ib2R5O1xuICB9XG59O1xuXG4vLyBzcmMvY29tbW9uL2xpYi9jbGllbnQvcmVzdHByZXNlbmNlbWl4aW4udHNcbnZhciBSZXN0UHJlc2VuY2VNaXhpbiA9IGNsYXNzIHtcbiAgc3RhdGljIGJhc2VQYXRoKHByZXNlbmNlKSB7XG4gICAgcmV0dXJuIFJlc3RDaGFubmVsTWl4aW4uYmFzZVBhdGgocHJlc2VuY2UuY2hhbm5lbCkgKyBcIi9wcmVzZW5jZVwiO1xuICB9XG4gIHN0YXRpYyBhc3luYyBoaXN0b3J5KHByZXNlbmNlLCBwYXJhbXMpIHtcbiAgICBjb25zdCBjbGllbnQgPSBwcmVzZW5jZS5jaGFubmVsLmNsaWVudCwgZm9ybWF0ID0gY2xpZW50Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLywgZW52ZWxvcGUgPSBwcmVzZW5jZS5jaGFubmVsLmNsaWVudC5odHRwLnN1cHBvcnRzTGlua0hlYWRlcnMgPyB2b2lkIDAgOiBmb3JtYXQsIGhlYWRlcnMgPSBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRHZXRIZWFkZXJzKGNsaWVudC5vcHRpb25zLCB7IGZvcm1hdCB9KTtcbiAgICBtaXhpbihoZWFkZXJzLCBjbGllbnQub3B0aW9ucy5oZWFkZXJzKTtcbiAgICBjb25zdCBvcHRpb25zID0gcHJlc2VuY2UuY2hhbm5lbC5jaGFubmVsT3B0aW9ucztcbiAgICByZXR1cm4gbmV3IHBhZ2luYXRlZHJlc291cmNlX2RlZmF1bHQoY2xpZW50LCB0aGlzLmJhc2VQYXRoKHByZXNlbmNlKSArIFwiL2hpc3RvcnlcIiwgaGVhZGVycywgZW52ZWxvcGUsIGFzeW5jIGZ1bmN0aW9uKGJvZHksIGhlYWRlcnMyLCB1bnBhY2tlZCkge1xuICAgICAgcmV0dXJuIGF3YWl0IGZyb21SZXNwb25zZUJvZHkyKFxuICAgICAgICBib2R5LFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICBwcmVzZW5jZS5sb2dnZXIsXG4gICAgICAgIGNsaWVudC5fTXNnUGFjayxcbiAgICAgICAgdW5wYWNrZWQgPyB2b2lkIDAgOiBmb3JtYXRcbiAgICAgICk7XG4gICAgfSkuZ2V0KHBhcmFtcyk7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tb24vbGliL2NsaWVudC9yZXN0LnRzXG52YXIgUmVzdCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jaGFubmVsTWl4aW4gPSBSZXN0Q2hhbm5lbE1peGluO1xuICAgIHRoaXMucHJlc2VuY2VNaXhpbiA9IFJlc3RQcmVzZW5jZU1peGluO1xuICAgIC8vIGV4cG9zZWQgZm9yIHBsdWdpbnMgYnV0IHNob3VsZG4ndCBiZSBidW5kbGVkIHdpdGggbWluaW1hbCByZWFsdGltZVxuICAgIHRoaXMuUmVzb3VyY2UgPSByZXNvdXJjZV9kZWZhdWx0O1xuICAgIHRoaXMuRGV2aWNlRGV0YWlscyA9IGRldmljZWRldGFpbHNfZGVmYXVsdDtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLmNoYW5uZWxzID0gbmV3IENoYW5uZWxzKHRoaXMuY2xpZW50KTtcbiAgICB0aGlzLnB1c2ggPSBuZXcgcHVzaF9kZWZhdWx0KHRoaXMuY2xpZW50KTtcbiAgfVxuICBhc3luYyBzdGF0cyhwYXJhbXMpIHtcbiAgICBjb25zdCBoZWFkZXJzID0gZGVmYXVsdHNfZGVmYXVsdC5kZWZhdWx0R2V0SGVhZGVycyh0aGlzLmNsaWVudC5vcHRpb25zKSwgZm9ybWF0ID0gdGhpcy5jbGllbnQub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFwibXNncGFja1wiIC8qIG1zZ3BhY2sgKi8gOiBcImpzb25cIiAvKiBqc29uICovLCBlbnZlbG9wZSA9IHRoaXMuY2xpZW50Lmh0dHAuc3VwcG9ydHNMaW5rSGVhZGVycyA/IHZvaWQgMCA6IGZvcm1hdDtcbiAgICBtaXhpbihoZWFkZXJzLCB0aGlzLmNsaWVudC5vcHRpb25zLmhlYWRlcnMpO1xuICAgIHJldHVybiBuZXcgcGFnaW5hdGVkcmVzb3VyY2VfZGVmYXVsdCh0aGlzLmNsaWVudCwgXCIvc3RhdHNcIiwgaGVhZGVycywgZW52ZWxvcGUsIGZ1bmN0aW9uKGJvZHksIGhlYWRlcnMyLCB1bnBhY2tlZCkge1xuICAgICAgY29uc3Qgc3RhdHNWYWx1ZXMgPSB1bnBhY2tlZCA/IGJvZHkgOiBKU09OLnBhcnNlKGJvZHkpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0c1ZhbHVlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgc3RhdHNWYWx1ZXNbaV0gPSBzdGF0c19kZWZhdWx0LmZyb21WYWx1ZXMoc3RhdHNWYWx1ZXNbaV0pO1xuICAgICAgcmV0dXJuIHN0YXRzVmFsdWVzO1xuICAgIH0pLmdldChwYXJhbXMpO1xuICB9XG4gIGFzeW5jIHRpbWUocGFyYW1zKSB7XG4gICAgY29uc3QgaGVhZGVycyA9IGRlZmF1bHRzX2RlZmF1bHQuZGVmYXVsdEdldEhlYWRlcnModGhpcy5jbGllbnQub3B0aW9ucyk7XG4gICAgaWYgKHRoaXMuY2xpZW50Lm9wdGlvbnMuaGVhZGVycylcbiAgICAgIG1peGluKGhlYWRlcnMsIHRoaXMuY2xpZW50Lm9wdGlvbnMuaGVhZGVycyk7XG4gICAgY29uc3QgdGltZVVyaSA9IChob3N0KSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5jbGllbnQuYmFzZVVyaShob3N0KSArIFwiL3RpbWVcIjtcbiAgICB9O1xuICAgIGxldCB7IGVycm9yLCBib2R5LCB1bnBhY2tlZCB9ID0gYXdhaXQgdGhpcy5jbGllbnQuaHR0cC5kbyhcbiAgICAgIEh0dHBNZXRob2RzX2RlZmF1bHQuR2V0LFxuICAgICAgdGltZVVyaSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICBudWxsLFxuICAgICAgcGFyYW1zXG4gICAgKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBpZiAoIXVucGFja2VkKVxuICAgICAgYm9keSA9IEpTT04ucGFyc2UoYm9keSk7XG4gICAgY29uc3QgdGltZSA9IGJvZHlbMF07XG4gICAgaWYgKCF0aW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwiSW50ZXJuYWwgZXJyb3IgKHVuZXhwZWN0ZWQgcmVzdWx0IHR5cGUgZnJvbSBHRVQgL3RpbWUpXCIsIDVlNCwgNTAwKTtcbiAgICB9XG4gICAgdGhpcy5jbGllbnQuc2VydmVyVGltZU9mZnNldCA9IHRpbWUgLSBEYXRlLm5vdygpO1xuICAgIHJldHVybiB0aW1lO1xuICB9XG4gIGFzeW5jIHJlcXVlc3QobWV0aG9kLCBwYXRoLCB2ZXJzaW9uMiwgcGFyYW1zLCBib2R5LCBjdXN0b21IZWFkZXJzKSB7XG4gICAgdmFyIF9hMjtcbiAgICBjb25zdCBbZW5jb2RlciwgZGVjb2RlciwgZm9ybWF0XSA9ICgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5jbGllbnQub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xpZW50Ll9Nc2dQYWNrKSB7XG4gICAgICAgICAgdGhyb3dNaXNzaW5nUGx1Z2luRXJyb3IoXCJNc2dQYWNrXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdGhpcy5jbGllbnQuX01zZ1BhY2suZW5jb2RlLCB0aGlzLmNsaWVudC5fTXNnUGFjay5kZWNvZGUsIFwibXNncGFja1wiIC8qIG1zZ3BhY2sgKi9dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFtKU09OLnN0cmluZ2lmeSwgSlNPTi5wYXJzZSwgXCJqc29uXCIgLyoganNvbiAqL107XG4gICAgICB9XG4gICAgfSkoKTtcbiAgICBjb25zdCBlbnZlbG9wZSA9IHRoaXMuY2xpZW50Lmh0dHAuc3VwcG9ydHNMaW5rSGVhZGVycyA/IHZvaWQgMCA6IGZvcm1hdDtcbiAgICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gICAgY29uc3QgX21ldGhvZCA9IG1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSBfbWV0aG9kID09IFwiZ2V0XCIgPyBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRHZXRIZWFkZXJzKHRoaXMuY2xpZW50Lm9wdGlvbnMsIHsgZm9ybWF0LCBwcm90b2NvbFZlcnNpb246IHZlcnNpb24yIH0pIDogZGVmYXVsdHNfZGVmYXVsdC5kZWZhdWx0UG9zdEhlYWRlcnModGhpcy5jbGllbnQub3B0aW9ucywgeyBmb3JtYXQsIHByb3RvY29sVmVyc2lvbjogdmVyc2lvbjIgfSk7XG4gICAgaWYgKHR5cGVvZiBib2R5ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICBib2R5ID0gKF9hMiA9IGVuY29kZXIoYm9keSkpICE9IG51bGwgPyBfYTIgOiBudWxsO1xuICAgIH1cbiAgICBtaXhpbihoZWFkZXJzLCB0aGlzLmNsaWVudC5vcHRpb25zLmhlYWRlcnMpO1xuICAgIGlmIChjdXN0b21IZWFkZXJzKSB7XG4gICAgICBtaXhpbihoZWFkZXJzLCBjdXN0b21IZWFkZXJzKTtcbiAgICB9XG4gICAgY29uc3QgcGFnaW5hdGVkUmVzb3VyY2UgPSBuZXcgcGFnaW5hdGVkcmVzb3VyY2VfZGVmYXVsdChcbiAgICAgIHRoaXMuY2xpZW50LFxuICAgICAgcGF0aCxcbiAgICAgIGhlYWRlcnMsXG4gICAgICBlbnZlbG9wZSxcbiAgICAgIGFzeW5jIGZ1bmN0aW9uKHJlc2JvZHksIGhlYWRlcnMyLCB1bnBhY2tlZCkge1xuICAgICAgICByZXR1cm4gZW5zdXJlQXJyYXkodW5wYWNrZWQgPyByZXNib2R5IDogZGVjb2RlcihyZXNib2R5KSk7XG4gICAgICB9LFxuICAgICAgLyogdXNlSHR0cFBhZ2luYXRlZFJlc3BvbnNlOiAqL1xuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgaWYgKCFQbGF0Zm9ybS5IdHRwLm1ldGhvZHMuaW5jbHVkZXMoX21ldGhvZCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXCJVbnN1cHBvcnRlZCBtZXRob2QgXCIgKyBfbWV0aG9kLCA0MDUwMCwgNDA1KTtcbiAgICB9XG4gICAgaWYgKFBsYXRmb3JtLkh0dHAubWV0aG9kc1dpdGhCb2R5LmluY2x1ZGVzKF9tZXRob2QpKSB7XG4gICAgICByZXR1cm4gcGFnaW5hdGVkUmVzb3VyY2VbX21ldGhvZF0ocGFyYW1zLCBib2R5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhZ2luYXRlZFJlc291cmNlW19tZXRob2RdKHBhcmFtcyk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGJhdGNoUHVibGlzaChzcGVjT3JTcGVjcykge1xuICAgIGxldCByZXF1ZXN0Qm9keURUTztcbiAgICBsZXQgc2luZ2xlU3BlY01vZGU7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3BlY09yU3BlY3MpKSB7XG4gICAgICByZXF1ZXN0Qm9keURUTyA9IHNwZWNPclNwZWNzO1xuICAgICAgc2luZ2xlU3BlY01vZGUgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWVzdEJvZHlEVE8gPSBbc3BlY09yU3BlY3NdO1xuICAgICAgc2luZ2xlU3BlY01vZGUgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBmb3JtYXQgPSB0aGlzLmNsaWVudC5vcHRpb25zLnVzZUJpbmFyeVByb3RvY29sID8gXCJtc2dwYWNrXCIgLyogbXNncGFjayAqLyA6IFwianNvblwiIC8qIGpzb24gKi8sIGhlYWRlcnMgPSBkZWZhdWx0c19kZWZhdWx0LmRlZmF1bHRQb3N0SGVhZGVycyh0aGlzLmNsaWVudC5vcHRpb25zLCB7IGZvcm1hdCB9KTtcbiAgICBpZiAodGhpcy5jbGllbnQub3B0aW9ucy5oZWFkZXJzKVxuICAgICAgbWl4aW4oaGVhZGVycywgdGhpcy5jbGllbnQub3B0aW9ucy5oZWFkZXJzKTtcbiAgICBjb25zdCByZXF1ZXN0Qm9keSA9IGVuY29kZUJvZHkocmVxdWVzdEJvZHlEVE8sIHRoaXMuY2xpZW50Ll9Nc2dQYWNrLCBmb3JtYXQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzb3VyY2VfZGVmYXVsdC5wb3N0KHRoaXMuY2xpZW50LCBcIi9tZXNzYWdlc1wiLCByZXF1ZXN0Qm9keSwgaGVhZGVycywge30sIG51bGwsIHRydWUpO1xuICAgIGNvbnN0IGJhdGNoUmVzdWx0cyA9IHJlc3BvbnNlLnVucGFja2VkID8gcmVzcG9uc2UuYm9keSA6IGRlY29kZUJvZHkocmVzcG9uc2UuYm9keSwgdGhpcy5jbGllbnQuX01zZ1BhY2ssIGZvcm1hdCk7XG4gICAgaWYgKHNpbmdsZVNwZWNNb2RlKSB7XG4gICAgICByZXR1cm4gYmF0Y2hSZXN1bHRzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYmF0Y2hSZXN1bHRzO1xuICAgIH1cbiAgfVxuICBhc3luYyBiYXRjaFByZXNlbmNlKGNoYW5uZWxzKSB7XG4gICAgY29uc3QgZm9ybWF0ID0gdGhpcy5jbGllbnQub3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFwibXNncGFja1wiIC8qIG1zZ3BhY2sgKi8gOiBcImpzb25cIiAvKiBqc29uICovLCBoZWFkZXJzID0gZGVmYXVsdHNfZGVmYXVsdC5kZWZhdWx0UG9zdEhlYWRlcnModGhpcy5jbGllbnQub3B0aW9ucywgeyBmb3JtYXQgfSk7XG4gICAgaWYgKHRoaXMuY2xpZW50Lm9wdGlvbnMuaGVhZGVycylcbiAgICAgIG1peGluKGhlYWRlcnMsIHRoaXMuY2xpZW50Lm9wdGlvbnMuaGVhZGVycyk7XG4gICAgY29uc3QgY2hhbm5lbHNQYXJhbSA9IGNoYW5uZWxzLmpvaW4oXCIsXCIpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzb3VyY2VfZGVmYXVsdC5nZXQodGhpcy5jbGllbnQsIFwiL3ByZXNlbmNlXCIsIGhlYWRlcnMsIHsgY2hhbm5lbHM6IGNoYW5uZWxzUGFyYW0gfSwgbnVsbCwgdHJ1ZSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLnVucGFja2VkID8gcmVzcG9uc2UuYm9keSA6IGRlY29kZUJvZHkocmVzcG9uc2UuYm9keSwgdGhpcy5jbGllbnQuX01zZ1BhY2ssIGZvcm1hdCk7XG4gIH1cbiAgYXN5bmMgcmV2b2tlVG9rZW5zKHNwZWNpZmllcnMsIG9wdGlvbnMpIHtcbiAgICBpZiAodXNlVG9rZW5BdXRoKHRoaXMuY2xpZW50Lm9wdGlvbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwiQ2Fubm90IHJldm9rZSB0b2tlbnMgd2hlbiB1c2luZyB0b2tlbiBhdXRoXCIsIDQwMTYyLCA0MDEpO1xuICAgIH1cbiAgICBjb25zdCBrZXlOYW1lID0gdGhpcy5jbGllbnQub3B0aW9ucy5rZXlOYW1lO1xuICAgIGxldCByZXNvbHZlZE9wdGlvbnMgPSBvcHRpb25zICE9IG51bGwgPyBvcHRpb25zIDoge307XG4gICAgY29uc3QgcmVxdWVzdEJvZHlEVE8gPSBfX3NwcmVhZFZhbHVlcyh7XG4gICAgICB0YXJnZXRzOiBzcGVjaWZpZXJzLm1hcCgoc3BlY2lmaWVyKSA9PiBgJHtzcGVjaWZpZXIudHlwZX06JHtzcGVjaWZpZXIudmFsdWV9YClcbiAgICB9LCByZXNvbHZlZE9wdGlvbnMpO1xuICAgIGNvbnN0IGZvcm1hdCA9IHRoaXMuY2xpZW50Lm9wdGlvbnMudXNlQmluYXJ5UHJvdG9jb2wgPyBcIm1zZ3BhY2tcIiAvKiBtc2dwYWNrICovIDogXCJqc29uXCIgLyoganNvbiAqLywgaGVhZGVycyA9IGRlZmF1bHRzX2RlZmF1bHQuZGVmYXVsdFBvc3RIZWFkZXJzKHRoaXMuY2xpZW50Lm9wdGlvbnMsIHsgZm9ybWF0IH0pO1xuICAgIGlmICh0aGlzLmNsaWVudC5vcHRpb25zLmhlYWRlcnMpXG4gICAgICBtaXhpbihoZWFkZXJzLCB0aGlzLmNsaWVudC5vcHRpb25zLmhlYWRlcnMpO1xuICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0gZW5jb2RlQm9keShyZXF1ZXN0Qm9keURUTywgdGhpcy5jbGllbnQuX01zZ1BhY2ssIGZvcm1hdCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXNvdXJjZV9kZWZhdWx0LnBvc3QoXG4gICAgICB0aGlzLmNsaWVudCxcbiAgICAgIGAva2V5cy8ke2tleU5hbWV9L3Jldm9rZVRva2Vuc2AsXG4gICAgICByZXF1ZXN0Qm9keSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICB7fSxcbiAgICAgIG51bGwsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICByZXR1cm4gcmVzcG9uc2UudW5wYWNrZWQgPyByZXNwb25zZS5ib2R5IDogZGVjb2RlQm9keShyZXNwb25zZS5ib2R5LCB0aGlzLmNsaWVudC5fTXNnUGFjaywgZm9ybWF0KTtcbiAgfVxufTtcbnZhciBDaGFubmVscyA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5hbGwgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuICBnZXQobmFtZSwgY2hhbm5lbE9wdGlvbnMpIHtcbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpO1xuICAgIGxldCBjaGFubmVsID0gdGhpcy5hbGxbbmFtZV07XG4gICAgaWYgKCFjaGFubmVsKSB7XG4gICAgICB0aGlzLmFsbFtuYW1lXSA9IGNoYW5uZWwgPSBuZXcgcmVzdGNoYW5uZWxfZGVmYXVsdCh0aGlzLmNsaWVudCwgbmFtZSwgY2hhbm5lbE9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAoY2hhbm5lbE9wdGlvbnMpIHtcbiAgICAgIGNoYW5uZWwuc2V0T3B0aW9ucyhjaGFubmVsT3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBjaGFubmVsO1xuICB9XG4gIC8qIEluY2x1ZGVkIHRvIHN1cHBvcnQgY2VydGFpbiBuaWNoZSB1c2UtY2FzZXM7IG1vc3QgdXNlcnMgc2hvdWxkIGlnbm9yZSB0aGlzLlxuICAgKiBQbGVhc2UgZG8gbm90IHVzZSB0aGlzIHVubGVzcyB5b3Uga25vdyB3aGF0IHlvdSdyZSBkb2luZyAqL1xuICByZWxlYXNlKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5hbGxbU3RyaW5nKG5hbWUpXTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1vbi9saWIvY2xpZW50L2Jhc2VyZXN0LnRzXG52YXIgQmFzZVJlc3QgPSBjbGFzcyBleHRlbmRzIGJhc2VjbGllbnRfZGVmYXVsdCB7XG4gIC8qXG4gICAqIFRoZSBwdWJsaWMgdHlwaW5ncyBkZWNsYXJlIHRoYXQgdGhpcyBvbmx5IGFjY2VwdHMgYW4gb2JqZWN0LCBidXQgc2luY2Ugd2Ugd2FudCB0byBlbWl0IGEgZ29vZCBlcnJvciBtZXNzYWdlIGluIHRoZSBjYXNlIHdoZXJlIGEgbm9uLVR5cGVTY3JpcHQgdXNlciBkb2VzIG9uZSBvZiB0aGVzZSB0aGluZ3M6XG4gICAqXG4gICAqIDEuIHBhc3NlcyBhIHN0cmluZyAod2hpY2ggaXMgcXVpdGUgbGlrZWx5IGlmIHRoZXnigJlyZSBlLmcuIG1pZ3JhdGluZyBmcm9tIHRoZSBkZWZhdWx0IHZhcmlhbnQgdG8gdGhlIG1vZHVsYXIgdmFyaWFudClcbiAgICogMi4gcGFzc2VzIG5vIGFyZ3VtZW50IGF0IGFsbFxuICAgKlxuICAgKiB0ZWxsIHRoZSBjb21waWxlciB0aGF0IHRoZXNlIGNhc2VzIGFyZSBwb3NzaWJsZSBzbyB0aGF0IGl0IGZvcmNlcyB1cyB0byBoYW5kbGUgdGhlbS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcihkZWZhdWx0c19kZWZhdWx0Lm9iamVjdGlmeU9wdGlvbnMob3B0aW9ucywgZmFsc2UsIFwiQmFzZVJlc3RcIiwgbG9nZ2VyX2RlZmF1bHQuZGVmYXVsdExvZ2dlciwgeyBSZXN0IH0pKTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1vbi9saWIvY2xpZW50L21vZHVsYXJwbHVnaW5zLnRzXG52YXIgYWxsQ29tbW9uTW9kdWxhclBsdWdpbnMgPSB7IFJlc3QgfTtcblxuLy8gc3JjL2NvbW1vbi9saWIvdHlwZXMvZGVmYXVsdG1lc3NhZ2UudHNcbnZhciBEZWZhdWx0TWVzc2FnZSA9IGNsYXNzIGV4dGVuZHMgbWVzc2FnZV9kZWZhdWx0IHtcbiAgc3RhdGljIGFzeW5jIGZyb21FbmNvZGVkKGVuY29kZWQsIGlucHV0T3B0aW9ucykge1xuICAgIHJldHVybiBmcm9tRW5jb2RlZChsb2dnZXJfZGVmYXVsdC5kZWZhdWx0TG9nZ2VyLCBQbGF0Zm9ybS5DcnlwdG8sIGVuY29kZWQsIGlucHV0T3B0aW9ucyk7XG4gIH1cbiAgc3RhdGljIGFzeW5jIGZyb21FbmNvZGVkQXJyYXkoZW5jb2RlZEFycmF5LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGZyb21FbmNvZGVkQXJyYXkobG9nZ2VyX2RlZmF1bHQuZGVmYXVsdExvZ2dlciwgUGxhdGZvcm0uQ3J5cHRvLCBlbmNvZGVkQXJyYXksIG9wdGlvbnMpO1xuICB9XG4gIC8vIFVzZWQgYnkgdGVzdHNcbiAgc3RhdGljIGZyb21WYWx1ZXModmFsdWVzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IG1lc3NhZ2VfZGVmYXVsdCgpLCB2YWx1ZXMpO1xuICB9XG4gIC8vIFVzZWQgYnkgdGVzdHNcbiAgc3RhdGljIGFzeW5jIGVuY29kZShtc2csIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZW5jb2RlKG1zZywgb3B0aW9ucyk7XG4gIH1cbiAgLy8gVXNlZCBieSB0ZXN0c1xuICBzdGF0aWMgYXN5bmMgZGVjb2RlKG1lc3NhZ2UsIGlucHV0Q29udGV4dCkge1xuICAgIHJldHVybiBkZWNvZGUobWVzc2FnZSwgaW5wdXRDb250ZXh0KTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1vbi9saWIvdHlwZXMvZGVmYXVsdHByZXNlbmNlbWVzc2FnZS50c1xudmFyIERlZmF1bHRQcmVzZW5jZU1lc3NhZ2UgPSBjbGFzcyBleHRlbmRzIHByZXNlbmNlbWVzc2FnZV9kZWZhdWx0IHtcbiAgc3RhdGljIGFzeW5jIGZyb21FbmNvZGVkKGVuY29kZWQsIGlucHV0T3B0aW9ucykge1xuICAgIHJldHVybiBmcm9tRW5jb2RlZDIobG9nZ2VyX2RlZmF1bHQuZGVmYXVsdExvZ2dlciwgZW5jb2RlZCwgaW5wdXRPcHRpb25zKTtcbiAgfVxuICBzdGF0aWMgYXN5bmMgZnJvbUVuY29kZWRBcnJheShlbmNvZGVkQXJyYXksIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZnJvbUVuY29kZWRBcnJheTIobG9nZ2VyX2RlZmF1bHQuZGVmYXVsdExvZ2dlciwgZW5jb2RlZEFycmF5LCBvcHRpb25zKTtcbiAgfVxuICBzdGF0aWMgZnJvbVZhbHVlcyh2YWx1ZXMsIHN0cmluZ2lmeUFjdGlvbikge1xuICAgIHJldHVybiBmcm9tVmFsdWVzMih2YWx1ZXMsIHN0cmluZ2lmeUFjdGlvbik7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tb24vbGliL2NsaWVudC9kZWZhdWx0cmVzdC50c1xudmFyIF9EZWZhdWx0UmVzdCA9IGNsYXNzIF9EZWZhdWx0UmVzdCBleHRlbmRzIEJhc2VSZXN0IHtcbiAgLy8gVGhlIHB1YmxpYyB0eXBpbmdzIGRlY2xhcmUgdGhhdCB0aGlzIHJlcXVpcmVzIGFuIGFyZ3VtZW50IHRvIGJlIHBhc3NlZCwgYnV0IHNpbmNlIHdlIHdhbnQgdG8gZW1pdCBhIGdvb2QgZXJyb3IgbWVzc2FnZSBpbiB0aGUgY2FzZSB3aGVyZSBhIG5vbi1UeXBlU2NyaXB0IHVzZXIgZG9lcyBub3QgcGFzcyBhbiBhcmd1bWVudCwgdGVsbCB0aGUgY29tcGlsZXIgdGhhdCB0aGlzIGlzIHBvc3NpYmxlIHNvIHRoYXQgaXQgZm9yY2VzIHVzIHRvIGhhbmRsZSBpdC5cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHZhciBfYTIsIF9iO1xuICAgIGNvbnN0IE1zZ1BhY2sgPSBfRGVmYXVsdFJlc3QuX01zZ1BhY2s7XG4gICAgaWYgKCFNc2dQYWNrKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBEZWZhdWx0UmVzdC5fTXNnUGFjayB0byBoYXZlIGJlZW4gc2V0XCIpO1xuICAgIH1cbiAgICBzdXBlcihcbiAgICAgIGRlZmF1bHRzX2RlZmF1bHQub2JqZWN0aWZ5T3B0aW9ucyhvcHRpb25zLCB0cnVlLCBcIlJlc3RcIiwgbG9nZ2VyX2RlZmF1bHQuZGVmYXVsdExvZ2dlciwgX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgYWxsQ29tbW9uTW9kdWxhclBsdWdpbnMpLCB7XG4gICAgICAgIENyeXB0bzogKF9hMiA9IF9EZWZhdWx0UmVzdC5DcnlwdG8pICE9IG51bGwgPyBfYTIgOiB2b2lkIDAsXG4gICAgICAgIE1zZ1BhY2s6IChfYiA9IF9EZWZhdWx0UmVzdC5fTXNnUGFjaykgIT0gbnVsbCA/IF9iIDogdm9pZCAwXG4gICAgICB9KSlcbiAgICApO1xuICB9XG4gIHN0YXRpYyBnZXQgQ3J5cHRvKCkge1xuICAgIGlmICh0aGlzLl9DcnlwdG8gPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkVuY3J5cHRpb24gbm90IGVuYWJsZWQ7IHVzZSBhYmx5LmVuY3J5cHRpb24uanMgaW5zdGVhZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX0NyeXB0bztcbiAgfVxuICBzdGF0aWMgc2V0IENyeXB0byhuZXdWYWx1ZSkge1xuICAgIHRoaXMuX0NyeXB0byA9IG5ld1ZhbHVlO1xuICB9XG59O1xuX0RlZmF1bHRSZXN0Ll9DcnlwdG8gPSBudWxsO1xuX0RlZmF1bHRSZXN0Lk1lc3NhZ2UgPSBEZWZhdWx0TWVzc2FnZTtcbl9EZWZhdWx0UmVzdC5QcmVzZW5jZU1lc3NhZ2UgPSBEZWZhdWx0UHJlc2VuY2VNZXNzYWdlO1xuX0RlZmF1bHRSZXN0Ll9Nc2dQYWNrID0gbnVsbDtcbi8vIFVzZWQgYnkgdGVzdHNcbl9EZWZhdWx0UmVzdC5fSHR0cCA9IEh0dHA7XG52YXIgRGVmYXVsdFJlc3QgPSBfRGVmYXVsdFJlc3Q7XG5cbi8vIHNyYy9jb21tb24vbGliL3V0aWwvZXZlbnRlbWl0dGVyLnRzXG5mdW5jdGlvbiBjYWxsTGlzdGVuZXIobG9nZ2VyLCBldmVudFRoaXMsIGxpc3RlbmVyLCBhcmdzKSB7XG4gIHRyeSB7XG4gICAgbGlzdGVuZXIuYXBwbHkoZXZlbnRUaGlzLCBhcmdzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIGxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUixcbiAgICAgIFwiRXZlbnRFbWl0dGVyLmVtaXQoKVwiLFxuICAgICAgXCJVbmV4cGVjdGVkIGxpc3RlbmVyIGV4Y2VwdGlvbjogXCIgKyBlICsgXCI7IHN0YWNrID0gXCIgKyAoZSAmJiBlLnN0YWNrKVxuICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHRhcmdldExpc3RlbmVycywgbGlzdGVuZXIsIGV2ZW50RmlsdGVyKSB7XG4gIGxldCBsaXN0ZW5lcnM7XG4gIGxldCBpbmRleDtcbiAgbGV0IGV2ZW50TmFtZTtcbiAgZm9yIChsZXQgdGFyZ2V0TGlzdGVuZXJzSW5kZXggPSAwOyB0YXJnZXRMaXN0ZW5lcnNJbmRleCA8IHRhcmdldExpc3RlbmVycy5sZW5ndGg7IHRhcmdldExpc3RlbmVyc0luZGV4KyspIHtcbiAgICBsaXN0ZW5lcnMgPSB0YXJnZXRMaXN0ZW5lcnNbdGFyZ2V0TGlzdGVuZXJzSW5kZXhdO1xuICAgIGlmIChldmVudEZpbHRlcikge1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzW2V2ZW50RmlsdGVyXTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobGlzdGVuZXJzKSkge1xuICAgICAgd2hpbGUgKChpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKSkgIT09IC0xKSB7XG4gICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgaWYgKGV2ZW50RmlsdGVyICYmIGxpc3RlbmVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGVsZXRlIHRhcmdldExpc3RlbmVyc1t0YXJnZXRMaXN0ZW5lcnNJbmRleF1bZXZlbnRGaWx0ZXJdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QobGlzdGVuZXJzKSkge1xuICAgICAgZm9yIChldmVudE5hbWUgaW4gbGlzdGVuZXJzKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobGlzdGVuZXJzLCBldmVudE5hbWUpICYmIEFycmF5LmlzQXJyYXkobGlzdGVuZXJzW2V2ZW50TmFtZV0pKSB7XG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXIoW2xpc3RlbmVyc10sIGxpc3RlbmVyLCBldmVudE5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG52YXIgRXZlbnRFbWl0dGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihsb2dnZXIpIHtcbiAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICB0aGlzLmFueSA9IFtdO1xuICAgIHRoaXMuZXZlbnRzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5hbnlPbmNlID0gW107XG4gICAgdGhpcy5ldmVudHNPbmNlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cbiAgb24oLi4uYXJncykge1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3QgbGlzdGVuZXIgPSBhcmdzWzBdO1xuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRoaXMuYW55LnB1c2gobGlzdGVuZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXZlbnRMaXN0ZW5lci5vbigpOiBJbnZhbGlkIGFyZ3VtZW50czogXCIgKyBQbGF0Zm9ybS5Db25maWcuaW5zcGVjdChhcmdzKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgY29uc3QgW2V2ZW50LCBsaXN0ZW5lcl0gPSBhcmdzO1xuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV2ZW50TGlzdGVuZXIub24oKTogSW52YWxpZCBhcmd1bWVudHM6IFwiICsgUGxhdGZvcm0uQ29uZmlnLmluc3BlY3QoYXJncykpO1xuICAgICAgfVxuICAgICAgaWYgKGlzTmlsKGV2ZW50KSkge1xuICAgICAgICB0aGlzLmFueS5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgICAgZXZlbnQuZm9yRWFjaCgoZXZlbnROYW1lKSA9PiB7XG4gICAgICAgICAgdGhpcy5vbihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodHlwZW9mIGV2ZW50ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXZlbnRMaXN0ZW5lci5vbigpOiBJbnZhbGlkIGFyZ3VtZW50czogXCIgKyBQbGF0Zm9ybS5Db25maWcuaW5zcGVjdChhcmdzKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5ldmVudHNbZXZlbnRdIHx8ICh0aGlzLmV2ZW50c1tldmVudF0gPSBbXSk7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgb2ZmKC4uLmFyZ3MpIHtcbiAgICBpZiAoYXJncy5sZW5ndGggPT0gMCB8fCBpc05pbChhcmdzWzBdKSAmJiBpc05pbChhcmdzWzFdKSkge1xuICAgICAgdGhpcy5hbnkgPSBbXTtcbiAgICAgIHRoaXMuZXZlbnRzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB0aGlzLmFueU9uY2UgPSBbXTtcbiAgICAgIHRoaXMuZXZlbnRzT25jZSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBbZmlyc3RBcmcsIHNlY29uZEFyZ10gPSBhcmdzO1xuICAgIGxldCBsaXN0ZW5lciA9IG51bGw7XG4gICAgbGV0IGV2ZW50ID0gbnVsbDtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEgfHwgIXNlY29uZEFyZykge1xuICAgICAgaWYgKHR5cGVvZiBmaXJzdEFyZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGxpc3RlbmVyID0gZmlyc3RBcmc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBldmVudCA9IGZpcnN0QXJnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHNlY29uZEFyZyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV2ZW50RW1pdHRlci5vZmYoKTogaW52YWxpZCBhcmd1bWVudHM6XCIgKyBQbGF0Zm9ybS5Db25maWcuaW5zcGVjdChhcmdzKSk7XG4gICAgICB9XG4gICAgICBbZXZlbnQsIGxpc3RlbmVyXSA9IFtmaXJzdEFyZywgc2Vjb25kQXJnXTtcbiAgICB9XG4gICAgaWYgKGxpc3RlbmVyICYmIGlzTmlsKGV2ZW50KSkge1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoW3RoaXMuYW55LCB0aGlzLmV2ZW50cywgdGhpcy5hbnlPbmNlLCB0aGlzLmV2ZW50c09uY2VdLCBsaXN0ZW5lcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZXZlbnQuZm9yRWFjaCgoZXZlbnROYW1lKSA9PiB7XG4gICAgICAgIHRoaXMub2ZmKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZXZlbnQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkV2ZW50RW1pdHRlci5vZmYoKTogaW52YWxpZCBhcmd1bWVudHM6XCIgKyBQbGF0Zm9ybS5Db25maWcuaW5zcGVjdChhcmdzKSk7XG4gICAgfVxuICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoW3RoaXMuZXZlbnRzLCB0aGlzLmV2ZW50c09uY2VdLCBsaXN0ZW5lciwgZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdGhpcy5ldmVudHNbZXZlbnRdO1xuICAgICAgZGVsZXRlIHRoaXMuZXZlbnRzT25jZVtldmVudF07XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGFycmF5IG9mIGxpc3RlbmVycyBmb3IgYSBnaXZlbiBldmVudDsgZXhjbHVkZXMgb25jZSBldmVudHNcbiAgICogQHBhcmFtIGV2ZW50IChvcHRpb25hbCkgdGhlIG5hbWUgb2YgdGhlIGV2ZW50LCBvciBub25lIGZvciAnYW55J1xuICAgKiBAcmV0dXJuIGFycmF5IG9mIGV2ZW50cywgb3IgbnVsbCBpZiBub25lXG4gICAqL1xuICBsaXN0ZW5lcnMoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuZXZlbnRzW2V2ZW50XSB8fCBbXTtcbiAgICAgIGlmICh0aGlzLmV2ZW50c09uY2VbZXZlbnRdKVxuICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShsaXN0ZW5lcnMsIHRoaXMuZXZlbnRzT25jZVtldmVudF0pO1xuICAgICAgcmV0dXJuIGxpc3RlbmVycy5sZW5ndGggPyBsaXN0ZW5lcnMgOiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hbnkubGVuZ3RoID8gdGhpcy5hbnkgOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBFbWl0IGFuIGV2ZW50XG4gICAqIEBwYXJhbSBldmVudCB0aGUgZXZlbnQgbmFtZVxuICAgKiBAcGFyYW0gYXJncyB0aGUgYXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIGxpc3RlbmVyXG4gICAqL1xuICBlbWl0KGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZXZlbnRUaGlzID0geyBldmVudCB9O1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IFtdO1xuICAgIGlmICh0aGlzLmFueU9uY2UubGVuZ3RoKSB7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShsaXN0ZW5lcnMsIHRoaXMuYW55T25jZSk7XG4gICAgICB0aGlzLmFueU9uY2UgPSBbXTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYW55Lmxlbmd0aCkge1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkobGlzdGVuZXJzLCB0aGlzLmFueSk7XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50c09uY2VMaXN0ZW5lcnMgPSB0aGlzLmV2ZW50c09uY2VbZXZlbnRdO1xuICAgIGlmIChldmVudHNPbmNlTGlzdGVuZXJzKSB7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShsaXN0ZW5lcnMsIGV2ZW50c09uY2VMaXN0ZW5lcnMpO1xuICAgICAgZGVsZXRlIHRoaXMuZXZlbnRzT25jZVtldmVudF07XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50c0xpc3RlbmVycyA9IHRoaXMuZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoZXZlbnRzTGlzdGVuZXJzKSB7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShsaXN0ZW5lcnMsIGV2ZW50c0xpc3RlbmVycyk7XG4gICAgfVxuICAgIGxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xuICAgICAgY2FsbExpc3RlbmVyKHRoaXMubG9nZ2VyLCBldmVudFRoaXMsIGxpc3RlbmVyLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxuICBvbmNlKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBhcmdDb3VudCA9IGFyZ3MubGVuZ3RoO1xuICAgIGlmIChhcmdDb3VudCA9PT0gMCB8fCBhcmdDb3VudCA9PT0gMSAmJiB0eXBlb2YgYXJnc1swXSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjb25zdCBldmVudCA9IGFyZ3NbMF07XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgdGhpcy5vbmNlKGV2ZW50LCByZXNvbHZlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBbZmlyc3RBcmcsIHNlY29uZEFyZ10gPSBhcmdzO1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgZmlyc3RBcmcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhpcy5hbnlPbmNlLnB1c2goZmlyc3RBcmcpO1xuICAgIH0gZWxzZSBpZiAoaXNOaWwoZmlyc3RBcmcpKSB7XG4gICAgICBpZiAodHlwZW9mIHNlY29uZEFyZyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV2ZW50RW1pdHRlci5vbmNlKCk6IEludmFsaWQgYXJndW1lbnRzOlwiICsgUGxhdGZvcm0uQ29uZmlnLmluc3BlY3QoYXJncykpO1xuICAgICAgfVxuICAgICAgdGhpcy5hbnlPbmNlLnB1c2goc2Vjb25kQXJnKTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZmlyc3RBcmcpKSB7XG4gICAgICBjb25zdCBzZWxmMiA9IHRoaXM7XG4gICAgICBjb25zdCBsaXN0ZW5lcldyYXBwZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgaW5uZXJBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgZmlyc3RBcmcuZm9yRWFjaChmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgICAgICAgICBzZWxmMi5vZmYoZXZlbnROYW1lLCBsaXN0ZW5lcldyYXBwZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiBzZWNvbmRBcmcgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV2ZW50RW1pdHRlci5vbmNlKCk6IEludmFsaWQgYXJndW1lbnRzOlwiICsgUGxhdGZvcm0uQ29uZmlnLmluc3BlY3QoYXJncykpO1xuICAgICAgICB9XG4gICAgICAgIHNlY29uZEFyZy5hcHBseSh0aGlzLCBpbm5lckFyZ3MpO1xuICAgICAgfTtcbiAgICAgIGZpcnN0QXJnLmZvckVhY2goZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gICAgICAgIHNlbGYyLm9uKGV2ZW50TmFtZSwgbGlzdGVuZXJXcmFwcGVyKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIGZpcnN0QXJnICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV2ZW50RW1pdHRlci5vbmNlKCk6IEludmFsaWQgYXJndW1lbnRzOlwiICsgUGxhdGZvcm0uQ29uZmlnLmluc3BlY3QoYXJncykpO1xuICAgICAgfVxuICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5ldmVudHNPbmNlW2ZpcnN0QXJnXSB8fCAodGhpcy5ldmVudHNPbmNlW2ZpcnN0QXJnXSA9IFtdKTtcbiAgICAgIGlmIChzZWNvbmRBcmcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZWNvbmRBcmcgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV2ZW50RW1pdHRlci5vbmNlKCk6IEludmFsaWQgYXJndW1lbnRzOlwiICsgUGxhdGZvcm0uQ29uZmlnLmluc3BlY3QoYXJncykpO1xuICAgICAgICB9XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKHNlY29uZEFyZyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBMaXN0ZW4gZm9yIGEgc2luZ2xlIG9jY3VycmVuY2Ugb2YgYSBzdGF0ZSBldmVudCBhbmQgZmlyZSBpbW1lZGlhdGVseSBpZiBjdXJyZW50U3RhdGUgbWF0Y2hlcyB0YXJnZXRTdGF0ZVxuICAgKiBAcGFyYW0gdGFyZ2V0U3RhdGUgdGhlIG5hbWUgb2YgdGhlIHN0YXRlIGV2ZW50IHRvIGxpc3RlbiB0b1xuICAgKiBAcGFyYW0gY3VycmVudFN0YXRlIHRoZSBuYW1lIG9mIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoaXMgb2JqZWN0XG4gICAqL1xuICBhc3luYyB3aGVuU3RhdGUodGFyZ2V0U3RhdGUsIGN1cnJlbnRTdGF0ZSkge1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0U3RhdGUgIT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGN1cnJlbnRTdGF0ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2hlblN0YXRlIHJlcXVpcmVzIGEgdmFsaWQgc3RhdGUgU3RyaW5nIGFyZ3VtZW50XCIpO1xuICAgIH1cbiAgICBpZiAodGFyZ2V0U3RhdGUgPT09IGN1cnJlbnRTdGF0ZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLm9uY2UodGFyZ2V0U3RhdGUpO1xuICAgIH1cbiAgfVxufTtcbnZhciBldmVudGVtaXR0ZXJfZGVmYXVsdCA9IEV2ZW50RW1pdHRlcjtcblxuLy8gc3JjL2NvbW1vbi9saWIvdHlwZXMvcHJvdG9jb2xtZXNzYWdlLnRzXG52YXIgYWN0aW9uczIgPSB7XG4gIEhFQVJUQkVBVDogMCxcbiAgQUNLOiAxLFxuICBOQUNLOiAyLFxuICBDT05ORUNUOiAzLFxuICBDT05ORUNURUQ6IDQsXG4gIERJU0NPTk5FQ1Q6IDUsXG4gIERJU0NPTk5FQ1RFRDogNixcbiAgQ0xPU0U6IDcsXG4gIENMT1NFRDogOCxcbiAgRVJST1I6IDksXG4gIEFUVEFDSDogMTAsXG4gIEFUVEFDSEVEOiAxMSxcbiAgREVUQUNIOiAxMixcbiAgREVUQUNIRUQ6IDEzLFxuICBQUkVTRU5DRTogMTQsXG4gIE1FU1NBR0U6IDE1LFxuICBTWU5DOiAxNixcbiAgQVVUSDogMTcsXG4gIEFDVElWQVRFOiAxOFxufTtcbnZhciBBY3Rpb25OYW1lID0gW107XG5PYmplY3Qua2V5cyhhY3Rpb25zMikuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gIEFjdGlvbk5hbWVbYWN0aW9uczJbbmFtZV1dID0gbmFtZTtcbn0pO1xudmFyIGZsYWdzID0ge1xuICAvKiBDaGFubmVsIGF0dGFjaCBzdGF0ZSBmbGFncyAqL1xuICBIQVNfUFJFU0VOQ0U6IDEgPDwgMCxcbiAgSEFTX0JBQ0tMT0c6IDEgPDwgMSxcbiAgUkVTVU1FRDogMSA8PCAyLFxuICBUUkFOU0lFTlQ6IDEgPDwgNCxcbiAgQVRUQUNIX1JFU1VNRTogMSA8PCA1LFxuICAvKiBDaGFubmVsIG1vZGUgZmxhZ3MgKi9cbiAgUFJFU0VOQ0U6IDEgPDwgMTYsXG4gIFBVQkxJU0g6IDEgPDwgMTcsXG4gIFNVQlNDUklCRTogMSA8PCAxOCxcbiAgUFJFU0VOQ0VfU1VCU0NSSUJFOiAxIDw8IDE5XG59O1xudmFyIGZsYWdOYW1lcyA9IE9iamVjdC5rZXlzKGZsYWdzKTtcbmZsYWdzLk1PREVfQUxMID0gZmxhZ3MuUFJFU0VOQ0UgfCBmbGFncy5QVUJMSVNIIHwgZmxhZ3MuU1VCU0NSSUJFIHwgZmxhZ3MuUFJFU0VOQ0VfU1VCU0NSSUJFO1xuZnVuY3Rpb24gdG9TdHJpbmdBcnJheShhcnJheSkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgaWYgKGFycmF5KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0LnB1c2goYXJyYXlbaV0udG9TdHJpbmcoKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBcIlsgXCIgKyByZXN1bHQuam9pbihcIiwgXCIpICsgXCIgXVwiO1xufVxudmFyIGNoYW5uZWxNb2RlcyA9IFtcIlBSRVNFTkNFXCIsIFwiUFVCTElTSFwiLCBcIlNVQlNDUklCRVwiLCBcIlBSRVNFTkNFX1NVQlNDUklCRVwiXTtcbnZhciBzZXJpYWxpemUyID0gZW5jb2RlQm9keTtcbmZ1bmN0aW9uIGRlc2VyaWFsaXplKHNlcmlhbGl6ZWQsIE1zZ1BhY2ssIHByZXNlbmNlTWVzc2FnZVBsdWdpbiwgZm9ybWF0KSB7XG4gIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlY29kZUJvZHkoc2VyaWFsaXplZCwgTXNnUGFjaywgZm9ybWF0KTtcbiAgcmV0dXJuIGZyb21EZXNlcmlhbGl6ZWQoZGVzZXJpYWxpemVkLCBwcmVzZW5jZU1lc3NhZ2VQbHVnaW4pO1xufVxuZnVuY3Rpb24gZnJvbURlc2VyaWFsaXplZChkZXNlcmlhbGl6ZWQsIHByZXNlbmNlTWVzc2FnZVBsdWdpbikge1xuICBjb25zdCBlcnJvciA9IGRlc2VyaWFsaXplZC5lcnJvcjtcbiAgaWYgKGVycm9yKVxuICAgIGRlc2VyaWFsaXplZC5lcnJvciA9IEVycm9ySW5mby5mcm9tVmFsdWVzKGVycm9yKTtcbiAgY29uc3QgbWVzc2FnZXMgPSBkZXNlcmlhbGl6ZWQubWVzc2FnZXM7XG4gIGlmIChtZXNzYWdlcylcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2VzLmxlbmd0aDsgaSsrKVxuICAgICAgbWVzc2FnZXNbaV0gPSBmcm9tVmFsdWVzKG1lc3NhZ2VzW2ldKTtcbiAgY29uc3QgcHJlc2VuY2UgPSBwcmVzZW5jZU1lc3NhZ2VQbHVnaW4gPyBkZXNlcmlhbGl6ZWQucHJlc2VuY2UgOiB2b2lkIDA7XG4gIGlmIChwcmVzZW5jZU1lc3NhZ2VQbHVnaW4pIHtcbiAgICBpZiAocHJlc2VuY2UgJiYgcHJlc2VuY2VNZXNzYWdlUGx1Z2luKVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVzZW5jZS5sZW5ndGg7IGkrKylcbiAgICAgICAgcHJlc2VuY2VbaV0gPSBwcmVzZW5jZU1lc3NhZ2VQbHVnaW4ucHJlc2VuY2VNZXNzYWdlRnJvbVZhbHVlcyhwcmVzZW5jZVtpXSwgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IFByb3RvY29sTWVzc2FnZSgpLCBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBkZXNlcmlhbGl6ZWQpLCB7IHByZXNlbmNlIH0pKTtcbn1cbmZ1bmN0aW9uIGZyb21EZXNlcmlhbGl6ZWRJbmNsdWRpbmdEZXBlbmRlbmNpZXMoZGVzZXJpYWxpemVkKSB7XG4gIHJldHVybiBmcm9tRGVzZXJpYWxpemVkKGRlc2VyaWFsaXplZCwgeyBwcmVzZW5jZU1lc3NhZ2VGcm9tVmFsdWVzOiBmcm9tVmFsdWVzMiwgcHJlc2VuY2VNZXNzYWdlc0Zyb21WYWx1ZXNBcnJheTogZnJvbVZhbHVlc0FycmF5MiB9KTtcbn1cbmZ1bmN0aW9uIGZyb21WYWx1ZXMzKHZhbHVlcykge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgUHJvdG9jb2xNZXNzYWdlKCksIHZhbHVlcyk7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnkobXNnLCBwcmVzZW5jZU1lc3NhZ2VQbHVnaW4pIHtcbiAgbGV0IHJlc3VsdCA9IFwiW1Byb3RvY29sTWVzc2FnZVwiO1xuICBpZiAobXNnLmFjdGlvbiAhPT0gdm9pZCAwKVxuICAgIHJlc3VsdCArPSBcIjsgYWN0aW9uPVwiICsgQWN0aW9uTmFtZVttc2cuYWN0aW9uXSB8fCBtc2cuYWN0aW9uO1xuICBjb25zdCBzaW1wbGVBdHRyaWJ1dGVzID0gW1wiaWRcIiwgXCJjaGFubmVsXCIsIFwiY2hhbm5lbFNlcmlhbFwiLCBcImNvbm5lY3Rpb25JZFwiLCBcImNvdW50XCIsIFwibXNnU2VyaWFsXCIsIFwidGltZXN0YW1wXCJdO1xuICBsZXQgYXR0cmlidXRlO1xuICBmb3IgKGxldCBhdHRyaWJJbmRleCA9IDA7IGF0dHJpYkluZGV4IDwgc2ltcGxlQXR0cmlidXRlcy5sZW5ndGg7IGF0dHJpYkluZGV4KyspIHtcbiAgICBhdHRyaWJ1dGUgPSBzaW1wbGVBdHRyaWJ1dGVzW2F0dHJpYkluZGV4XTtcbiAgICBpZiAobXNnW2F0dHJpYnV0ZV0gIT09IHZvaWQgMClcbiAgICAgIHJlc3VsdCArPSBcIjsgXCIgKyBhdHRyaWJ1dGUgKyBcIj1cIiArIG1zZ1thdHRyaWJ1dGVdO1xuICB9XG4gIGlmIChtc2cubWVzc2FnZXMpXG4gICAgcmVzdWx0ICs9IFwiOyBtZXNzYWdlcz1cIiArIHRvU3RyaW5nQXJyYXkoZnJvbVZhbHVlc0FycmF5KG1zZy5tZXNzYWdlcykpO1xuICBpZiAobXNnLnByZXNlbmNlICYmIHByZXNlbmNlTWVzc2FnZVBsdWdpbilcbiAgICByZXN1bHQgKz0gXCI7IHByZXNlbmNlPVwiICsgdG9TdHJpbmdBcnJheShwcmVzZW5jZU1lc3NhZ2VQbHVnaW4ucHJlc2VuY2VNZXNzYWdlc0Zyb21WYWx1ZXNBcnJheShtc2cucHJlc2VuY2UpKTtcbiAgaWYgKG1zZy5lcnJvcilcbiAgICByZXN1bHQgKz0gXCI7IGVycm9yPVwiICsgRXJyb3JJbmZvLmZyb21WYWx1ZXMobXNnLmVycm9yKS50b1N0cmluZygpO1xuICBpZiAobXNnLmF1dGggJiYgbXNnLmF1dGguYWNjZXNzVG9rZW4pXG4gICAgcmVzdWx0ICs9IFwiOyB0b2tlbj1cIiArIG1zZy5hdXRoLmFjY2Vzc1Rva2VuO1xuICBpZiAobXNnLmZsYWdzKVxuICAgIHJlc3VsdCArPSBcIjsgZmxhZ3M9XCIgKyBmbGFnTmFtZXMuZmlsdGVyKG1zZy5oYXNGbGFnKS5qb2luKFwiLFwiKTtcbiAgaWYgKG1zZy5wYXJhbXMpIHtcbiAgICBsZXQgc3RyaW5naWZpZWRQYXJhbXMgPSBcIlwiO1xuICAgIGZvckluT3duTm9uTnVsbFByb3BlcnRpZXMobXNnLnBhcmFtcywgZnVuY3Rpb24ocHJvcCkge1xuICAgICAgaWYgKHN0cmluZ2lmaWVkUGFyYW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc3RyaW5naWZpZWRQYXJhbXMgKz0gXCI7IFwiO1xuICAgICAgfVxuICAgICAgc3RyaW5naWZpZWRQYXJhbXMgKz0gcHJvcCArIFwiPVwiICsgbXNnLnBhcmFtc1twcm9wXTtcbiAgICB9KTtcbiAgICBpZiAoc3RyaW5naWZpZWRQYXJhbXMubGVuZ3RoID4gMCkge1xuICAgICAgcmVzdWx0ICs9IFwiOyBwYXJhbXM9W1wiICsgc3RyaW5naWZpZWRQYXJhbXMgKyBcIl1cIjtcbiAgICB9XG4gIH1cbiAgcmVzdWx0ICs9IFwiXVwiO1xuICByZXR1cm4gcmVzdWx0O1xufVxudmFyIFByb3RvY29sTWVzc2FnZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5oYXNGbGFnID0gKGZsYWcpID0+IHtcbiAgICAgIHJldHVybiAodGhpcy5mbGFncyAmIGZsYWdzW2ZsYWddKSA+IDA7XG4gICAgfTtcbiAgfVxuICBzZXRGbGFnKGZsYWcpIHtcbiAgICByZXR1cm4gdGhpcy5mbGFncyA9IHRoaXMuZmxhZ3MgfCBmbGFnc1tmbGFnXTtcbiAgfVxuICBnZXRNb2RlKCkge1xuICAgIHJldHVybiB0aGlzLmZsYWdzICYmIHRoaXMuZmxhZ3MgJiBmbGFncy5NT0RFX0FMTDtcbiAgfVxuICBlbmNvZGVNb2Rlc1RvRmxhZ3MobW9kZXMpIHtcbiAgICBtb2Rlcy5mb3JFYWNoKChtb2RlKSA9PiB0aGlzLnNldEZsYWcobW9kZSkpO1xuICB9XG4gIGRlY29kZU1vZGVzRnJvbUZsYWdzKCkge1xuICAgIGNvbnN0IG1vZGVzID0gW107XG4gICAgY2hhbm5lbE1vZGVzLmZvckVhY2goKG1vZGUpID0+IHtcbiAgICAgIGlmICh0aGlzLmhhc0ZsYWcobW9kZSkpIHtcbiAgICAgICAgbW9kZXMucHVzaChtb2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbW9kZXMubGVuZ3RoID4gMCA/IG1vZGVzIDogdm9pZCAwO1xuICB9XG59O1xudmFyIHByb3RvY29sbWVzc2FnZV9kZWZhdWx0ID0gUHJvdG9jb2xNZXNzYWdlO1xuXG4vLyBzcmMvY29tbW9uL2xpYi90cmFuc3BvcnQvbWVzc2FnZXF1ZXVlLnRzXG52YXIgTWVzc2FnZVF1ZXVlID0gY2xhc3MgZXh0ZW5kcyBldmVudGVtaXR0ZXJfZGVmYXVsdCB7XG4gIGNvbnN0cnVjdG9yKGxvZ2dlcikge1xuICAgIHN1cGVyKGxvZ2dlcik7XG4gICAgdGhpcy5tZXNzYWdlcyA9IFtdO1xuICB9XG4gIGNvdW50KCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzLmxlbmd0aDtcbiAgfVxuICBwdXNoKG1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XG4gIH1cbiAgc2hpZnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZXMuc2hpZnQoKTtcbiAgfVxuICBsYXN0KCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzW3RoaXMubWVzc2FnZXMubGVuZ3RoIC0gMV07XG4gIH1cbiAgY29weUFsbCgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlcy5zbGljZSgpO1xuICB9XG4gIGFwcGVuZChtZXNzYWdlcykge1xuICAgIHRoaXMubWVzc2FnZXMucHVzaC5hcHBseSh0aGlzLm1lc3NhZ2VzLCBtZXNzYWdlcyk7XG4gIH1cbiAgcHJlcGVuZChtZXNzYWdlcykge1xuICAgIHRoaXMubWVzc2FnZXMudW5zaGlmdC5hcHBseSh0aGlzLm1lc3NhZ2VzLCBtZXNzYWdlcyk7XG4gIH1cbiAgY29tcGxldGVNZXNzYWdlcyhzZXJpYWwsIGNvdW50LCBlcnIpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgIFwiTWVzc2FnZVF1ZXVlLmNvbXBsZXRlTWVzc2FnZXMoKVwiLFxuICAgICAgXCJzZXJpYWwgPSBcIiArIHNlcmlhbCArIFwiOyBjb3VudCA9IFwiICsgY291bnRcbiAgICApO1xuICAgIGVyciA9IGVyciB8fCBudWxsO1xuICAgIGNvbnN0IG1lc3NhZ2VzID0gdGhpcy5tZXNzYWdlcztcbiAgICBpZiAobWVzc2FnZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXNzYWdlUXVldWUuY29tcGxldGVNZXNzYWdlcygpOiBjb21wbGV0ZU1lc3NhZ2VzIGNhbGxlZCBvbiBhbnkgZW1wdHkgTWVzc2FnZVF1ZXVlXCIpO1xuICAgIH1cbiAgICBjb25zdCBmaXJzdCA9IG1lc3NhZ2VzWzBdO1xuICAgIGlmIChmaXJzdCkge1xuICAgICAgY29uc3Qgc3RhcnRTZXJpYWwgPSBmaXJzdC5tZXNzYWdlLm1zZ1NlcmlhbDtcbiAgICAgIGNvbnN0IGVuZFNlcmlhbCA9IHNlcmlhbCArIGNvdW50O1xuICAgICAgaWYgKGVuZFNlcmlhbCA+IHN0YXJ0U2VyaWFsKSB7XG4gICAgICAgIGNvbnN0IGNvbXBsZXRlTWVzc2FnZXMgPSBtZXNzYWdlcy5zcGxpY2UoMCwgZW5kU2VyaWFsIC0gc3RhcnRTZXJpYWwpO1xuICAgICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgY29tcGxldGVNZXNzYWdlcykge1xuICAgICAgICAgIG1lc3NhZ2UuY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lc3NhZ2VzLmxlbmd0aCA9PSAwKVxuICAgICAgICB0aGlzLmVtaXQoXCJpZGxlXCIpO1xuICAgIH1cbiAgfVxuICBjb21wbGV0ZUFsbE1lc3NhZ2VzKGVycikge1xuICAgIHRoaXMuY29tcGxldGVNZXNzYWdlcygwLCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB8fCBOdW1iZXIuTUFYX1ZBTFVFLCBlcnIpO1xuICB9XG4gIHJlc2V0U2VuZEF0dGVtcHRlZCgpIHtcbiAgICBmb3IgKGxldCBtc2cgb2YgdGhpcy5tZXNzYWdlcykge1xuICAgICAgbXNnLnNlbmRBdHRlbXB0ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgY2xlYXIoKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICBcIk1lc3NhZ2VRdWV1ZS5jbGVhcigpXCIsXG4gICAgICBcImNsZWFyaW5nIFwiICsgdGhpcy5tZXNzYWdlcy5sZW5ndGggKyBcIiBtZXNzYWdlc1wiXG4gICAgKTtcbiAgICB0aGlzLm1lc3NhZ2VzID0gW107XG4gICAgdGhpcy5lbWl0KFwiaWRsZVwiKTtcbiAgfVxufTtcbnZhciBtZXNzYWdlcXVldWVfZGVmYXVsdCA9IE1lc3NhZ2VRdWV1ZTtcblxuLy8gc3JjL2NvbW1vbi9saWIvdHJhbnNwb3J0L3Byb3RvY29sLnRzXG52YXIgUGVuZGluZ01lc3NhZ2UgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5tZXJnZWQgPSBmYWxzZTtcbiAgICBjb25zdCBhY3Rpb24gPSBtZXNzYWdlLmFjdGlvbjtcbiAgICB0aGlzLnNlbmRBdHRlbXB0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmFja1JlcXVpcmVkID0gYWN0aW9uID09IGFjdGlvbnMyLk1FU1NBR0UgfHwgYWN0aW9uID09IGFjdGlvbnMyLlBSRVNFTkNFO1xuICB9XG59O1xudmFyIFByb3RvY29sID0gY2xhc3MgZXh0ZW5kcyBldmVudGVtaXR0ZXJfZGVmYXVsdCB7XG4gIGNvbnN0cnVjdG9yKHRyYW5zcG9ydCkge1xuICAgIHN1cGVyKHRyYW5zcG9ydC5sb2dnZXIpO1xuICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICAgIHRoaXMubWVzc2FnZVF1ZXVlID0gbmV3IG1lc3NhZ2VxdWV1ZV9kZWZhdWx0KHRoaXMubG9nZ2VyKTtcbiAgICB0cmFuc3BvcnQub24oXCJhY2tcIiwgKHNlcmlhbCwgY291bnQpID0+IHtcbiAgICAgIHRoaXMub25BY2soc2VyaWFsLCBjb3VudCk7XG4gICAgfSk7XG4gICAgdHJhbnNwb3J0Lm9uKFwibmFja1wiLCAoc2VyaWFsLCBjb3VudCwgZXJyKSA9PiB7XG4gICAgICB0aGlzLm9uTmFjayhzZXJpYWwsIGNvdW50LCBlcnIpO1xuICAgIH0pO1xuICB9XG4gIG9uQWNrKHNlcmlhbCwgY291bnQpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTywgXCJQcm90b2NvbC5vbkFjaygpXCIsIFwic2VyaWFsID0gXCIgKyBzZXJpYWwgKyBcIjsgY291bnQgPSBcIiArIGNvdW50KTtcbiAgICB0aGlzLm1lc3NhZ2VRdWV1ZS5jb21wbGV0ZU1lc3NhZ2VzKHNlcmlhbCwgY291bnQpO1xuICB9XG4gIG9uTmFjayhzZXJpYWwsIGNvdW50LCBlcnIpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUixcbiAgICAgIFwiUHJvdG9jb2wub25OYWNrKClcIixcbiAgICAgIFwic2VyaWFsID0gXCIgKyBzZXJpYWwgKyBcIjsgY291bnQgPSBcIiArIGNvdW50ICsgXCI7IGVyciA9IFwiICsgaW5zcGVjdEVycm9yKGVycilcbiAgICApO1xuICAgIGlmICghZXJyKSB7XG4gICAgICBlcnIgPSBuZXcgRXJyb3JJbmZvKFwiVW5hYmxlIHRvIHNlbmQgbWVzc2FnZTsgY2hhbm5lbCBub3QgcmVzcG9uZGluZ1wiLCA1MDAwMSwgNTAwKTtcbiAgICB9XG4gICAgdGhpcy5tZXNzYWdlUXVldWUuY29tcGxldGVNZXNzYWdlcyhzZXJpYWwsIGNvdW50LCBlcnIpO1xuICB9XG4gIG9uY2VJZGxlKGxpc3RlbmVyKSB7XG4gICAgY29uc3QgbWVzc2FnZVF1ZXVlID0gdGhpcy5tZXNzYWdlUXVldWU7XG4gICAgaWYgKG1lc3NhZ2VRdWV1ZS5jb3VudCgpID09PSAwKSB7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBtZXNzYWdlUXVldWUub25jZShcImlkbGVcIiwgbGlzdGVuZXIpO1xuICB9XG4gIHNlbmQocGVuZGluZ01lc3NhZ2UpIHtcbiAgICBpZiAocGVuZGluZ01lc3NhZ2UuYWNrUmVxdWlyZWQpIHtcbiAgICAgIHRoaXMubWVzc2FnZVF1ZXVlLnB1c2gocGVuZGluZ01lc3NhZ2UpO1xuICAgIH1cbiAgICBpZiAodGhpcy5sb2dnZXIuc2hvdWxkTG9nKGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTykpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbk5vU3RyaXAoXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgIFwiUHJvdG9jb2wuc2VuZCgpXCIsXG4gICAgICAgIFwic2VuZGluZyBtc2c7IFwiICsgc3RyaW5naWZ5KHBlbmRpbmdNZXNzYWdlLm1lc3NhZ2UsIHRoaXMudHJhbnNwb3J0LmNvbm5lY3Rpb25NYW5hZ2VyLnJlYWx0aW1lLl9SZWFsdGltZVByZXNlbmNlKVxuICAgICAgKTtcbiAgICB9XG4gICAgcGVuZGluZ01lc3NhZ2Uuc2VuZEF0dGVtcHRlZCA9IHRydWU7XG4gICAgdGhpcy50cmFuc3BvcnQuc2VuZChwZW5kaW5nTWVzc2FnZS5tZXNzYWdlKTtcbiAgfVxuICBnZXRUcmFuc3BvcnQoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0O1xuICB9XG4gIGdldFBlbmRpbmdNZXNzYWdlcygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlUXVldWUuY29weUFsbCgpO1xuICB9XG4gIGNsZWFyUGVuZGluZ01lc3NhZ2VzKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VRdWV1ZS5jbGVhcigpO1xuICB9XG4gIGZpbmlzaCgpIHtcbiAgICBjb25zdCB0cmFuc3BvcnQgPSB0aGlzLnRyYW5zcG9ydDtcbiAgICB0aGlzLm9uY2VJZGxlKGZ1bmN0aW9uKCkge1xuICAgICAgdHJhbnNwb3J0LmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgfVxufTtcbnZhciBwcm90b2NvbF9kZWZhdWx0ID0gUHJvdG9jb2w7XG5cbi8vIHNyYy9jb21tb24vbGliL2NsaWVudC9jb25uZWN0aW9uc3RhdGVjaGFuZ2UudHNcbnZhciBDb25uZWN0aW9uU3RhdGVDaGFuZ2UgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHByZXZpb3VzLCBjdXJyZW50LCByZXRyeUluLCByZWFzb24pIHtcbiAgICB0aGlzLnByZXZpb3VzID0gcHJldmlvdXM7XG4gICAgdGhpcy5jdXJyZW50ID0gY3VycmVudDtcbiAgICBpZiAocmV0cnlJbilcbiAgICAgIHRoaXMucmV0cnlJbiA9IHJldHJ5SW47XG4gICAgaWYgKHJlYXNvbilcbiAgICAgIHRoaXMucmVhc29uID0gcmVhc29uO1xuICB9XG59O1xudmFyIGNvbm5lY3Rpb25zdGF0ZWNoYW5nZV9kZWZhdWx0ID0gQ29ubmVjdGlvblN0YXRlQ2hhbmdlO1xuXG4vLyBzcmMvY29tbW9uL2xpYi90cmFuc3BvcnQvY29ubmVjdGlvbmVycm9ycy50c1xudmFyIENvbm5lY3Rpb25FcnJvckNvZGVzID0ge1xuICBESVNDT05ORUNURUQ6IDgwMDAzLFxuICBTVVNQRU5ERUQ6IDgwMDAyLFxuICBGQUlMRUQ6IDhlNCxcbiAgQ0xPU0lORzogODAwMTcsXG4gIENMT1NFRDogODAwMTcsXG4gIFVOS05PV05fQ09OTkVDVElPTl9FUlI6IDUwMDAyLFxuICBVTktOT1dOX0NIQU5ORUxfRVJSOiA1MDAwMVxufTtcbnZhciBDb25uZWN0aW9uRXJyb3JzID0ge1xuICBkaXNjb25uZWN0ZWQ6ICgpID0+IEVycm9ySW5mby5mcm9tVmFsdWVzKHtcbiAgICBzdGF0dXNDb2RlOiA0MDAsXG4gICAgY29kZTogQ29ubmVjdGlvbkVycm9yQ29kZXMuRElTQ09OTkVDVEVELFxuICAgIG1lc3NhZ2U6IFwiQ29ubmVjdGlvbiB0byBzZXJ2ZXIgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGVcIlxuICB9KSxcbiAgc3VzcGVuZGVkOiAoKSA9PiBFcnJvckluZm8uZnJvbVZhbHVlcyh7XG4gICAgc3RhdHVzQ29kZTogNDAwLFxuICAgIGNvZGU6IENvbm5lY3Rpb25FcnJvckNvZGVzLlNVU1BFTkRFRCxcbiAgICBtZXNzYWdlOiBcIkNvbm5lY3Rpb24gdG8gc2VydmVyIHVuYXZhaWxhYmxlXCJcbiAgfSksXG4gIGZhaWxlZDogKCkgPT4gRXJyb3JJbmZvLmZyb21WYWx1ZXMoe1xuICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICBjb2RlOiBDb25uZWN0aW9uRXJyb3JDb2Rlcy5GQUlMRUQsXG4gICAgbWVzc2FnZTogXCJDb25uZWN0aW9uIGZhaWxlZCBvciBkaXNjb25uZWN0ZWQgYnkgc2VydmVyXCJcbiAgfSksXG4gIGNsb3Npbmc6ICgpID0+IEVycm9ySW5mby5mcm9tVmFsdWVzKHtcbiAgICBzdGF0dXNDb2RlOiA0MDAsXG4gICAgY29kZTogQ29ubmVjdGlvbkVycm9yQ29kZXMuQ0xPU0lORyxcbiAgICBtZXNzYWdlOiBcIkNvbm5lY3Rpb24gY2xvc2luZ1wiXG4gIH0pLFxuICBjbG9zZWQ6ICgpID0+IEVycm9ySW5mby5mcm9tVmFsdWVzKHtcbiAgICBzdGF0dXNDb2RlOiA0MDAsXG4gICAgY29kZTogQ29ubmVjdGlvbkVycm9yQ29kZXMuQ0xPU0VELFxuICAgIG1lc3NhZ2U6IFwiQ29ubmVjdGlvbiBjbG9zZWRcIlxuICB9KSxcbiAgdW5rbm93bkNvbm5lY3Rpb25FcnI6ICgpID0+IEVycm9ySW5mby5mcm9tVmFsdWVzKHtcbiAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgY29kZTogQ29ubmVjdGlvbkVycm9yQ29kZXMuVU5LTk9XTl9DT05ORUNUSU9OX0VSUixcbiAgICBtZXNzYWdlOiBcIkludGVybmFsIGNvbm5lY3Rpb24gZXJyb3JcIlxuICB9KSxcbiAgdW5rbm93bkNoYW5uZWxFcnI6ICgpID0+IEVycm9ySW5mby5mcm9tVmFsdWVzKHtcbiAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgY29kZTogQ29ubmVjdGlvbkVycm9yQ29kZXMuVU5LTk9XTl9DT05ORUNUSU9OX0VSUixcbiAgICBtZXNzYWdlOiBcIkludGVybmFsIGNoYW5uZWwgZXJyb3JcIlxuICB9KVxufTtcbmZ1bmN0aW9uIGlzUmV0cmlhYmxlKGVycikge1xuICBpZiAoIWVyci5zdGF0dXNDb2RlIHx8ICFlcnIuY29kZSB8fCBlcnIuc3RhdHVzQ29kZSA+PSA1MDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhDb25uZWN0aW9uRXJyb3JDb2RlcykuaW5jbHVkZXMoZXJyLmNvZGUpO1xufVxudmFyIGNvbm5lY3Rpb25lcnJvcnNfZGVmYXVsdCA9IENvbm5lY3Rpb25FcnJvcnM7XG5cbi8vIHNyYy9jb21tb24vbGliL3RyYW5zcG9ydC90cmFuc3BvcnQudHNcbnZhciBjbG9zZU1lc3NhZ2UgPSBmcm9tVmFsdWVzMyh7IGFjdGlvbjogYWN0aW9uczIuQ0xPU0UgfSk7XG52YXIgZGlzY29ubmVjdE1lc3NhZ2UgPSBmcm9tVmFsdWVzMyh7IGFjdGlvbjogYWN0aW9uczIuRElTQ09OTkVDVCB9KTtcbnZhciBUcmFuc3BvcnQgPSBjbGFzcyBleHRlbmRzIGV2ZW50ZW1pdHRlcl9kZWZhdWx0IHtcbiAgY29uc3RydWN0b3IoY29ubmVjdGlvbk1hbmFnZXIsIGF1dGgsIHBhcmFtcywgZm9yY2VKc29uUHJvdG9jb2wpIHtcbiAgICBzdXBlcihjb25uZWN0aW9uTWFuYWdlci5sb2dnZXIpO1xuICAgIGlmIChmb3JjZUpzb25Qcm90b2NvbCkge1xuICAgICAgcGFyYW1zLmZvcm1hdCA9IHZvaWQgMDtcbiAgICAgIHBhcmFtcy5oZWFydGJlYXRzID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5jb25uZWN0aW9uTWFuYWdlciA9IGNvbm5lY3Rpb25NYW5hZ2VyO1xuICAgIHRoaXMuYXV0aCA9IGF1dGg7XG4gICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG4gICAgdGhpcy50aW1lb3V0cyA9IHBhcmFtcy5vcHRpb25zLnRpbWVvdXRzO1xuICAgIHRoaXMuZm9ybWF0ID0gcGFyYW1zLmZvcm1hdDtcbiAgICB0aGlzLmlzQ29ubmVjdGVkID0gZmFsc2U7XG4gICAgdGhpcy5pc0ZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5pc0Rpc3Bvc2VkID0gZmFsc2U7XG4gICAgdGhpcy5tYXhJZGxlSW50ZXJ2YWwgPSBudWxsO1xuICAgIHRoaXMuaWRsZVRpbWVyID0gbnVsbDtcbiAgICB0aGlzLmxhc3RBY3Rpdml0eSA9IG51bGw7XG4gIH1cbiAgY29ubmVjdCgpIHtcbiAgfVxuICBjbG9zZSgpIHtcbiAgICBpZiAodGhpcy5pc0Nvbm5lY3RlZCkge1xuICAgICAgdGhpcy5yZXF1ZXN0Q2xvc2UoKTtcbiAgICB9XG4gICAgdGhpcy5maW5pc2goXCJjbG9zZWRcIiwgY29ubmVjdGlvbmVycm9yc19kZWZhdWx0LmNsb3NlZCgpKTtcbiAgfVxuICBkaXNjb25uZWN0KGVycikge1xuICAgIGlmICh0aGlzLmlzQ29ubmVjdGVkKSB7XG4gICAgICB0aGlzLnJlcXVlc3REaXNjb25uZWN0KCk7XG4gICAgfVxuICAgIHRoaXMuZmluaXNoKFwiZGlzY29ubmVjdGVkXCIsIGVyciB8fCBjb25uZWN0aW9uZXJyb3JzX2RlZmF1bHQuZGlzY29ubmVjdGVkKCkpO1xuICB9XG4gIGZhaWwoZXJyKSB7XG4gICAgaWYgKHRoaXMuaXNDb25uZWN0ZWQpIHtcbiAgICAgIHRoaXMucmVxdWVzdERpc2Nvbm5lY3QoKTtcbiAgICB9XG4gICAgdGhpcy5maW5pc2goXCJmYWlsZWRcIiwgZXJyIHx8IGNvbm5lY3Rpb25lcnJvcnNfZGVmYXVsdC5mYWlsZWQoKSk7XG4gIH1cbiAgZmluaXNoKGV2ZW50LCBlcnIpIHtcbiAgICB2YXIgX2EyO1xuICAgIGlmICh0aGlzLmlzRmluaXNoZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5pc0ZpbmlzaGVkID0gdHJ1ZTtcbiAgICB0aGlzLmlzQ29ubmVjdGVkID0gZmFsc2U7XG4gICAgdGhpcy5tYXhJZGxlSW50ZXJ2YWwgPSBudWxsO1xuICAgIGNsZWFyVGltZW91dCgoX2EyID0gdGhpcy5pZGxlVGltZXIpICE9IG51bGwgPyBfYTIgOiB2b2lkIDApO1xuICAgIHRoaXMuaWRsZVRpbWVyID0gbnVsbDtcbiAgICB0aGlzLmVtaXQoZXZlbnQsIGVycik7XG4gICAgdGhpcy5kaXNwb3NlKCk7XG4gIH1cbiAgb25Qcm90b2NvbE1lc3NhZ2UobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLmxvZ2dlci5zaG91bGRMb2cobG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPKSkge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uTm9TdHJpcChcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgICAgXCJUcmFuc3BvcnQub25Qcm90b2NvbE1lc3NhZ2UoKVwiLFxuICAgICAgICBcInJlY2VpdmVkIG9uIFwiICsgdGhpcy5zaG9ydE5hbWUgKyBcIjogXCIgKyBzdHJpbmdpZnkobWVzc2FnZSwgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5yZWFsdGltZS5fUmVhbHRpbWVQcmVzZW5jZSkgKyBcIjsgY29ubmVjdGlvbklkID0gXCIgKyB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLmNvbm5lY3Rpb25JZFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5vbkFjdGl2aXR5KCk7XG4gICAgc3dpdGNoIChtZXNzYWdlLmFjdGlvbikge1xuICAgICAgY2FzZSBhY3Rpb25zMi5IRUFSVEJFQVQ6XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbk5vU3RyaXAoXG4gICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICAgIFwiVHJhbnNwb3J0Lm9uUHJvdG9jb2xNZXNzYWdlKClcIixcbiAgICAgICAgICB0aGlzLnNob3J0TmFtZSArIFwiIGhlYXJ0YmVhdDsgY29ubmVjdGlvbklkID0gXCIgKyB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLmNvbm5lY3Rpb25JZFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmVtaXQoXCJoZWFydGJlYXRcIiwgbWVzc2FnZS5pZCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBhY3Rpb25zMi5DT05ORUNURUQ6XG4gICAgICAgIHRoaXMub25Db25uZWN0KG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmVtaXQoXCJjb25uZWN0ZWRcIiwgbWVzc2FnZS5lcnJvciwgbWVzc2FnZS5jb25uZWN0aW9uSWQsIG1lc3NhZ2UuY29ubmVjdGlvbkRldGFpbHMsIG1lc3NhZ2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgYWN0aW9uczIuQ0xPU0VEOlxuICAgICAgICB0aGlzLm9uQ2xvc2UobWVzc2FnZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBhY3Rpb25zMi5ESVNDT05ORUNURUQ6XG4gICAgICAgIHRoaXMub25EaXNjb25uZWN0KG1lc3NhZ2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgYWN0aW9uczIuQUNLOlxuICAgICAgICB0aGlzLmVtaXQoXCJhY2tcIiwgbWVzc2FnZS5tc2dTZXJpYWwsIG1lc3NhZ2UuY291bnQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgYWN0aW9uczIuTkFDSzpcbiAgICAgICAgdGhpcy5lbWl0KFwibmFja1wiLCBtZXNzYWdlLm1zZ1NlcmlhbCwgbWVzc2FnZS5jb3VudCwgbWVzc2FnZS5lcnJvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBhY3Rpb25zMi5TWU5DOlxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLm9uQ2hhbm5lbE1lc3NhZ2UobWVzc2FnZSwgdGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBhY3Rpb25zMi5BQ1RJVkFURTpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGFjdGlvbnMyLkFVVEg6XG4gICAgICAgIHdoZW5Qcm9taXNlU2V0dGxlcyh0aGlzLmF1dGguYXV0aG9yaXplKCksIChlcnIpID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgICAgICAgIFwiVHJhbnNwb3J0Lm9uUHJvdG9jb2xNZXNzYWdlKClcIixcbiAgICAgICAgICAgICAgXCJBYmx5IHJlcXVlc3RlZCByZS1hdXRoZW50aWNhdGlvbiwgYnV0IHVuYWJsZSB0byBvYnRhaW4gYSBuZXcgdG9rZW46IFwiICsgaW5zcGVjdEVycm9yKGVycilcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGFjdGlvbnMyLkVSUk9SOlxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICAgIFwiVHJhbnNwb3J0Lm9uUHJvdG9jb2xNZXNzYWdlKClcIixcbiAgICAgICAgICBcInJlY2VpdmVkIGVycm9yIGFjdGlvbjsgY29ubmVjdGlvbklkID0gXCIgKyB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLmNvbm5lY3Rpb25JZCArIFwiOyBlcnIgPSBcIiArIFBsYXRmb3JtLkNvbmZpZy5pbnNwZWN0KG1lc3NhZ2UuZXJyb3IpICsgKG1lc3NhZ2UuY2hhbm5lbCA/IFwiLCBjaGFubmVsOiBcIiArIG1lc3NhZ2UuY2hhbm5lbCA6IFwiXCIpXG4gICAgICAgICk7XG4gICAgICAgIGlmIChtZXNzYWdlLmNoYW5uZWwgPT09IHZvaWQgMCkge1xuICAgICAgICAgIHRoaXMub25GYXRhbEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIub25DaGFubmVsTWVzc2FnZShtZXNzYWdlLCB0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLm9uQ2hhbm5lbE1lc3NhZ2UobWVzc2FnZSwgdGhpcyk7XG4gICAgfVxuICB9XG4gIG9uQ29ubmVjdChtZXNzYWdlKSB7XG4gICAgdGhpcy5pc0Nvbm5lY3RlZCA9IHRydWU7XG4gICAgaWYgKCFtZXNzYWdlLmNvbm5lY3Rpb25EZXRhaWxzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmFuc3BvcnQub25Db25uZWN0KCk6IENvbm5lY3QgbWVzc2FnZSByZWNpZXZlZCB3aXRob3V0IGNvbm5lY3Rpb25EZXRhaWxzXCIpO1xuICAgIH1cbiAgICBjb25zdCBtYXhQcm9taXNlZElkbGUgPSBtZXNzYWdlLmNvbm5lY3Rpb25EZXRhaWxzLm1heElkbGVJbnRlcnZhbDtcbiAgICBpZiAobWF4UHJvbWlzZWRJZGxlKSB7XG4gICAgICB0aGlzLm1heElkbGVJbnRlcnZhbCA9IG1heFByb21pc2VkSWRsZSArIHRoaXMudGltZW91dHMucmVhbHRpbWVSZXF1ZXN0VGltZW91dDtcbiAgICAgIHRoaXMub25BY3Rpdml0eSgpO1xuICAgIH1cbiAgfVxuICBvbkRpc2Nvbm5lY3QobWVzc2FnZSkge1xuICAgIGNvbnN0IGVyciA9IG1lc3NhZ2UgJiYgbWVzc2FnZS5lcnJvcjtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJUcmFuc3BvcnQub25EaXNjb25uZWN0KClcIiwgXCJlcnIgPSBcIiArIGluc3BlY3RFcnJvcihlcnIpKTtcbiAgICB0aGlzLmZpbmlzaChcImRpc2Nvbm5lY3RlZFwiLCBlcnIpO1xuICB9XG4gIG9uRmF0YWxFcnJvcihtZXNzYWdlKSB7XG4gICAgY29uc3QgZXJyID0gbWVzc2FnZSAmJiBtZXNzYWdlLmVycm9yO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIlRyYW5zcG9ydC5vbkZhdGFsRXJyb3IoKVwiLCBcImVyciA9IFwiICsgaW5zcGVjdEVycm9yKGVycikpO1xuICAgIHRoaXMuZmluaXNoKFwiZmFpbGVkXCIsIGVycik7XG4gIH1cbiAgb25DbG9zZShtZXNzYWdlKSB7XG4gICAgY29uc3QgZXJyID0gbWVzc2FnZSAmJiBtZXNzYWdlLmVycm9yO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIlRyYW5zcG9ydC5vbkNsb3NlKClcIiwgXCJlcnIgPSBcIiArIGluc3BlY3RFcnJvcihlcnIpKTtcbiAgICB0aGlzLmZpbmlzaChcImNsb3NlZFwiLCBlcnIpO1xuICB9XG4gIHJlcXVlc3RDbG9zZSgpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJUcmFuc3BvcnQucmVxdWVzdENsb3NlKClcIiwgXCJcIik7XG4gICAgdGhpcy5zZW5kKGNsb3NlTWVzc2FnZSk7XG4gIH1cbiAgcmVxdWVzdERpc2Nvbm5lY3QoKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiVHJhbnNwb3J0LnJlcXVlc3REaXNjb25uZWN0KClcIiwgXCJcIik7XG4gICAgdGhpcy5zZW5kKGRpc2Nvbm5lY3RNZXNzYWdlKTtcbiAgfVxuICBwaW5nKGlkKSB7XG4gICAgY29uc3QgbXNnID0geyBhY3Rpb246IGFjdGlvbnMyLkhFQVJUQkVBVCB9O1xuICAgIGlmIChpZClcbiAgICAgIG1zZy5pZCA9IGlkO1xuICAgIHRoaXMuc2VuZChmcm9tVmFsdWVzMyhtc2cpKTtcbiAgfVxuICBkaXNwb3NlKCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIlRyYW5zcG9ydC5kaXNwb3NlKClcIiwgXCJcIik7XG4gICAgdGhpcy5pc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICB0aGlzLm9mZigpO1xuICB9XG4gIG9uQWN0aXZpdHkoKSB7XG4gICAgaWYgKCF0aGlzLm1heElkbGVJbnRlcnZhbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmxhc3RBY3Rpdml0eSA9IHRoaXMuY29ubmVjdGlvbk1hbmFnZXIubGFzdEFjdGl2aXR5ID0gRGF0ZS5ub3coKTtcbiAgICB0aGlzLnNldElkbGVUaW1lcih0aGlzLm1heElkbGVJbnRlcnZhbCArIDEwMCk7XG4gIH1cbiAgc2V0SWRsZVRpbWVyKHRpbWVvdXQpIHtcbiAgICBpZiAoIXRoaXMuaWRsZVRpbWVyKSB7XG4gICAgICB0aGlzLmlkbGVUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLm9uSWRsZVRpbWVyRXhwaXJlKCk7XG4gICAgICB9LCB0aW1lb3V0KTtcbiAgICB9XG4gIH1cbiAgb25JZGxlVGltZXJFeHBpcmUoKSB7XG4gICAgaWYgKCF0aGlzLmxhc3RBY3Rpdml0eSB8fCAhdGhpcy5tYXhJZGxlSW50ZXJ2YWwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRyYW5zcG9ydC5vbklkbGVUaW1lckV4cGlyZSgpOiBsYXN0QWN0aXZpdHkvbWF4SWRsZUludGVydmFsIG5vdCBzZXRcIik7XG4gICAgfVxuICAgIHRoaXMuaWRsZVRpbWVyID0gbnVsbDtcbiAgICBjb25zdCBzaW5jZUxhc3QgPSBEYXRlLm5vdygpIC0gdGhpcy5sYXN0QWN0aXZpdHk7XG4gICAgY29uc3QgdGltZVJlbWFpbmluZyA9IHRoaXMubWF4SWRsZUludGVydmFsIC0gc2luY2VMYXN0O1xuICAgIGlmICh0aW1lUmVtYWluaW5nIDw9IDApIHtcbiAgICAgIGNvbnN0IG1zZyA9IFwiTm8gYWN0aXZpdHkgc2VlbiBmcm9tIHJlYWx0aW1lIGluIFwiICsgc2luY2VMYXN0ICsgXCJtczsgYXNzdW1pbmcgY29ubmVjdGlvbiBoYXMgZHJvcHBlZFwiO1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwiVHJhbnNwb3J0Lm9uSWRsZVRpbWVyRXhwaXJlKClcIiwgbXNnKTtcbiAgICAgIHRoaXMuZGlzY29ubmVjdChuZXcgRXJyb3JJbmZvKG1zZywgODAwMDMsIDQwOCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldElkbGVUaW1lcih0aW1lUmVtYWluaW5nICsgMTAwKTtcbiAgICB9XG4gIH1cbiAgc3RhdGljIHRyeUNvbm5lY3QodHJhbnNwb3J0Q3RvciwgY29ubmVjdGlvbk1hbmFnZXIsIGF1dGgsIHRyYW5zcG9ydFBhcmFtcywgY2FsbGJhY2spIHtcbiAgICBjb25zdCB0cmFuc3BvcnQgPSBuZXcgdHJhbnNwb3J0Q3Rvcihjb25uZWN0aW9uTWFuYWdlciwgYXV0aCwgdHJhbnNwb3J0UGFyYW1zKTtcbiAgICBsZXQgdHJhbnNwb3J0QXR0ZW1wdFRpbWVyO1xuICAgIGNvbnN0IGVycm9yQ2IgPSBmdW5jdGlvbihlcnIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0cmFuc3BvcnRBdHRlbXB0VGltZXIpO1xuICAgICAgY2FsbGJhY2soeyBldmVudDogdGhpcy5ldmVudCwgZXJyb3I6IGVyciB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHJlYWx0aW1lUmVxdWVzdFRpbWVvdXQgPSBjb25uZWN0aW9uTWFuYWdlci5vcHRpb25zLnRpbWVvdXRzLnJlYWx0aW1lUmVxdWVzdFRpbWVvdXQ7XG4gICAgdHJhbnNwb3J0QXR0ZW1wdFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0cmFuc3BvcnQub2ZmKFtcInByZWNvbm5lY3RcIiwgXCJkaXNjb25uZWN0ZWRcIiwgXCJmYWlsZWRcIl0pO1xuICAgICAgdHJhbnNwb3J0LmRpc3Bvc2UoKTtcbiAgICAgIGVycm9yQ2IuY2FsbChcbiAgICAgICAgeyBldmVudDogXCJkaXNjb25uZWN0ZWRcIiB9LFxuICAgICAgICBuZXcgRXJyb3JJbmZvKFwiVGltZW91dCB3YWl0aW5nIGZvciB0cmFuc3BvcnQgdG8gaW5kaWNhdGUgaXRzZWxmIHZpYWJsZVwiLCA1ZTQsIDUwMClcbiAgICAgICk7XG4gICAgfSwgcmVhbHRpbWVSZXF1ZXN0VGltZW91dCk7XG4gICAgdHJhbnNwb3J0Lm9uKFtcImZhaWxlZFwiLCBcImRpc2Nvbm5lY3RlZFwiXSwgZXJyb3JDYik7XG4gICAgdHJhbnNwb3J0Lm9uKFwicHJlY29ubmVjdFwiLCBmdW5jdGlvbigpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgY29ubmVjdGlvbk1hbmFnZXIubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgIFwiVHJhbnNwb3J0LnRyeUNvbm5lY3QoKVwiLFxuICAgICAgICBcInZpYWJsZSB0cmFuc3BvcnQgXCIgKyB0cmFuc3BvcnRcbiAgICAgICk7XG4gICAgICBjbGVhclRpbWVvdXQodHJhbnNwb3J0QXR0ZW1wdFRpbWVyKTtcbiAgICAgIHRyYW5zcG9ydC5vZmYoW1wiZmFpbGVkXCIsIFwiZGlzY29ubmVjdGVkXCJdLCBlcnJvckNiKTtcbiAgICAgIGNhbGxiYWNrKG51bGwsIHRyYW5zcG9ydCk7XG4gICAgfSk7XG4gICAgdHJhbnNwb3J0LmNvbm5lY3QoKTtcbiAgICByZXR1cm4gdHJhbnNwb3J0O1xuICB9XG4gIHN0YXRpYyBpc0F2YWlsYWJsZSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwiaXNBdmFpbGFibGUgbm90IGltcGxlbWVudGVkIGZvciB0cmFuc3BvcnRcIiwgNWU0LCA1MDApO1xuICB9XG59O1xudmFyIHRyYW5zcG9ydF9kZWZhdWx0ID0gVHJhbnNwb3J0O1xuXG4vLyBzcmMvY29tbW9uL2NvbnN0YW50cy9UcmFuc3BvcnROYW1lLnRzXG52YXIgVHJhbnNwb3J0TmFtZXM7XG4oKFRyYW5zcG9ydE5hbWVzMikgPT4ge1xuICBUcmFuc3BvcnROYW1lczIuV2ViU29ja2V0ID0gXCJ3ZWJfc29ja2V0XCI7XG4gIFRyYW5zcG9ydE5hbWVzMi5Db21ldCA9IFwiY29tZXRcIjtcbiAgVHJhbnNwb3J0TmFtZXMyLlhoclBvbGxpbmcgPSBcInhocl9wb2xsaW5nXCI7XG59KShUcmFuc3BvcnROYW1lcyB8fCAoVHJhbnNwb3J0TmFtZXMgPSB7fSkpO1xuXG4vLyBzcmMvY29tbW9uL2xpYi90cmFuc3BvcnQvY29ubmVjdGlvbm1hbmFnZXIudHNcbnZhciBnbG9iYWxPYmplY3QyID0gdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBzZWxmO1xudmFyIGhhdmVXZWJTdG9yYWdlID0gKCkgPT4ge1xuICB2YXIgX2EyO1xuICByZXR1cm4gdHlwZW9mIFBsYXRmb3JtLldlYlN0b3JhZ2UgIT09IFwidW5kZWZpbmVkXCIgJiYgKChfYTIgPSBQbGF0Zm9ybS5XZWJTdG9yYWdlKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmxvY2FsU3VwcG9ydGVkKTtcbn07XG52YXIgaGF2ZVNlc3Npb25TdG9yYWdlID0gKCkgPT4ge1xuICB2YXIgX2EyO1xuICByZXR1cm4gdHlwZW9mIFBsYXRmb3JtLldlYlN0b3JhZ2UgIT09IFwidW5kZWZpbmVkXCIgJiYgKChfYTIgPSBQbGF0Zm9ybS5XZWJTdG9yYWdlKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLnNlc3Npb25TdXBwb3J0ZWQpO1xufTtcbnZhciBub29wID0gZnVuY3Rpb24oKSB7XG59O1xudmFyIHRyYW5zcG9ydFByZWZlcmVuY2VOYW1lID0gXCJhYmx5LXRyYW5zcG9ydC1wcmVmZXJlbmNlXCI7XG5mdW5jdGlvbiBidW5kbGVXaXRoKGRlc3QsIHNyYywgbWF4U2l6ZSkge1xuICBsZXQgYWN0aW9uO1xuICBpZiAoZGVzdC5jaGFubmVsICE9PSBzcmMuY2hhbm5lbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoKGFjdGlvbiA9IGRlc3QuYWN0aW9uKSAhPT0gYWN0aW9uczIuUFJFU0VOQ0UgJiYgYWN0aW9uICE9PSBhY3Rpb25zMi5NRVNTQUdFKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChhY3Rpb24gIT09IHNyYy5hY3Rpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3Qga2luZCA9IGFjdGlvbiA9PT0gYWN0aW9uczIuUFJFU0VOQ0UgPyBcInByZXNlbmNlXCIgOiBcIm1lc3NhZ2VzXCIsIHByb3Bvc2VkID0gZGVzdFtraW5kXS5jb25jYXQoc3JjW2tpbmRdKSwgc2l6ZSA9IGdldE1lc3NhZ2VzU2l6ZShwcm9wb3NlZCk7XG4gIGlmIChzaXplID4gbWF4U2l6ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoIWFsbFNhbWUocHJvcG9zZWQsIFwiY2xpZW50SWRcIikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCFwcm9wb3NlZC5ldmVyeShmdW5jdGlvbihtc2cpIHtcbiAgICByZXR1cm4gIW1zZy5pZDtcbiAgfSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZGVzdFtraW5kXSA9IHByb3Bvc2VkO1xuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGRlY29kZVJlY292ZXJ5S2V5KHJlY292ZXJ5S2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UocmVjb3ZlcnlLZXkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbnZhciBUcmFuc3BvcnRQYXJhbXMgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMsIGhvc3QsIG1vZGUsIGNvbm5lY3Rpb25LZXkpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuaG9zdCA9IGhvc3Q7XG4gICAgdGhpcy5tb2RlID0gbW9kZTtcbiAgICB0aGlzLmNvbm5lY3Rpb25LZXkgPSBjb25uZWN0aW9uS2V5O1xuICAgIHRoaXMuZm9ybWF0ID0gb3B0aW9ucy51c2VCaW5hcnlQcm90b2NvbCA/IFwibXNncGFja1wiIC8qIG1zZ3BhY2sgKi8gOiBcImpzb25cIiAvKiBqc29uICovO1xuICB9XG4gIGdldENvbm5lY3RQYXJhbXMoYXV0aFBhcmFtcykge1xuICAgIGNvbnN0IHBhcmFtcyA9IGF1dGhQYXJhbXMgPyBjb3B5KGF1dGhQYXJhbXMpIDoge307XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBzd2l0Y2ggKHRoaXMubW9kZSkge1xuICAgICAgY2FzZSBcInJlc3VtZVwiOlxuICAgICAgICBwYXJhbXMucmVzdW1lID0gdGhpcy5jb25uZWN0aW9uS2V5O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJyZWNvdmVyXCI6IHtcbiAgICAgICAgY29uc3QgcmVjb3ZlcnlDb250ZXh0ID0gZGVjb2RlUmVjb3ZlcnlLZXkob3B0aW9ucy5yZWNvdmVyKTtcbiAgICAgICAgaWYgKHJlY292ZXJ5Q29udGV4dCkge1xuICAgICAgICAgIHBhcmFtcy5yZWNvdmVyID0gcmVjb3ZlcnlDb250ZXh0LmNvbm5lY3Rpb25LZXk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5jbGllbnRJZCAhPT0gdm9pZCAwKSB7XG4gICAgICBwYXJhbXMuY2xpZW50SWQgPSBvcHRpb25zLmNsaWVudElkO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5lY2hvTWVzc2FnZXMgPT09IGZhbHNlKSB7XG4gICAgICBwYXJhbXMuZWNobyA9IFwiZmFsc2VcIjtcbiAgICB9XG4gICAgaWYgKHRoaXMuZm9ybWF0ICE9PSB2b2lkIDApIHtcbiAgICAgIHBhcmFtcy5mb3JtYXQgPSB0aGlzLmZvcm1hdDtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RyZWFtICE9PSB2b2lkIDApIHtcbiAgICAgIHBhcmFtcy5zdHJlYW0gPSB0aGlzLnN0cmVhbTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaGVhcnRiZWF0cyAhPT0gdm9pZCAwKSB7XG4gICAgICBwYXJhbXMuaGVhcnRiZWF0cyA9IHRoaXMuaGVhcnRiZWF0cztcbiAgICB9XG4gICAgcGFyYW1zLnYgPSBkZWZhdWx0c19kZWZhdWx0LnByb3RvY29sVmVyc2lvbjtcbiAgICBwYXJhbXMuYWdlbnQgPSBnZXRBZ2VudFN0cmluZyh0aGlzLm9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLnRyYW5zcG9ydFBhcmFtcyAhPT0gdm9pZCAwKSB7XG4gICAgICBtaXhpbihwYXJhbXMsIG9wdGlvbnMudHJhbnNwb3J0UGFyYW1zKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgcmVzdWx0ID0gXCJbbW9kZT1cIiArIHRoaXMubW9kZTtcbiAgICBpZiAodGhpcy5ob3N0KSB7XG4gICAgICByZXN1bHQgKz0gXCIsaG9zdD1cIiArIHRoaXMuaG9zdDtcbiAgICB9XG4gICAgaWYgKHRoaXMuY29ubmVjdGlvbktleSkge1xuICAgICAgcmVzdWx0ICs9IFwiLGNvbm5lY3Rpb25LZXk9XCIgKyB0aGlzLmNvbm5lY3Rpb25LZXk7XG4gICAgfVxuICAgIGlmICh0aGlzLmZvcm1hdCkge1xuICAgICAgcmVzdWx0ICs9IFwiLGZvcm1hdD1cIiArIHRoaXMuZm9ybWF0O1xuICAgIH1cbiAgICByZXN1bHQgKz0gXCJdXCI7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbnZhciBDb25uZWN0aW9uTWFuYWdlciA9IGNsYXNzIF9Db25uZWN0aW9uTWFuYWdlciBleHRlbmRzIGV2ZW50ZW1pdHRlcl9kZWZhdWx0IHtcbiAgY29uc3RydWN0b3IocmVhbHRpbWUsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihyZWFsdGltZS5sb2dnZXIpO1xuICAgIHRoaXMuc3VwcG9ydGVkVHJhbnNwb3J0cyA9IHt9O1xuICAgIHRoaXMuZGlzY29ubmVjdGVkUmV0cnlDb3VudCA9IDA7XG4gICAgdGhpcy5wZW5kaW5nQ2hhbm5lbE1lc3NhZ2VzU3RhdGUgPSB7IGlzUHJvY2Vzc2luZzogZmFsc2UsIHF1ZXVlOiBbXSB9O1xuICAgIHRoaXMucmVhbHRpbWUgPSByZWFsdGltZTtcbiAgICB0aGlzLmluaXRUcmFuc3BvcnRzKCk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICBjb25zdCB0aW1lb3V0cyA9IG9wdGlvbnMudGltZW91dHM7XG4gICAgY29uc3QgY29ubmVjdGluZ1RpbWVvdXQgPSB0aW1lb3V0cy53ZWJTb2NrZXRDb25uZWN0VGltZW91dCArIHRpbWVvdXRzLnJlYWx0aW1lUmVxdWVzdFRpbWVvdXQ7XG4gICAgdGhpcy5zdGF0ZXMgPSB7XG4gICAgICBpbml0aWFsaXplZDoge1xuICAgICAgICBzdGF0ZTogXCJpbml0aWFsaXplZFwiLFxuICAgICAgICB0ZXJtaW5hbDogZmFsc2UsXG4gICAgICAgIHF1ZXVlRXZlbnRzOiB0cnVlLFxuICAgICAgICBzZW5kRXZlbnRzOiBmYWxzZSxcbiAgICAgICAgZmFpbFN0YXRlOiBcImRpc2Nvbm5lY3RlZFwiXG4gICAgICB9LFxuICAgICAgY29ubmVjdGluZzoge1xuICAgICAgICBzdGF0ZTogXCJjb25uZWN0aW5nXCIsXG4gICAgICAgIHRlcm1pbmFsOiBmYWxzZSxcbiAgICAgICAgcXVldWVFdmVudHM6IHRydWUsXG4gICAgICAgIHNlbmRFdmVudHM6IGZhbHNlLFxuICAgICAgICByZXRyeURlbGF5OiBjb25uZWN0aW5nVGltZW91dCxcbiAgICAgICAgZmFpbFN0YXRlOiBcImRpc2Nvbm5lY3RlZFwiXG4gICAgICB9LFxuICAgICAgY29ubmVjdGVkOiB7XG4gICAgICAgIHN0YXRlOiBcImNvbm5lY3RlZFwiLFxuICAgICAgICB0ZXJtaW5hbDogZmFsc2UsXG4gICAgICAgIHF1ZXVlRXZlbnRzOiBmYWxzZSxcbiAgICAgICAgc2VuZEV2ZW50czogdHJ1ZSxcbiAgICAgICAgZmFpbFN0YXRlOiBcImRpc2Nvbm5lY3RlZFwiXG4gICAgICB9LFxuICAgICAgZGlzY29ubmVjdGVkOiB7XG4gICAgICAgIHN0YXRlOiBcImRpc2Nvbm5lY3RlZFwiLFxuICAgICAgICB0ZXJtaW5hbDogZmFsc2UsXG4gICAgICAgIHF1ZXVlRXZlbnRzOiB0cnVlLFxuICAgICAgICBzZW5kRXZlbnRzOiBmYWxzZSxcbiAgICAgICAgcmV0cnlEZWxheTogdGltZW91dHMuZGlzY29ubmVjdGVkUmV0cnlUaW1lb3V0LFxuICAgICAgICBmYWlsU3RhdGU6IFwiZGlzY29ubmVjdGVkXCJcbiAgICAgIH0sXG4gICAgICBzdXNwZW5kZWQ6IHtcbiAgICAgICAgc3RhdGU6IFwic3VzcGVuZGVkXCIsXG4gICAgICAgIHRlcm1pbmFsOiBmYWxzZSxcbiAgICAgICAgcXVldWVFdmVudHM6IGZhbHNlLFxuICAgICAgICBzZW5kRXZlbnRzOiBmYWxzZSxcbiAgICAgICAgcmV0cnlEZWxheTogdGltZW91dHMuc3VzcGVuZGVkUmV0cnlUaW1lb3V0LFxuICAgICAgICBmYWlsU3RhdGU6IFwic3VzcGVuZGVkXCJcbiAgICAgIH0sXG4gICAgICBjbG9zaW5nOiB7XG4gICAgICAgIHN0YXRlOiBcImNsb3NpbmdcIixcbiAgICAgICAgdGVybWluYWw6IGZhbHNlLFxuICAgICAgICBxdWV1ZUV2ZW50czogZmFsc2UsXG4gICAgICAgIHNlbmRFdmVudHM6IGZhbHNlLFxuICAgICAgICByZXRyeURlbGF5OiB0aW1lb3V0cy5yZWFsdGltZVJlcXVlc3RUaW1lb3V0LFxuICAgICAgICBmYWlsU3RhdGU6IFwiY2xvc2VkXCJcbiAgICAgIH0sXG4gICAgICBjbG9zZWQ6IHsgc3RhdGU6IFwiY2xvc2VkXCIsIHRlcm1pbmFsOiB0cnVlLCBxdWV1ZUV2ZW50czogZmFsc2UsIHNlbmRFdmVudHM6IGZhbHNlLCBmYWlsU3RhdGU6IFwiY2xvc2VkXCIgfSxcbiAgICAgIGZhaWxlZDogeyBzdGF0ZTogXCJmYWlsZWRcIiwgdGVybWluYWw6IHRydWUsIHF1ZXVlRXZlbnRzOiBmYWxzZSwgc2VuZEV2ZW50czogZmFsc2UsIGZhaWxTdGF0ZTogXCJmYWlsZWRcIiB9XG4gICAgfTtcbiAgICB0aGlzLnN0YXRlID0gdGhpcy5zdGF0ZXMuaW5pdGlhbGl6ZWQ7XG4gICAgdGhpcy5lcnJvclJlYXNvbiA9IG51bGw7XG4gICAgdGhpcy5xdWV1ZWRNZXNzYWdlcyA9IG5ldyBtZXNzYWdlcXVldWVfZGVmYXVsdCh0aGlzLmxvZ2dlcik7XG4gICAgdGhpcy5tc2dTZXJpYWwgPSAwO1xuICAgIHRoaXMuY29ubmVjdGlvbkRldGFpbHMgPSB2b2lkIDA7XG4gICAgdGhpcy5jb25uZWN0aW9uSWQgPSB2b2lkIDA7XG4gICAgdGhpcy5jb25uZWN0aW9uS2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuY29ubmVjdGlvblN0YXRlVHRsID0gdGltZW91dHMuY29ubmVjdGlvblN0YXRlVHRsO1xuICAgIHRoaXMubWF4SWRsZUludGVydmFsID0gbnVsbDtcbiAgICB0aGlzLnRyYW5zcG9ydHMgPSBpbnRlcnNlY3Qob3B0aW9ucy50cmFuc3BvcnRzIHx8IGRlZmF1bHRzX2RlZmF1bHQuZGVmYXVsdFRyYW5zcG9ydHMsIHRoaXMuc3VwcG9ydGVkVHJhbnNwb3J0cyk7XG4gICAgdGhpcy50cmFuc3BvcnRQcmVmZXJlbmNlID0gbnVsbDtcbiAgICBpZiAodGhpcy50cmFuc3BvcnRzLmluY2x1ZGVzKFRyYW5zcG9ydE5hbWVzLldlYlNvY2tldCkpIHtcbiAgICAgIHRoaXMud2ViU29ja2V0VHJhbnNwb3J0QXZhaWxhYmxlID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMudHJhbnNwb3J0cy5pbmNsdWRlcyhUcmFuc3BvcnROYW1lcy5YaHJQb2xsaW5nKSkge1xuICAgICAgdGhpcy5iYXNlVHJhbnNwb3J0ID0gVHJhbnNwb3J0TmFtZXMuWGhyUG9sbGluZztcbiAgICB9IGVsc2UgaWYgKHRoaXMudHJhbnNwb3J0cy5pbmNsdWRlcyhUcmFuc3BvcnROYW1lcy5Db21ldCkpIHtcbiAgICAgIHRoaXMuYmFzZVRyYW5zcG9ydCA9IFRyYW5zcG9ydE5hbWVzLkNvbWV0O1xuICAgIH1cbiAgICB0aGlzLmh0dHBIb3N0cyA9IGRlZmF1bHRzX2RlZmF1bHQuZ2V0SG9zdHMob3B0aW9ucyk7XG4gICAgdGhpcy53c0hvc3RzID0gZGVmYXVsdHNfZGVmYXVsdC5nZXRIb3N0cyhvcHRpb25zLCB0cnVlKTtcbiAgICB0aGlzLmFjdGl2ZVByb3RvY29sID0gbnVsbDtcbiAgICB0aGlzLmhvc3QgPSBudWxsO1xuICAgIHRoaXMubGFzdEF1dG9SZWNvbm5lY3RBdHRlbXB0ID0gbnVsbDtcbiAgICB0aGlzLmxhc3RBY3Rpdml0eSA9IG51bGw7XG4gICAgdGhpcy5mb3JjZUZhbGxiYWNrSG9zdCA9IGZhbHNlO1xuICAgIHRoaXMuY29ubmVjdENvdW50ZXIgPSAwO1xuICAgIHRoaXMud3NDaGVja1Jlc3VsdCA9IG51bGw7XG4gICAgdGhpcy53ZWJTb2NrZXRTbG93VGltZXIgPSBudWxsO1xuICAgIHRoaXMud2ViU29ja2V0R2l2ZVVwVGltZXIgPSBudWxsO1xuICAgIHRoaXMuYWJhbmRvbmVkV2ViU29ja2V0ID0gZmFsc2U7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiUmVhbHRpbWUuQ29ubmVjdGlvbk1hbmFnZXIoKVwiLCBcInN0YXJ0ZWRcIik7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICBcIlJlYWx0aW1lLkNvbm5lY3Rpb25NYW5hZ2VyKClcIixcbiAgICAgIFwicmVxdWVzdGVkIHRyYW5zcG9ydHMgPSBbXCIgKyAob3B0aW9ucy50cmFuc3BvcnRzIHx8IGRlZmF1bHRzX2RlZmF1bHQuZGVmYXVsdFRyYW5zcG9ydHMpICsgXCJdXCJcbiAgICApO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJSZWFsdGltZS5Db25uZWN0aW9uTWFuYWdlcigpXCIsXG4gICAgICBcImF2YWlsYWJsZSB0cmFuc3BvcnRzID0gW1wiICsgdGhpcy50cmFuc3BvcnRzICsgXCJdXCJcbiAgICApO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJSZWFsdGltZS5Db25uZWN0aW9uTWFuYWdlcigpXCIsXG4gICAgICBcImh0dHAgaG9zdHMgPSBbXCIgKyB0aGlzLmh0dHBIb3N0cyArIFwiXVwiXG4gICAgKTtcbiAgICBpZiAoIXRoaXMudHJhbnNwb3J0cy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IG1zZyA9IFwibm8gcmVxdWVzdGVkIHRyYW5zcG9ydHMgYXZhaWxhYmxlXCI7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUiwgXCJyZWFsdGltZS5Db25uZWN0aW9uTWFuYWdlcigpXCIsIG1zZyk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG4gICAgY29uc3QgYWRkRXZlbnRMaXN0ZW5lciA9IFBsYXRmb3JtLkNvbmZpZy5hZGRFdmVudExpc3RlbmVyO1xuICAgIGlmIChhZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICBpZiAoaGF2ZVNlc3Npb25TdG9yYWdlKCkgJiYgdHlwZW9mIG9wdGlvbnMucmVjb3ZlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgdGhpcy5wZXJzaXN0Q29ubmVjdGlvbi5iaW5kKHRoaXMpKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmNsb3NlT25VbmxvYWQgPT09IHRydWUpIHtcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCAoKSA9PiB7XG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUFKT1IsXG4gICAgICAgICAgICBcIlJlYWx0aW1lLkNvbm5lY3Rpb25NYW5hZ2VyKClcIixcbiAgICAgICAgICAgIFwiYmVmb3JldW5sb2FkIGV2ZW50IGhhcyB0cmlnZ2VyZWQgdGhlIGNvbm5lY3Rpb24gdG8gY2xvc2UgYXMgY2xvc2VPblVubG9hZCBpcyB0cnVlXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMucmVxdWVzdFN0YXRlKHsgc3RhdGU6IFwiY2xvc2luZ1wiIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgKCkgPT4ge1xuICAgICAgICB2YXIgX2EyO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PSB0aGlzLnN0YXRlcy5kaXNjb25uZWN0ZWQgfHwgdGhpcy5zdGF0ZSA9PSB0aGlzLnN0YXRlcy5zdXNwZW5kZWQpIHtcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIgY2F1Z2h0IGJyb3dzZXIgXFx1MjAxOG9ubGluZVxcdTIwMTkgZXZlbnRcIixcbiAgICAgICAgICAgIFwicmVhdHRlbXB0aW5nIGNvbm5lY3Rpb25cIlxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5yZXF1ZXN0U3RhdGUoeyBzdGF0ZTogXCJjb25uZWN0aW5nXCIgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PSB0aGlzLnN0YXRlcy5jb25uZWN0aW5nKSB7XG4gICAgICAgICAgKF9hMiA9IHRoaXMucGVuZGluZ1RyYW5zcG9ydCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5vZmYoKTtcbiAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3RBbGxUcmFuc3BvcnRzKCk7XG4gICAgICAgICAgdGhpcy5zdGFydENvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09IHRoaXMuc3RhdGVzLmNvbm5lY3RlZCkge1xuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlciBjYXVnaHQgYnJvd3NlciBcXHUyMDE4b2ZmbGluZVxcdTIwMTkgZXZlbnRcIixcbiAgICAgICAgICAgIFwiZGlzY29ubmVjdGluZyBhY3RpdmUgdHJhbnNwb3J0XCJcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuZGlzY29ubmVjdEFsbFRyYW5zcG9ydHMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKioqKioqKioqKioqKioqKioqKipcbiAgICogdHJhbnNwb3J0IG1hbmFnZW1lbnRcbiAgICoqKioqKioqKioqKioqKioqKioqKi9cbiAgLy8gVXNlZCBieSB0ZXN0c1xuICBzdGF0aWMgc3VwcG9ydGVkVHJhbnNwb3J0cyhhZGRpdGlvbmFsSW1wbGVtZW50YXRpb25zKSB7XG4gICAgY29uc3Qgc3RvcmFnZSA9IHsgc3VwcG9ydGVkVHJhbnNwb3J0czoge30gfTtcbiAgICB0aGlzLmluaXRUcmFuc3BvcnRzKGFkZGl0aW9uYWxJbXBsZW1lbnRhdGlvbnMsIHN0b3JhZ2UpO1xuICAgIHJldHVybiBzdG9yYWdlLnN1cHBvcnRlZFRyYW5zcG9ydHM7XG4gIH1cbiAgc3RhdGljIGluaXRUcmFuc3BvcnRzKGFkZGl0aW9uYWxJbXBsZW1lbnRhdGlvbnMsIHN0b3JhZ2UpIHtcbiAgICBjb25zdCBpbXBsZW1lbnRhdGlvbnMgPSBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgUGxhdGZvcm0uVHJhbnNwb3J0cy5idW5kbGVkSW1wbGVtZW50YXRpb25zKSwgYWRkaXRpb25hbEltcGxlbWVudGF0aW9ucyk7XG4gICAgW1RyYW5zcG9ydE5hbWVzLldlYlNvY2tldCwgLi4uUGxhdGZvcm0uVHJhbnNwb3J0cy5vcmRlcl0uZm9yRWFjaCgodHJhbnNwb3J0TmFtZSkgPT4ge1xuICAgICAgY29uc3QgdHJhbnNwb3J0ID0gaW1wbGVtZW50YXRpb25zW3RyYW5zcG9ydE5hbWVdO1xuICAgICAgaWYgKHRyYW5zcG9ydCAmJiB0cmFuc3BvcnQuaXNBdmFpbGFibGUoKSkge1xuICAgICAgICBzdG9yYWdlLnN1cHBvcnRlZFRyYW5zcG9ydHNbdHJhbnNwb3J0TmFtZV0gPSB0cmFuc3BvcnQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgaW5pdFRyYW5zcG9ydHMoKSB7XG4gICAgX0Nvbm5lY3Rpb25NYW5hZ2VyLmluaXRUcmFuc3BvcnRzKHRoaXMucmVhbHRpbWUuX2FkZGl0aW9uYWxUcmFuc3BvcnRJbXBsZW1lbnRhdGlvbnMsIHRoaXMpO1xuICB9XG4gIGNyZWF0ZVRyYW5zcG9ydFBhcmFtcyhob3N0LCBtb2RlKSB7XG4gICAgcmV0dXJuIG5ldyBUcmFuc3BvcnRQYXJhbXModGhpcy5vcHRpb25zLCBob3N0LCBtb2RlLCB0aGlzLmNvbm5lY3Rpb25LZXkpO1xuICB9XG4gIGdldFRyYW5zcG9ydFBhcmFtcyhjYWxsYmFjaykge1xuICAgIGNvbnN0IGRlY2lkZU1vZGUgPSAobW9kZUNiKSA9PiB7XG4gICAgICBpZiAodGhpcy5jb25uZWN0aW9uS2V5KSB7XG4gICAgICAgIG1vZGVDYihcInJlc3VtZVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMucmVjb3ZlciA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBtb2RlQ2IoXCJyZWNvdmVyXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCByZWNvdmVyRm4gPSB0aGlzLm9wdGlvbnMucmVjb3ZlciwgbGFzdFNlc3Npb25EYXRhID0gdGhpcy5nZXRTZXNzaW9uUmVjb3ZlckRhdGEoKSwgc2Vzc2lvblJlY292ZXJ5TmFtZSA9IHRoaXMuc2Vzc2lvblJlY292ZXJ5TmFtZSgpO1xuICAgICAgaWYgKGxhc3RTZXNzaW9uRGF0YSAmJiB0eXBlb2YgcmVjb3ZlckZuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLmdldFRyYW5zcG9ydFBhcmFtcygpXCIsXG4gICAgICAgICAgXCJDYWxsaW5nIGNsaWVudE9wdGlvbnMtcHJvdmlkZWQgcmVjb3ZlciBmdW5jdGlvbiB3aXRoIGxhc3Qgc2Vzc2lvbiBkYXRhIChyZWNvdmVyeSBzY29wZTogXCIgKyBzZXNzaW9uUmVjb3ZlcnlOYW1lICsgXCIpXCJcbiAgICAgICAgKTtcbiAgICAgICAgcmVjb3ZlckZuKGxhc3RTZXNzaW9uRGF0YSwgKHNob3VsZFJlY292ZXIpID0+IHtcbiAgICAgICAgICBpZiAoc2hvdWxkUmVjb3Zlcikge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnJlY292ZXIgPSBsYXN0U2Vzc2lvbkRhdGEucmVjb3ZlcnlLZXk7XG4gICAgICAgICAgICBtb2RlQ2IoXCJyZWNvdmVyXCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb2RlQ2IoXCJjbGVhblwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBtb2RlQ2IoXCJjbGVhblwiKTtcbiAgICB9O1xuICAgIGRlY2lkZU1vZGUoKG1vZGUpID0+IHtcbiAgICAgIGNvbnN0IHRyYW5zcG9ydFBhcmFtcyA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0UGFyYW1zKG51bGwsIG1vZGUpO1xuICAgICAgaWYgKG1vZGUgPT09IFwicmVjb3ZlclwiKSB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5nZXRUcmFuc3BvcnRQYXJhbXMoKVwiLFxuICAgICAgICAgIFwiVHJhbnNwb3J0IHJlY292ZXJ5IG1vZGUgPSByZWNvdmVyOyByZWNvdmVyeUtleSA9IFwiICsgdGhpcy5vcHRpb25zLnJlY292ZXJcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgcmVjb3ZlcnlDb250ZXh0ID0gZGVjb2RlUmVjb3ZlcnlLZXkodGhpcy5vcHRpb25zLnJlY292ZXIpO1xuICAgICAgICBpZiAocmVjb3ZlcnlDb250ZXh0KSB7XG4gICAgICAgICAgdGhpcy5tc2dTZXJpYWwgPSByZWNvdmVyeUNvbnRleHQubXNnU2VyaWFsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuZ2V0VHJhbnNwb3J0UGFyYW1zKClcIixcbiAgICAgICAgICBcIlRyYW5zcG9ydCBwYXJhbXMgPSBcIiArIHRyYW5zcG9ydFBhcmFtcy50b1N0cmluZygpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjYWxsYmFjayh0cmFuc3BvcnRQYXJhbXMpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBBdHRlbXB0IHRvIGNvbm5lY3QgdXNpbmcgYSBnaXZlbiB0cmFuc3BvcnRcbiAgICogQHBhcmFtIHRyYW5zcG9ydFBhcmFtc1xuICAgKiBAcGFyYW0gY2FuZGlkYXRlLCB0aGUgdHJhbnNwb3J0IHRvIHRyeVxuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICovXG4gIHRyeUFUcmFuc3BvcnQodHJhbnNwb3J0UGFyYW1zLCBjYW5kaWRhdGUsIGNhbGxiYWNrKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sIFwiQ29ubmVjdGlvbk1hbmFnZXIudHJ5QVRyYW5zcG9ydCgpXCIsIFwidHJ5aW5nIFwiICsgY2FuZGlkYXRlKTtcbiAgICB0aGlzLnByb3Bvc2VkVHJhbnNwb3J0ID0gdHJhbnNwb3J0X2RlZmF1bHQudHJ5Q29ubmVjdChcbiAgICAgIHRoaXMuc3VwcG9ydGVkVHJhbnNwb3J0c1tjYW5kaWRhdGVdLFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMucmVhbHRpbWUuYXV0aCxcbiAgICAgIHRyYW5zcG9ydFBhcmFtcyxcbiAgICAgICh3cmFwcGVkRXJyLCB0cmFuc3BvcnQpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICBpZiAoc3RhdGUgPT0gdGhpcy5zdGF0ZXMuY2xvc2luZyB8fCBzdGF0ZSA9PSB0aGlzLnN0YXRlcy5jbG9zZWQgfHwgc3RhdGUgPT0gdGhpcy5zdGF0ZXMuZmFpbGVkKSB7XG4gICAgICAgICAgaWYgKHRyYW5zcG9ydCkge1xuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLnRyeUFUcmFuc3BvcnQoKVwiLFxuICAgICAgICAgICAgICBcImNvbm5lY3Rpb24gXCIgKyBzdGF0ZS5zdGF0ZSArIFwiIHdoaWxlIHdlIHdlcmUgYXR0ZW1wdGluZyB0aGUgdHJhbnNwb3J0OyBjbG9zaW5nIFwiICsgdHJhbnNwb3J0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAod3JhcHBlZEVycikge1xuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci50cnlBVHJhbnNwb3J0KClcIixcbiAgICAgICAgICAgIFwidHJhbnNwb3J0IFwiICsgY2FuZGlkYXRlICsgXCIgXCIgKyB3cmFwcGVkRXJyLmV2ZW50ICsgXCIsIGVycjogXCIgKyB3cmFwcGVkRXJyLmVycm9yLnRvU3RyaW5nKClcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChhdXRoX2RlZmF1bHQuaXNUb2tlbkVycih3cmFwcGVkRXJyLmVycm9yKSAmJiAhKHRoaXMuZXJyb3JSZWFzb24gJiYgYXV0aF9kZWZhdWx0LmlzVG9rZW5FcnIodGhpcy5lcnJvclJlYXNvbikpKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yUmVhc29uID0gd3JhcHBlZEVyci5lcnJvcjtcbiAgICAgICAgICAgIHdoZW5Qcm9taXNlU2V0dGxlcyh0aGlzLnJlYWx0aW1lLmF1dGguX2ZvcmNlTmV3VG9rZW4obnVsbCwgbnVsbCksIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0T25FcnJvckZyb21BdXRob3JpemUoZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy50cnlBVHJhbnNwb3J0KHRyYW5zcG9ydFBhcmFtcywgY2FuZGlkYXRlLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHdyYXBwZWRFcnIuZXZlbnQgPT09IFwiZmFpbGVkXCIpIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5U3RhdGUoeyBzdGF0ZTogXCJmYWlsZWRcIiwgZXJyb3I6IHdyYXBwZWRFcnIuZXJyb3IgfSk7XG4gICAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHdyYXBwZWRFcnIuZXZlbnQgPT09IFwiZGlzY29ubmVjdGVkXCIpIHtcbiAgICAgICAgICAgIGlmICghaXNSZXRyaWFibGUod3JhcHBlZEVyci5lcnJvcikpIHtcbiAgICAgICAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZSh7IHN0YXRlOiB0aGlzLnN0YXRlcy5jb25uZWN0aW5nLmZhaWxTdGF0ZSwgZXJyb3I6IHdyYXBwZWRFcnIuZXJyb3IgfSk7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLnRyeUFUcmFuc3BvcnQoKVwiLFxuICAgICAgICAgIFwidmlhYmxlIHRyYW5zcG9ydCBcIiArIGNhbmRpZGF0ZSArIFwiOyBzZXR0aW5nIHBlbmRpbmdcIlxuICAgICAgICApO1xuICAgICAgICB0aGlzLnNldFRyYW5zcG9ydFBlbmRpbmcodHJhbnNwb3J0LCB0cmFuc3BvcnRQYXJhbXMpO1xuICAgICAgICBjYWxsYmFjayhudWxsLCB0cmFuc3BvcnQpO1xuICAgICAgfVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGEgdHJhbnNwb3J0IGlzIGluZGljYXRlZCB0byBiZSB2aWFibGUsIGFuZCB0aGUgQ29ubmVjdGlvbk1hbmFnZXJcbiAgICogZXhwZWN0cyB0byBhY3RpdmF0ZSB0aGlzIHRyYW5zcG9ydCBhcyBzb29uIGFzIGl0IGlzIGNvbm5lY3RlZC5cbiAgICogQHBhcmFtIHRyYW5zcG9ydFxuICAgKiBAcGFyYW0gdHJhbnNwb3J0UGFyYW1zXG4gICAqL1xuICBzZXRUcmFuc3BvcnRQZW5kaW5nKHRyYW5zcG9ydCwgdHJhbnNwb3J0UGFyYW1zKSB7XG4gICAgY29uc3QgbW9kZSA9IHRyYW5zcG9ydFBhcmFtcy5tb2RlO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5zZXRUcmFuc3BvcnRQZW5kaW5nKClcIixcbiAgICAgIFwidHJhbnNwb3J0ID0gXCIgKyB0cmFuc3BvcnQgKyBcIjsgbW9kZSA9IFwiICsgbW9kZVxuICAgICk7XG4gICAgdGhpcy5wZW5kaW5nVHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICAgIHRoaXMuY2FuY2VsV2ViU29ja2V0U2xvd1RpbWVyKCk7XG4gICAgdGhpcy5jYW5jZWxXZWJTb2NrZXRHaXZlVXBUaW1lcigpO1xuICAgIHRyYW5zcG9ydC5vbmNlKFwiY29ubmVjdGVkXCIsIChlcnJvciwgY29ubmVjdGlvbklkLCBjb25uZWN0aW9uRGV0YWlscykgPT4ge1xuICAgICAgdGhpcy5hY3RpdmF0ZVRyYW5zcG9ydChlcnJvciwgdHJhbnNwb3J0LCBjb25uZWN0aW9uSWQsIGNvbm5lY3Rpb25EZXRhaWxzKTtcbiAgICAgIGlmIChtb2RlID09PSBcInJlY292ZXJcIiAmJiB0aGlzLm9wdGlvbnMucmVjb3Zlcikge1xuICAgICAgICBkZWxldGUgdGhpcy5vcHRpb25zLnJlY292ZXI7XG4gICAgICAgIHRoaXMudW5wZXJzaXN0Q29ubmVjdGlvbigpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHNlbGYyID0gdGhpcztcbiAgICB0cmFuc3BvcnQub24oW1wiZGlzY29ubmVjdGVkXCIsIFwiY2xvc2VkXCIsIFwiZmFpbGVkXCJdLCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgc2VsZjIuZGVhY3RpdmF0ZVRyYW5zcG9ydCh0cmFuc3BvcnQsIHRoaXMuZXZlbnQsIGVycm9yKTtcbiAgICB9KTtcbiAgICB0aGlzLmVtaXQoXCJ0cmFuc3BvcnQucGVuZGluZ1wiLCB0cmFuc3BvcnQpO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhIHRyYW5zcG9ydCBpcyBjb25uZWN0ZWQsIGFuZCB0aGUgY29ubmVjdGlvbm1hbmFnZXIgZGVjaWRlcyB0aGF0XG4gICAqIGl0IHdpbGwgbm93IGJlIHRoZSBhY3RpdmUgdHJhbnNwb3J0LiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IGl0IGFjdGl2YXRlZFxuICAgKiB0aGUgdHJhbnNwb3J0IChpZiB0aGUgY29ubmVjdGlvbiBpcyBjbG9zaW5nL2Nsb3NlZCBpdCB3aWxsIGNob29zZSBub3QgdG8pLlxuICAgKiBAcGFyYW0gdHJhbnNwb3J0IHRoZSB0cmFuc3BvcnQgaW5zdGFuY2VcbiAgICogQHBhcmFtIGNvbm5lY3Rpb25JZCB0aGUgaWQgb2YgdGhlIG5ldyBhY3RpdmUgY29ubmVjdGlvblxuICAgKiBAcGFyYW0gY29ubmVjdGlvbkRldGFpbHMgdGhlIGRldGFpbHMgb2YgdGhlIG5ldyBhY3RpdmUgY29ubmVjdGlvblxuICAgKi9cbiAgYWN0aXZhdGVUcmFuc3BvcnQoZXJyb3IsIHRyYW5zcG9ydCwgY29ubmVjdGlvbklkLCBjb25uZWN0aW9uRGV0YWlscykge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5hY3RpdmF0ZVRyYW5zcG9ydCgpXCIsXG4gICAgICBcInRyYW5zcG9ydCA9IFwiICsgdHJhbnNwb3J0XG4gICAgKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLCBcIkNvbm5lY3Rpb25NYW5hZ2VyLmFjdGl2YXRlVHJhbnNwb3J0KClcIiwgXCJlcnJvciA9IFwiICsgZXJyb3IpO1xuICAgIH1cbiAgICBpZiAoY29ubmVjdGlvbklkKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuYWN0aXZhdGVUcmFuc3BvcnQoKVwiLFxuICAgICAgICBcImNvbm5lY3Rpb25JZCA9ICBcIiArIGNvbm5lY3Rpb25JZFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGNvbm5lY3Rpb25EZXRhaWxzKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuYWN0aXZhdGVUcmFuc3BvcnQoKVwiLFxuICAgICAgICBcImNvbm5lY3Rpb25EZXRhaWxzID0gIFwiICsgSlNPTi5zdHJpbmdpZnkoY29ubmVjdGlvbkRldGFpbHMpXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnBlcnNpc3RUcmFuc3BvcnRQcmVmZXJlbmNlKHRyYW5zcG9ydCk7XG4gICAgY29uc3QgZXhpc3RpbmdTdGF0ZSA9IHRoaXMuc3RhdGUsIGNvbm5lY3RlZFN0YXRlID0gdGhpcy5zdGF0ZXMuY29ubmVjdGVkLnN0YXRlO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5hY3RpdmF0ZVRyYW5zcG9ydCgpXCIsXG4gICAgICBcImN1cnJlbnQgc3RhdGUgPSBcIiArIGV4aXN0aW5nU3RhdGUuc3RhdGVcbiAgICApO1xuICAgIGlmIChleGlzdGluZ1N0YXRlLnN0YXRlID09IHRoaXMuc3RhdGVzLmNsb3Npbmcuc3RhdGUgfHwgZXhpc3RpbmdTdGF0ZS5zdGF0ZSA9PSB0aGlzLnN0YXRlcy5jbG9zZWQuc3RhdGUgfHwgZXhpc3RpbmdTdGF0ZS5zdGF0ZSA9PSB0aGlzLnN0YXRlcy5mYWlsZWQuc3RhdGUpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5hY3RpdmF0ZVRyYW5zcG9ydCgpXCIsXG4gICAgICAgIFwiRGlzY29ubmVjdGluZyB0cmFuc3BvcnQgYW5kIGFiYW5kb25pbmdcIlxuICAgICAgKTtcbiAgICAgIHRyYW5zcG9ydC5kaXNjb25uZWN0KCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGRlbGV0ZSB0aGlzLnBlbmRpbmdUcmFuc3BvcnQ7XG4gICAgaWYgKCF0cmFuc3BvcnQuaXNDb25uZWN0ZWQpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5hY3RpdmF0ZVRyYW5zcG9ydCgpXCIsXG4gICAgICAgIFwiRGVjbGluaW5nIHRvIGFjdGl2YXRlIHRyYW5zcG9ydCBcIiArIHRyYW5zcG9ydCArIFwiIHNpbmNlIGl0IGFwcGVhcnMgdG8gbm8gbG9uZ2VyIGJlIGNvbm5lY3RlZFwiXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBleGlzdGluZ0FjdGl2ZVByb3RvY29sID0gdGhpcy5hY3RpdmVQcm90b2NvbDtcbiAgICB0aGlzLmFjdGl2ZVByb3RvY29sID0gbmV3IHByb3RvY29sX2RlZmF1bHQodHJhbnNwb3J0KTtcbiAgICB0aGlzLmhvc3QgPSB0cmFuc3BvcnQucGFyYW1zLmhvc3Q7XG4gICAgY29uc3QgY29ubmVjdGlvbktleSA9IGNvbm5lY3Rpb25EZXRhaWxzLmNvbm5lY3Rpb25LZXk7XG4gICAgaWYgKGNvbm5lY3Rpb25LZXkgJiYgdGhpcy5jb25uZWN0aW9uS2V5ICE9IGNvbm5lY3Rpb25LZXkpIHtcbiAgICAgIHRoaXMuc2V0Q29ubmVjdGlvbihjb25uZWN0aW9uSWQsIGNvbm5lY3Rpb25EZXRhaWxzLCAhIWVycm9yKTtcbiAgICB9XG4gICAgdGhpcy5vbkNvbm5lY3Rpb25EZXRhaWxzVXBkYXRlKGNvbm5lY3Rpb25EZXRhaWxzLCB0cmFuc3BvcnQpO1xuICAgIFBsYXRmb3JtLkNvbmZpZy5uZXh0VGljaygoKSA9PiB7XG4gICAgICB0cmFuc3BvcnQub24oXG4gICAgICAgIFwiY29ubmVjdGVkXCIsXG4gICAgICAgIChjb25uZWN0ZWRFcnIsIF9jb25uZWN0aW9uSWQsIGNvbm5lY3Rpb25EZXRhaWxzMikgPT4ge1xuICAgICAgICAgIHRoaXMub25Db25uZWN0aW9uRGV0YWlsc1VwZGF0ZShjb25uZWN0aW9uRGV0YWlsczIsIHRyYW5zcG9ydCk7XG4gICAgICAgICAgdGhpcy5lbWl0KFwidXBkYXRlXCIsIG5ldyBjb25uZWN0aW9uc3RhdGVjaGFuZ2VfZGVmYXVsdChjb25uZWN0ZWRTdGF0ZSwgY29ubmVjdGVkU3RhdGUsIG51bGwsIGNvbm5lY3RlZEVycikpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICAgIGlmIChleGlzdGluZ1N0YXRlLnN0YXRlID09PSB0aGlzLnN0YXRlcy5jb25uZWN0ZWQuc3RhdGUpIHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICB0aGlzLmVycm9yUmVhc29uID0gdGhpcy5yZWFsdGltZS5jb25uZWN0aW9uLmVycm9yUmVhc29uID0gZXJyb3I7XG4gICAgICAgIHRoaXMuZW1pdChcInVwZGF0ZVwiLCBuZXcgY29ubmVjdGlvbnN0YXRlY2hhbmdlX2RlZmF1bHQoY29ubmVjdGVkU3RhdGUsIGNvbm5lY3RlZFN0YXRlLCBudWxsLCBlcnJvcikpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5vdGlmeVN0YXRlKHsgc3RhdGU6IFwiY29ubmVjdGVkXCIsIGVycm9yIH0pO1xuICAgICAgdGhpcy5lcnJvclJlYXNvbiA9IHRoaXMucmVhbHRpbWUuY29ubmVjdGlvbi5lcnJvclJlYXNvbiA9IGVycm9yIHx8IG51bGw7XG4gICAgfVxuICAgIHRoaXMuZW1pdChcInRyYW5zcG9ydC5hY3RpdmVcIiwgdHJhbnNwb3J0KTtcbiAgICBpZiAoZXhpc3RpbmdBY3RpdmVQcm90b2NvbCkge1xuICAgICAgaWYgKGV4aXN0aW5nQWN0aXZlUHJvdG9jb2wubWVzc2FnZVF1ZXVlLmNvdW50KCkgPiAwKSB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5hY3RpdmF0ZVRyYW5zcG9ydCgpXCIsXG4gICAgICAgICAgXCJQcmV2aW91cyBhY3RpdmUgcHJvdG9jb2wgKGZvciB0cmFuc3BvcnQgXCIgKyBleGlzdGluZ0FjdGl2ZVByb3RvY29sLnRyYW5zcG9ydC5zaG9ydE5hbWUgKyBcIiwgbmV3IG9uZSBpcyBcIiArIHRyYW5zcG9ydC5zaG9ydE5hbWUgKyBcIikgZmluaXNoaW5nIHdpdGggXCIgKyBleGlzdGluZ0FjdGl2ZVByb3RvY29sLm1lc3NhZ2VRdWV1ZS5jb3VudCgpICsgXCIgbWVzc2FnZXMgc3RpbGwgcGVuZGluZ1wiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoZXhpc3RpbmdBY3RpdmVQcm90b2NvbC50cmFuc3BvcnQgPT09IHRyYW5zcG9ydCkge1xuICAgICAgICBjb25zdCBtc2cgPSBcIkFzc3VtcHRpb24gdmlvbGF0ZWQ6IGFjdGl2YXRpbmcgYSB0cmFuc3BvcnQgdGhhdCB3YXMgYWxzbyB0aGUgdHJhbnNwb3J0IGZvciB0aGUgcHJldmlvdXMgYWN0aXZlIHByb3RvY29sOyB0cmFuc3BvcnQgPSBcIiArIHRyYW5zcG9ydC5zaG9ydE5hbWUgKyBcIjsgc3RhY2sgPSBcIiArIG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUiwgXCJDb25uZWN0aW9uTWFuYWdlci5hY3RpdmF0ZVRyYW5zcG9ydCgpXCIsIG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleGlzdGluZ0FjdGl2ZVByb3RvY29sLmZpbmlzaCgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYSB0cmFuc3BvcnQgaXMgbm8gbG9uZ2VyIHRoZSBhY3RpdmUgdHJhbnNwb3J0LiBUaGlzIGNhbiBvY2N1clxuICAgKiBpbiBhbnkgdHJhbnNwb3J0IGNvbm5lY3Rpb24gc3RhdGUuXG4gICAqIEBwYXJhbSB0cmFuc3BvcnRcbiAgICovXG4gIGRlYWN0aXZhdGVUcmFuc3BvcnQodHJhbnNwb3J0LCBzdGF0ZSwgZXJyb3IpIHtcbiAgICBjb25zdCBjdXJyZW50UHJvdG9jb2wgPSB0aGlzLmFjdGl2ZVByb3RvY29sLCB3YXNBY3RpdmUgPSBjdXJyZW50UHJvdG9jb2wgJiYgY3VycmVudFByb3RvY29sLmdldFRyYW5zcG9ydCgpID09PSB0cmFuc3BvcnQsIHdhc1BlbmRpbmcgPSB0cmFuc3BvcnQgPT09IHRoaXMucGVuZGluZ1RyYW5zcG9ydCwgbm9UcmFuc3BvcnRzU2NoZWR1bGVkRm9yQWN0aXZhdGlvbiA9IHRoaXMubm9UcmFuc3BvcnRzU2NoZWR1bGVkRm9yQWN0aXZhdGlvbigpO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5kZWFjdGl2YXRlVHJhbnNwb3J0KClcIixcbiAgICAgIFwidHJhbnNwb3J0ID0gXCIgKyB0cmFuc3BvcnRcbiAgICApO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5kZWFjdGl2YXRlVHJhbnNwb3J0KClcIixcbiAgICAgIFwic3RhdGUgPSBcIiArIHN0YXRlICsgKHdhc0FjdGl2ZSA/IFwiOyB3YXMgYWN0aXZlXCIgOiB3YXNQZW5kaW5nID8gXCI7IHdhcyBwZW5kaW5nXCIgOiBcIlwiKSArIChub1RyYW5zcG9ydHNTY2hlZHVsZWRGb3JBY3RpdmF0aW9uID8gXCJcIiA6IFwiOyBhbm90aGVyIHRyYW5zcG9ydCBpcyBzY2hlZHVsZWQgZm9yIGFjdGl2YXRpb25cIilcbiAgICApO1xuICAgIGlmIChlcnJvciAmJiBlcnJvci5tZXNzYWdlKVxuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLmRlYWN0aXZhdGVUcmFuc3BvcnQoKVwiLFxuICAgICAgICBcInJlYXNvbiA9ICBcIiArIGVycm9yLm1lc3NhZ2VcbiAgICAgICk7XG4gICAgaWYgKHdhc0FjdGl2ZSkge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLmRlYWN0aXZhdGVUcmFuc3BvcnQoKVwiLFxuICAgICAgICBcIkdldHRpbmcsIGNsZWFyaW5nLCBhbmQgcmVxdWV1aW5nIFwiICsgdGhpcy5hY3RpdmVQcm90b2NvbC5tZXNzYWdlUXVldWUuY291bnQoKSArIFwiIHBlbmRpbmcgbWVzc2FnZXNcIlxuICAgICAgKTtcbiAgICAgIHRoaXMucXVldWVQZW5kaW5nTWVzc2FnZXMoY3VycmVudFByb3RvY29sLmdldFBlbmRpbmdNZXNzYWdlcygpKTtcbiAgICAgIGN1cnJlbnRQcm90b2NvbC5jbGVhclBlbmRpbmdNZXNzYWdlcygpO1xuICAgICAgdGhpcy5hY3RpdmVQcm90b2NvbCA9IHRoaXMuaG9zdCA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuZW1pdChcInRyYW5zcG9ydC5pbmFjdGl2ZVwiLCB0cmFuc3BvcnQpO1xuICAgIGlmICh3YXNBY3RpdmUgJiYgbm9UcmFuc3BvcnRzU2NoZWR1bGVkRm9yQWN0aXZhdGlvbiB8fCB3YXNBY3RpdmUgJiYgc3RhdGUgPT09IFwiZmFpbGVkXCIgfHwgc3RhdGUgPT09IFwiY2xvc2VkXCIgfHwgY3VycmVudFByb3RvY29sID09PSBudWxsICYmIHdhc1BlbmRpbmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gXCJkaXNjb25uZWN0ZWRcIiAmJiBlcnJvciAmJiBlcnJvci5zdGF0dXNDb2RlID4gNTAwICYmIHRoaXMuaHR0cEhvc3RzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhpcy51bnBlcnNpc3RUcmFuc3BvcnRQcmVmZXJlbmNlKCk7XG4gICAgICAgIHRoaXMuZm9yY2VGYWxsYmFja0hvc3QgPSB0cnVlO1xuICAgICAgICB0aGlzLm5vdGlmeVN0YXRlKHsgc3RhdGUsIGVycm9yLCByZXRyeUltbWVkaWF0ZWx5OiB0cnVlIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBuZXdDb25uZWN0aW9uU3RhdGUgPSBzdGF0ZSA9PT0gXCJmYWlsZWRcIiAmJiBhdXRoX2RlZmF1bHQuaXNUb2tlbkVycihlcnJvcikgPyBcImRpc2Nvbm5lY3RlZFwiIDogc3RhdGU7XG4gICAgICB0aGlzLm5vdGlmeVN0YXRlKHsgc3RhdGU6IG5ld0Nvbm5lY3Rpb25TdGF0ZSwgZXJyb3IgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIC8qIEhlbHBlciB0aGF0IHJldHVybnMgdHJ1ZSBpZiB0aGVyZSBhcmUgbm8gdHJhbnNwb3J0cyB3aGljaCBhcmUgcGVuZGluZyxcbiAgICogaGF2ZSBiZWVuIGNvbm5lY3RlZCwgYW5kIGFyZSBqdXN0IHdhaXRpbmcgZm9yIG9uY2VOb1BlbmRpbmcgdG8gZmlyZSBiZWZvcmVcbiAgICogYmVpbmcgYWN0aXZhdGVkICovXG4gIG5vVHJhbnNwb3J0c1NjaGVkdWxlZEZvckFjdGl2YXRpb24oKSB7XG4gICAgcmV0dXJuICF0aGlzLnBlbmRpbmdUcmFuc3BvcnQgfHwgIXRoaXMucGVuZGluZ1RyYW5zcG9ydC5pc0Nvbm5lY3RlZDtcbiAgfVxuICBzZXRDb25uZWN0aW9uKGNvbm5lY3Rpb25JZCwgY29ubmVjdGlvbkRldGFpbHMsIGhhc0Nvbm5lY3Rpb25FcnJvcikge1xuICAgIGNvbnN0IHByZXZDb25uSWQgPSB0aGlzLmNvbm5lY3Rpb25JZCwgY29ubklkQ2hhbmdlZCA9IHByZXZDb25uSWQgJiYgcHJldkNvbm5JZCAhPT0gY29ubmVjdGlvbklkLCByZWNvdmVyRmFpbHVyZSA9ICFwcmV2Q29ubklkICYmIGhhc0Nvbm5lY3Rpb25FcnJvcjtcbiAgICBpZiAoY29ubklkQ2hhbmdlZCB8fCByZWNvdmVyRmFpbHVyZSkge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQ29ubmVjdGlvbk1hbmFnZXIuc2V0Q29ubmVjdGlvbigpXCIsIFwiUmVzZXR0aW5nIG1zZ1NlcmlhbFwiKTtcbiAgICAgIHRoaXMubXNnU2VyaWFsID0gMDtcbiAgICAgIHRoaXMucXVldWVkTWVzc2FnZXMucmVzZXRTZW5kQXR0ZW1wdGVkKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbm5lY3Rpb25JZCAhPT0gY29ubmVjdGlvbklkKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuc2V0Q29ubmVjdGlvbigpXCIsXG4gICAgICAgIFwiTmV3IGNvbm5lY3Rpb25JZDsgcmVhdHRhY2hpbmcgYW55IGF0dGFjaGVkIGNoYW5uZWxzXCJcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMucmVhbHRpbWUuY29ubmVjdGlvbi5pZCA9IHRoaXMuY29ubmVjdGlvbklkID0gY29ubmVjdGlvbklkO1xuICAgIHRoaXMucmVhbHRpbWUuY29ubmVjdGlvbi5rZXkgPSB0aGlzLmNvbm5lY3Rpb25LZXkgPSBjb25uZWN0aW9uRGV0YWlscy5jb25uZWN0aW9uS2V5O1xuICB9XG4gIGNsZWFyQ29ubmVjdGlvbigpIHtcbiAgICB0aGlzLnJlYWx0aW1lLmNvbm5lY3Rpb24uaWQgPSB0aGlzLmNvbm5lY3Rpb25JZCA9IHZvaWQgMDtcbiAgICB0aGlzLnJlYWx0aW1lLmNvbm5lY3Rpb24ua2V5ID0gdGhpcy5jb25uZWN0aW9uS2V5ID0gdm9pZCAwO1xuICAgIHRoaXMubXNnU2VyaWFsID0gMDtcbiAgICB0aGlzLnVucGVyc2lzdENvbm5lY3Rpb24oKTtcbiAgfVxuICBjcmVhdGVSZWNvdmVyeUtleSgpIHtcbiAgICBpZiAoIXRoaXMuY29ubmVjdGlvbktleSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBjb25uZWN0aW9uS2V5OiB0aGlzLmNvbm5lY3Rpb25LZXksXG4gICAgICBtc2dTZXJpYWw6IHRoaXMubXNnU2VyaWFsLFxuICAgICAgY2hhbm5lbFNlcmlhbHM6IHRoaXMucmVhbHRpbWUuY2hhbm5lbHMuY2hhbm5lbFNlcmlhbHMoKVxuICAgIH0pO1xuICB9XG4gIGNoZWNrQ29ubmVjdGlvblN0YXRlRnJlc2huZXNzKCkge1xuICAgIGlmICghdGhpcy5sYXN0QWN0aXZpdHkgfHwgIXRoaXMuY29ubmVjdGlvbklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNpbmNlTGFzdCA9IERhdGUubm93KCkgLSB0aGlzLmxhc3RBY3Rpdml0eTtcbiAgICBpZiAoc2luY2VMYXN0ID4gdGhpcy5jb25uZWN0aW9uU3RhdGVUdGwgKyB0aGlzLm1heElkbGVJbnRlcnZhbCkge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLmNoZWNrQ29ubmVjdGlvblN0YXRlRnJlc2huZXNzKClcIixcbiAgICAgICAgXCJMYXN0IGtub3duIGFjdGl2aXR5IGZyb20gcmVhbHRpbWUgd2FzIFwiICsgc2luY2VMYXN0ICsgXCJtcyBhZ287IGRpc2NhcmRpbmcgY29ubmVjdGlvbiBzdGF0ZVwiXG4gICAgICApO1xuICAgICAgdGhpcy5jbGVhckNvbm5lY3Rpb24oKTtcbiAgICAgIHRoaXMuc3RhdGVzLmNvbm5lY3RpbmcuZmFpbFN0YXRlID0gXCJzdXNwZW5kZWRcIjtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSBjb25uZWN0aW9ubWFuYWdlciB3YW50cyB0byBwZXJzaXN0IHRyYW5zcG9ydFxuICAgKiBzdGF0ZSBmb3IgbGF0ZXIgcmVjb3ZlcnkuIE9ubHkgYXBwbGljYWJsZSBpbiB0aGUgYnJvd3NlciBjb250ZXh0LlxuICAgKi9cbiAgcGVyc2lzdENvbm5lY3Rpb24oKSB7XG4gICAgaWYgKGhhdmVTZXNzaW9uU3RvcmFnZSgpKSB7XG4gICAgICBjb25zdCByZWNvdmVyeUtleSA9IHRoaXMuY3JlYXRlUmVjb3ZlcnlLZXkoKTtcbiAgICAgIGlmIChyZWNvdmVyeUtleSkge1xuICAgICAgICB0aGlzLnNldFNlc3Npb25SZWNvdmVyRGF0YSh7XG4gICAgICAgICAgcmVjb3ZlcnlLZXksXG4gICAgICAgICAgZGlzY29ubmVjdGVkQXQ6IERhdGUubm93KCksXG4gICAgICAgICAgbG9jYXRpb246IGdsb2JhbE9iamVjdDIubG9jYXRpb24sXG4gICAgICAgICAgY2xpZW50SWQ6IHRoaXMucmVhbHRpbWUuYXV0aC5jbGllbnRJZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSBjb25uZWN0aW9ubWFuYWdlciB3YW50cyB0byBwZXJzaXN0IHRyYW5zcG9ydFxuICAgKiBzdGF0ZSBmb3IgbGF0ZXIgcmVjb3ZlcnkuIE9ubHkgYXBwbGljYWJsZSBpbiB0aGUgYnJvd3NlciBjb250ZXh0LlxuICAgKi9cbiAgdW5wZXJzaXN0Q29ubmVjdGlvbigpIHtcbiAgICB0aGlzLmNsZWFyU2Vzc2lvblJlY292ZXJEYXRhKCk7XG4gIH1cbiAgLyoqKioqKioqKioqKioqKioqKioqKlxuICAgKiBzdGF0ZSBtYW5hZ2VtZW50XG4gICAqKioqKioqKioqKioqKioqKioqKiovXG4gIGdldEVycm9yKCkge1xuICAgIGlmICh0aGlzLmVycm9yUmVhc29uKSB7XG4gICAgICBjb25zdCBuZXdFcnJvciA9IFBhcnRpYWxFcnJvckluZm8uZnJvbVZhbHVlcyh0aGlzLmVycm9yUmVhc29uKTtcbiAgICAgIG5ld0Vycm9yLmNhdXNlID0gdGhpcy5lcnJvclJlYXNvbjtcbiAgICAgIHJldHVybiBuZXdFcnJvcjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RhdGVFcnJvcigpO1xuICB9XG4gIGdldFN0YXRlRXJyb3IoKSB7XG4gICAgdmFyIF9hMiwgX2I7XG4gICAgcmV0dXJuIChfYiA9IChfYTIgPSBjb25uZWN0aW9uZXJyb3JzX2RlZmF1bHQpW3RoaXMuc3RhdGUuc3RhdGVdKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChfYTIpO1xuICB9XG4gIGFjdGl2ZVN0YXRlKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLnF1ZXVlRXZlbnRzIHx8IHRoaXMuc3RhdGUuc2VuZEV2ZW50cztcbiAgfVxuICBlbmFjdFN0YXRlQ2hhbmdlKHN0YXRlQ2hhbmdlKSB7XG4gICAgY29uc3QgYWN0aW9uID0gXCJDb25uZWN0aW9uIHN0YXRlXCI7XG4gICAgY29uc3QgbWVzc2FnZSA9IHN0YXRlQ2hhbmdlLmN1cnJlbnQgKyAoc3RhdGVDaGFuZ2UucmVhc29uID8gXCI7IHJlYXNvbjogXCIgKyBzdGF0ZUNoYW5nZS5yZWFzb24gOiBcIlwiKTtcbiAgICBpZiAoc3RhdGVDaGFuZ2UuY3VycmVudCA9PT0gXCJmYWlsZWRcIikge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIGFjdGlvbiwgbWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01BSk9SLCBhY3Rpb24sIG1lc3NhZ2UpO1xuICAgIH1cbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuZW5hY3RTdGF0ZUNoYW5nZVwiLFxuICAgICAgXCJzZXR0aW5nIG5ldyBzdGF0ZTogXCIgKyBzdGF0ZUNoYW5nZS5jdXJyZW50ICsgXCI7IHJlYXNvbiA9IFwiICsgKHN0YXRlQ2hhbmdlLnJlYXNvbiAmJiBzdGF0ZUNoYW5nZS5yZWFzb24ubWVzc2FnZSlcbiAgICApO1xuICAgIGNvbnN0IG5ld1N0YXRlID0gdGhpcy5zdGF0ZSA9IHRoaXMuc3RhdGVzW3N0YXRlQ2hhbmdlLmN1cnJlbnRdO1xuICAgIGlmIChzdGF0ZUNoYW5nZS5yZWFzb24pIHtcbiAgICAgIHRoaXMuZXJyb3JSZWFzb24gPSBzdGF0ZUNoYW5nZS5yZWFzb247XG4gICAgICB0aGlzLnJlYWx0aW1lLmNvbm5lY3Rpb24uZXJyb3JSZWFzb24gPSBzdGF0ZUNoYW5nZS5yZWFzb247XG4gICAgfVxuICAgIGlmIChuZXdTdGF0ZS50ZXJtaW5hbCB8fCBuZXdTdGF0ZS5zdGF0ZSA9PT0gXCJzdXNwZW5kZWRcIikge1xuICAgICAgdGhpcy5jbGVhckNvbm5lY3Rpb24oKTtcbiAgICB9XG4gICAgdGhpcy5lbWl0KFwiY29ubmVjdGlvbnN0YXRlXCIsIHN0YXRlQ2hhbmdlKTtcbiAgfVxuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgKiBDb25uZWN0aW9uTWFuYWdlciBjb25uZWN0aW9uIGxpZmVjeWNsZVxuICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgc3RhcnRUcmFuc2l0aW9uVGltZXIodHJhbnNpdGlvblN0YXRlKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLnN0YXJ0VHJhbnNpdGlvblRpbWVyKClcIixcbiAgICAgIFwidHJhbnNpdGlvblN0YXRlOiBcIiArIHRyYW5zaXRpb25TdGF0ZS5zdGF0ZVxuICAgICk7XG4gICAgaWYgKHRoaXMudHJhbnNpdGlvblRpbWVyKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuc3RhcnRUcmFuc2l0aW9uVGltZXIoKVwiLFxuICAgICAgICBcImNsZWFyaW5nIGFscmVhZHktcnVubmluZyB0aW1lclwiXG4gICAgICApO1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudHJhbnNpdGlvblRpbWVyKTtcbiAgICB9XG4gICAgdGhpcy50cmFuc2l0aW9uVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLnRyYW5zaXRpb25UaW1lcikge1xuICAgICAgICB0aGlzLnRyYW5zaXRpb25UaW1lciA9IG51bGw7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlciBcIiArIHRyYW5zaXRpb25TdGF0ZS5zdGF0ZSArIFwiIHRpbWVyIGV4cGlyZWRcIixcbiAgICAgICAgICBcInJlcXVlc3RpbmcgbmV3IHN0YXRlOiBcIiArIHRyYW5zaXRpb25TdGF0ZS5mYWlsU3RhdGVcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZSh7IHN0YXRlOiB0cmFuc2l0aW9uU3RhdGUuZmFpbFN0YXRlIH0pO1xuICAgICAgfVxuICAgIH0sIHRyYW5zaXRpb25TdGF0ZS5yZXRyeURlbGF5KTtcbiAgfVxuICBjYW5jZWxUcmFuc2l0aW9uVGltZXIoKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQ29ubmVjdGlvbk1hbmFnZXIuY2FuY2VsVHJhbnNpdGlvblRpbWVyKClcIiwgXCJcIik7XG4gICAgaWYgKHRoaXMudHJhbnNpdGlvblRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50cmFuc2l0aW9uVGltZXIpO1xuICAgICAgdGhpcy50cmFuc2l0aW9uVGltZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuICBzdGFydFN1c3BlbmRUaW1lcigpIHtcbiAgICBpZiAodGhpcy5zdXNwZW5kVGltZXIpXG4gICAgICByZXR1cm47XG4gICAgdGhpcy5zdXNwZW5kVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLnN1c3BlbmRUaW1lcikge1xuICAgICAgICB0aGlzLnN1c3BlbmRUaW1lciA9IG51bGw7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlciBzdXNwZW5kIHRpbWVyIGV4cGlyZWRcIixcbiAgICAgICAgICBcInJlcXVlc3RpbmcgbmV3IHN0YXRlOiBzdXNwZW5kZWRcIlxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0YXRlcy5jb25uZWN0aW5nLmZhaWxTdGF0ZSA9IFwic3VzcGVuZGVkXCI7XG4gICAgICAgIHRoaXMubm90aWZ5U3RhdGUoeyBzdGF0ZTogXCJzdXNwZW5kZWRcIiB9KTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLmNvbm5lY3Rpb25TdGF0ZVR0bCk7XG4gIH1cbiAgY2hlY2tTdXNwZW5kVGltZXIoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUgIT09IFwiZGlzY29ubmVjdGVkXCIgJiYgc3RhdGUgIT09IFwic3VzcGVuZGVkXCIgJiYgc3RhdGUgIT09IFwiY29ubmVjdGluZ1wiKVxuICAgICAgdGhpcy5jYW5jZWxTdXNwZW5kVGltZXIoKTtcbiAgfVxuICBjYW5jZWxTdXNwZW5kVGltZXIoKSB7XG4gICAgdGhpcy5zdGF0ZXMuY29ubmVjdGluZy5mYWlsU3RhdGUgPSBcImRpc2Nvbm5lY3RlZFwiO1xuICAgIGlmICh0aGlzLnN1c3BlbmRUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc3VzcGVuZFRpbWVyKTtcbiAgICAgIHRoaXMuc3VzcGVuZFRpbWVyID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgc3RhcnRSZXRyeVRpbWVyKGludGVydmFsKSB7XG4gICAgdGhpcy5yZXRyeVRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJDb25uZWN0aW9uTWFuYWdlciByZXRyeSB0aW1lciBleHBpcmVkXCIsIFwicmV0cnlpbmdcIik7XG4gICAgICB0aGlzLnJldHJ5VGltZXIgPSBudWxsO1xuICAgICAgdGhpcy5yZXF1ZXN0U3RhdGUoeyBzdGF0ZTogXCJjb25uZWN0aW5nXCIgfSk7XG4gICAgfSwgaW50ZXJ2YWwpO1xuICB9XG4gIGNhbmNlbFJldHJ5VGltZXIoKSB7XG4gICAgaWYgKHRoaXMucmV0cnlUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmV0cnlUaW1lcik7XG4gICAgICB0aGlzLnJldHJ5VGltZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuICBzdGFydFdlYlNvY2tldFNsb3dUaW1lcigpIHtcbiAgICB0aGlzLndlYlNvY2tldFNsb3dUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyIFdlYlNvY2tldCBzbG93IHRpbWVyXCIsXG4gICAgICAgIFwiY2hlY2tpbmcgY29ubmVjdGl2aXR5XCJcbiAgICAgICk7XG4gICAgICBpZiAodGhpcy53c0NoZWNrUmVzdWx0ID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuY2hlY2tXc0Nvbm5lY3Rpdml0eSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlciBXZWJTb2NrZXQgc2xvdyB0aW1lclwiLFxuICAgICAgICAgICAgXCJ3cyBjb25uZWN0aXZpdHkgY2hlY2sgc3VjY2VlZGVkXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMud3NDaGVja1Jlc3VsdCA9IHRydWU7XG4gICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NQUpPUixcbiAgICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIgV2ViU29ja2V0IHNsb3cgdGltZXJcIixcbiAgICAgICAgICAgIFwid3MgY29ubmVjdGl2aXR5IGNoZWNrIGZhaWxlZFwiXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLndzQ2hlY2tSZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5yZWFsdGltZS5odHRwLmNoZWNrQ29ubmVjdGl2aXR5KSB7XG4gICAgICAgIHdoZW5Qcm9taXNlU2V0dGxlcyh0aGlzLnJlYWx0aW1lLmh0dHAuY2hlY2tDb25uZWN0aXZpdHkoKSwgKGVyciwgY29ubmVjdGl2aXR5KSA9PiB7XG4gICAgICAgICAgaWYgKGVyciB8fCAhY29ubmVjdGl2aXR5KSB7XG4gICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUFKT1IsXG4gICAgICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIgV2ViU29ja2V0IHNsb3cgdGltZXJcIixcbiAgICAgICAgICAgICAgXCJodHRwIGNvbm5lY3Rpdml0eSBjaGVjayBmYWlsZWRcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsV2ViU29ja2V0R2l2ZVVwVGltZXIoKTtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5U3RhdGUoe1xuICAgICAgICAgICAgICBzdGF0ZTogXCJkaXNjb25uZWN0ZWRcIixcbiAgICAgICAgICAgICAgZXJyb3I6IG5ldyBFcnJvckluZm8oXCJVbmFibGUgdG8gY29ubmVjdCAobmV0d29yayB1bnJlYWNoYWJsZSlcIiwgODAwMDMsIDQwNClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIgV2ViU29ja2V0IHNsb3cgdGltZXJcIixcbiAgICAgICAgICAgICAgXCJodHRwIGNvbm5lY3Rpdml0eSBjaGVjayBzdWNjZWVkZWRcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHRoaXMub3B0aW9ucy50aW1lb3V0cy53ZWJTb2NrZXRTbG93VGltZW91dCk7XG4gIH1cbiAgY2FuY2VsV2ViU29ja2V0U2xvd1RpbWVyKCkge1xuICAgIGlmICh0aGlzLndlYlNvY2tldFNsb3dUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMud2ViU29ja2V0U2xvd1RpbWVyKTtcbiAgICAgIHRoaXMud2ViU29ja2V0U2xvd1RpbWVyID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgc3RhcnRXZWJTb2NrZXRHaXZlVXBUaW1lcih0cmFuc3BvcnRQYXJhbXMpIHtcbiAgICB0aGlzLndlYlNvY2tldEdpdmVVcFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB2YXIgX2EyLCBfYjtcbiAgICAgIGlmICghdGhpcy53c0NoZWNrUmVzdWx0KSB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlciBXZWJTb2NrZXQgZ2l2ZSB1cCB0aW1lclwiLFxuICAgICAgICAgIFwid2Vic29ja2V0IGNvbm5lY3Rpb24gdG9vayBtb3JlIHRoYW4gMTBzOyBcIiArICh0aGlzLmJhc2VUcmFuc3BvcnQgPyBcInRyeWluZyBiYXNlIHRyYW5zcG9ydFwiIDogXCJcIilcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHRoaXMuYmFzZVRyYW5zcG9ydCkge1xuICAgICAgICAgIHRoaXMuYWJhbmRvbmVkV2ViU29ja2V0ID0gdHJ1ZTtcbiAgICAgICAgICAoX2EyID0gdGhpcy5wcm9wb3NlZFRyYW5zcG9ydCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5kaXNwb3NlKCk7XG4gICAgICAgICAgKF9iID0gdGhpcy5wZW5kaW5nVHJhbnNwb3J0KSA9PSBudWxsID8gdm9pZCAwIDogX2IuZGlzcG9zZSgpO1xuICAgICAgICAgIHRoaXMuY29ubmVjdEJhc2UodHJhbnNwb3J0UGFyYW1zLCArK3RoaXMuY29ubmVjdENvdW50ZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01BSk9SLFxuICAgICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlciBXZWJTb2NrZXQgZ2l2ZSB1cCB0aW1lclwiLFxuICAgICAgICAgICAgXCJ3ZWJzb2NrZXQgY29ubmVjdGl2aXR5IGFwcGVhcnMgdG8gYmUgdW5hdmFpbGFibGUgYnV0IG5vIG90aGVyIHRyYW5zcG9ydHMgdG8gdHJ5XCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgdGhpcy5vcHRpb25zLnRpbWVvdXRzLndlYlNvY2tldENvbm5lY3RUaW1lb3V0KTtcbiAgfVxuICBjYW5jZWxXZWJTb2NrZXRHaXZlVXBUaW1lcigpIHtcbiAgICBpZiAodGhpcy53ZWJTb2NrZXRHaXZlVXBUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMud2ViU29ja2V0R2l2ZVVwVGltZXIpO1xuICAgICAgdGhpcy53ZWJTb2NrZXRHaXZlVXBUaW1lciA9IG51bGw7XG4gICAgfVxuICB9XG4gIG5vdGlmeVN0YXRlKGluZGljYXRlZCkge1xuICAgIHZhciBfYTIsIF9iO1xuICAgIGNvbnN0IHN0YXRlID0gaW5kaWNhdGVkLnN0YXRlO1xuICAgIGNvbnN0IHJldHJ5SW1tZWRpYXRlbHkgPSBzdGF0ZSA9PT0gXCJkaXNjb25uZWN0ZWRcIiAmJiAodGhpcy5zdGF0ZSA9PT0gdGhpcy5zdGF0ZXMuY29ubmVjdGVkIHx8IGluZGljYXRlZC5yZXRyeUltbWVkaWF0ZWx5IHx8IHRoaXMuc3RhdGUgPT09IHRoaXMuc3RhdGVzLmNvbm5lY3RpbmcgJiYgaW5kaWNhdGVkLmVycm9yICYmIGF1dGhfZGVmYXVsdC5pc1Rva2VuRXJyKGluZGljYXRlZC5lcnJvcikgJiYgISh0aGlzLmVycm9yUmVhc29uICYmIGF1dGhfZGVmYXVsdC5pc1Rva2VuRXJyKHRoaXMuZXJyb3JSZWFzb24pKSk7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLm5vdGlmeVN0YXRlKClcIixcbiAgICAgIFwibmV3IHN0YXRlOiBcIiArIHN0YXRlICsgKHJldHJ5SW1tZWRpYXRlbHkgPyBcIjsgd2lsbCByZXRyeSBjb25uZWN0aW9uIGltbWVkaWF0ZWx5XCIgOiBcIlwiKVxuICAgICk7XG4gICAgaWYgKHN0YXRlID09IHRoaXMuc3RhdGUuc3RhdGUpXG4gICAgICByZXR1cm47XG4gICAgdGhpcy5jYW5jZWxUcmFuc2l0aW9uVGltZXIoKTtcbiAgICB0aGlzLmNhbmNlbFJldHJ5VGltZXIoKTtcbiAgICB0aGlzLmNhbmNlbFdlYlNvY2tldFNsb3dUaW1lcigpO1xuICAgIHRoaXMuY2FuY2VsV2ViU29ja2V0R2l2ZVVwVGltZXIoKTtcbiAgICB0aGlzLmNoZWNrU3VzcGVuZFRpbWVyKGluZGljYXRlZC5zdGF0ZSk7XG4gICAgaWYgKHN0YXRlID09PSBcInN1c3BlbmRlZFwiIHx8IHN0YXRlID09PSBcImNvbm5lY3RlZFwiKSB7XG4gICAgICB0aGlzLmRpc2Nvbm5lY3RlZFJldHJ5Q291bnQgPSAwO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS50ZXJtaW5hbClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IHRoaXMuc3RhdGVzW2luZGljYXRlZC5zdGF0ZV07XG4gICAgbGV0IHJldHJ5RGVsYXkgPSBuZXdTdGF0ZS5yZXRyeURlbGF5O1xuICAgIGlmIChuZXdTdGF0ZS5zdGF0ZSA9PT0gXCJkaXNjb25uZWN0ZWRcIikge1xuICAgICAgdGhpcy5kaXNjb25uZWN0ZWRSZXRyeUNvdW50Kys7XG4gICAgICByZXRyeURlbGF5ID0gZ2V0UmV0cnlUaW1lKG5ld1N0YXRlLnJldHJ5RGVsYXksIHRoaXMuZGlzY29ubmVjdGVkUmV0cnlDb3VudCk7XG4gICAgfVxuICAgIGNvbnN0IGNoYW5nZSA9IG5ldyBjb25uZWN0aW9uc3RhdGVjaGFuZ2VfZGVmYXVsdChcbiAgICAgIHRoaXMuc3RhdGUuc3RhdGUsXG4gICAgICBuZXdTdGF0ZS5zdGF0ZSxcbiAgICAgIHJldHJ5RGVsYXksXG4gICAgICBpbmRpY2F0ZWQuZXJyb3IgfHwgKChfYiA9IChfYTIgPSBjb25uZWN0aW9uZXJyb3JzX2RlZmF1bHQpW25ld1N0YXRlLnN0YXRlXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EyKSlcbiAgICApO1xuICAgIGlmIChyZXRyeUltbWVkaWF0ZWx5KSB7XG4gICAgICBjb25zdCBhdXRvUmVjb25uZWN0ID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gdGhpcy5zdGF0ZXMuZGlzY29ubmVjdGVkKSB7XG4gICAgICAgICAgdGhpcy5sYXN0QXV0b1JlY29ubmVjdEF0dGVtcHQgPSBEYXRlLm5vdygpO1xuICAgICAgICAgIHRoaXMucmVxdWVzdFN0YXRlKHsgc3RhdGU6IFwiY29ubmVjdGluZ1wiIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3Qgc2luY2VMYXN0ID0gdGhpcy5sYXN0QXV0b1JlY29ubmVjdEF0dGVtcHQgJiYgRGF0ZS5ub3coKSAtIHRoaXMubGFzdEF1dG9SZWNvbm5lY3RBdHRlbXB0ICsgMTtcbiAgICAgIGlmIChzaW5jZUxhc3QgJiYgc2luY2VMYXN0IDwgMWUzKSB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5ub3RpZnlTdGF0ZSgpXCIsXG4gICAgICAgICAgXCJMYXN0IHJlY29ubmVjdCBhdHRlbXB0IHdhcyBvbmx5IFwiICsgc2luY2VMYXN0ICsgXCJtcyBhZ28sIHdhaXRpbmcgYW5vdGhlciBcIiArICgxZTMgLSBzaW5jZUxhc3QpICsgXCJtcyBiZWZvcmUgdHJ5aW5nIGFnYWluXCJcbiAgICAgICAgKTtcbiAgICAgICAgc2V0VGltZW91dChhdXRvUmVjb25uZWN0LCAxZTMgLSBzaW5jZUxhc3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUGxhdGZvcm0uQ29uZmlnLm5leHRUaWNrKGF1dG9SZWNvbm5lY3QpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IFwiZGlzY29ubmVjdGVkXCIgfHwgc3RhdGUgPT09IFwic3VzcGVuZGVkXCIpIHtcbiAgICAgIHRoaXMuc3RhcnRSZXRyeVRpbWVyKHJldHJ5RGVsYXkpO1xuICAgIH1cbiAgICBpZiAoc3RhdGUgPT09IFwiZGlzY29ubmVjdGVkXCIgJiYgIXJldHJ5SW1tZWRpYXRlbHkgfHwgc3RhdGUgPT09IFwic3VzcGVuZGVkXCIgfHwgbmV3U3RhdGUudGVybWluYWwpIHtcbiAgICAgIFBsYXRmb3JtLkNvbmZpZy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdEFsbFRyYW5zcG9ydHMoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc3RhdGUgPT0gXCJjb25uZWN0ZWRcIiAmJiAhdGhpcy5hY3RpdmVQcm90b2NvbCkge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLm5vdGlmeVN0YXRlKClcIixcbiAgICAgICAgXCJCcm9rZW4gaW52YXJpYW50OiBhdHRlbXB0ZWQgdG8gZ28gaW50byBjb25uZWN0ZWQgc3RhdGUsIGJ1dCB0aGVyZSBpcyBubyBhY3RpdmUgcHJvdG9jb2xcIlxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5lbmFjdFN0YXRlQ2hhbmdlKGNoYW5nZSk7XG4gICAgaWYgKHRoaXMuc3RhdGUuc2VuZEV2ZW50cykge1xuICAgICAgdGhpcy5zZW5kUXVldWVkTWVzc2FnZXMoKTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnN0YXRlLnF1ZXVlRXZlbnRzKSB7XG4gICAgICB0aGlzLnJlYWx0aW1lLmNoYW5uZWxzLnByb3BvZ2F0ZUNvbm5lY3Rpb25JbnRlcnJ1cHRpb24oc3RhdGUsIGNoYW5nZS5yZWFzb24pO1xuICAgICAgdGhpcy5mYWlsUXVldWVkTWVzc2FnZXMoY2hhbmdlLnJlYXNvbik7XG4gICAgfVxuICB9XG4gIHJlcXVlc3RTdGF0ZShyZXF1ZXN0KSB7XG4gICAgdmFyIF9hMiwgX2I7XG4gICAgY29uc3Qgc3RhdGUgPSByZXF1ZXN0LnN0YXRlO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5yZXF1ZXN0U3RhdGUoKVwiLFxuICAgICAgXCJyZXF1ZXN0ZWQgc3RhdGU6IFwiICsgc3RhdGUgKyBcIjsgY3VycmVudCBzdGF0ZTogXCIgKyB0aGlzLnN0YXRlLnN0YXRlXG4gICAgKTtcbiAgICBpZiAoc3RhdGUgPT0gdGhpcy5zdGF0ZS5zdGF0ZSlcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLmNhbmNlbFdlYlNvY2tldFNsb3dUaW1lcigpO1xuICAgIHRoaXMuY2FuY2VsV2ViU29ja2V0R2l2ZVVwVGltZXIoKTtcbiAgICB0aGlzLmNhbmNlbFRyYW5zaXRpb25UaW1lcigpO1xuICAgIHRoaXMuY2FuY2VsUmV0cnlUaW1lcigpO1xuICAgIHRoaXMuY2hlY2tTdXNwZW5kVGltZXIoc3RhdGUpO1xuICAgIGlmIChzdGF0ZSA9PSBcImNvbm5lY3RpbmdcIiAmJiB0aGlzLnN0YXRlLnN0YXRlID09IFwiY29ubmVjdGVkXCIpXG4gICAgICByZXR1cm47XG4gICAgaWYgKHN0YXRlID09IFwiY2xvc2luZ1wiICYmIHRoaXMuc3RhdGUuc3RhdGUgPT0gXCJjbG9zZWRcIilcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IHRoaXMuc3RhdGVzW3N0YXRlXSwgY2hhbmdlID0gbmV3IGNvbm5lY3Rpb25zdGF0ZWNoYW5nZV9kZWZhdWx0KFxuICAgICAgdGhpcy5zdGF0ZS5zdGF0ZSxcbiAgICAgIG5ld1N0YXRlLnN0YXRlLFxuICAgICAgbnVsbCxcbiAgICAgIHJlcXVlc3QuZXJyb3IgfHwgKChfYiA9IChfYTIgPSBjb25uZWN0aW9uZXJyb3JzX2RlZmF1bHQpW25ld1N0YXRlLnN0YXRlXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EyKSlcbiAgICApO1xuICAgIHRoaXMuZW5hY3RTdGF0ZUNoYW5nZShjaGFuZ2UpO1xuICAgIGlmIChzdGF0ZSA9PSBcImNvbm5lY3RpbmdcIikge1xuICAgICAgUGxhdGZvcm0uQ29uZmlnLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgdGhpcy5zdGFydENvbm5lY3QoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc3RhdGUgPT0gXCJjbG9zaW5nXCIpIHtcbiAgICAgIHRoaXMuY2xvc2VJbXBsKCk7XG4gICAgfVxuICB9XG4gIHN0YXJ0Q29ubmVjdCgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZSAhPT0gdGhpcy5zdGF0ZXMuY29ubmVjdGluZykge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLnN0YXJ0Q29ubmVjdCgpXCIsXG4gICAgICAgIFwiTXVzdCBiZSBpbiBjb25uZWN0aW5nIHN0YXRlIHRvIGNvbm5lY3QsIGJ1dCB3YXMgXCIgKyB0aGlzLnN0YXRlLnN0YXRlXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBhdXRoID0gdGhpcy5yZWFsdGltZS5hdXRoO1xuICAgIGNvbnN0IGNvbm5lY3RDb3VudCA9ICsrdGhpcy5jb25uZWN0Q291bnRlcjtcbiAgICBjb25zdCBjb25uZWN0ID0gKCkgPT4ge1xuICAgICAgdGhpcy5jaGVja0Nvbm5lY3Rpb25TdGF0ZUZyZXNobmVzcygpO1xuICAgICAgdGhpcy5nZXRUcmFuc3BvcnRQYXJhbXMoKHRyYW5zcG9ydFBhcmFtcykgPT4ge1xuICAgICAgICBpZiAodHJhbnNwb3J0UGFyYW1zLm1vZGUgPT09IFwicmVjb3ZlclwiICYmIHRyYW5zcG9ydFBhcmFtcy5vcHRpb25zLnJlY292ZXIpIHtcbiAgICAgICAgICBjb25zdCByZWNvdmVyeUNvbnRleHQgPSBkZWNvZGVSZWNvdmVyeUtleSh0cmFuc3BvcnRQYXJhbXMub3B0aW9ucy5yZWNvdmVyKTtcbiAgICAgICAgICBpZiAocmVjb3ZlcnlDb250ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLnJlYWx0aW1lLmNoYW5uZWxzLnJlY292ZXJDaGFubmVscyhyZWNvdmVyeUNvbnRleHQuY2hhbm5lbFNlcmlhbHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29ubmVjdENvdW50ICE9PSB0aGlzLmNvbm5lY3RDb3VudGVyKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29ubmVjdEltcGwodHJhbnNwb3J0UGFyYW1zLCBjb25uZWN0Q291bnQpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJDb25uZWN0aW9uTWFuYWdlci5zdGFydENvbm5lY3QoKVwiLCBcInN0YXJ0aW5nIGNvbm5lY3Rpb25cIik7XG4gICAgdGhpcy5zdGFydFN1c3BlbmRUaW1lcigpO1xuICAgIHRoaXMuc3RhcnRUcmFuc2l0aW9uVGltZXIodGhpcy5zdGF0ZXMuY29ubmVjdGluZyk7XG4gICAgaWYgKGF1dGgubWV0aG9kID09PSBcImJhc2ljXCIpIHtcbiAgICAgIGNvbm5lY3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYXV0aENiID0gKGVycikgPT4ge1xuICAgICAgICBpZiAoY29ubmVjdENvdW50ICE9PSB0aGlzLmNvbm5lY3RDb3VudGVyKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICB0aGlzLmFjdE9uRXJyb3JGcm9tQXV0aG9yaXplKGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMuZXJyb3JSZWFzb24gJiYgYXV0aF9kZWZhdWx0LmlzVG9rZW5FcnIodGhpcy5lcnJvclJlYXNvbikpIHtcbiAgICAgICAgd2hlblByb21pc2VTZXR0bGVzKGF1dGguX2ZvcmNlTmV3VG9rZW4obnVsbCwgbnVsbCksIGF1dGhDYik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aGVuUHJvbWlzZVNldHRsZXMoYXV0aC5fZW5zdXJlVmFsaWRBdXRoQ3JlZGVudGlhbHMoZmFsc2UpLCBhdXRoQ2IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKlxuICAgKiB0aGVyZSBhcmUsIGF0IG1vc3QsIHR3byB0cmFuc3BvcnRzIGF2YWlsYWJsZSB3aXRoIHdoaWNoIGEgY29ubmVjdGlvbiBtYXlcbiAgICogYmUgYXR0ZW1wdGVkOiB3ZWJfc29ja2V0IGFuZC9vciBhIGJhc2UgdHJhbnNwb3J0ICh4aHJfcG9sbGluZyBpbiBicm93c2VycyxcbiAgICogY29tZXQgaW4gbm9kZWpzKS4gd2ViX3NvY2tldCBpcyBhbHdheXMgcHJlZmVycmVkLCBhbmQgdGhlIGJhc2UgdHJhbnNwb3J0IGlzXG4gICAqIG9ubHkgdXNlZCBpbiBjYXNlIHdlYl9zb2NrZXQgY29ubmVjdGl2aXR5IGFwcGVhcnMgdG8gYmUgdW5hdmFpbGFibGUuXG4gICAqXG4gICAqIGNvbm5lY3RJbXBsIGJlZ2lucyB0aGUgdHJhbnNwb3J0IHNlbGVjdGlvbiBwcm9jZXNzIGJ5IGNoZWNraW5nIHdoaWNoIHRyYW5zcG9ydHNcbiAgICogYXJlIGF2YWlsYWJsZSwgYW5kIGlmIHRoZXJlIGlzIGEgY2FjaGVkIHByZWZlcmVuY2UuIEl0IHRoZW4gZGVmZXJzIHRvIHRoZVxuICAgKiB0cmFuc3BvcnQtc3BlY2lmaWMgY29ubmVjdCBtZXRob2RzOiBjb25uZWN0V3MgYW5kIGNvbm5lY3RCYXNlLlxuICAgKlxuICAgKiBJdCBpcyBhbHNvIHJlc3BvbnNpYmxlIGZvciBpbnZhbGlkYXRpbmcgdGhlIGNhY2hlIGluIHRoZSBjYXNlIHRoYXQgYSBiYXNlXG4gICAqIHRyYW5zcG9ydCBwcmVmZXJlbmNlIGlzIHN0b3JlZCBidXQgd2ViIHNvY2tldCBjb25uZWN0aXZpdHkgaXMgbm93IGF2YWlsYWJsZS5cbiAgICpcbiAgICogaGFuZGxpbmcgb2YgdGhlIGNhc2Ugd2hlcmUgd2UgbmVlZCB0byBmYWlsb3ZlciBmcm9tIHdlYl9zb2NrZXQgdG8gdGhlIGJhc2VcbiAgICogdHJhbnNwb3J0IGlzIGltcGxlbWVudGVkIGluIHRoZSBjb25uZWN0V3MgbWV0aG9kLlxuICAgKi9cbiAgY29ubmVjdEltcGwodHJhbnNwb3J0UGFyYW1zLCBjb25uZWN0Q291bnQpIHtcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGUuc3RhdGU7XG4gICAgaWYgKHN0YXRlICE9PSB0aGlzLnN0YXRlcy5jb25uZWN0aW5nLnN0YXRlKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuY29ubmVjdEltcGwoKVwiLFxuICAgICAgICBcIk11c3QgYmUgaW4gY29ubmVjdGluZyBzdGF0ZSB0byBjb25uZWN0LCBidXQgd2FzIFwiICsgc3RhdGVcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRyYW5zcG9ydFByZWZlcmVuY2UgPSB0aGlzLmdldFRyYW5zcG9ydFByZWZlcmVuY2UoKTtcbiAgICBpZiAodHJhbnNwb3J0UHJlZmVyZW5jZSAmJiB0cmFuc3BvcnRQcmVmZXJlbmNlID09PSB0aGlzLmJhc2VUcmFuc3BvcnQgJiYgdGhpcy53ZWJTb2NrZXRUcmFuc3BvcnRBdmFpbGFibGUpIHtcbiAgICAgIHRoaXMuY2hlY2tXc0Nvbm5lY3Rpdml0eSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLndzQ2hlY2tSZXN1bHQgPSB0cnVlO1xuICAgICAgICB0aGlzLmFiYW5kb25lZFdlYlNvY2tldCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnVucGVyc2lzdFRyYW5zcG9ydFByZWZlcmVuY2UoKTtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IHRoaXMuc3RhdGVzLmNvbm5lY3RpbmcpIHtcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuY29ubmVjdEltcGwoKTpcIixcbiAgICAgICAgICAgIFwid2ViIHNvY2tldCBjb25uZWN0aXZpdHkgYXZhaWxhYmxlLCBjYW5jZWxsaW5nIGNvbm5lY3Rpb24gYXR0ZW1wdCB3aXRoIFwiICsgdGhpcy5iYXNlVHJhbnNwb3J0XG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3RBbGxUcmFuc3BvcnRzKCk7XG4gICAgICAgICAgdGhpcy5jb25uZWN0V3ModHJhbnNwb3J0UGFyYW1zLCArK3RoaXMuY29ubmVjdENvdW50ZXIpO1xuICAgICAgICB9XG4gICAgICB9KS5jYXRjaChub29wKTtcbiAgICB9XG4gICAgaWYgKHRyYW5zcG9ydFByZWZlcmVuY2UgJiYgdHJhbnNwb3J0UHJlZmVyZW5jZSA9PT0gdGhpcy5iYXNlVHJhbnNwb3J0IHx8IHRoaXMuYmFzZVRyYW5zcG9ydCAmJiAhdGhpcy53ZWJTb2NrZXRUcmFuc3BvcnRBdmFpbGFibGUpIHtcbiAgICAgIHRoaXMuY29ubmVjdEJhc2UodHJhbnNwb3J0UGFyYW1zLCBjb25uZWN0Q291bnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbm5lY3RXcyh0cmFuc3BvcnRQYXJhbXMsIGNvbm5lY3RDb3VudCk7XG4gICAgfVxuICB9XG4gIC8qXG4gICAqIGNvbm5lY3RXcyBzdGFydHMgdHdvIHRpbWVycyB0byBtb25pdG9yIHRoZSBzdWNjZXNzIG9mIGEgd2ViX3NvY2tldCBjb25uZWN0aW9uIGF0dGVtcHQ6XG4gICAqIC0gd2ViU29ja2V0U2xvd1RpbWVyOiBpZiB0aGlzIHRpbWVyIGZpcmVzIGJlZm9yZSB0aGUgY29ubmVjdGlvbiBzdWNjZWVkcyxcbiAgICogICBjbSB3aWxsIHNpbXVsdGFuZW91c2x5IGNoZWNrIHdlYnNvY2tldCBhbmQgaHR0cC94aHIgY29ubmVjdGl2aXR5LiBpZiB0aGUgaHR0cFxuICAgKiAgIGNvbm5lY3Rpdml0eSBjaGVjayBmYWlscywgd2UgZ2l2ZSB1cCB0aGUgY29ubmVjdGlvbiBzZXF1ZW5jZSBlbnRpcmVseSBhbmRcbiAgICogICB0cmFuc2l0aW9uIHRvIGRpc2Nvbm5lY3RlZC4gaWYgdGhlIHdlYnNvY2tldCBjb25uZWN0aXZpdHkgY2hlY2sgZmFpbHMgdGhlblxuICAgKiAgIHdlIGFzc3VtZSBubyB3cyBjb25uZWN0aXZpdHkgYW5kIGZhaWxvdmVyIHRvIGJhc2UgdHJhbnNwb3J0LiBpbiB0aGUgY2FzZSB0aGF0XG4gICAqICAgdGhlIGNoZWNrcyBzdWNjZWVkLCB3ZSBjb250aW51ZSB3aXRoIHdlYnNvY2tldCBhbmQgd2FpdCBmb3IgaXQgdG8gdHJ5IGZhbGxiYWNrIGhvc3RzXG4gICAqICAgYW5kLCBpZiB1bnN1Y2Nlc3NmdWwsIHVsdGltYXRlbHkgdHJhbnNpdGlvbiB0byBkaXNjb25uZWN0ZWQuXG4gICAqIC0gd2ViU29ja2V0R2l2ZVVwVGltZXI6IGlmIHRoaXMgdGltZXIgZmlyZXMsIGFuZCB0aGUgcHJlY2VkaW5nIHdlYnNvY2tldFxuICAgKiAgIGNvbm5lY3Rpdml0eSBjaGVjayBpcyBzdGlsbCBwZW5kaW5nIHRoZW4gd2UgYXNzdW1lIHRoYXQgdGhlcmUgaXMgYW4gaXNzdWVcbiAgICogICB3aXRoIHRoZSB0cmFuc3BvcnQgYW5kIGZhbGxiYWNrIHRvIGJhc2UgdHJhbnNwb3J0LlxuICAgKi9cbiAgY29ubmVjdFdzKHRyYW5zcG9ydFBhcmFtcywgY29ubmVjdENvdW50KSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sIFwiQ29ubmVjdGlvbk1hbmFnZXIuY29ubmVjdFdzKClcIik7XG4gICAgdGhpcy5zdGFydFdlYlNvY2tldFNsb3dUaW1lcigpO1xuICAgIHRoaXMuc3RhcnRXZWJTb2NrZXRHaXZlVXBUaW1lcih0cmFuc3BvcnRQYXJhbXMpO1xuICAgIHRoaXMudHJ5VHJhbnNwb3J0V2l0aEZhbGxiYWNrcyhcIndlYl9zb2NrZXRcIiwgdHJhbnNwb3J0UGFyYW1zLCB0cnVlLCBjb25uZWN0Q291bnQsICgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLndzQ2hlY2tSZXN1bHQgIT09IGZhbHNlICYmICF0aGlzLmFiYW5kb25lZFdlYlNvY2tldDtcbiAgICB9KTtcbiAgfVxuICBjb25uZWN0QmFzZSh0cmFuc3BvcnRQYXJhbXMsIGNvbm5lY3RDb3VudCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIkNvbm5lY3Rpb25NYW5hZ2VyLmNvbm5lY3RCYXNlKClcIik7XG4gICAgaWYgKHRoaXMuYmFzZVRyYW5zcG9ydCkge1xuICAgICAgdGhpcy50cnlUcmFuc3BvcnRXaXRoRmFsbGJhY2tzKHRoaXMuYmFzZVRyYW5zcG9ydCwgdHJhbnNwb3J0UGFyYW1zLCBmYWxzZSwgY29ubmVjdENvdW50LCAoKSA9PiB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ub3RpZnlTdGF0ZSh7XG4gICAgICAgIHN0YXRlOiBcImRpc2Nvbm5lY3RlZFwiLFxuICAgICAgICBlcnJvcjogbmV3IEVycm9ySW5mbyhcIk5vIHRyYW5zcG9ydHMgbGVmdCB0byB0cnlcIiwgOGU0LCA0MDQpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgdHJ5VHJhbnNwb3J0V2l0aEZhbGxiYWNrcyh0cmFuc3BvcnROYW1lLCB0cmFuc3BvcnRQYXJhbXMsIHdzLCBjb25uZWN0Q291bnQsIHNob3VsZENvbnRpbnVlKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLnRyeVRyYW5zcG9ydFdpdGhGYWxsYmFja3MoKVwiLFxuICAgICAgdHJhbnNwb3J0TmFtZVxuICAgICk7XG4gICAgY29uc3QgZ2l2ZVVwID0gKGVycikgPT4ge1xuICAgICAgdGhpcy5ub3RpZnlTdGF0ZSh7IHN0YXRlOiB0aGlzLnN0YXRlcy5jb25uZWN0aW5nLmZhaWxTdGF0ZSwgZXJyb3I6IGVyciB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGNhbmRpZGF0ZUhvc3RzID0gd3MgPyB0aGlzLndzSG9zdHMuc2xpY2UoKSA6IHRoaXMuaHR0cEhvc3RzLnNsaWNlKCk7XG4gICAgY29uc3QgaG9zdEF0dGVtcHRDYiA9IChmYXRhbCwgdHJhbnNwb3J0KSA9PiB7XG4gICAgICBpZiAoY29ubmVjdENvdW50ICE9PSB0aGlzLmNvbm5lY3RDb3VudGVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghc2hvdWxkQ29udGludWUoKSkge1xuICAgICAgICBpZiAodHJhbnNwb3J0KSB7XG4gICAgICAgICAgdHJhbnNwb3J0LmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIXRyYW5zcG9ydCAmJiAhZmF0YWwpIHtcbiAgICAgICAgdHJ5RmFsbGJhY2tIb3N0cygpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaG9zdCA9IGNhbmRpZGF0ZUhvc3RzLnNoaWZ0KCk7XG4gICAgaWYgKCFob3N0KSB7XG4gICAgICBnaXZlVXAobmV3IEVycm9ySW5mbyhcIlVuYWJsZSB0byBjb25uZWN0IChubyBhdmFpbGFibGUgaG9zdClcIiwgODAwMDMsIDQwNCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cmFuc3BvcnRQYXJhbXMuaG9zdCA9IGhvc3Q7XG4gICAgY29uc3QgdHJ5RmFsbGJhY2tIb3N0cyA9ICgpID0+IHtcbiAgICAgIGlmICghY2FuZGlkYXRlSG9zdHMubGVuZ3RoKSB7XG4gICAgICAgIGdpdmVVcChuZXcgRXJyb3JJbmZvKFwiVW5hYmxlIHRvIGNvbm5lY3QgKGFuZCBubyBtb3JlIGZhbGxiYWNrIGhvc3RzIHRvIHRyeSlcIiwgODAwMDMsIDQwNCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMucmVhbHRpbWUuaHR0cC5jaGVja0Nvbm5lY3Rpdml0eSkge1xuICAgICAgICBnaXZlVXAobmV3IFBhcnRpYWxFcnJvckluZm8oXCJJbnRlcm5hbCBlcnJvcjogSHR0cC5jaGVja0Nvbm5lY3Rpdml0eSBub3Qgc2V0XCIsIG51bGwsIDUwMCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3aGVuUHJvbWlzZVNldHRsZXMoXG4gICAgICAgIHRoaXMucmVhbHRpbWUuaHR0cC5jaGVja0Nvbm5lY3Rpdml0eSgpLFxuICAgICAgICAoZXJyLCBjb25uZWN0aXZpdHkpID0+IHtcbiAgICAgICAgICBpZiAoY29ubmVjdENvdW50ICE9PSB0aGlzLmNvbm5lY3RDb3VudGVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghc2hvdWxkQ29udGludWUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBnaXZlVXAoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFjb25uZWN0aXZpdHkpIHtcbiAgICAgICAgICAgIGdpdmVVcChuZXcgRXJyb3JJbmZvKFwiVW5hYmxlIHRvIGNvbm5lY3QgKG5ldHdvcmsgdW5yZWFjaGFibGUpXCIsIDgwMDAzLCA0MDQpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJhbnNwb3J0UGFyYW1zLmhvc3QgPSBhcnJQb3BSYW5kb21FbGVtZW50KGNhbmRpZGF0ZUhvc3RzKTtcbiAgICAgICAgICB0aGlzLnRyeUFUcmFuc3BvcnQodHJhbnNwb3J0UGFyYW1zLCB0cmFuc3BvcnROYW1lLCBob3N0QXR0ZW1wdENiKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9O1xuICAgIGlmICh0aGlzLmZvcmNlRmFsbGJhY2tIb3N0ICYmIGNhbmRpZGF0ZUhvc3RzLmxlbmd0aCkge1xuICAgICAgdGhpcy5mb3JjZUZhbGxiYWNrSG9zdCA9IGZhbHNlO1xuICAgICAgdHJ5RmFsbGJhY2tIb3N0cygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnRyeUFUcmFuc3BvcnQodHJhbnNwb3J0UGFyYW1zLCB0cmFuc3BvcnROYW1lLCBob3N0QXR0ZW1wdENiKTtcbiAgfVxuICBjbG9zZUltcGwoKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQ29ubmVjdGlvbk1hbmFnZXIuY2xvc2VJbXBsKClcIiwgXCJjbG9zaW5nIGNvbm5lY3Rpb25cIik7XG4gICAgdGhpcy5jYW5jZWxTdXNwZW5kVGltZXIoKTtcbiAgICB0aGlzLnN0YXJ0VHJhbnNpdGlvblRpbWVyKHRoaXMuc3RhdGVzLmNsb3NpbmcpO1xuICAgIGlmICh0aGlzLnBlbmRpbmdUcmFuc3BvcnQpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5jbG9zZUltcGwoKVwiLFxuICAgICAgICBcIkNsb3NpbmcgcGVuZGluZyB0cmFuc3BvcnQ6IFwiICsgdGhpcy5wZW5kaW5nVHJhbnNwb3J0XG4gICAgICApO1xuICAgICAgdGhpcy5wZW5kaW5nVHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmFjdGl2ZVByb3RvY29sKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuY2xvc2VJbXBsKClcIixcbiAgICAgICAgXCJDbG9zaW5nIGFjdGl2ZSB0cmFuc3BvcnQ6IFwiICsgdGhpcy5hY3RpdmVQcm90b2NvbC5nZXRUcmFuc3BvcnQoKVxuICAgICAgKTtcbiAgICAgIHRoaXMuYWN0aXZlUHJvdG9jb2wuZ2V0VHJhbnNwb3J0KCkuY2xvc2UoKTtcbiAgICB9XG4gICAgdGhpcy5ub3RpZnlTdGF0ZSh7IHN0YXRlOiBcImNsb3NlZFwiIH0pO1xuICB9XG4gIG9uQXV0aFVwZGF0ZWQodG9rZW5EZXRhaWxzLCBjYWxsYmFjaykge1xuICAgIHZhciBfYTI7XG4gICAgc3dpdGNoICh0aGlzLnN0YXRlLnN0YXRlKSB7XG4gICAgICBjYXNlIFwiY29ubmVjdGVkXCI6IHtcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLm9uQXV0aFVwZGF0ZWQoKVwiLFxuICAgICAgICAgIFwiU2VuZGluZyBBVVRIIG1lc3NhZ2Ugb24gYWN0aXZlIHRyYW5zcG9ydFwiXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVRyYW5zcG9ydCA9IChfYTIgPSB0aGlzLmFjdGl2ZVByb3RvY29sKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmdldFRyYW5zcG9ydCgpO1xuICAgICAgICBpZiAoYWN0aXZlVHJhbnNwb3J0ICYmIGFjdGl2ZVRyYW5zcG9ydC5vbkF1dGhVcGRhdGVkKSB7XG4gICAgICAgICAgYWN0aXZlVHJhbnNwb3J0Lm9uQXV0aFVwZGF0ZWQodG9rZW5EZXRhaWxzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhdXRoTXNnID0gZnJvbVZhbHVlczMoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uczIuQVVUSCxcbiAgICAgICAgICBhdXRoOiB7XG4gICAgICAgICAgICBhY2Nlc3NUb2tlbjogdG9rZW5EZXRhaWxzLnRva2VuXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZW5kKGF1dGhNc2cpO1xuICAgICAgICBjb25zdCBzdWNjZXNzTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5vZmYoZmFpbHVyZUxpc3RlbmVyKTtcbiAgICAgICAgICBjYWxsYmFjayhudWxsLCB0b2tlbkRldGFpbHMpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBmYWlsdXJlTGlzdGVuZXIgPSAoc3RhdGVDaGFuZ2UpID0+IHtcbiAgICAgICAgICBpZiAoc3RhdGVDaGFuZ2UuY3VycmVudCA9PT0gXCJmYWlsZWRcIikge1xuICAgICAgICAgICAgdGhpcy5vZmYoc3VjY2Vzc0xpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMub2ZmKGZhaWx1cmVMaXN0ZW5lcik7XG4gICAgICAgICAgICBjYWxsYmFjayhzdGF0ZUNoYW5nZS5yZWFzb24gfHwgdGhpcy5nZXRTdGF0ZUVycm9yKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbmNlKFwiY29ubmVjdGlvbmRldGFpbHNcIiwgc3VjY2Vzc0xpc3RlbmVyKTtcbiAgICAgICAgdGhpcy5vbihcImNvbm5lY3Rpb25zdGF0ZVwiLCBmYWlsdXJlTGlzdGVuZXIpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb25uZWN0aW5nXCI6XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5vbkF1dGhVcGRhdGVkKClcIixcbiAgICAgICAgICBcIkFib3J0aW5nIGN1cnJlbnQgY29ubmVjdGlvbiBhdHRlbXB0cyBpbiBvcmRlciB0byBzdGFydCBhZ2FpbiB3aXRoIHRoZSBuZXcgYXV0aCBkZXRhaWxzXCJcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0QWxsVHJhbnNwb3J0cygpO1xuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIub25BdXRoVXBkYXRlZCgpXCIsXG4gICAgICAgICAgXCJDb25uZWN0aW9uIHN0YXRlIGlzIFwiICsgdGhpcy5zdGF0ZS5zdGF0ZSArIFwiOyB3YWl0aW5nIHVudGlsIGVpdGhlciBjb25uZWN0ZWQgb3IgZmFpbGVkXCJcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgbGlzdGVuZXIgPSAoc3RhdGVDaGFuZ2UpID0+IHtcbiAgICAgICAgICBzd2l0Y2ggKHN0YXRlQ2hhbmdlLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjb25uZWN0ZWRcIjpcbiAgICAgICAgICAgICAgdGhpcy5vZmYobGlzdGVuZXIpO1xuICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCB0b2tlbkRldGFpbHMpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJmYWlsZWRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJjbG9zZWRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzdXNwZW5kZWRcIjpcbiAgICAgICAgICAgICAgdGhpcy5vZmYobGlzdGVuZXIpO1xuICAgICAgICAgICAgICBjYWxsYmFjayhzdGF0ZUNoYW5nZS5yZWFzb24gfHwgdGhpcy5nZXRTdGF0ZUVycm9yKCkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbihcImNvbm5lY3Rpb25zdGF0ZVwiLCBsaXN0ZW5lcik7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnN0YXRlID09PSBcImNvbm5lY3RpbmdcIikge1xuICAgICAgICAgIHRoaXMuc3RhcnRDb25uZWN0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZXF1ZXN0U3RhdGUoeyBzdGF0ZTogXCJjb25uZWN0aW5nXCIgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZGlzY29ubmVjdEFsbFRyYW5zcG9ydHMoKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLmRpc2Nvbm5lY3RBbGxUcmFuc3BvcnRzKClcIixcbiAgICAgIFwiRGlzY29ubmVjdGluZyBhbGwgdHJhbnNwb3J0c1wiXG4gICAgKTtcbiAgICB0aGlzLmNvbm5lY3RDb3VudGVyKys7XG4gICAgaWYgKHRoaXMucGVuZGluZ1RyYW5zcG9ydCkge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICBcIkNvbm5lY3Rpb25NYW5hZ2VyLmRpc2Nvbm5lY3RBbGxUcmFuc3BvcnRzKClcIixcbiAgICAgICAgXCJEaXNjb25uZWN0aW5nIHBlbmRpbmcgdHJhbnNwb3J0OiBcIiArIHRoaXMucGVuZGluZ1RyYW5zcG9ydFxuICAgICAgKTtcbiAgICAgIHRoaXMucGVuZGluZ1RyYW5zcG9ydC5kaXNjb25uZWN0KCk7XG4gICAgfVxuICAgIGRlbGV0ZSB0aGlzLnBlbmRpbmdUcmFuc3BvcnQ7XG4gICAgaWYgKHRoaXMucHJvcG9zZWRUcmFuc3BvcnQpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5kaXNjb25uZWN0QWxsVHJhbnNwb3J0cygpXCIsXG4gICAgICAgIFwiRGlzY29ubmVjdGluZyBwcm9wb3NlZCB0cmFuc3BvcnQ6IFwiICsgdGhpcy5wZW5kaW5nVHJhbnNwb3J0XG4gICAgICApO1xuICAgICAgdGhpcy5wcm9wb3NlZFRyYW5zcG9ydC5kaXNjb25uZWN0KCk7XG4gICAgfVxuICAgIGRlbGV0ZSB0aGlzLnBlbmRpbmdUcmFuc3BvcnQ7XG4gICAgaWYgKHRoaXMuYWN0aXZlUHJvdG9jb2wpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgICAgXCJDb25uZWN0aW9uTWFuYWdlci5kaXNjb25uZWN0QWxsVHJhbnNwb3J0cygpXCIsXG4gICAgICAgIFwiRGlzY29ubmVjdGluZyBhY3RpdmUgdHJhbnNwb3J0OiBcIiArIHRoaXMuYWN0aXZlUHJvdG9jb2wuZ2V0VHJhbnNwb3J0KClcbiAgICAgICk7XG4gICAgICB0aGlzLmFjdGl2ZVByb3RvY29sLmdldFRyYW5zcG9ydCgpLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gIH1cbiAgLyoqKioqKioqKioqKioqKioqKlxuICAgKiBldmVudCBxdWV1ZWluZ1xuICAgKioqKioqKioqKioqKioqKioqL1xuICBzZW5kKG1zZywgcXVldWVFdmVudCwgY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IG5vb3A7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIGlmIChzdGF0ZS5zZW5kRXZlbnRzKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTywgXCJDb25uZWN0aW9uTWFuYWdlci5zZW5kKClcIiwgXCJzZW5kaW5nIGV2ZW50XCIpO1xuICAgICAgdGhpcy5zZW5kSW1wbChuZXcgUGVuZGluZ01lc3NhZ2UobXNnLCBjYWxsYmFjaykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzaG91bGRRdWV1ZSA9IHF1ZXVlRXZlbnQgJiYgc3RhdGUucXVldWVFdmVudHM7XG4gICAgaWYgKCFzaG91bGRRdWV1ZSkge1xuICAgICAgY29uc3QgZXJyID0gXCJyZWplY3RpbmcgZXZlbnQsIHF1ZXVlRXZlbnQgd2FzIFwiICsgcXVldWVFdmVudCArIFwiLCBzdGF0ZSB3YXMgXCIgKyBzdGF0ZS5zdGF0ZTtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIkNvbm5lY3Rpb25NYW5hZ2VyLnNlbmQoKVwiLCBlcnIpO1xuICAgICAgY2FsbGJhY2sodGhpcy5lcnJvclJlYXNvbiB8fCBuZXcgRXJyb3JJbmZvKGVyciwgOWU0LCA0MDApKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMubG9nZ2VyLnNob3VsZExvZyhsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8pKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuc2VuZCgpXCIsXG4gICAgICAgIFwicXVldWVpbmcgbXNnOyBcIiArIHN0cmluZ2lmeShtc2csIHRoaXMucmVhbHRpbWUuX1JlYWx0aW1lUHJlc2VuY2UpXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnF1ZXVlKG1zZywgY2FsbGJhY2spO1xuICB9XG4gIHNlbmRJbXBsKHBlbmRpbmdNZXNzYWdlKSB7XG4gICAgY29uc3QgbXNnID0gcGVuZGluZ01lc3NhZ2UubWVzc2FnZTtcbiAgICBpZiAocGVuZGluZ01lc3NhZ2UuYWNrUmVxdWlyZWQgJiYgIXBlbmRpbmdNZXNzYWdlLnNlbmRBdHRlbXB0ZWQpIHtcbiAgICAgIG1zZy5tc2dTZXJpYWwgPSB0aGlzLm1zZ1NlcmlhbCsrO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgdGhpcy5hY3RpdmVQcm90b2NvbC5zZW5kKHBlbmRpbmdNZXNzYWdlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuc2VuZEltcGwoKVwiLFxuICAgICAgICBcIlVuZXhwZWN0ZWQgZXhjZXB0aW9uIGluIHRyYW5zcG9ydC5zZW5kKCk6IFwiICsgZS5zdGFja1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcXVldWUobXNnLCBjYWxsYmFjaykge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIkNvbm5lY3Rpb25NYW5hZ2VyLnF1ZXVlKClcIiwgXCJxdWV1ZWluZyBldmVudFwiKTtcbiAgICBjb25zdCBsYXN0UXVldWVkID0gdGhpcy5xdWV1ZWRNZXNzYWdlcy5sYXN0KCk7XG4gICAgY29uc3QgbWF4U2l6ZSA9IHRoaXMub3B0aW9ucy5tYXhNZXNzYWdlU2l6ZTtcbiAgICBpZiAobGFzdFF1ZXVlZCAmJiAhbGFzdFF1ZXVlZC5zZW5kQXR0ZW1wdGVkICYmIGJ1bmRsZVdpdGgobGFzdFF1ZXVlZC5tZXNzYWdlLCBtc2csIG1heFNpemUpKSB7XG4gICAgICBpZiAoIWxhc3RRdWV1ZWQubWVyZ2VkKSB7XG4gICAgICAgIGxhc3RRdWV1ZWQuY2FsbGJhY2sgPSBtdWx0aWNhc3Rlcl9kZWZhdWx0LmNyZWF0ZSh0aGlzLmxvZ2dlciwgW2xhc3RRdWV1ZWQuY2FsbGJhY2tdKTtcbiAgICAgICAgbGFzdFF1ZXVlZC5tZXJnZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgbGFzdFF1ZXVlZC5jYWxsYmFjay5wdXNoKGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5xdWV1ZWRNZXNzYWdlcy5wdXNoKG5ldyBQZW5kaW5nTWVzc2FnZShtc2csIGNhbGxiYWNrKSk7XG4gICAgfVxuICB9XG4gIHNlbmRRdWV1ZWRNZXNzYWdlcygpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTyxcbiAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuc2VuZFF1ZXVlZE1lc3NhZ2VzKClcIixcbiAgICAgIFwic2VuZGluZyBcIiArIHRoaXMucXVldWVkTWVzc2FnZXMuY291bnQoKSArIFwiIHF1ZXVlZCBtZXNzYWdlc1wiXG4gICAgKTtcbiAgICBsZXQgcGVuZGluZ01lc3NhZ2U7XG4gICAgd2hpbGUgKHBlbmRpbmdNZXNzYWdlID0gdGhpcy5xdWV1ZWRNZXNzYWdlcy5zaGlmdCgpKVxuICAgICAgdGhpcy5zZW5kSW1wbChwZW5kaW5nTWVzc2FnZSk7XG4gIH1cbiAgcXVldWVQZW5kaW5nTWVzc2FnZXMocGVuZGluZ01lc3NhZ2VzKSB7XG4gICAgaWYgKHBlbmRpbmdNZXNzYWdlcyAmJiBwZW5kaW5nTWVzc2FnZXMubGVuZ3RoKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIucXVldWVQZW5kaW5nTWVzc2FnZXMoKVwiLFxuICAgICAgICBcInF1ZXVlaW5nIFwiICsgcGVuZGluZ01lc3NhZ2VzLmxlbmd0aCArIFwiIHBlbmRpbmcgbWVzc2FnZXNcIlxuICAgICAgKTtcbiAgICAgIHRoaXMucXVldWVkTWVzc2FnZXMucHJlcGVuZChwZW5kaW5nTWVzc2FnZXMpO1xuICAgIH1cbiAgfVxuICBmYWlsUXVldWVkTWVzc2FnZXMoZXJyKSB7XG4gICAgY29uc3QgbnVtUXVldWVkID0gdGhpcy5xdWV1ZWRNZXNzYWdlcy5jb3VudCgpO1xuICAgIGlmIChudW1RdWV1ZWQgPiAwKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIuZmFpbFF1ZXVlZE1lc3NhZ2VzKClcIixcbiAgICAgICAgXCJmYWlsaW5nIFwiICsgbnVtUXVldWVkICsgXCIgcXVldWVkIG1lc3NhZ2VzLCBlcnIgPSBcIiArIGluc3BlY3RFcnJvcihlcnIpXG4gICAgICApO1xuICAgICAgdGhpcy5xdWV1ZWRNZXNzYWdlcy5jb21wbGV0ZUFsbE1lc3NhZ2VzKGVycik7XG4gICAgfVxuICB9XG4gIG9uQ2hhbm5lbE1lc3NhZ2UobWVzc2FnZSwgdHJhbnNwb3J0KSB7XG4gICAgdGhpcy5wZW5kaW5nQ2hhbm5lbE1lc3NhZ2VzU3RhdGUucXVldWUucHVzaCh7IG1lc3NhZ2UsIHRyYW5zcG9ydCB9KTtcbiAgICBpZiAoIXRoaXMucGVuZGluZ0NoYW5uZWxNZXNzYWdlc1N0YXRlLmlzUHJvY2Vzc2luZykge1xuICAgICAgdGhpcy5wcm9jZXNzTmV4dFBlbmRpbmdDaGFubmVsTWVzc2FnZSgpO1xuICAgIH1cbiAgfVxuICBwcm9jZXNzTmV4dFBlbmRpbmdDaGFubmVsTWVzc2FnZSgpIHtcbiAgICBpZiAodGhpcy5wZW5kaW5nQ2hhbm5lbE1lc3NhZ2VzU3RhdGUucXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5wZW5kaW5nQ2hhbm5lbE1lc3NhZ2VzU3RhdGUuaXNQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHBlbmRpbmdDaGFubmVsTWVzc2FnZSA9IHRoaXMucGVuZGluZ0NoYW5uZWxNZXNzYWdlc1N0YXRlLnF1ZXVlLnNoaWZ0KCk7XG4gICAgICB0aGlzLnByb2Nlc3NDaGFubmVsTWVzc2FnZShwZW5kaW5nQ2hhbm5lbE1lc3NhZ2UubWVzc2FnZSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICAgIFwiQ29ubmVjdGlvbk1hbmFnZXIucHJvY2Vzc05leHRQZW5kaW5nQ2hhbm5lbE1lc3NhZ2UoKSByZWNlaXZlZCBlcnJvciBcIixcbiAgICAgICAgICBlcnJcbiAgICAgICAgKTtcbiAgICAgIH0pLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICB0aGlzLnBlbmRpbmdDaGFubmVsTWVzc2FnZXNTdGF0ZS5pc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcm9jZXNzTmV4dFBlbmRpbmdDaGFubmVsTWVzc2FnZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIHByb2Nlc3NDaGFubmVsTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgYXdhaXQgdGhpcy5yZWFsdGltZS5jaGFubmVscy5wcm9jZXNzQ2hhbm5lbE1lc3NhZ2UobWVzc2FnZSk7XG4gIH1cbiAgYXN5bmMgcGluZygpIHtcbiAgICB2YXIgX2EyO1xuICAgIGlmICh0aGlzLnN0YXRlLnN0YXRlICE9PSBcImNvbm5lY3RlZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwiVW5hYmxlIHRvIHBpbmcgc2VydmljZTsgbm90IGNvbm5lY3RlZFwiLCA0ZTQsIDQwMCk7XG4gICAgfVxuICAgIGNvbnN0IHRyYW5zcG9ydCA9IChfYTIgPSB0aGlzLmFjdGl2ZVByb3RvY29sKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmdldFRyYW5zcG9ydCgpO1xuICAgIGlmICghdHJhbnNwb3J0KSB7XG4gICAgICB0aHJvdyB0aGlzLmdldFN0YXRlRXJyb3IoKTtcbiAgICB9XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQ29ubmVjdGlvbk1hbmFnZXIucGluZygpXCIsIFwidHJhbnNwb3J0ID0gXCIgKyB0cmFuc3BvcnQpO1xuICAgIGNvbnN0IHBpbmdTdGFydCA9IERhdGUubm93KCk7XG4gICAgY29uc3QgaWQgPSBjaGVhcFJhbmRTdHIoKTtcbiAgICByZXR1cm4gd2l0aFRpbWVvdXRBc3luYyhcbiAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGNvbnN0IG9uSGVhcnRiZWF0ID0gKHJlc3BvbnNlSWQpID0+IHtcbiAgICAgICAgICBpZiAocmVzcG9uc2VJZCA9PT0gaWQpIHtcbiAgICAgICAgICAgIHRyYW5zcG9ydC5vZmYoXCJoZWFydGJlYXRcIiwgb25IZWFydGJlYXQpO1xuICAgICAgICAgICAgcmVzb2x2ZShEYXRlLm5vdygpIC0gcGluZ1N0YXJ0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRyYW5zcG9ydC5vbihcImhlYXJ0YmVhdFwiLCBvbkhlYXJ0YmVhdCk7XG4gICAgICAgIHRyYW5zcG9ydC5waW5nKGlkKTtcbiAgICAgIH0pLFxuICAgICAgdGhpcy5vcHRpb25zLnRpbWVvdXRzLnJlYWx0aW1lUmVxdWVzdFRpbWVvdXQsXG4gICAgICBcIlRpbWVvdXQgd2FpdGluZyBmb3IgaGVhcnRiZWF0IHJlc3BvbnNlXCJcbiAgICApO1xuICB9XG4gIGFib3J0KGVycm9yKSB7XG4gICAgdGhpcy5hY3RpdmVQcm90b2NvbC5nZXRUcmFuc3BvcnQoKS5mYWlsKGVycm9yKTtcbiAgfVxuICBnZXRUcmFuc3BvcnRQcmVmZXJlbmNlKCkge1xuICAgIHZhciBfYTIsIF9iO1xuICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydFByZWZlcmVuY2UgfHwgaGF2ZVdlYlN0b3JhZ2UoKSAmJiAoKF9iID0gKF9hMiA9IFBsYXRmb3JtLldlYlN0b3JhZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuZ2V0KSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChfYTIsIHRyYW5zcG9ydFByZWZlcmVuY2VOYW1lKSk7XG4gIH1cbiAgcGVyc2lzdFRyYW5zcG9ydFByZWZlcmVuY2UodHJhbnNwb3J0KSB7XG4gICAgdmFyIF9hMiwgX2I7XG4gICAgdGhpcy50cmFuc3BvcnRQcmVmZXJlbmNlID0gdHJhbnNwb3J0LnNob3J0TmFtZTtcbiAgICBpZiAoaGF2ZVdlYlN0b3JhZ2UoKSkge1xuICAgICAgKF9iID0gKF9hMiA9IFBsYXRmb3JtLldlYlN0b3JhZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuc2V0KSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChfYTIsIHRyYW5zcG9ydFByZWZlcmVuY2VOYW1lLCB0cmFuc3BvcnQuc2hvcnROYW1lKTtcbiAgICB9XG4gIH1cbiAgdW5wZXJzaXN0VHJhbnNwb3J0UHJlZmVyZW5jZSgpIHtcbiAgICB2YXIgX2EyLCBfYjtcbiAgICB0aGlzLnRyYW5zcG9ydFByZWZlcmVuY2UgPSBudWxsO1xuICAgIGlmIChoYXZlV2ViU3RvcmFnZSgpKSB7XG4gICAgICAoX2IgPSAoX2EyID0gUGxhdGZvcm0uV2ViU3RvcmFnZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5yZW1vdmUpID09IG51bGwgPyB2b2lkIDAgOiBfYi5jYWxsKF9hMiwgdHJhbnNwb3J0UHJlZmVyZW5jZU5hbWUpO1xuICAgIH1cbiAgfVxuICAvKiBUaGlzIG1ldGhvZCBpcyBvbmx5IHVzZWQgZHVyaW5nIGNvbm5lY3Rpb24gYXR0ZW1wdHMsIHNvIGltcGxlbWVudHMgUlNBNGMxLCBSU0E0YzIsXG4gICAqIGFuZCBSU0E0ZC4gSXQgaXMgZ2VuZXJhbGx5IG5vdCBpbnZva2VkIGZvciBzZXJ2ZXJzaWRlLXRyaWdnZXJlZCByZWF1dGhzIG9yIG1hbnVhbFxuICAgKiByZWF1dGhzLCBzbyBSU0E0YzMgZG9lcyBub3QgYXBwbHksIGV4Y2VwdCAocGVyIHBlciBSU0E0ZDEpIGluIHRoZSBjYXNlIHRoYXQgdGhlIGF1dGhcbiAgICogc2VydmVyIHJldHVybnMgNDAzLiAqL1xuICBhY3RPbkVycm9yRnJvbUF1dGhvcml6ZShlcnIpIHtcbiAgICBpZiAoZXJyLmNvZGUgPT09IDQwMTcxKSB7XG4gICAgICB0aGlzLm5vdGlmeVN0YXRlKHsgc3RhdGU6IFwiZmFpbGVkXCIsIGVycm9yOiBlcnIgfSk7XG4gICAgfSBlbHNlIGlmIChlcnIuY29kZSA9PT0gNDAxMDIpIHtcbiAgICAgIHRoaXMubm90aWZ5U3RhdGUoeyBzdGF0ZTogXCJmYWlsZWRcIiwgZXJyb3I6IGVyciB9KTtcbiAgICB9IGVsc2UgaWYgKGVyci5zdGF0dXNDb2RlID09PSBIdHRwU3RhdHVzQ29kZXNfZGVmYXVsdC5Gb3JiaWRkZW4pIHtcbiAgICAgIGNvbnN0IG1zZyA9IFwiQ2xpZW50IGNvbmZpZ3VyZWQgYXV0aGVudGljYXRpb24gcHJvdmlkZXIgcmV0dXJuZWQgNDAzOyBmYWlsaW5nIHRoZSBjb25uZWN0aW9uXCI7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUiwgXCJDb25uZWN0aW9uTWFuYWdlci5hY3RPbkVycm9yRnJvbUF1dGhvcml6ZSgpXCIsIG1zZyk7XG4gICAgICB0aGlzLm5vdGlmeVN0YXRlKHsgc3RhdGU6IFwiZmFpbGVkXCIsIGVycm9yOiBuZXcgRXJyb3JJbmZvKG1zZywgODAwMTksIDQwMywgZXJyKSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbXNnID0gXCJDbGllbnQgY29uZmlndXJlZCBhdXRoZW50aWNhdGlvbiBwcm92aWRlciByZXF1ZXN0IGZhaWxlZFwiO1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQ29ubmVjdGlvbk1hbmFnZXIuYWN0T25FcnJvckZyb21BdXRob3JpemVcIiwgbXNnKTtcbiAgICAgIHRoaXMubm90aWZ5U3RhdGUoeyBzdGF0ZTogdGhpcy5zdGF0ZS5mYWlsU3RhdGUsIGVycm9yOiBuZXcgRXJyb3JJbmZvKG1zZywgODAwMTksIDQwMSwgZXJyKSB9KTtcbiAgICB9XG4gIH1cbiAgb25Db25uZWN0aW9uRGV0YWlsc1VwZGF0ZShjb25uZWN0aW9uRGV0YWlscywgdHJhbnNwb3J0KSB7XG4gICAgaWYgKCFjb25uZWN0aW9uRGV0YWlscykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmNvbm5lY3Rpb25EZXRhaWxzID0gY29ubmVjdGlvbkRldGFpbHM7XG4gICAgaWYgKGNvbm5lY3Rpb25EZXRhaWxzLm1heE1lc3NhZ2VTaXplKSB7XG4gICAgICB0aGlzLm9wdGlvbnMubWF4TWVzc2FnZVNpemUgPSBjb25uZWN0aW9uRGV0YWlscy5tYXhNZXNzYWdlU2l6ZTtcbiAgICB9XG4gICAgY29uc3QgY2xpZW50SWQgPSBjb25uZWN0aW9uRGV0YWlscy5jbGllbnRJZDtcbiAgICBpZiAoY2xpZW50SWQpIHtcbiAgICAgIGNvbnN0IGVyciA9IHRoaXMucmVhbHRpbWUuYXV0aC5fdW5jaGVja2VkU2V0Q2xpZW50SWQoY2xpZW50SWQpO1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUiwgXCJDb25uZWN0aW9uTWFuYWdlci5vbkNvbm5lY3Rpb25EZXRhaWxzVXBkYXRlKClcIiwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICB0cmFuc3BvcnQuZmFpbChlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNvbm5lY3Rpb25TdGF0ZVR0bCA9IGNvbm5lY3Rpb25EZXRhaWxzLmNvbm5lY3Rpb25TdGF0ZVR0bDtcbiAgICBpZiAoY29ubmVjdGlvblN0YXRlVHRsKSB7XG4gICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZVR0bCA9IGNvbm5lY3Rpb25TdGF0ZVR0bDtcbiAgICB9XG4gICAgdGhpcy5tYXhJZGxlSW50ZXJ2YWwgPSBjb25uZWN0aW9uRGV0YWlscy5tYXhJZGxlSW50ZXJ2YWw7XG4gICAgdGhpcy5lbWl0KFwiY29ubmVjdGlvbmRldGFpbHNcIiwgY29ubmVjdGlvbkRldGFpbHMpO1xuICB9XG4gIGNoZWNrV3NDb25uZWN0aXZpdHkoKSB7XG4gICAgY29uc3Qgd3MgPSBuZXcgUGxhdGZvcm0uQ29uZmlnLldlYlNvY2tldChkZWZhdWx0c19kZWZhdWx0LndzQ29ubmVjdGl2aXR5VXJsKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IGZpbmlzaGVkID0gZmFsc2U7XG4gICAgICB3cy5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICAgIGlmICghZmluaXNoZWQpIHtcbiAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIHdzLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB3cy5vbmNsb3NlID0gd3Mub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgaWYgKCFmaW5pc2hlZCkge1xuICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICBzZXNzaW9uUmVjb3ZlcnlOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmVjb3ZlcnlLZXlTdG9yYWdlTmFtZSB8fCBcImFibHktY29ubmVjdGlvbi1yZWNvdmVyeVwiO1xuICB9XG4gIGdldFNlc3Npb25SZWNvdmVyRGF0YSgpIHtcbiAgICB2YXIgX2EyLCBfYjtcbiAgICByZXR1cm4gaGF2ZVNlc3Npb25TdG9yYWdlKCkgJiYgKChfYiA9IChfYTIgPSBQbGF0Zm9ybS5XZWJTdG9yYWdlKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmdldFNlc3Npb24pID09IG51bGwgPyB2b2lkIDAgOiBfYi5jYWxsKF9hMiwgdGhpcy5zZXNzaW9uUmVjb3ZlcnlOYW1lKCkpKTtcbiAgfVxuICBzZXRTZXNzaW9uUmVjb3ZlckRhdGEodmFsdWUpIHtcbiAgICB2YXIgX2EyLCBfYjtcbiAgICByZXR1cm4gaGF2ZVNlc3Npb25TdG9yYWdlKCkgJiYgKChfYiA9IChfYTIgPSBQbGF0Zm9ybS5XZWJTdG9yYWdlKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLnNldFNlc3Npb24pID09IG51bGwgPyB2b2lkIDAgOiBfYi5jYWxsKF9hMiwgdGhpcy5zZXNzaW9uUmVjb3ZlcnlOYW1lKCksIHZhbHVlKSk7XG4gIH1cbiAgY2xlYXJTZXNzaW9uUmVjb3ZlckRhdGEoKSB7XG4gICAgdmFyIF9hMiwgX2I7XG4gICAgcmV0dXJuIGhhdmVTZXNzaW9uU3RvcmFnZSgpICYmICgoX2IgPSAoX2EyID0gUGxhdGZvcm0uV2ViU3RvcmFnZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5yZW1vdmVTZXNzaW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChfYTIsIHRoaXMuc2Vzc2lvblJlY292ZXJ5TmFtZSgpKSk7XG4gIH1cbn07XG52YXIgY29ubmVjdGlvbm1hbmFnZXJfZGVmYXVsdCA9IENvbm5lY3Rpb25NYW5hZ2VyO1xuXG4vLyBzcmMvY29tbW9uL2xpYi9jbGllbnQvY29ubmVjdGlvbi50c1xudmFyIENvbm5lY3Rpb24gPSBjbGFzcyBleHRlbmRzIGV2ZW50ZW1pdHRlcl9kZWZhdWx0IHtcbiAgY29uc3RydWN0b3IoYWJseSwgb3B0aW9ucykge1xuICAgIHN1cGVyKGFibHkubG9nZ2VyKTtcbiAgICB0aGlzLndoZW5TdGF0ZSA9IChzdGF0ZSkgPT4ge1xuICAgICAgcmV0dXJuIGV2ZW50ZW1pdHRlcl9kZWZhdWx0LnByb3RvdHlwZS53aGVuU3RhdGUuY2FsbCh0aGlzLCBzdGF0ZSwgdGhpcy5zdGF0ZSk7XG4gICAgfTtcbiAgICB0aGlzLmFibHkgPSBhYmx5O1xuICAgIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIgPSBuZXcgY29ubmVjdGlvbm1hbmFnZXJfZGVmYXVsdChhYmx5LCBvcHRpb25zKTtcbiAgICB0aGlzLnN0YXRlID0gdGhpcy5jb25uZWN0aW9uTWFuYWdlci5zdGF0ZS5zdGF0ZTtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmlkID0gdm9pZCAwO1xuICAgIHRoaXMuZXJyb3JSZWFzb24gPSBudWxsO1xuICAgIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIub24oXCJjb25uZWN0aW9uc3RhdGVcIiwgKHN0YXRlQ2hhbmdlKSA9PiB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGUgPSBzdGF0ZUNoYW5nZS5jdXJyZW50O1xuICAgICAgUGxhdGZvcm0uQ29uZmlnLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgdGhpcy5lbWl0KHN0YXRlLCBzdGF0ZUNoYW5nZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLm9uKFwidXBkYXRlXCIsIChzdGF0ZUNoYW5nZSkgPT4ge1xuICAgICAgUGxhdGZvcm0uQ29uZmlnLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgdGhpcy5lbWl0KFwidXBkYXRlXCIsIHN0YXRlQ2hhbmdlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGNvbm5lY3QoKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQ29ubmVjdGlvbi5jb25uZWN0KClcIiwgXCJcIik7XG4gICAgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5yZXF1ZXN0U3RhdGUoeyBzdGF0ZTogXCJjb25uZWN0aW5nXCIgfSk7XG4gIH1cbiAgYXN5bmMgcGluZygpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJDb25uZWN0aW9uLnBpbmcoKVwiLCBcIlwiKTtcbiAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uTWFuYWdlci5waW5nKCk7XG4gIH1cbiAgY2xvc2UoKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQ29ubmVjdGlvbi5jbG9zZSgpXCIsIFwiY29ubmVjdGlvbktleSA9IFwiICsgdGhpcy5rZXkpO1xuICAgIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIucmVxdWVzdFN0YXRlKHsgc3RhdGU6IFwiY2xvc2luZ1wiIH0pO1xuICB9XG4gIGdldCByZWNvdmVyeUtleSgpIHtcbiAgICB0aGlzLmxvZ2dlci5kZXByZWNhdGlvbldhcm5pbmcoXG4gICAgICBcIlRoZSBgQ29ubmVjdGlvbi5yZWNvdmVyeUtleWAgYXR0cmlidXRlIGhhcyBiZWVuIHJlcGxhY2VkIGJ5IHRoZSBgQ29ubmVjdGlvbi5jcmVhdGVSZWNvdmVyeUtleSgpYCBtZXRob2QuIFJlcGxhY2UgeW91ciB1c2FnZSBvZiBgcmVjb3ZlcnlLZXlgIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiBgY3JlYXRlUmVjb3ZlcnlLZXkoKWAuIGByZWNvdmVyeUtleWAgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHZlcnNpb24uXCJcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZVJlY292ZXJ5S2V5KCk7XG4gIH1cbiAgY3JlYXRlUmVjb3ZlcnlLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIuY3JlYXRlUmVjb3ZlcnlLZXkoKTtcbiAgfVxufTtcbnZhciBjb25uZWN0aW9uX2RlZmF1bHQgPSBDb25uZWN0aW9uO1xuXG4vLyBzcmMvY29tbW9uL2xpYi9jbGllbnQvY2hhbm5lbHN0YXRlY2hhbmdlLnRzXG52YXIgQ2hhbm5lbFN0YXRlQ2hhbmdlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihwcmV2aW91cywgY3VycmVudCwgcmVzdW1lZCwgaGFzQmFja2xvZywgcmVhc29uKSB7XG4gICAgdGhpcy5wcmV2aW91cyA9IHByZXZpb3VzO1xuICAgIHRoaXMuY3VycmVudCA9IGN1cnJlbnQ7XG4gICAgaWYgKGN1cnJlbnQgPT09IFwiYXR0YWNoZWRcIikge1xuICAgICAgdGhpcy5yZXN1bWVkID0gcmVzdW1lZDtcbiAgICAgIHRoaXMuaGFzQmFja2xvZyA9IGhhc0JhY2tsb2c7XG4gICAgfVxuICAgIGlmIChyZWFzb24pXG4gICAgICB0aGlzLnJlYXNvbiA9IHJlYXNvbjtcbiAgfVxufTtcbnZhciBjaGFubmVsc3RhdGVjaGFuZ2VfZGVmYXVsdCA9IENoYW5uZWxTdGF0ZUNoYW5nZTtcblxuLy8gc3JjL2NvbW1vbi9saWIvY2xpZW50L3JlYWx0aW1lY2hhbm5lbC50c1xudmFyIG5vb3AyID0gZnVuY3Rpb24oKSB7XG59O1xuZnVuY3Rpb24gdmFsaWRhdGVDaGFubmVsT3B0aW9ucyhvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zICYmIFwicGFyYW1zXCIgaW4gb3B0aW9ucyAmJiAhaXNPYmplY3Qob3B0aW9ucy5wYXJhbXMpKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvckluZm8oXCJvcHRpb25zLnBhcmFtcyBtdXN0IGJlIGFuIG9iamVjdFwiLCA0ZTQsIDQwMCk7XG4gIH1cbiAgaWYgKG9wdGlvbnMgJiYgXCJtb2Rlc1wiIGluIG9wdGlvbnMpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkob3B0aW9ucy5tb2RlcykpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3JJbmZvKFwib3B0aW9ucy5tb2RlcyBtdXN0IGJlIGFuIGFycmF5XCIsIDRlNCwgNDAwKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zLm1vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjdXJyZW50TW9kZSA9IG9wdGlvbnMubW9kZXNbaV07XG4gICAgICBpZiAoIWN1cnJlbnRNb2RlIHx8IHR5cGVvZiBjdXJyZW50TW9kZSAhPT0gXCJzdHJpbmdcIiB8fCAhY2hhbm5lbE1vZGVzLmluY2x1ZGVzKFN0cmluZy5wcm90b3R5cGUudG9VcHBlckNhc2UuY2FsbChjdXJyZW50TW9kZSkpKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3JJbmZvKFwiSW52YWxpZCBjaGFubmVsIG1vZGU6IFwiICsgY3VycmVudE1vZGUsIDRlNCwgNDAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbnZhciBSZWFsdGltZUNoYW5uZWwgPSBjbGFzcyBfUmVhbHRpbWVDaGFubmVsIGV4dGVuZHMgZXZlbnRlbWl0dGVyX2RlZmF1bHQge1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIG5hbWUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2EyLCBfYjtcbiAgICBzdXBlcihjbGllbnQubG9nZ2VyKTtcbiAgICB0aGlzLnJldHJ5Q291bnQgPSAwO1xuICAgIHRoaXMuaGlzdG9yeSA9IGFzeW5jIGZ1bmN0aW9uKHBhcmFtcykge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sIFwiUmVhbHRpbWVDaGFubmVsLmhpc3RvcnkoKVwiLCBcImNoYW5uZWwgPSBcIiArIHRoaXMubmFtZSk7XG4gICAgICBjb25zdCByZXN0TWl4aW4gPSB0aGlzLmNsaWVudC5yZXN0LmNoYW5uZWxNaXhpbjtcbiAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLnVudGlsQXR0YWNoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBcImF0dGFjaGVkXCIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwib3B0aW9uIHVudGlsQXR0YWNoIHJlcXVpcmVzIHRoZSBjaGFubmVsIHRvIGJlIGF0dGFjaGVkXCIsIDRlNCwgNDAwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMucHJvcGVydGllcy5hdHRhY2hTZXJpYWwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFxuICAgICAgICAgICAgXCJ1bnRpbEF0dGFjaCB3YXMgc3BlY2lmaWVkIGFuZCBjaGFubmVsIGlzIGF0dGFjaGVkLCBidXQgYXR0YWNoU2VyaWFsIGlzIG5vdCBkZWZpbmVkXCIsXG4gICAgICAgICAgICA0ZTQsXG4gICAgICAgICAgICA0MDBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBwYXJhbXMudW50aWxBdHRhY2g7XG4gICAgICAgIHBhcmFtcy5mcm9tX3NlcmlhbCA9IHRoaXMucHJvcGVydGllcy5hdHRhY2hTZXJpYWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdE1peGluLmhpc3RvcnkodGhpcywgcGFyYW1zKTtcbiAgICB9O1xuICAgIHRoaXMud2hlblN0YXRlID0gKHN0YXRlKSA9PiB7XG4gICAgICByZXR1cm4gZXZlbnRlbWl0dGVyX2RlZmF1bHQucHJvdG90eXBlLndoZW5TdGF0ZS5jYWxsKHRoaXMsIHN0YXRlLCB0aGlzLnN0YXRlKTtcbiAgICB9O1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIlJlYWx0aW1lQ2hhbm5lbCgpXCIsIFwic3RhcnRlZDsgbmFtZSA9IFwiICsgbmFtZSk7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmNoYW5uZWxPcHRpb25zID0gbm9ybWFsaXNlQ2hhbm5lbE9wdGlvbnMoKF9hMiA9IGNsaWVudC5fQ3J5cHRvKSAhPSBudWxsID8gX2EyIDogbnVsbCwgdGhpcy5sb2dnZXIsIG9wdGlvbnMpO1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMuX3ByZXNlbmNlID0gY2xpZW50Ll9SZWFsdGltZVByZXNlbmNlID8gbmV3IGNsaWVudC5fUmVhbHRpbWVQcmVzZW5jZS5SZWFsdGltZVByZXNlbmNlKHRoaXMpIDogbnVsbDtcbiAgICB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyID0gY2xpZW50LmNvbm5lY3Rpb24uY29ubmVjdGlvbk1hbmFnZXI7XG4gICAgdGhpcy5zdGF0ZSA9IFwiaW5pdGlhbGl6ZWRcIjtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBuZXcgZXZlbnRlbWl0dGVyX2RlZmF1bHQodGhpcy5sb2dnZXIpO1xuICAgIHRoaXMuc3luY0NoYW5uZWxTZXJpYWwgPSB2b2lkIDA7XG4gICAgdGhpcy5wcm9wZXJ0aWVzID0ge1xuICAgICAgYXR0YWNoU2VyaWFsOiB2b2lkIDAsXG4gICAgICBjaGFubmVsU2VyaWFsOiB2b2lkIDBcbiAgICB9O1xuICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgICB0aGlzLmVycm9yUmVhc29uID0gbnVsbDtcbiAgICB0aGlzLl9yZXF1ZXN0ZWRGbGFncyA9IG51bGw7XG4gICAgdGhpcy5fbW9kZSA9IG51bGw7XG4gICAgdGhpcy5fYXR0YWNoUmVzdW1lID0gZmFsc2U7XG4gICAgdGhpcy5fZGVjb2RpbmdDb250ZXh0ID0ge1xuICAgICAgY2hhbm5lbE9wdGlvbnM6IHRoaXMuY2hhbm5lbE9wdGlvbnMsXG4gICAgICBwbHVnaW5zOiBjbGllbnQub3B0aW9ucy5wbHVnaW5zIHx8IHt9LFxuICAgICAgYmFzZUVuY29kZWRQcmV2aW91c1BheWxvYWQ6IHZvaWQgMFxuICAgIH07XG4gICAgdGhpcy5fbGFzdFBheWxvYWQgPSB7XG4gICAgICBtZXNzYWdlSWQ6IG51bGwsXG4gICAgICBwcm90b2NvbE1lc3NhZ2VDaGFubmVsU2VyaWFsOiBudWxsLFxuICAgICAgZGVjb2RlRmFpbHVyZVJlY292ZXJ5SW5Qcm9ncmVzczogbnVsbFxuICAgIH07XG4gICAgdGhpcy5fYWxsQ2hhbm5lbENoYW5nZXMgPSBuZXcgZXZlbnRlbWl0dGVyX2RlZmF1bHQodGhpcy5sb2dnZXIpO1xuICAgIGlmICgoX2IgPSBjbGllbnQub3B0aW9ucy5wbHVnaW5zKSA9PSBudWxsID8gdm9pZCAwIDogX2IuUHVzaCkge1xuICAgICAgdGhpcy5fcHVzaCA9IG5ldyBjbGllbnQub3B0aW9ucy5wbHVnaW5zLlB1c2guUHVzaENoYW5uZWwodGhpcyk7XG4gICAgfVxuICB9XG4gIGdldCBwcmVzZW5jZSgpIHtcbiAgICBpZiAoIXRoaXMuX3ByZXNlbmNlKSB7XG4gICAgICB0aHJvd01pc3NpbmdQbHVnaW5FcnJvcihcIlJlYWx0aW1lUHJlc2VuY2VcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9wcmVzZW5jZTtcbiAgfVxuICBnZXQgcHVzaCgpIHtcbiAgICBpZiAoIXRoaXMuX3B1c2gpIHtcbiAgICAgIHRocm93TWlzc2luZ1BsdWdpbkVycm9yKFwiUHVzaFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3B1c2g7XG4gIH1cbiAgaW52YWxpZFN0YXRlRXJyb3IoKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvckluZm8oXG4gICAgICBcIkNoYW5uZWwgb3BlcmF0aW9uIGZhaWxlZCBhcyBjaGFubmVsIHN0YXRlIGlzIFwiICsgdGhpcy5zdGF0ZSxcbiAgICAgIDkwMDAxLFxuICAgICAgNDAwLFxuICAgICAgdGhpcy5lcnJvclJlYXNvbiB8fCB2b2lkIDBcbiAgICApO1xuICB9XG4gIHN0YXRpYyBwcm9jZXNzTGlzdGVuZXJBcmdzKGFyZ3MpIHtcbiAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncyk7XG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGFyZ3MudW5zaGlmdChudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIGFyZ3M7XG4gIH1cbiAgYXN5bmMgc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdmFyIF9hMjtcbiAgICBjb25zdCBwcmV2aW91c0NoYW5uZWxPcHRpb25zID0gdGhpcy5jaGFubmVsT3B0aW9ucztcbiAgICBjb25zdCBlcnIgPSB2YWxpZGF0ZUNoYW5uZWxPcHRpb25zKG9wdGlvbnMpO1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgdGhpcy5jaGFubmVsT3B0aW9ucyA9IG5vcm1hbGlzZUNoYW5uZWxPcHRpb25zKChfYTIgPSB0aGlzLmNsaWVudC5fQ3J5cHRvKSAhPSBudWxsID8gX2EyIDogbnVsbCwgdGhpcy5sb2dnZXIsIG9wdGlvbnMpO1xuICAgIGlmICh0aGlzLl9kZWNvZGluZ0NvbnRleHQpXG4gICAgICB0aGlzLl9kZWNvZGluZ0NvbnRleHQuY2hhbm5lbE9wdGlvbnMgPSB0aGlzLmNoYW5uZWxPcHRpb25zO1xuICAgIGlmICh0aGlzLl9zaG91bGRSZWF0dGFjaFRvU2V0T3B0aW9ucyhvcHRpb25zLCBwcmV2aW91c0NoYW5uZWxPcHRpb25zKSkge1xuICAgICAgdGhpcy5hdHRhY2hJbXBsKCk7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0aGlzLl9hbGxDaGFubmVsQ2hhbmdlcy5vbmNlKFxuICAgICAgICAgIFtcImF0dGFjaGVkXCIsIFwidXBkYXRlXCIsIFwiZGV0YWNoZWRcIiwgXCJmYWlsZWRcIl0sXG4gICAgICAgICAgZnVuY3Rpb24oc3RhdGVDaGFuZ2UpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5ldmVudCkge1xuICAgICAgICAgICAgICBjYXNlIFwidXBkYXRlXCI6XG4gICAgICAgICAgICAgIGNhc2UgXCJhdHRhY2hlZFwiOlxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZWplY3Qoc3RhdGVDaGFuZ2UucmVhc29uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgX3Nob3VsZFJlYXR0YWNoVG9TZXRPcHRpb25zKG9wdGlvbnMsIHByZXZPcHRpb25zKSB7XG4gICAgaWYgKCEodGhpcy5zdGF0ZSA9PT0gXCJhdHRhY2hlZFwiIHx8IHRoaXMuc3RhdGUgPT09IFwiYXR0YWNoaW5nXCIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnBhcmFtcykge1xuICAgICAgY29uc3QgcmVxdWVzdGVkUGFyYW1zID0gb21pdEFnZW50KG9wdGlvbnMucGFyYW1zKTtcbiAgICAgIGNvbnN0IGV4aXN0aW5nUGFyYW1zID0gb21pdEFnZW50KHByZXZPcHRpb25zLnBhcmFtcyk7XG4gICAgICBpZiAoT2JqZWN0LmtleXMocmVxdWVzdGVkUGFyYW1zKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKGV4aXN0aW5nUGFyYW1zKS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIXNoYWxsb3dFcXVhbHMoZXhpc3RpbmdQYXJhbXMsIHJlcXVlc3RlZFBhcmFtcykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLm1vZGVzKSB7XG4gICAgICBpZiAoIXByZXZPcHRpb25zLm1vZGVzIHx8ICFhcnJFcXVhbHMob3B0aW9ucy5tb2RlcywgcHJldk9wdGlvbnMubW9kZXMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgYXN5bmMgcHVibGlzaCguLi5hcmdzKSB7XG4gICAgbGV0IG1lc3NhZ2VzID0gYXJnc1swXTtcbiAgICBsZXQgYXJnQ291bnQgPSBhcmdzLmxlbmd0aDtcbiAgICBpZiAoIXRoaXMuY29ubmVjdGlvbk1hbmFnZXIuYWN0aXZlU3RhdGUoKSkge1xuICAgICAgdGhyb3cgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5nZXRFcnJvcigpO1xuICAgIH1cbiAgICBpZiAoYXJnQ291bnQgPT0gMSkge1xuICAgICAgaWYgKGlzT2JqZWN0KG1lc3NhZ2VzKSlcbiAgICAgICAgbWVzc2FnZXMgPSBbZnJvbVZhbHVlcyhtZXNzYWdlcyldO1xuICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShtZXNzYWdlcykpXG4gICAgICAgIG1lc3NhZ2VzID0gZnJvbVZhbHVlc0FycmF5KG1lc3NhZ2VzKTtcbiAgICAgIGVsc2VcbiAgICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcbiAgICAgICAgICBcIlRoZSBzaW5nbGUtYXJndW1lbnQgZm9ybSBvZiBwdWJsaXNoKCkgZXhwZWN0cyBhIG1lc3NhZ2Ugb2JqZWN0IG9yIGFuIGFycmF5IG9mIG1lc3NhZ2Ugb2JqZWN0c1wiLFxuICAgICAgICAgIDQwMDEzLFxuICAgICAgICAgIDQwMFxuICAgICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZXNzYWdlcyA9IFtmcm9tVmFsdWVzKHsgbmFtZTogYXJnc1swXSwgZGF0YTogYXJnc1sxXSB9KV07XG4gICAgfVxuICAgIGNvbnN0IG1heE1lc3NhZ2VTaXplID0gdGhpcy5jbGllbnQub3B0aW9ucy5tYXhNZXNzYWdlU2l6ZTtcbiAgICBhd2FpdCBlbmNvZGVBcnJheShtZXNzYWdlcywgdGhpcy5jaGFubmVsT3B0aW9ucyk7XG4gICAgY29uc3Qgc2l6ZSA9IGdldE1lc3NhZ2VzU2l6ZShtZXNzYWdlcyk7XG4gICAgaWYgKHNpemUgPiBtYXhNZXNzYWdlU2l6ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcbiAgICAgICAgXCJNYXhpbXVtIHNpemUgb2YgbWVzc2FnZXMgdGhhdCBjYW4gYmUgcHVibGlzaGVkIGF0IG9uY2UgZXhjZWVkZWQgKCB3YXMgXCIgKyBzaXplICsgXCIgYnl0ZXM7IGxpbWl0IGlzIFwiICsgbWF4TWVzc2FnZVNpemUgKyBcIiBieXRlcylcIixcbiAgICAgICAgNDAwMDksXG4gICAgICAgIDQwMFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuX3B1Ymxpc2gobWVzc2FnZXMsIChlcnIpID0+IGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZSgpKTtcbiAgICB9KTtcbiAgfVxuICBfcHVibGlzaChtZXNzYWdlcywgY2FsbGJhY2spIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTywgXCJSZWFsdGltZUNoYW5uZWwucHVibGlzaCgpXCIsIFwibWVzc2FnZSBjb3VudCA9IFwiICsgbWVzc2FnZXMubGVuZ3RoKTtcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgY2FzZSBcImZhaWxlZFwiOlxuICAgICAgY2FzZSBcInN1c3BlbmRlZFwiOlxuICAgICAgICBjYWxsYmFjayhFcnJvckluZm8uZnJvbVZhbHVlcyh0aGlzLmludmFsaWRTdGF0ZUVycm9yKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgICAgXCJSZWFsdGltZUNoYW5uZWwucHVibGlzaCgpXCIsXG4gICAgICAgICAgXCJzZW5kaW5nIG1lc3NhZ2U7IGNoYW5uZWwgc3RhdGUgaXMgXCIgKyBzdGF0ZVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBtc2cgPSBuZXcgcHJvdG9jb2xtZXNzYWdlX2RlZmF1bHQoKTtcbiAgICAgICAgbXNnLmFjdGlvbiA9IGFjdGlvbnMyLk1FU1NBR0U7XG4gICAgICAgIG1zZy5jaGFubmVsID0gdGhpcy5uYW1lO1xuICAgICAgICBtc2cubWVzc2FnZXMgPSBtZXNzYWdlcztcbiAgICAgICAgdGhpcy5zZW5kTWVzc2FnZShtc2csIGNhbGxiYWNrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIG9uRXZlbnQobWVzc2FnZXMpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTywgXCJSZWFsdGltZUNoYW5uZWwub25FdmVudCgpXCIsIFwicmVjZWl2ZWQgbWVzc2FnZVwiKTtcbiAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gdGhpcy5zdWJzY3JpcHRpb25zO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzc2FnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBtZXNzYWdlc1tpXTtcbiAgICAgIHN1YnNjcmlwdGlvbnMuZW1pdChtZXNzYWdlLm5hbWUsIG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuICBhc3luYyBhdHRhY2goKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IFwiYXR0YWNoZWRcIikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLl9hdHRhY2goZmFsc2UsIG51bGwsIChlcnIsIHJlc3VsdCkgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKHJlc3VsdCkpO1xuICAgIH0pO1xuICB9XG4gIF9hdHRhY2goZm9yY2VSZWF0dGFjaCwgYXR0YWNoUmVhc29uLCBjYWxsYmFjaykge1xuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrID0gKGVycikgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgICAgICBcIlJlYWx0aW1lQ2hhbm5lbC5fYXR0YWNoKClcIixcbiAgICAgICAgICAgIFwiQ2hhbm5lbCBhdHRhY2ggZmFpbGVkOiBcIiArIGVyci50b1N0cmluZygpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgY29ubmVjdGlvbk1hbmFnZXIgPSB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyO1xuICAgIGlmICghY29ubmVjdGlvbk1hbmFnZXIuYWN0aXZlU3RhdGUoKSkge1xuICAgICAgY2FsbGJhY2soY29ubmVjdGlvbk1hbmFnZXIuZ2V0RXJyb3IoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlICE9PSBcImF0dGFjaGluZ1wiIHx8IGZvcmNlUmVhdHRhY2gpIHtcbiAgICAgIHRoaXMucmVxdWVzdFN0YXRlKFwiYXR0YWNoaW5nXCIsIGF0dGFjaFJlYXNvbik7XG4gICAgfVxuICAgIHRoaXMub25jZShmdW5jdGlvbihzdGF0ZUNoYW5nZSkge1xuICAgICAgc3dpdGNoICh0aGlzLmV2ZW50KSB7XG4gICAgICAgIGNhc2UgXCJhdHRhY2hlZFwiOlxuICAgICAgICAgIGNhbGxiYWNrID09IG51bGwgPyB2b2lkIDAgOiBjYWxsYmFjayhudWxsLCBzdGF0ZUNoYW5nZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJkZXRhY2hlZFwiOlxuICAgICAgICBjYXNlIFwic3VzcGVuZGVkXCI6XG4gICAgICAgIGNhc2UgXCJmYWlsZWRcIjpcbiAgICAgICAgICBjYWxsYmFjayA9PSBudWxsID8gdm9pZCAwIDogY2FsbGJhY2soXG4gICAgICAgICAgICBzdGF0ZUNoYW5nZS5yZWFzb24gfHwgY29ubmVjdGlvbk1hbmFnZXIuZ2V0RXJyb3IoKSB8fCBuZXcgRXJyb3JJbmZvKFwiVW5hYmxlIHRvIGF0dGFjaDsgcmVhc29uIHVua25vd247IHN0YXRlID0gXCIgKyB0aGlzLmV2ZW50LCA5ZTQsIDUwMClcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZGV0YWNoaW5nXCI6XG4gICAgICAgICAgY2FsbGJhY2sgPT0gbnVsbCA/IHZvaWQgMCA6IGNhbGxiYWNrKG5ldyBFcnJvckluZm8oXCJBdHRhY2ggcmVxdWVzdCBzdXBlcnNlZGVkIGJ5IGEgc3Vic2VxdWVudCBkZXRhY2ggcmVxdWVzdFwiLCA5ZTQsIDQwOSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGF0dGFjaEltcGwoKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sIFwiUmVhbHRpbWVDaGFubmVsLmF0dGFjaEltcGwoKVwiLCBcInNlbmRpbmcgQVRUQUNIIG1lc3NhZ2VcIik7XG4gICAgY29uc3QgYXR0YWNoTXNnID0gZnJvbVZhbHVlczMoe1xuICAgICAgYWN0aW9uOiBhY3Rpb25zMi5BVFRBQ0gsXG4gICAgICBjaGFubmVsOiB0aGlzLm5hbWUsXG4gICAgICBwYXJhbXM6IHRoaXMuY2hhbm5lbE9wdGlvbnMucGFyYW1zLFxuICAgICAgLy8gUlRMNGMxOiBJbmNsdWRlcyB0aGUgY2hhbm5lbCBzZXJpYWwgdG8gcmVzdW1lIGZyb20gYSBwcmV2aW91cyBtZXNzYWdlXG4gICAgICAvLyBvciBhdHRhY2htZW50LlxuICAgICAgY2hhbm5lbFNlcmlhbDogdGhpcy5wcm9wZXJ0aWVzLmNoYW5uZWxTZXJpYWxcbiAgICB9KTtcbiAgICBpZiAodGhpcy5fcmVxdWVzdGVkRmxhZ3MpIHtcbiAgICAgIGF0dGFjaE1zZy5lbmNvZGVNb2Rlc1RvRmxhZ3ModGhpcy5fcmVxdWVzdGVkRmxhZ3MpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jaGFubmVsT3B0aW9ucy5tb2Rlcykge1xuICAgICAgYXR0YWNoTXNnLmVuY29kZU1vZGVzVG9GbGFncyhhbGxUb1VwcGVyQ2FzZSh0aGlzLmNoYW5uZWxPcHRpb25zLm1vZGVzKSk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9hdHRhY2hSZXN1bWUpIHtcbiAgICAgIGF0dGFjaE1zZy5zZXRGbGFnKFwiQVRUQUNIX1JFU1VNRVwiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xhc3RQYXlsb2FkLmRlY29kZUZhaWx1cmVSZWNvdmVyeUluUHJvZ3Jlc3MpIHtcbiAgICAgIGF0dGFjaE1zZy5jaGFubmVsU2VyaWFsID0gdGhpcy5fbGFzdFBheWxvYWQucHJvdG9jb2xNZXNzYWdlQ2hhbm5lbFNlcmlhbDtcbiAgICB9XG4gICAgdGhpcy5zZW5kTWVzc2FnZShhdHRhY2hNc2csIG5vb3AyKTtcbiAgfVxuICBhc3luYyBkZXRhY2goKSB7XG4gICAgY29uc3QgY29ubmVjdGlvbk1hbmFnZXIgPSB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyO1xuICAgIGlmICghY29ubmVjdGlvbk1hbmFnZXIuYWN0aXZlU3RhdGUoKSkge1xuICAgICAgdGhyb3cgY29ubmVjdGlvbk1hbmFnZXIuZ2V0RXJyb3IoKTtcbiAgICB9XG4gICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICBjYXNlIFwic3VzcGVuZGVkXCI6XG4gICAgICAgIHRoaXMubm90aWZ5U3RhdGUoXCJkZXRhY2hlZFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBcImRldGFjaGVkXCI6XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgXCJmYWlsZWRcIjpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcIlVuYWJsZSB0byBkZXRhY2g7IGNoYW5uZWwgc3RhdGUgPSBmYWlsZWRcIiwgOTAwMDEsIDQwMCk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLnJlcXVlc3RTdGF0ZShcImRldGFjaGluZ1wiKTtcbiAgICAgIGNhc2UgXCJkZXRhY2hpbmdcIjpcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICB0aGlzLm9uY2UoZnVuY3Rpb24oc3RhdGVDaGFuZ2UpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5ldmVudCkge1xuICAgICAgICAgICAgICBjYXNlIFwiZGV0YWNoZWRcIjpcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJhdHRhY2hlZFwiOlxuICAgICAgICAgICAgICBjYXNlIFwic3VzcGVuZGVkXCI6XG4gICAgICAgICAgICAgIGNhc2UgXCJmYWlsZWRcIjpcbiAgICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgICBzdGF0ZUNoYW5nZS5yZWFzb24gfHwgY29ubmVjdGlvbk1hbmFnZXIuZ2V0RXJyb3IoKSB8fCBuZXcgRXJyb3JJbmZvKFwiVW5hYmxlIHRvIGRldGFjaDsgcmVhc29uIHVua25vd247IHN0YXRlID0gXCIgKyB0aGlzLmV2ZW50LCA5ZTQsIDUwMClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiYXR0YWNoaW5nXCI6XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvckluZm8oXCJEZXRhY2ggcmVxdWVzdCBzdXBlcnNlZGVkIGJ5IGEgc3Vic2VxdWVudCBhdHRhY2ggcmVxdWVzdFwiLCA5ZTQsIDQwOSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZGV0YWNoSW1wbChjYWxsYmFjaykge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIlJlYWx0aW1lQ2hhbm5lbC5kZXRhY2goKVwiLCBcInNlbmRpbmcgREVUQUNIIG1lc3NhZ2VcIik7XG4gICAgY29uc3QgbXNnID0gZnJvbVZhbHVlczMoeyBhY3Rpb246IGFjdGlvbnMyLkRFVEFDSCwgY2hhbm5lbDogdGhpcy5uYW1lIH0pO1xuICAgIHRoaXMuc2VuZE1lc3NhZ2UobXNnLCBjYWxsYmFjayB8fCBub29wMik7XG4gIH1cbiAgYXN5bmMgc3Vic2NyaWJlKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBbZXZlbnQsIGxpc3RlbmVyXSA9IF9SZWFsdGltZUNoYW5uZWwucHJvY2Vzc0xpc3RlbmVyQXJncyhhcmdzKTtcbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gXCJmYWlsZWRcIikge1xuICAgICAgdGhyb3cgRXJyb3JJbmZvLmZyb21WYWx1ZXModGhpcy5pbnZhbGlkU3RhdGVFcnJvcigpKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50ICYmIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIHRoaXMuY2xpZW50Ll9GaWx0ZXJlZFN1YnNjcmlwdGlvbnMuc3Vic2NyaWJlRmlsdGVyKHRoaXMsIGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5vbihldmVudCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hdHRhY2goKTtcbiAgfVxuICB1bnN1YnNjcmliZSguLi5hcmdzKSB7XG4gICAgdmFyIF9hMjtcbiAgICBjb25zdCBbZXZlbnQsIGxpc3RlbmVyXSA9IF9SZWFsdGltZUNoYW5uZWwucHJvY2Vzc0xpc3RlbmVyQXJncyhhcmdzKTtcbiAgICBpZiAodHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmICFsaXN0ZW5lciB8fCAoKF9hMiA9IHRoaXMuZmlsdGVyZWRTdWJzY3JpcHRpb25zKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmhhcyhsaXN0ZW5lcikpKSB7XG4gICAgICB0aGlzLmNsaWVudC5fRmlsdGVyZWRTdWJzY3JpcHRpb25zLmdldEFuZERlbGV0ZUZpbHRlcmVkU3Vic2NyaXB0aW9ucyh0aGlzLCBldmVudCwgbGlzdGVuZXIpLmZvckVhY2goKGwpID0+IHRoaXMuc3Vic2NyaXB0aW9ucy5vZmYobCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMub2ZmKGV2ZW50LCBsaXN0ZW5lcik7XG4gIH1cbiAgc3luYygpIHtcbiAgICBzd2l0Y2ggKHRoaXMuc3RhdGUpIHtcbiAgICAgIGNhc2UgXCJpbml0aWFsaXplZFwiOlxuICAgICAgY2FzZSBcImRldGFjaGluZ1wiOlxuICAgICAgY2FzZSBcImRldGFjaGVkXCI6XG4gICAgICAgIHRocm93IG5ldyBQYXJ0aWFsRXJyb3JJbmZvKFwiVW5hYmxlIHRvIHN5bmMgdG8gY2hhbm5lbDsgbm90IGF0dGFjaGVkXCIsIDRlNCk7XG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgICBjb25zdCBjb25uZWN0aW9uTWFuYWdlciA9IHRoaXMuY29ubmVjdGlvbk1hbmFnZXI7XG4gICAgaWYgKCFjb25uZWN0aW9uTWFuYWdlci5hY3RpdmVTdGF0ZSgpKSB7XG4gICAgICB0aHJvdyBjb25uZWN0aW9uTWFuYWdlci5nZXRFcnJvcigpO1xuICAgIH1cbiAgICBjb25zdCBzeW5jTWVzc2FnZSA9IGZyb21WYWx1ZXMzKHsgYWN0aW9uOiBhY3Rpb25zMi5TWU5DLCBjaGFubmVsOiB0aGlzLm5hbWUgfSk7XG4gICAgaWYgKHRoaXMuc3luY0NoYW5uZWxTZXJpYWwpIHtcbiAgICAgIHN5bmNNZXNzYWdlLmNoYW5uZWxTZXJpYWwgPSB0aGlzLnN5bmNDaGFubmVsU2VyaWFsO1xuICAgIH1cbiAgICBjb25uZWN0aW9uTWFuYWdlci5zZW5kKHN5bmNNZXNzYWdlKTtcbiAgfVxuICBzZW5kTWVzc2FnZShtc2csIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5zZW5kKG1zZywgdGhpcy5jbGllbnQub3B0aW9ucy5xdWV1ZU1lc3NhZ2VzLCBjYWxsYmFjayk7XG4gIH1cbiAgc2VuZFByZXNlbmNlKHByZXNlbmNlLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IG1zZyA9IGZyb21WYWx1ZXMzKHtcbiAgICAgIGFjdGlvbjogYWN0aW9uczIuUFJFU0VOQ0UsXG4gICAgICBjaGFubmVsOiB0aGlzLm5hbWUsXG4gICAgICBwcmVzZW5jZTogQXJyYXkuaXNBcnJheShwcmVzZW5jZSkgPyB0aGlzLmNsaWVudC5fUmVhbHRpbWVQcmVzZW5jZS5wcmVzZW5jZU1lc3NhZ2VzRnJvbVZhbHVlc0FycmF5KHByZXNlbmNlKSA6IFt0aGlzLmNsaWVudC5fUmVhbHRpbWVQcmVzZW5jZS5wcmVzZW5jZU1lc3NhZ2VGcm9tVmFsdWVzKHByZXNlbmNlKV1cbiAgICB9KTtcbiAgICB0aGlzLnNlbmRNZXNzYWdlKG1zZywgY2FsbGJhY2spO1xuICB9XG4gIC8vIEFjY2VzcyB0byB0aGlzIG1ldGhvZCBpcyBzeW5jaHJvbmlzZWQgYnkgQ29ubmVjdGlvbk1hbmFnZXIjcHJvY2Vzc0NoYW5uZWxNZXNzYWdlLCBpbiBvcmRlciB0byBzeW5jaHJvbmlzZSBhY2Nlc3MgdG8gdGhlIHN0YXRlIHN0b3JlZCBpbiBfZGVjb2RpbmdDb250ZXh0LlxuICBhc3luYyBwcm9jZXNzTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UuYWN0aW9uID09PSBhY3Rpb25zMi5BVFRBQ0hFRCB8fCBtZXNzYWdlLmFjdGlvbiA9PT0gYWN0aW9uczIuTUVTU0FHRSB8fCBtZXNzYWdlLmFjdGlvbiA9PT0gYWN0aW9uczIuUFJFU0VOQ0UpIHtcbiAgICAgIHRoaXMuc2V0Q2hhbm5lbFNlcmlhbChtZXNzYWdlLmNoYW5uZWxTZXJpYWwpO1xuICAgIH1cbiAgICBsZXQgc3luY0NoYW5uZWxTZXJpYWwsIGlzU3luYyA9IGZhbHNlO1xuICAgIHN3aXRjaCAobWVzc2FnZS5hY3Rpb24pIHtcbiAgICAgIGNhc2UgYWN0aW9uczIuQVRUQUNIRUQ6IHtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLmF0dGFjaFNlcmlhbCA9IG1lc3NhZ2UuY2hhbm5lbFNlcmlhbDtcbiAgICAgICAgdGhpcy5fbW9kZSA9IG1lc3NhZ2UuZ2V0TW9kZSgpO1xuICAgICAgICB0aGlzLnBhcmFtcyA9IG1lc3NhZ2UucGFyYW1zIHx8IHt9O1xuICAgICAgICBjb25zdCBtb2Rlc0Zyb21GbGFncyA9IG1lc3NhZ2UuZGVjb2RlTW9kZXNGcm9tRmxhZ3MoKTtcbiAgICAgICAgdGhpcy5tb2RlcyA9IG1vZGVzRnJvbUZsYWdzICYmIGFsbFRvTG93ZXJDYXNlKG1vZGVzRnJvbUZsYWdzKSB8fCB2b2lkIDA7XG4gICAgICAgIGNvbnN0IHJlc3VtZWQgPSBtZXNzYWdlLmhhc0ZsYWcoXCJSRVNVTUVEXCIpO1xuICAgICAgICBjb25zdCBoYXNQcmVzZW5jZSA9IG1lc3NhZ2UuaGFzRmxhZyhcIkhBU19QUkVTRU5DRVwiKTtcbiAgICAgICAgY29uc3QgaGFzQmFja2xvZyA9IG1lc3NhZ2UuaGFzRmxhZyhcIkhBU19CQUNLTE9HXCIpO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gXCJhdHRhY2hlZFwiKSB7XG4gICAgICAgICAgaWYgKCFyZXN1bWVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcHJlc2VuY2UpIHtcbiAgICAgICAgICAgICAgdGhpcy5fcHJlc2VuY2Uub25BdHRhY2hlZChoYXNQcmVzZW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IG5ldyBjaGFubmVsc3RhdGVjaGFuZ2VfZGVmYXVsdCh0aGlzLnN0YXRlLCB0aGlzLnN0YXRlLCByZXN1bWVkLCBoYXNCYWNrbG9nLCBtZXNzYWdlLmVycm9yKTtcbiAgICAgICAgICB0aGlzLl9hbGxDaGFubmVsQ2hhbmdlcy5lbWl0KFwidXBkYXRlXCIsIGNoYW5nZSk7XG4gICAgICAgICAgaWYgKCFyZXN1bWVkIHx8IHRoaXMuY2hhbm5lbE9wdGlvbnMudXBkYXRlT25BdHRhY2hlZCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwidXBkYXRlXCIsIGNoYW5nZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09IFwiZGV0YWNoaW5nXCIpIHtcbiAgICAgICAgICB0aGlzLmNoZWNrUGVuZGluZ1N0YXRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZShcImF0dGFjaGVkXCIsIG1lc3NhZ2UuZXJyb3IsIHJlc3VtZWQsIGhhc1ByZXNlbmNlLCBoYXNCYWNrbG9nKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgYWN0aW9uczIuREVUQUNIRUQ6IHtcbiAgICAgICAgY29uc3QgZGV0YWNoRXJyID0gbWVzc2FnZS5lcnJvciA/IEVycm9ySW5mby5mcm9tVmFsdWVzKG1lc3NhZ2UuZXJyb3IpIDogbmV3IEVycm9ySW5mbyhcIkNoYW5uZWwgZGV0YWNoZWRcIiwgOTAwMDEsIDQwNCk7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBcImRldGFjaGluZ1wiKSB7XG4gICAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZShcImRldGFjaGVkXCIsIGRldGFjaEVycik7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PT0gXCJhdHRhY2hpbmdcIikge1xuICAgICAgICAgIHRoaXMubm90aWZ5U3RhdGUoXCJzdXNwZW5kZWRcIiwgZGV0YWNoRXJyKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlID09PSBcImF0dGFjaGVkXCIgfHwgdGhpcy5zdGF0ZSA9PT0gXCJzdXNwZW5kZWRcIikge1xuICAgICAgICAgIHRoaXMucmVxdWVzdFN0YXRlKFwiYXR0YWNoaW5nXCIsIGRldGFjaEVycik7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIGFjdGlvbnMyLlNZTkM6XG4gICAgICAgIGlzU3luYyA9IHRydWU7XG4gICAgICAgIHN5bmNDaGFubmVsU2VyaWFsID0gdGhpcy5zeW5jQ2hhbm5lbFNlcmlhbCA9IG1lc3NhZ2UuY2hhbm5lbFNlcmlhbDtcbiAgICAgICAgaWYgKCFtZXNzYWdlLnByZXNlbmNlKVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBhY3Rpb25zMi5QUkVTRU5DRToge1xuICAgICAgICBjb25zdCBwcmVzZW5jZSA9IG1lc3NhZ2UucHJlc2VuY2U7XG4gICAgICAgIGlmICghcHJlc2VuY2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGlkLCBjb25uZWN0aW9uSWQsIHRpbWVzdGFtcCB9ID0gbWVzc2FnZTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuY2hhbm5lbE9wdGlvbnM7XG4gICAgICAgIGxldCBwcmVzZW5jZU1zZztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVzZW5jZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcmVzZW5jZU1zZyA9IHByZXNlbmNlW2ldO1xuICAgICAgICAgICAgYXdhaXQgZGVjb2RlMihwcmVzZW5jZU1zZywgb3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoIXByZXNlbmNlTXNnLmNvbm5lY3Rpb25JZClcbiAgICAgICAgICAgICAgcHJlc2VuY2VNc2cuY29ubmVjdGlvbklkID0gY29ubmVjdGlvbklkO1xuICAgICAgICAgICAgaWYgKCFwcmVzZW5jZU1zZy50aW1lc3RhbXApXG4gICAgICAgICAgICAgIHByZXNlbmNlTXNnLnRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbiAgICAgICAgICAgIGlmICghcHJlc2VuY2VNc2cuaWQpXG4gICAgICAgICAgICAgIHByZXNlbmNlTXNnLmlkID0gaWQgKyBcIjpcIiArIGk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICAgICAgICBcIlJlYWx0aW1lQ2hhbm5lbC5wcm9jZXNzTWVzc2FnZSgpXCIsXG4gICAgICAgICAgICAgIGUudG9TdHJpbmcoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ByZXNlbmNlKSB7XG4gICAgICAgICAgdGhpcy5fcHJlc2VuY2Uuc2V0UHJlc2VuY2UocHJlc2VuY2UsIGlzU3luYywgc3luY0NoYW5uZWxTZXJpYWwpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBhY3Rpb25zMi5NRVNTQUdFOiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBcImF0dGFjaGVkXCIpIHtcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NQUpPUixcbiAgICAgICAgICAgIFwiUmVhbHRpbWVDaGFubmVsLnByb2Nlc3NNZXNzYWdlKClcIixcbiAgICAgICAgICAgICdNZXNzYWdlIFwiJyArIG1lc3NhZ2UuaWQgKyAnXCIgc2tpcHBlZCBhcyB0aGlzIGNoYW5uZWwgXCInICsgdGhpcy5uYW1lICsgJ1wiIHN0YXRlIGlzIG5vdCBcImF0dGFjaGVkXCIgKHN0YXRlIGlzIFwiJyArIHRoaXMuc3RhdGUgKyAnXCIpLidcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXNzYWdlcyA9IG1lc3NhZ2UubWVzc2FnZXMsIGZpcnN0TWVzc2FnZSA9IG1lc3NhZ2VzWzBdLCBsYXN0TWVzc2FnZSA9IG1lc3NhZ2VzW21lc3NhZ2VzLmxlbmd0aCAtIDFdLCBpZCA9IG1lc3NhZ2UuaWQsIGNvbm5lY3Rpb25JZCA9IG1lc3NhZ2UuY29ubmVjdGlvbklkLCB0aW1lc3RhbXAgPSBtZXNzYWdlLnRpbWVzdGFtcDtcbiAgICAgICAgaWYgKGZpcnN0TWVzc2FnZS5leHRyYXMgJiYgZmlyc3RNZXNzYWdlLmV4dHJhcy5kZWx0YSAmJiBmaXJzdE1lc3NhZ2UuZXh0cmFzLmRlbHRhLmZyb20gIT09IHRoaXMuX2xhc3RQYXlsb2FkLm1lc3NhZ2VJZCkge1xuICAgICAgICAgIGNvbnN0IG1zZyA9ICdEZWx0YSBtZXNzYWdlIGRlY29kZSBmYWlsdXJlIC0gcHJldmlvdXMgbWVzc2FnZSBub3QgYXZhaWxhYmxlIGZvciBtZXNzYWdlIFwiJyArIG1lc3NhZ2UuaWQgKyAnXCIgb24gdGhpcyBjaGFubmVsIFwiJyArIHRoaXMubmFtZSArICdcIi4nO1xuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLCBcIlJlYWx0aW1lQ2hhbm5lbC5wcm9jZXNzTWVzc2FnZSgpXCIsIG1zZyk7XG4gICAgICAgICAgdGhpcy5fc3RhcnREZWNvZGVGYWlsdXJlUmVjb3ZlcnkobmV3IEVycm9ySW5mbyhtc2csIDQwMDE4LCA0MDApKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgbXNnID0gbWVzc2FnZXNbaV07XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IGRlY29kZShtc2csIHRoaXMuX2RlY29kaW5nQ29udGV4dCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICAgICAgICBcIlJlYWx0aW1lQ2hhbm5lbC5wcm9jZXNzTWVzc2FnZSgpXCIsXG4gICAgICAgICAgICAgIGUudG9TdHJpbmcoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZS5jb2RlKSB7XG4gICAgICAgICAgICAgIGNhc2UgNDAwMTg6XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhcnREZWNvZGVGYWlsdXJlUmVjb3ZlcnkoZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICBjYXNlIDQwMDE5OlxuICAgICAgICAgICAgICBjYXNlIDQwMDIxOlxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5U3RhdGUoXCJmYWlsZWRcIiwgZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIW1zZy5jb25uZWN0aW9uSWQpXG4gICAgICAgICAgICBtc2cuY29ubmVjdGlvbklkID0gY29ubmVjdGlvbklkO1xuICAgICAgICAgIGlmICghbXNnLnRpbWVzdGFtcClcbiAgICAgICAgICAgIG1zZy50aW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4gICAgICAgICAgaWYgKCFtc2cuaWQpXG4gICAgICAgICAgICBtc2cuaWQgPSBpZCArIFwiOlwiICsgaTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9sYXN0UGF5bG9hZC5tZXNzYWdlSWQgPSBsYXN0TWVzc2FnZS5pZDtcbiAgICAgICAgdGhpcy5fbGFzdFBheWxvYWQucHJvdG9jb2xNZXNzYWdlQ2hhbm5lbFNlcmlhbCA9IG1lc3NhZ2UuY2hhbm5lbFNlcmlhbDtcbiAgICAgICAgdGhpcy5vbkV2ZW50KG1lc3NhZ2VzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIGFjdGlvbnMyLkVSUk9SOiB7XG4gICAgICAgIGNvbnN0IGVyciA9IG1lc3NhZ2UuZXJyb3I7XG4gICAgICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgPT0gODAwMTYpIHtcbiAgICAgICAgICB0aGlzLmNoZWNrUGVuZGluZ1N0YXRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZShcImZhaWxlZFwiLCBFcnJvckluZm8uZnJvbVZhbHVlcyhlcnIpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgICAgXCJSZWFsdGltZUNoYW5uZWwucHJvY2Vzc01lc3NhZ2UoKVwiLFxuICAgICAgICAgIFwiRmF0YWwgcHJvdG9jb2wgZXJyb3I6IHVucmVjb2duaXNlZCBhY3Rpb24gKFwiICsgbWVzc2FnZS5hY3Rpb24gKyBcIilcIlxuICAgICAgICApO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLmFib3J0KGNvbm5lY3Rpb25lcnJvcnNfZGVmYXVsdC51bmtub3duQ2hhbm5lbEVycigpKTtcbiAgICB9XG4gIH1cbiAgX3N0YXJ0RGVjb2RlRmFpbHVyZVJlY292ZXJ5KHJlYXNvbikge1xuICAgIGlmICghdGhpcy5fbGFzdFBheWxvYWQuZGVjb2RlRmFpbHVyZVJlY292ZXJ5SW5Qcm9ncmVzcykge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01BSk9SLFxuICAgICAgICBcIlJlYWx0aW1lQ2hhbm5lbC5wcm9jZXNzTWVzc2FnZSgpXCIsXG4gICAgICAgIFwiU3RhcnRpbmcgZGVjb2RlIGZhaWx1cmUgcmVjb3ZlcnkgcHJvY2Vzcy5cIlxuICAgICAgKTtcbiAgICAgIHRoaXMuX2xhc3RQYXlsb2FkLmRlY29kZUZhaWx1cmVSZWNvdmVyeUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgdGhpcy5fYXR0YWNoKHRydWUsIHJlYXNvbiwgKCkgPT4ge1xuICAgICAgICB0aGlzLl9sYXN0UGF5bG9hZC5kZWNvZGVGYWlsdXJlUmVjb3ZlcnlJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgb25BdHRhY2hlZCgpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgIFwiUmVhbHRpbWVDaGFubmVsLm9uQXR0YWNoZWRcIixcbiAgICAgIFwiYWN0aXZhdGluZyBjaGFubmVsOyBuYW1lID0gXCIgKyB0aGlzLm5hbWVcbiAgICApO1xuICB9XG4gIG5vdGlmeVN0YXRlKHN0YXRlLCByZWFzb24sIHJlc3VtZWQsIGhhc1ByZXNlbmNlLCBoYXNCYWNrbG9nKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICBcIlJlYWx0aW1lQ2hhbm5lbC5ub3RpZnlTdGF0ZVwiLFxuICAgICAgXCJuYW1lID0gXCIgKyB0aGlzLm5hbWUgKyBcIiwgY3VycmVudCBzdGF0ZSA9IFwiICsgdGhpcy5zdGF0ZSArIFwiLCBub3RpZnlpbmcgc3RhdGUgXCIgKyBzdGF0ZVxuICAgICk7XG4gICAgdGhpcy5jbGVhclN0YXRlVGltZXIoKTtcbiAgICBpZiAoW1wiZGV0YWNoZWRcIiwgXCJzdXNwZW5kZWRcIiwgXCJmYWlsZWRcIl0uaW5jbHVkZXMoc3RhdGUpKSB7XG4gICAgICB0aGlzLnByb3BlcnRpZXMuY2hhbm5lbFNlcmlhbCA9IG51bGw7XG4gICAgfVxuICAgIGlmIChzdGF0ZSA9PT0gdGhpcy5zdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5fcHJlc2VuY2UpIHtcbiAgICAgIHRoaXMuX3ByZXNlbmNlLmFjdE9uQ2hhbm5lbFN0YXRlKHN0YXRlLCBoYXNQcmVzZW5jZSwgcmVhc29uKTtcbiAgICB9XG4gICAgaWYgKHN0YXRlID09PSBcInN1c3BlbmRlZFwiICYmIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIuc3RhdGUuc2VuZEV2ZW50cykge1xuICAgICAgdGhpcy5zdGFydFJldHJ5VGltZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jYW5jZWxSZXRyeVRpbWVyKCk7XG4gICAgfVxuICAgIGlmIChyZWFzb24pIHtcbiAgICAgIHRoaXMuZXJyb3JSZWFzb24gPSByZWFzb247XG4gICAgfVxuICAgIGNvbnN0IGNoYW5nZSA9IG5ldyBjaGFubmVsc3RhdGVjaGFuZ2VfZGVmYXVsdCh0aGlzLnN0YXRlLCBzdGF0ZSwgcmVzdW1lZCwgaGFzQmFja2xvZywgcmVhc29uKTtcbiAgICBjb25zdCBhY3Rpb24gPSAnQ2hhbm5lbCBzdGF0ZSBmb3IgY2hhbm5lbCBcIicgKyB0aGlzLm5hbWUgKyAnXCInO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBzdGF0ZSArIChyZWFzb24gPyBcIjsgcmVhc29uOiBcIiArIHJlYXNvbiA6IFwiXCIpO1xuICAgIGlmIChzdGF0ZSA9PT0gXCJmYWlsZWRcIikge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIGFjdGlvbiwgbWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01BSk9SLCBhY3Rpb24sIG1lc3NhZ2UpO1xuICAgIH1cbiAgICBpZiAoc3RhdGUgIT09IFwiYXR0YWNoaW5nXCIgJiYgc3RhdGUgIT09IFwic3VzcGVuZGVkXCIpIHtcbiAgICAgIHRoaXMucmV0cnlDb3VudCA9IDA7XG4gICAgfVxuICAgIGlmIChzdGF0ZSA9PT0gXCJhdHRhY2hlZFwiKSB7XG4gICAgICB0aGlzLm9uQXR0YWNoZWQoKTtcbiAgICB9XG4gICAgaWYgKHN0YXRlID09PSBcImF0dGFjaGVkXCIpIHtcbiAgICAgIHRoaXMuX2F0dGFjaFJlc3VtZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gXCJkZXRhY2hpbmdcIiB8fCBzdGF0ZSA9PT0gXCJmYWlsZWRcIikge1xuICAgICAgdGhpcy5fYXR0YWNoUmVzdW1lID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICB0aGlzLl9hbGxDaGFubmVsQ2hhbmdlcy5lbWl0KHN0YXRlLCBjaGFuZ2UpO1xuICAgIHRoaXMuZW1pdChzdGF0ZSwgY2hhbmdlKTtcbiAgfVxuICByZXF1ZXN0U3RhdGUoc3RhdGUsIHJlYXNvbikge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJSZWFsdGltZUNoYW5uZWwucmVxdWVzdFN0YXRlXCIsXG4gICAgICBcIm5hbWUgPSBcIiArIHRoaXMubmFtZSArIFwiLCBzdGF0ZSA9IFwiICsgc3RhdGVcbiAgICApO1xuICAgIHRoaXMubm90aWZ5U3RhdGUoc3RhdGUsIHJlYXNvbik7XG4gICAgdGhpcy5jaGVja1BlbmRpbmdTdGF0ZSgpO1xuICB9XG4gIGNoZWNrUGVuZGluZ1N0YXRlKCkge1xuICAgIGNvbnN0IGNtU3RhdGUgPSB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLnN0YXRlO1xuICAgIGlmICghY21TdGF0ZS5zZW5kRXZlbnRzKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgIFwiUmVhbHRpbWVDaGFubmVsLmNoZWNrUGVuZGluZ1N0YXRlXCIsXG4gICAgICAgIFwic2VuZEV2ZW50cyBpcyBmYWxzZTsgc3RhdGUgaXMgXCIgKyB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLnN0YXRlLnN0YXRlXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgIFwiUmVhbHRpbWVDaGFubmVsLmNoZWNrUGVuZGluZ1N0YXRlXCIsXG4gICAgICBcIm5hbWUgPSBcIiArIHRoaXMubmFtZSArIFwiLCBzdGF0ZSA9IFwiICsgdGhpcy5zdGF0ZVxuICAgICk7XG4gICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICBjYXNlIFwiYXR0YWNoaW5nXCI6XG4gICAgICAgIHRoaXMuc3RhcnRTdGF0ZVRpbWVySWZOb3RSdW5uaW5nKCk7XG4gICAgICAgIHRoaXMuYXR0YWNoSW1wbCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkZXRhY2hpbmdcIjpcbiAgICAgICAgdGhpcy5zdGFydFN0YXRlVGltZXJJZk5vdFJ1bm5pbmcoKTtcbiAgICAgICAgdGhpcy5kZXRhY2hJbXBsKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImF0dGFjaGVkXCI6XG4gICAgICAgIHRoaXMuc3luYygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICB0aW1lb3V0UGVuZGluZ1N0YXRlKCkge1xuICAgIHN3aXRjaCAodGhpcy5zdGF0ZSkge1xuICAgICAgY2FzZSBcImF0dGFjaGluZ1wiOiB7XG4gICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvckluZm8oXCJDaGFubmVsIGF0dGFjaCB0aW1lZCBvdXRcIiwgOTAwMDcsIDQwOCk7XG4gICAgICAgIHRoaXMubm90aWZ5U3RhdGUoXCJzdXNwZW5kZWRcIiwgZXJyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiZGV0YWNoaW5nXCI6IHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9ySW5mbyhcIkNoYW5uZWwgZGV0YWNoIHRpbWVkIG91dFwiLCA5MDAwNywgNDA4KTtcbiAgICAgICAgdGhpcy5ub3RpZnlTdGF0ZShcImF0dGFjaGVkXCIsIGVycik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5jaGVja1BlbmRpbmdTdGF0ZSgpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhcnRTdGF0ZVRpbWVySWZOb3RSdW5uaW5nKCkge1xuICAgIGlmICghdGhpcy5zdGF0ZVRpbWVyKSB7XG4gICAgICB0aGlzLnN0YXRlVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiUmVhbHRpbWVDaGFubmVsLnN0YXJ0U3RhdGVUaW1lcklmTm90UnVubmluZ1wiLCBcInRpbWVyIGV4cGlyZWRcIik7XG4gICAgICAgIHRoaXMuc3RhdGVUaW1lciA9IG51bGw7XG4gICAgICAgIHRoaXMudGltZW91dFBlbmRpbmdTdGF0ZSgpO1xuICAgICAgfSwgdGhpcy5jbGllbnQub3B0aW9ucy50aW1lb3V0cy5yZWFsdGltZVJlcXVlc3RUaW1lb3V0KTtcbiAgICB9XG4gIH1cbiAgY2xlYXJTdGF0ZVRpbWVyKCkge1xuICAgIGNvbnN0IHN0YXRlVGltZXIgPSB0aGlzLnN0YXRlVGltZXI7XG4gICAgaWYgKHN0YXRlVGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dChzdGF0ZVRpbWVyKTtcbiAgICAgIHRoaXMuc3RhdGVUaW1lciA9IG51bGw7XG4gICAgfVxuICB9XG4gIHN0YXJ0UmV0cnlUaW1lcigpIHtcbiAgICBpZiAodGhpcy5yZXRyeVRpbWVyKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMucmV0cnlDb3VudCsrO1xuICAgIGNvbnN0IHJldHJ5RGVsYXkgPSBnZXRSZXRyeVRpbWUodGhpcy5jbGllbnQub3B0aW9ucy50aW1lb3V0cy5jaGFubmVsUmV0cnlUaW1lb3V0LCB0aGlzLnJldHJ5Q291bnQpO1xuICAgIHRoaXMucmV0cnlUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IFwic3VzcGVuZGVkXCIgJiYgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5zdGF0ZS5zZW5kRXZlbnRzKSB7XG4gICAgICAgIHRoaXMucmV0cnlUaW1lciA9IG51bGw7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgICAgXCJSZWFsdGltZUNoYW5uZWwgcmV0cnkgdGltZXIgZXhwaXJlZFwiLFxuICAgICAgICAgIFwiYXR0ZW1wdGluZyBhIG5ldyBhdHRhY2hcIlxuICAgICAgICApO1xuICAgICAgICB0aGlzLnJlcXVlc3RTdGF0ZShcImF0dGFjaGluZ1wiKTtcbiAgICAgIH1cbiAgICB9LCByZXRyeURlbGF5KTtcbiAgfVxuICBjYW5jZWxSZXRyeVRpbWVyKCkge1xuICAgIGlmICh0aGlzLnJldHJ5VGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnJldHJ5VGltZXIpO1xuICAgICAgdGhpcy5yZXRyeVRpbWVyID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgLyogQHJldHVybnMgbnVsbCAoaWYgY2FuIHNhZmVseSBiZSByZWxlYXNlZCkgfCBFcnJvckluZm8gKGlmIGNhbm5vdCkgKi9cbiAgZ2V0UmVsZWFzZUVycigpIHtcbiAgICBjb25zdCBzID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAocyA9PT0gXCJpbml0aWFsaXplZFwiIHx8IHMgPT09IFwiZGV0YWNoZWRcIiB8fCBzID09PSBcImZhaWxlZFwiKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvckluZm8oXG4gICAgICBcIkNhbiBvbmx5IHJlbGVhc2UgYSBjaGFubmVsIGluIGEgc3RhdGUgd2hlcmUgdGhlcmUgaXMgbm8gcG9zc2liaWxpdHkgb2YgZnVydGhlciB1cGRhdGVzIGZyb20gdGhlIHNlcnZlciBiZWluZyByZWNlaXZlZCAoaW5pdGlhbGl6ZWQsIGRldGFjaGVkLCBvciBmYWlsZWQpOyB3YXMgXCIgKyBzLFxuICAgICAgOTAwMDEsXG4gICAgICA0MDBcbiAgICApO1xuICB9XG4gIHNldENoYW5uZWxTZXJpYWwoY2hhbm5lbFNlcmlhbCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJSZWFsdGltZUNoYW5uZWwuc2V0Q2hhbm5lbFNlcmlhbCgpXCIsXG4gICAgICBcIlVwZGF0aW5nIGNoYW5uZWwgc2VyaWFsOyBzZXJpYWwgPSBcIiArIGNoYW5uZWxTZXJpYWwgKyBcIjsgcHJldmlvdXMgPSBcIiArIHRoaXMucHJvcGVydGllcy5jaGFubmVsU2VyaWFsXG4gICAgKTtcbiAgICBpZiAoY2hhbm5lbFNlcmlhbCkge1xuICAgICAgdGhpcy5wcm9wZXJ0aWVzLmNoYW5uZWxTZXJpYWwgPSBjaGFubmVsU2VyaWFsO1xuICAgIH1cbiAgfVxuICBhc3luYyBzdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnJlc3QuY2hhbm5lbE1peGluLnN0YXR1cyh0aGlzKTtcbiAgfVxufTtcbmZ1bmN0aW9uIG9taXRBZ2VudChjaGFubmVsUGFyYW1zKSB7XG4gIGNvbnN0IF9hMiA9IGNoYW5uZWxQYXJhbXMgfHwge30sIHsgYWdlbnQ6IF8gfSA9IF9hMiwgcGFyYW1zV2l0aG91dEFnZW50ID0gX19vYmpSZXN0KF9hMiwgW1wiYWdlbnRcIl0pO1xuICByZXR1cm4gcGFyYW1zV2l0aG91dEFnZW50O1xufVxudmFyIHJlYWx0aW1lY2hhbm5lbF9kZWZhdWx0ID0gUmVhbHRpbWVDaGFubmVsO1xuXG4vLyBzcmMvY29tbW9uL2xpYi9jbGllbnQvYmFzZXJlYWx0aW1lLnRzXG52YXIgX0Jhc2VSZWFsdGltZSA9IGNsYXNzIF9CYXNlUmVhbHRpbWUgZXh0ZW5kcyBiYXNlY2xpZW50X2RlZmF1bHQge1xuICAvKlxuICAgKiBUaGUgcHVibGljIHR5cGluZ3MgZGVjbGFyZSB0aGF0IHRoaXMgb25seSBhY2NlcHRzIGFuIG9iamVjdCwgYnV0IHNpbmNlIHdlIHdhbnQgdG8gZW1pdCBhIGdvb2QgZXJyb3IgbWVzc2FnZSBpbiB0aGUgY2FzZSB3aGVyZSBhIG5vbi1UeXBlU2NyaXB0IHVzZXIgZG9lcyBvbmUgb2YgdGhlc2UgdGhpbmdzOlxuICAgKlxuICAgKiAxLiBwYXNzZXMgYSBzdHJpbmcgKHdoaWNoIGlzIHF1aXRlIGxpa2VseSBpZiB0aGV54oCZcmUgZS5nLiBtaWdyYXRpbmcgZnJvbSB0aGUgZGVmYXVsdCB2YXJpYW50IHRvIHRoZSBtb2R1bGFyIHZhcmlhbnQpXG4gICAqIDIuIHBhc3NlcyBubyBhcmd1bWVudCBhdCBhbGxcbiAgICpcbiAgICogdGVsbCB0aGUgY29tcGlsZXIgdGhhdCB0aGVzZSBjYXNlcyBhcmUgcG9zc2libGUgc28gdGhhdCBpdCBmb3JjZXMgdXMgdG8gaGFuZGxlIHRoZW0uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdmFyIF9hMiwgX2I7XG4gICAgc3VwZXIoZGVmYXVsdHNfZGVmYXVsdC5vYmplY3RpZnlPcHRpb25zKG9wdGlvbnMsIGZhbHNlLCBcIkJhc2VSZWFsdGltZVwiLCBsb2dnZXJfZGVmYXVsdC5kZWZhdWx0TG9nZ2VyKSk7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiUmVhbHRpbWUoKVwiLCBcIlwiKTtcbiAgICBpZiAodHlwZW9mIEVkZ2VSdW50aW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFxuICAgICAgICBgQWJseS5SZWFsdGltZSBpbnN0YW5jZSBjYW5ub3QgYmUgdXNlZCBpbiBWZXJjZWwgRWRnZSBydW50aW1lLiBJZiB5b3UgYXJlIHJ1bm5pbmcgVmVyY2VsIEVkZ2UgZnVuY3Rpb25zLCBwbGVhc2UgcmVwbGFjZSB5b3VyIFwibmV3IEFibHkuUmVhbHRpbWUoKVwiIHdpdGggXCJuZXcgQWJseS5SZXN0KClcIiBhbmQgdXNlIEFibHkgUmVzdCBBUEkgaW5zdGVhZCBvZiB0aGUgUmVhbHRpbWUgQVBJLiBJZiB5b3UgYXJlIHNlcnZlci1yZW5kZXJpbmcgeW91ciBhcHBsaWNhdGlvbiBpbiB0aGUgVmVyY2VsIEVkZ2UgcnVudGltZSwgcGxlYXNlIHVzZSB0aGUgY29uZGl0aW9uIFwiaWYgKHR5cGVvZiBFZGdlUnVudGltZSA9PT0gJ3N0cmluZycpXCIgdG8gcHJldmVudCBpbnN0YW50aWF0aW5nIEFibHkuUmVhbHRpbWUgaW5zdGFuY2UgZHVyaW5nIFNTUiBpbiB0aGUgVmVyY2VsIEVkZ2UgcnVudGltZS5gLFxuICAgICAgICA0ZTQsXG4gICAgICAgIDQwMFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5fYWRkaXRpb25hbFRyYW5zcG9ydEltcGxlbWVudGF0aW9ucyA9IF9CYXNlUmVhbHRpbWUudHJhbnNwb3J0SW1wbGVtZW50YXRpb25zRnJvbVBsdWdpbnModGhpcy5vcHRpb25zLnBsdWdpbnMpO1xuICAgIHRoaXMuX1JlYWx0aW1lUHJlc2VuY2UgPSAoX2IgPSAoX2EyID0gdGhpcy5vcHRpb25zLnBsdWdpbnMpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuUmVhbHRpbWVQcmVzZW5jZSkgIT0gbnVsbCA/IF9iIDogbnVsbDtcbiAgICB0aGlzLmNvbm5lY3Rpb24gPSBuZXcgY29ubmVjdGlvbl9kZWZhdWx0KHRoaXMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5fY2hhbm5lbHMgPSBuZXcgQ2hhbm5lbHMyKHRoaXMpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b0Nvbm5lY3QgIT09IGZhbHNlKVxuICAgICAgdGhpcy5jb25uZWN0KCk7XG4gIH1cbiAgc3RhdGljIHRyYW5zcG9ydEltcGxlbWVudGF0aW9uc0Zyb21QbHVnaW5zKHBsdWdpbnMpIHtcbiAgICBjb25zdCB0cmFuc3BvcnRzID0ge307XG4gICAgaWYgKHBsdWdpbnMgPT0gbnVsbCA/IHZvaWQgMCA6IHBsdWdpbnMuV2ViU29ja2V0VHJhbnNwb3J0KSB7XG4gICAgICB0cmFuc3BvcnRzW1RyYW5zcG9ydE5hbWVzLldlYlNvY2tldF0gPSBwbHVnaW5zLldlYlNvY2tldFRyYW5zcG9ydDtcbiAgICB9XG4gICAgaWYgKHBsdWdpbnMgPT0gbnVsbCA/IHZvaWQgMCA6IHBsdWdpbnMuWEhSUG9sbGluZykge1xuICAgICAgdHJhbnNwb3J0c1tUcmFuc3BvcnROYW1lcy5YaHJQb2xsaW5nXSA9IHBsdWdpbnMuWEhSUG9sbGluZztcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zcG9ydHM7XG4gIH1cbiAgZ2V0IGNoYW5uZWxzKCkge1xuICAgIHJldHVybiB0aGlzLl9jaGFubmVscztcbiAgfVxuICBjb25uZWN0KCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIlJlYWx0aW1lLmNvbm5lY3QoKVwiLCBcIlwiKTtcbiAgICB0aGlzLmNvbm5lY3Rpb24uY29ubmVjdCgpO1xuICB9XG4gIGNsb3NlKCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIlJlYWx0aW1lLmNsb3NlKClcIiwgXCJcIik7XG4gICAgdGhpcy5jb25uZWN0aW9uLmNsb3NlKCk7XG4gIH1cbn07XG4vLyBpbnRlcm5hbCBBUEkgdG8gbWFrZSBFdmVudEVtaXR0ZXIgdXNhYmxlIGluIG90aGVyIFNES3Ncbl9CYXNlUmVhbHRpbWUuRXZlbnRFbWl0dGVyID0gZXZlbnRlbWl0dGVyX2RlZmF1bHQ7XG52YXIgQmFzZVJlYWx0aW1lID0gX0Jhc2VSZWFsdGltZTtcbnZhciBDaGFubmVsczIgPSBjbGFzcyBleHRlbmRzIGV2ZW50ZW1pdHRlcl9kZWZhdWx0IHtcbiAgY29uc3RydWN0b3IocmVhbHRpbWUpIHtcbiAgICBzdXBlcihyZWFsdGltZS5sb2dnZXIpO1xuICAgIHRoaXMucmVhbHRpbWUgPSByZWFsdGltZTtcbiAgICB0aGlzLmFsbCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHJlYWx0aW1lLmNvbm5lY3Rpb24uY29ubmVjdGlvbk1hbmFnZXIub24oXCJ0cmFuc3BvcnQuYWN0aXZlXCIsICgpID0+IHtcbiAgICAgIHRoaXMub25UcmFuc3BvcnRBY3RpdmUoKTtcbiAgICB9KTtcbiAgfVxuICBjaGFubmVsU2VyaWFscygpIHtcbiAgICBsZXQgc2VyaWFscyA9IHt9O1xuICAgIGZvciAoY29uc3QgbmFtZSBvZiBrZXlzQXJyYXkodGhpcy5hbGwsIHRydWUpKSB7XG4gICAgICBjb25zdCBjaGFubmVsID0gdGhpcy5hbGxbbmFtZV07XG4gICAgICBpZiAoY2hhbm5lbC5wcm9wZXJ0aWVzLmNoYW5uZWxTZXJpYWwpIHtcbiAgICAgICAgc2VyaWFsc1tuYW1lXSA9IGNoYW5uZWwucHJvcGVydGllcy5jaGFubmVsU2VyaWFsO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2VyaWFscztcbiAgfVxuICAvLyByZWNvdmVyQ2hhbm5lbHMgZ2V0cyB0aGUgZ2l2ZW4gY2hhbm5lbHMgYW5kIHNldHMgdGhlaXIgY2hhbm5lbCBzZXJpYWxzLlxuICByZWNvdmVyQ2hhbm5lbHMoY2hhbm5lbFNlcmlhbHMpIHtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2Yga2V5c0FycmF5KGNoYW5uZWxTZXJpYWxzLCB0cnVlKSkge1xuICAgICAgY29uc3QgY2hhbm5lbCA9IHRoaXMuZ2V0KG5hbWUpO1xuICAgICAgY2hhbm5lbC5wcm9wZXJ0aWVzLmNoYW5uZWxTZXJpYWwgPSBjaGFubmVsU2VyaWFsc1tuYW1lXTtcbiAgICB9XG4gIH1cbiAgLy8gQWNjZXNzIHRvIHRoaXMgbWV0aG9kIGlzIHN5bmNocm9uaXNlZCBieSBDb25uZWN0aW9uTWFuYWdlciNwcm9jZXNzQ2hhbm5lbE1lc3NhZ2UuXG4gIGFzeW5jIHByb2Nlc3NDaGFubmVsTWVzc2FnZShtc2cpIHtcbiAgICBjb25zdCBjaGFubmVsTmFtZSA9IG1zZy5jaGFubmVsO1xuICAgIGlmIChjaGFubmVsTmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgIFwiQ2hhbm5lbHMucHJvY2Vzc0NoYW5uZWxNZXNzYWdlKClcIixcbiAgICAgICAgXCJyZWNlaXZlZCBldmVudCB1bnNwZWNpZmllZCBjaGFubmVsLCBhY3Rpb24gPSBcIiArIG1zZy5hY3Rpb25cbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNoYW5uZWwgPSB0aGlzLmFsbFtjaGFubmVsTmFtZV07XG4gICAgaWYgKCFjaGFubmVsKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgIFwiQ2hhbm5lbHMucHJvY2Vzc0NoYW5uZWxNZXNzYWdlKClcIixcbiAgICAgICAgXCJyZWNlaXZlZCBldmVudCBmb3Igbm9uLWV4aXN0ZW50IGNoYW5uZWw6IFwiICsgY2hhbm5lbE5hbWVcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGF3YWl0IGNoYW5uZWwucHJvY2Vzc01lc3NhZ2UobXNnKTtcbiAgfVxuICAvKiBjYWxsZWQgd2hlbiBhIHRyYW5zcG9ydCBiZWNvbWVzIGNvbm5lY3RlZDsgcmVhdHRlbXB0IGF0dGFjaC9kZXRhY2hcbiAgICogZm9yIGNoYW5uZWxzIHRoYXQgYXJlIGF0dGFjaGluZyBvciBkZXRhY2hpbmcuICovXG4gIG9uVHJhbnNwb3J0QWN0aXZlKCkge1xuICAgIGZvciAoY29uc3QgY2hhbm5lbE5hbWUgaW4gdGhpcy5hbGwpIHtcbiAgICAgIGNvbnN0IGNoYW5uZWwgPSB0aGlzLmFsbFtjaGFubmVsTmFtZV07XG4gICAgICBpZiAoY2hhbm5lbC5zdGF0ZSA9PT0gXCJhdHRhY2hpbmdcIiB8fCBjaGFubmVsLnN0YXRlID09PSBcImRldGFjaGluZ1wiKSB7XG4gICAgICAgIGNoYW5uZWwuY2hlY2tQZW5kaW5nU3RhdGUoKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbC5zdGF0ZSA9PT0gXCJzdXNwZW5kZWRcIikge1xuICAgICAgICBjaGFubmVsLl9hdHRhY2goZmFsc2UsIG51bGwpO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsLnN0YXRlID09PSBcImF0dGFjaGVkXCIpIHtcbiAgICAgICAgY2hhbm5lbC5yZXF1ZXN0U3RhdGUoXCJhdHRhY2hpbmdcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qIENvbm5lY3Rpb24gaW50ZXJydXB0aW9ucyAoaWUgd2hlbiB0aGUgY29ubmVjdGlvbiB3aWxsIG5vIGxvbmdlciBxdWV1ZVxuICAgKiBldmVudHMpIGltcGx5IGNvbm5lY3Rpb24gc3RhdGUgY2hhbmdlcyBmb3IgYW55IGNoYW5uZWwgd2hpY2ggaXMgZWl0aGVyXG4gICAqIGF0dGFjaGVkLCBwZW5kaW5nLCBvciB3aWxsIGF0dGVtcHQgdG8gYmVjb21lIGF0dGFjaGVkIGluIHRoZSBmdXR1cmUgKi9cbiAgcHJvcG9nYXRlQ29ubmVjdGlvbkludGVycnVwdGlvbihjb25uZWN0aW9uU3RhdGUsIHJlYXNvbikge1xuICAgIGNvbnN0IGNvbm5lY3Rpb25TdGF0ZVRvQ2hhbm5lbFN0YXRlID0ge1xuICAgICAgY2xvc2luZzogXCJkZXRhY2hlZFwiLFxuICAgICAgY2xvc2VkOiBcImRldGFjaGVkXCIsXG4gICAgICBmYWlsZWQ6IFwiZmFpbGVkXCIsXG4gICAgICBzdXNwZW5kZWQ6IFwic3VzcGVuZGVkXCJcbiAgICB9O1xuICAgIGNvbnN0IGZyb21DaGFubmVsU3RhdGVzID0gW1wiYXR0YWNoaW5nXCIsIFwiYXR0YWNoZWRcIiwgXCJkZXRhY2hpbmdcIiwgXCJzdXNwZW5kZWRcIl07XG4gICAgY29uc3QgdG9DaGFubmVsU3RhdGUgPSBjb25uZWN0aW9uU3RhdGVUb0NoYW5uZWxTdGF0ZVtjb25uZWN0aW9uU3RhdGVdO1xuICAgIGZvciAoY29uc3QgY2hhbm5lbElkIGluIHRoaXMuYWxsKSB7XG4gICAgICBjb25zdCBjaGFubmVsID0gdGhpcy5hbGxbY2hhbm5lbElkXTtcbiAgICAgIGlmIChmcm9tQ2hhbm5lbFN0YXRlcy5pbmNsdWRlcyhjaGFubmVsLnN0YXRlKSkge1xuICAgICAgICBjaGFubmVsLm5vdGlmeVN0YXRlKHRvQ2hhbm5lbFN0YXRlLCByZWFzb24pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBnZXQobmFtZSwgY2hhbm5lbE9wdGlvbnMpIHtcbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpO1xuICAgIGxldCBjaGFubmVsID0gdGhpcy5hbGxbbmFtZV07XG4gICAgaWYgKCFjaGFubmVsKSB7XG4gICAgICBjaGFubmVsID0gdGhpcy5hbGxbbmFtZV0gPSBuZXcgcmVhbHRpbWVjaGFubmVsX2RlZmF1bHQodGhpcy5yZWFsdGltZSwgbmFtZSwgY2hhbm5lbE9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAoY2hhbm5lbE9wdGlvbnMpIHtcbiAgICAgIGlmIChjaGFubmVsLl9zaG91bGRSZWF0dGFjaFRvU2V0T3B0aW9ucyhjaGFubmVsT3B0aW9ucywgY2hhbm5lbC5jaGFubmVsT3B0aW9ucykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcbiAgICAgICAgICBcIkNoYW5uZWxzLmdldCgpIGNhbm5vdCBiZSB1c2VkIHRvIHNldCBjaGFubmVsIG9wdGlvbnMgdGhhdCB3b3VsZCBjYXVzZSB0aGUgY2hhbm5lbCB0byByZWF0dGFjaC4gUGxlYXNlLCB1c2UgUmVhbHRpbWVDaGFubmVsLnNldE9wdGlvbnMoKSBpbnN0ZWFkLlwiLFxuICAgICAgICAgIDRlNCxcbiAgICAgICAgICA0MDBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNoYW5uZWwuc2V0T3B0aW9ucyhjaGFubmVsT3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBjaGFubmVsO1xuICB9XG4gIGdldERlcml2ZWQobmFtZSwgZGVyaXZlT3B0aW9ucywgY2hhbm5lbE9wdGlvbnMpIHtcbiAgICBpZiAoZGVyaXZlT3B0aW9ucy5maWx0ZXIpIHtcbiAgICAgIGNvbnN0IGZpbHRlciA9IHRvQmFzZTY0KGRlcml2ZU9wdGlvbnMuZmlsdGVyKTtcbiAgICAgIGNvbnN0IG1hdGNoID0gbWF0Y2hEZXJpdmVkQ2hhbm5lbChuYW1lKTtcbiAgICAgIG5hbWUgPSBgW2ZpbHRlcj0ke2ZpbHRlcn0ke21hdGNoLnF1YWxpZmllclBhcmFtfV0ke21hdGNoLmNoYW5uZWxOYW1lfWA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldChuYW1lLCBjaGFubmVsT3B0aW9ucyk7XG4gIH1cbiAgLyogSW5jbHVkZWQgdG8gc3VwcG9ydCBjZXJ0YWluIG5pY2hlIHVzZS1jYXNlczsgbW9zdCB1c2VycyBzaG91bGQgaWdub3JlIHRoaXMuXG4gICAqIFBsZWFzZSBkbyBub3QgdXNlIHRoaXMgdW5sZXNzIHlvdSBrbm93IHdoYXQgeW91J3JlIGRvaW5nICovXG4gIHJlbGVhc2UobmFtZSkge1xuICAgIG5hbWUgPSBTdHJpbmcobmFtZSk7XG4gICAgY29uc3QgY2hhbm5lbCA9IHRoaXMuYWxsW25hbWVdO1xuICAgIGlmICghY2hhbm5lbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZWxlYXNlRXJyID0gY2hhbm5lbC5nZXRSZWxlYXNlRXJyKCk7XG4gICAgaWYgKHJlbGVhc2VFcnIpIHtcbiAgICAgIHRocm93IHJlbGVhc2VFcnI7XG4gICAgfVxuICAgIGRlbGV0ZSB0aGlzLmFsbFtuYW1lXTtcbiAgfVxufTtcbnZhciBiYXNlcmVhbHRpbWVfZGVmYXVsdCA9IEJhc2VSZWFsdGltZTtcblxuLy8gc3JjL2NvbW1vbi9saWIvY2xpZW50L3JlYWx0aW1lcHJlc2VuY2UudHNcbmZ1bmN0aW9uIGdldENsaWVudElkKHJlYWx0aW1lUHJlc2VuY2UpIHtcbiAgcmV0dXJuIHJlYWx0aW1lUHJlc2VuY2UuY2hhbm5lbC5jbGllbnQuYXV0aC5jbGllbnRJZDtcbn1cbmZ1bmN0aW9uIGlzQW5vbnltb3VzT3JXaWxkY2FyZChyZWFsdGltZVByZXNlbmNlKSB7XG4gIGNvbnN0IHJlYWx0aW1lID0gcmVhbHRpbWVQcmVzZW5jZS5jaGFubmVsLmNsaWVudDtcbiAgY29uc3QgY2xpZW50SWQgPSByZWFsdGltZS5hdXRoLmNsaWVudElkO1xuICByZXR1cm4gKCFjbGllbnRJZCB8fCBjbGllbnRJZCA9PT0gXCIqXCIpICYmIHJlYWx0aW1lLmNvbm5lY3Rpb24uc3RhdGUgPT09IFwiY29ubmVjdGVkXCI7XG59XG5mdW5jdGlvbiB3YWl0QXR0YWNoZWQoY2hhbm5lbCwgY2FsbGJhY2ssIGFjdGlvbikge1xuICBzd2l0Y2ggKGNoYW5uZWwuc3RhdGUpIHtcbiAgICBjYXNlIFwiYXR0YWNoZWRcIjpcbiAgICBjYXNlIFwic3VzcGVuZGVkXCI6XG4gICAgICBhY3Rpb24oKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbml0aWFsaXplZFwiOlxuICAgIGNhc2UgXCJkZXRhY2hlZFwiOlxuICAgIGNhc2UgXCJkZXRhY2hpbmdcIjpcbiAgICBjYXNlIFwiYXR0YWNoaW5nXCI6XG4gICAgICB3aGVuUHJvbWlzZVNldHRsZXMoY2hhbm5lbC5hdHRhY2goKSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGFjdGlvbigpO1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgY2FsbGJhY2soRXJyb3JJbmZvLmZyb21WYWx1ZXMoY2hhbm5lbC5pbnZhbGlkU3RhdGVFcnJvcigpKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIG5ld2VyVGhhbihpdGVtLCBleGlzdGluZykge1xuICBpZiAoaXRlbS5pc1N5bnRoZXNpemVkKCkgfHwgZXhpc3RpbmcuaXNTeW50aGVzaXplZCgpKSB7XG4gICAgcmV0dXJuIGl0ZW0udGltZXN0YW1wID49IGV4aXN0aW5nLnRpbWVzdGFtcDtcbiAgfVxuICBjb25zdCBpdGVtT3JkZXJpbmdzID0gaXRlbS5wYXJzZUlkKCksIGV4aXN0aW5nT3JkZXJpbmdzID0gZXhpc3RpbmcucGFyc2VJZCgpO1xuICBpZiAoaXRlbU9yZGVyaW5ncy5tc2dTZXJpYWwgPT09IGV4aXN0aW5nT3JkZXJpbmdzLm1zZ1NlcmlhbCkge1xuICAgIHJldHVybiBpdGVtT3JkZXJpbmdzLmluZGV4ID4gZXhpc3RpbmdPcmRlcmluZ3MuaW5kZXg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGl0ZW1PcmRlcmluZ3MubXNnU2VyaWFsID4gZXhpc3RpbmdPcmRlcmluZ3MubXNnU2VyaWFsO1xuICB9XG59XG52YXIgUmVhbHRpbWVQcmVzZW5jZSA9IGNsYXNzIGV4dGVuZHMgZXZlbnRlbWl0dGVyX2RlZmF1bHQge1xuICBjb25zdHJ1Y3RvcihjaGFubmVsKSB7XG4gICAgc3VwZXIoY2hhbm5lbC5sb2dnZXIpO1xuICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWw7XG4gICAgdGhpcy5zeW5jQ29tcGxldGUgPSBmYWxzZTtcbiAgICB0aGlzLm1lbWJlcnMgPSBuZXcgUHJlc2VuY2VNYXAodGhpcywgKGl0ZW0pID0+IGl0ZW0uY2xpZW50SWQgKyBcIjpcIiArIGl0ZW0uY29ubmVjdGlvbklkKTtcbiAgICB0aGlzLl9teU1lbWJlcnMgPSBuZXcgUHJlc2VuY2VNYXAodGhpcywgKGl0ZW0pID0+IGl0ZW0uY2xpZW50SWQpO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IG5ldyBldmVudGVtaXR0ZXJfZGVmYXVsdCh0aGlzLmxvZ2dlcik7XG4gICAgdGhpcy5wZW5kaW5nUHJlc2VuY2UgPSBbXTtcbiAgfVxuICBhc3luYyBlbnRlcihkYXRhKSB7XG4gICAgaWYgKGlzQW5vbnltb3VzT3JXaWxkY2FyZCh0aGlzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcImNsaWVudElkIG11c3QgYmUgc3BlY2lmaWVkIHRvIGVudGVyIGEgcHJlc2VuY2UgY2hhbm5lbFwiLCA0MDAxMiwgNDAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2VudGVyT3JVcGRhdGVDbGllbnQodm9pZCAwLCB2b2lkIDAsIGRhdGEsIFwiZW50ZXJcIik7XG4gIH1cbiAgYXN5bmMgdXBkYXRlKGRhdGEpIHtcbiAgICBpZiAoaXNBbm9ueW1vdXNPcldpbGRjYXJkKHRoaXMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JJbmZvKFwiY2xpZW50SWQgbXVzdCBiZSBzcGVjaWZpZWQgdG8gdXBkYXRlIHByZXNlbmNlIGRhdGFcIiwgNDAwMTIsIDQwMCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9lbnRlck9yVXBkYXRlQ2xpZW50KHZvaWQgMCwgdm9pZCAwLCBkYXRhLCBcInVwZGF0ZVwiKTtcbiAgfVxuICBhc3luYyBlbnRlckNsaWVudChjbGllbnRJZCwgZGF0YSkge1xuICAgIHJldHVybiB0aGlzLl9lbnRlck9yVXBkYXRlQ2xpZW50KHZvaWQgMCwgY2xpZW50SWQsIGRhdGEsIFwiZW50ZXJcIik7XG4gIH1cbiAgYXN5bmMgdXBkYXRlQ2xpZW50KGNsaWVudElkLCBkYXRhKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VudGVyT3JVcGRhdGVDbGllbnQodm9pZCAwLCBjbGllbnRJZCwgZGF0YSwgXCJ1cGRhdGVcIik7XG4gIH1cbiAgYXN5bmMgX2VudGVyT3JVcGRhdGVDbGllbnQoaWQsIGNsaWVudElkLCBkYXRhLCBhY3Rpb24pIHtcbiAgICBjb25zdCBjaGFubmVsID0gdGhpcy5jaGFubmVsO1xuICAgIGlmICghY2hhbm5lbC5jb25uZWN0aW9uTWFuYWdlci5hY3RpdmVTdGF0ZSgpKSB7XG4gICAgICB0aHJvdyBjaGFubmVsLmNvbm5lY3Rpb25NYW5hZ2VyLmdldEVycm9yKCk7XG4gICAgfVxuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJSZWFsdGltZVByZXNlbmNlLlwiICsgYWN0aW9uICsgXCJDbGllbnQoKVwiLFxuICAgICAgXCJjaGFubmVsID0gXCIgKyBjaGFubmVsLm5hbWUgKyBcIiwgaWQgPSBcIiArIGlkICsgXCIsIGNsaWVudCA9IFwiICsgKGNsaWVudElkIHx8IFwiKGltcGxpY2l0KSBcIiArIGdldENsaWVudElkKHRoaXMpKVxuICAgICk7XG4gICAgY29uc3QgcHJlc2VuY2UgPSBmcm9tRGF0YShkYXRhKTtcbiAgICBwcmVzZW5jZS5hY3Rpb24gPSBhY3Rpb247XG4gICAgaWYgKGlkKSB7XG4gICAgICBwcmVzZW5jZS5pZCA9IGlkO1xuICAgIH1cbiAgICBpZiAoY2xpZW50SWQpIHtcbiAgICAgIHByZXNlbmNlLmNsaWVudElkID0gY2xpZW50SWQ7XG4gICAgfVxuICAgIGF3YWl0IGVuY29kZShwcmVzZW5jZSwgY2hhbm5lbC5jaGFubmVsT3B0aW9ucyk7XG4gICAgc3dpdGNoIChjaGFubmVsLnN0YXRlKSB7XG4gICAgICBjYXNlIFwiYXR0YWNoZWRcIjpcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICBjaGFubmVsLnNlbmRQcmVzZW5jZShwcmVzZW5jZSwgKGVycikgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKCkpO1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgXCJpbml0aWFsaXplZFwiOlxuICAgICAgY2FzZSBcImRldGFjaGVkXCI6XG4gICAgICAgIGNoYW5uZWwuYXR0YWNoKCk7XG4gICAgICBjYXNlIFwiYXR0YWNoaW5nXCI6XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgdGhpcy5wZW5kaW5nUHJlc2VuY2UucHVzaCh7XG4gICAgICAgICAgICBwcmVzZW5jZSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoZXJyKSA9PiBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IFBhcnRpYWxFcnJvckluZm8oXG4gICAgICAgICAgXCJVbmFibGUgdG8gXCIgKyBhY3Rpb24gKyBcIiBwcmVzZW5jZSBjaGFubmVsIHdoaWxlIGluIFwiICsgY2hhbm5lbC5zdGF0ZSArIFwiIHN0YXRlXCIsXG4gICAgICAgICAgOTAwMDFcbiAgICAgICAgKTtcbiAgICAgICAgZXJyLmNvZGUgPSA5MDAwMTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBhc3luYyBsZWF2ZShkYXRhKSB7XG4gICAgaWYgKGlzQW5vbnltb3VzT3JXaWxkY2FyZCh0aGlzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9ySW5mbyhcImNsaWVudElkIG11c3QgaGF2ZSBiZWVuIHNwZWNpZmllZCB0byBlbnRlciBvciBsZWF2ZSBhIHByZXNlbmNlIGNoYW5uZWxcIiwgNDAwMTIsIDQwMCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmxlYXZlQ2xpZW50KHZvaWQgMCwgZGF0YSk7XG4gIH1cbiAgYXN5bmMgbGVhdmVDbGllbnQoY2xpZW50SWQsIGRhdGEpIHtcbiAgICBjb25zdCBjaGFubmVsID0gdGhpcy5jaGFubmVsO1xuICAgIGlmICghY2hhbm5lbC5jb25uZWN0aW9uTWFuYWdlci5hY3RpdmVTdGF0ZSgpKSB7XG4gICAgICB0aHJvdyBjaGFubmVsLmNvbm5lY3Rpb25NYW5hZ2VyLmdldEVycm9yKCk7XG4gICAgfVxuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJSZWFsdGltZVByZXNlbmNlLmxlYXZlQ2xpZW50KClcIixcbiAgICAgIFwibGVhdmluZzsgY2hhbm5lbCA9IFwiICsgdGhpcy5jaGFubmVsLm5hbWUgKyBcIiwgY2xpZW50ID0gXCIgKyBjbGllbnRJZFxuICAgICk7XG4gICAgY29uc3QgcHJlc2VuY2UgPSBmcm9tRGF0YShkYXRhKTtcbiAgICBwcmVzZW5jZS5hY3Rpb24gPSBcImxlYXZlXCI7XG4gICAgaWYgKGNsaWVudElkKSB7XG4gICAgICBwcmVzZW5jZS5jbGllbnRJZCA9IGNsaWVudElkO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgc3dpdGNoIChjaGFubmVsLnN0YXRlKSB7XG4gICAgICAgIGNhc2UgXCJhdHRhY2hlZFwiOlxuICAgICAgICAgIGNoYW5uZWwuc2VuZFByZXNlbmNlKHByZXNlbmNlLCAoZXJyKSA9PiBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJhdHRhY2hpbmdcIjpcbiAgICAgICAgICB0aGlzLnBlbmRpbmdQcmVzZW5jZS5wdXNoKHtcbiAgICAgICAgICAgIHByZXNlbmNlLFxuICAgICAgICAgICAgY2FsbGJhY2s6IChlcnIpID0+IGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJpbml0aWFsaXplZFwiOlxuICAgICAgICBjYXNlIFwiZmFpbGVkXCI6IHtcbiAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgUGFydGlhbEVycm9ySW5mbyhcIlVuYWJsZSB0byBsZWF2ZSBwcmVzZW5jZSBjaGFubmVsIChpbmNvbXBhdGlibGUgc3RhdGUpXCIsIDkwMDAxKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlamVjdChjaGFubmVsLmludmFsaWRTdGF0ZUVycm9yKCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGFzeW5jIGdldChwYXJhbXMpIHtcbiAgICBjb25zdCB3YWl0Rm9yU3luYyA9ICFwYXJhbXMgfHwgKFwid2FpdEZvclN5bmNcIiBpbiBwYXJhbXMgPyBwYXJhbXMud2FpdEZvclN5bmMgOiB0cnVlKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZnVuY3Rpb24gcmV0dXJuTWVtYmVycyhtZW1iZXJzKSB7XG4gICAgICAgIHJlc29sdmUocGFyYW1zID8gbWVtYmVycy5saXN0KHBhcmFtcykgOiBtZW1iZXJzLnZhbHVlcygpKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNoYW5uZWwuc3RhdGUgPT09IFwic3VzcGVuZGVkXCIpIHtcbiAgICAgICAgaWYgKHdhaXRGb3JTeW5jKSB7XG4gICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgRXJyb3JJbmZvLmZyb21WYWx1ZXMoe1xuICAgICAgICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXG4gICAgICAgICAgICAgIGNvZGU6IDkxMDA1LFxuICAgICAgICAgICAgICBtZXNzYWdlOiBcIlByZXNlbmNlIHN0YXRlIGlzIG91dCBvZiBzeW5jIGR1ZSB0byBjaGFubmVsIGJlaW5nIGluIHRoZSBTVVNQRU5ERUQgc3RhdGVcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybk1lbWJlcnModGhpcy5tZW1iZXJzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3YWl0QXR0YWNoZWQoXG4gICAgICAgIHRoaXMuY2hhbm5lbCxcbiAgICAgICAgKGVycikgPT4gcmVqZWN0KGVyciksXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBjb25zdCBtZW1iZXJzID0gdGhpcy5tZW1iZXJzO1xuICAgICAgICAgIGlmICh3YWl0Rm9yU3luYykge1xuICAgICAgICAgICAgbWVtYmVycy53YWl0U3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuTWVtYmVycyhtZW1iZXJzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm5NZW1iZXJzKG1lbWJlcnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuICBhc3luYyBoaXN0b3J5KHBhcmFtcykge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIlJlYWx0aW1lUHJlc2VuY2UuaGlzdG9yeSgpXCIsIFwiY2hhbm5lbCA9IFwiICsgdGhpcy5uYW1lKTtcbiAgICBjb25zdCByZXN0TWl4aW4gPSB0aGlzLmNoYW5uZWwuY2xpZW50LnJlc3QucHJlc2VuY2VNaXhpbjtcbiAgICBpZiAocGFyYW1zICYmIHBhcmFtcy51bnRpbEF0dGFjaCkge1xuICAgICAgaWYgKHRoaXMuY2hhbm5lbC5zdGF0ZSA9PT0gXCJhdHRhY2hlZFwiKSB7XG4gICAgICAgIGRlbGV0ZSBwYXJhbXMudW50aWxBdHRhY2g7XG4gICAgICAgIHBhcmFtcy5mcm9tX3NlcmlhbCA9IHRoaXMuY2hhbm5lbC5wcm9wZXJ0aWVzLmF0dGFjaFNlcmlhbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXG4gICAgICAgICAgXCJvcHRpb24gdW50aWxBdHRhY2ggcmVxdWlyZXMgdGhlIGNoYW5uZWwgdG8gYmUgYXR0YWNoZWQsIHdhczogXCIgKyB0aGlzLmNoYW5uZWwuc3RhdGUsXG4gICAgICAgICAgNGU0LFxuICAgICAgICAgIDQwMFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdE1peGluLmhpc3RvcnkodGhpcywgcGFyYW1zKTtcbiAgfVxuICBzZXRQcmVzZW5jZShwcmVzZW5jZVNldCwgaXNTeW5jLCBzeW5jQ2hhbm5lbFNlcmlhbCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJSZWFsdGltZVByZXNlbmNlLnNldFByZXNlbmNlKClcIixcbiAgICAgIFwicmVjZWl2ZWQgcHJlc2VuY2UgZm9yIFwiICsgcHJlc2VuY2VTZXQubGVuZ3RoICsgXCIgcGFydGljaXBhbnRzOyBzeW5jQ2hhbm5lbFNlcmlhbCA9IFwiICsgc3luY0NoYW5uZWxTZXJpYWxcbiAgICApO1xuICAgIGxldCBzeW5jQ3Vyc29yLCBtYXRjaDtcbiAgICBjb25zdCBtZW1iZXJzID0gdGhpcy5tZW1iZXJzLCBteU1lbWJlcnMgPSB0aGlzLl9teU1lbWJlcnMsIGJyb2FkY2FzdE1lc3NhZ2VzID0gW10sIGNvbm5JZCA9IHRoaXMuY2hhbm5lbC5jb25uZWN0aW9uTWFuYWdlci5jb25uZWN0aW9uSWQ7XG4gICAgaWYgKGlzU3luYykge1xuICAgICAgdGhpcy5tZW1iZXJzLnN0YXJ0U3luYygpO1xuICAgICAgaWYgKHN5bmNDaGFubmVsU2VyaWFsICYmIChtYXRjaCA9IHN5bmNDaGFubmVsU2VyaWFsLm1hdGNoKC9eW1xcdy1dKzooLiopJC8pKSkge1xuICAgICAgICBzeW5jQ3Vyc29yID0gbWF0Y2hbMV07XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlc2VuY2VTZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHByZXNlbmNlID0gZnJvbVZhbHVlczIocHJlc2VuY2VTZXRbaV0pO1xuICAgICAgc3dpdGNoIChwcmVzZW5jZS5hY3Rpb24pIHtcbiAgICAgICAgY2FzZSBcImxlYXZlXCI6XG4gICAgICAgICAgaWYgKG1lbWJlcnMucmVtb3ZlKHByZXNlbmNlKSkge1xuICAgICAgICAgICAgYnJvYWRjYXN0TWVzc2FnZXMucHVzaChwcmVzZW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVzZW5jZS5jb25uZWN0aW9uSWQgPT09IGNvbm5JZCAmJiAhcHJlc2VuY2UuaXNTeW50aGVzaXplZCgpKSB7XG4gICAgICAgICAgICBteU1lbWJlcnMucmVtb3ZlKHByZXNlbmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJlbnRlclwiOlxuICAgICAgICBjYXNlIFwicHJlc2VudFwiOlxuICAgICAgICBjYXNlIFwidXBkYXRlXCI6XG4gICAgICAgICAgaWYgKG1lbWJlcnMucHV0KHByZXNlbmNlKSkge1xuICAgICAgICAgICAgYnJvYWRjYXN0TWVzc2FnZXMucHVzaChwcmVzZW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVzZW5jZS5jb25uZWN0aW9uSWQgPT09IGNvbm5JZCkge1xuICAgICAgICAgICAgbXlNZW1iZXJzLnB1dChwcmVzZW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNTeW5jICYmICFzeW5jQ3Vyc29yKSB7XG4gICAgICBtZW1iZXJzLmVuZFN5bmMoKTtcbiAgICAgIHRoaXMuY2hhbm5lbC5zeW5jQ2hhbm5lbFNlcmlhbCA9IG51bGw7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnJvYWRjYXN0TWVzc2FnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHByZXNlbmNlID0gYnJvYWRjYXN0TWVzc2FnZXNbaV07XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZW1pdChwcmVzZW5jZS5hY3Rpb24sIHByZXNlbmNlKTtcbiAgICB9XG4gIH1cbiAgb25BdHRhY2hlZChoYXNQcmVzZW5jZSkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJSZWFsdGltZVByZXNlbmNlLm9uQXR0YWNoZWQoKVwiLFxuICAgICAgXCJjaGFubmVsID0gXCIgKyB0aGlzLmNoYW5uZWwubmFtZSArIFwiLCBoYXNQcmVzZW5jZSA9IFwiICsgaGFzUHJlc2VuY2VcbiAgICApO1xuICAgIGlmIChoYXNQcmVzZW5jZSkge1xuICAgICAgdGhpcy5tZW1iZXJzLnN0YXJ0U3luYygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zeW50aGVzaXplTGVhdmVzKHRoaXMubWVtYmVycy52YWx1ZXMoKSk7XG4gICAgICB0aGlzLm1lbWJlcnMuY2xlYXIoKTtcbiAgICB9XG4gICAgdGhpcy5fZW5zdXJlTXlNZW1iZXJzUHJlc2VudCgpO1xuICAgIGNvbnN0IHBlbmRpbmdQcmVzZW5jZSA9IHRoaXMucGVuZGluZ1ByZXNlbmNlLCBwZW5kaW5nUHJlc0NvdW50ID0gcGVuZGluZ1ByZXNlbmNlLmxlbmd0aDtcbiAgICBpZiAocGVuZGluZ1ByZXNDb3VudCkge1xuICAgICAgdGhpcy5wZW5kaW5nUHJlc2VuY2UgPSBbXTtcbiAgICAgIGNvbnN0IHByZXNlbmNlQXJyYXkgPSBbXTtcbiAgICAgIGNvbnN0IG11bHRpY2FzdGVyID0gbXVsdGljYXN0ZXJfZGVmYXVsdC5jcmVhdGUodGhpcy5sb2dnZXIpO1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICBcIlJlYWx0aW1lUHJlc2VuY2Uub25BdHRhY2hlZFwiLFxuICAgICAgICBcInNlbmRpbmcgXCIgKyBwZW5kaW5nUHJlc0NvdW50ICsgXCIgcXVldWVkIHByZXNlbmNlIG1lc3NhZ2VzXCJcbiAgICAgICk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBlbmRpbmdQcmVzQ291bnQ7IGkrKykge1xuICAgICAgICBjb25zdCBldmVudCA9IHBlbmRpbmdQcmVzZW5jZVtpXTtcbiAgICAgICAgcHJlc2VuY2VBcnJheS5wdXNoKGV2ZW50LnByZXNlbmNlKTtcbiAgICAgICAgbXVsdGljYXN0ZXIucHVzaChldmVudC5jYWxsYmFjayk7XG4gICAgICB9XG4gICAgICB0aGlzLmNoYW5uZWwuc2VuZFByZXNlbmNlKHByZXNlbmNlQXJyYXksIG11bHRpY2FzdGVyKTtcbiAgICB9XG4gIH1cbiAgYWN0T25DaGFubmVsU3RhdGUoc3RhdGUsIGhhc1ByZXNlbmNlLCBlcnIpIHtcbiAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICBjYXNlIFwiYXR0YWNoZWRcIjpcbiAgICAgICAgdGhpcy5vbkF0dGFjaGVkKGhhc1ByZXNlbmNlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZGV0YWNoZWRcIjpcbiAgICAgIGNhc2UgXCJmYWlsZWRcIjpcbiAgICAgICAgdGhpcy5fY2xlYXJNeU1lbWJlcnMoKTtcbiAgICAgICAgdGhpcy5tZW1iZXJzLmNsZWFyKCk7XG4gICAgICBjYXNlIFwic3VzcGVuZGVkXCI6XG4gICAgICAgIHRoaXMuZmFpbFBlbmRpbmdQcmVzZW5jZShlcnIpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgZmFpbFBlbmRpbmdQcmVzZW5jZShlcnIpIHtcbiAgICBpZiAodGhpcy5wZW5kaW5nUHJlc2VuY2UubGVuZ3RoKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgIFwiUmVhbHRpbWVDaGFubmVsLmZhaWxQZW5kaW5nUHJlc2VuY2VcIixcbiAgICAgICAgXCJjaGFubmVsOyBuYW1lID0gXCIgKyB0aGlzLmNoYW5uZWwubmFtZSArIFwiLCBlcnIgPSBcIiArIGluc3BlY3RFcnJvcihlcnIpXG4gICAgICApO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBlbmRpbmdQcmVzZW5jZS5sZW5ndGg7IGkrKylcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLnBlbmRpbmdQcmVzZW5jZVtpXS5jYWxsYmFjayhlcnIpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIH1cbiAgICAgIHRoaXMucGVuZGluZ1ByZXNlbmNlID0gW107XG4gICAgfVxuICB9XG4gIF9jbGVhck15TWVtYmVycygpIHtcbiAgICB0aGlzLl9teU1lbWJlcnMuY2xlYXIoKTtcbiAgfVxuICBfZW5zdXJlTXlNZW1iZXJzUHJlc2VudCgpIHtcbiAgICBjb25zdCBteU1lbWJlcnMgPSB0aGlzLl9teU1lbWJlcnMsIHJlZW50ZXJDYiA9IChlcnIpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY29uc3QgbXNnID0gXCJQcmVzZW5jZSBhdXRvLXJlLWVudGVyIGZhaWxlZDogXCIgKyBlcnIudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3Qgd3JhcHBlZEVyciA9IG5ldyBFcnJvckluZm8obXNnLCA5MTAwNCwgNDAwKTtcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwiUmVhbHRpbWVQcmVzZW5jZS5fZW5zdXJlTXlNZW1iZXJzUHJlc2VudCgpXCIsIG1zZyk7XG4gICAgICAgIGNvbnN0IGNoYW5nZSA9IG5ldyBjaGFubmVsc3RhdGVjaGFuZ2VfZGVmYXVsdCh0aGlzLmNoYW5uZWwuc3RhdGUsIHRoaXMuY2hhbm5lbC5zdGF0ZSwgdHJ1ZSwgZmFsc2UsIHdyYXBwZWRFcnIpO1xuICAgICAgICB0aGlzLmNoYW5uZWwuZW1pdChcInVwZGF0ZVwiLCBjaGFuZ2UpO1xuICAgICAgfVxuICAgIH07XG4gICAgZm9yIChjb25zdCBtZW1iZXJLZXkgaW4gbXlNZW1iZXJzLm1hcCkge1xuICAgICAgY29uc3QgZW50cnkgPSBteU1lbWJlcnMubWFwW21lbWJlcktleV07XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sXG4gICAgICAgIFwiUmVhbHRpbWVQcmVzZW5jZS5fZW5zdXJlTXlNZW1iZXJzUHJlc2VudCgpXCIsXG4gICAgICAgICdBdXRvLXJlZW50ZXJpbmcgY2xpZW50SWQgXCInICsgZW50cnkuY2xpZW50SWQgKyAnXCIgaW50byB0aGUgcHJlc2VuY2Ugc2V0J1xuICAgICAgKTtcbiAgICAgIHdoZW5Qcm9taXNlU2V0dGxlcyh0aGlzLl9lbnRlck9yVXBkYXRlQ2xpZW50KGVudHJ5LmlkLCBlbnRyeS5jbGllbnRJZCwgZW50cnkuZGF0YSwgXCJlbnRlclwiKSwgcmVlbnRlckNiKTtcbiAgICB9XG4gIH1cbiAgX3N5bnRoZXNpemVMZWF2ZXMoaXRlbXMpIHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gdGhpcy5zdWJzY3JpcHRpb25zO1xuICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgY29uc3QgcHJlc2VuY2UgPSBmcm9tVmFsdWVzMih7XG4gICAgICAgIGFjdGlvbjogXCJsZWF2ZVwiLFxuICAgICAgICBjb25uZWN0aW9uSWQ6IGl0ZW0uY29ubmVjdGlvbklkLFxuICAgICAgICBjbGllbnRJZDogaXRlbS5jbGllbnRJZCxcbiAgICAgICAgZGF0YTogaXRlbS5kYXRhLFxuICAgICAgICBlbmNvZGluZzogaXRlbS5lbmNvZGluZyxcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gICAgICB9KTtcbiAgICAgIHN1YnNjcmlwdGlvbnMuZW1pdChcImxlYXZlXCIsIHByZXNlbmNlKTtcbiAgICB9KTtcbiAgfVxuICBhc3luYyBzdWJzY3JpYmUoLi4uX2FyZ3MpIHtcbiAgICBjb25zdCBhcmdzID0gcmVhbHRpbWVjaGFubmVsX2RlZmF1bHQucHJvY2Vzc0xpc3RlbmVyQXJncyhfYXJncyk7XG4gICAgY29uc3QgZXZlbnQgPSBhcmdzWzBdO1xuICAgIGNvbnN0IGxpc3RlbmVyID0gYXJnc1sxXTtcbiAgICBjb25zdCBjaGFubmVsID0gdGhpcy5jaGFubmVsO1xuICAgIGlmIChjaGFubmVsLnN0YXRlID09PSBcImZhaWxlZFwiKSB7XG4gICAgICB0aHJvdyBFcnJvckluZm8uZnJvbVZhbHVlcyhjaGFubmVsLmludmFsaWRTdGF0ZUVycm9yKCkpO1xuICAgIH1cbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMub24oZXZlbnQsIGxpc3RlbmVyKTtcbiAgICBhd2FpdCBjaGFubmVsLmF0dGFjaCgpO1xuICB9XG4gIHVuc3Vic2NyaWJlKC4uLl9hcmdzKSB7XG4gICAgY29uc3QgYXJncyA9IHJlYWx0aW1lY2hhbm5lbF9kZWZhdWx0LnByb2Nlc3NMaXN0ZW5lckFyZ3MoX2FyZ3MpO1xuICAgIGNvbnN0IGV2ZW50ID0gYXJnc1swXTtcbiAgICBjb25zdCBsaXN0ZW5lciA9IGFyZ3NbMV07XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLm9mZihldmVudCwgbGlzdGVuZXIpO1xuICB9XG59O1xudmFyIFByZXNlbmNlTWFwID0gY2xhc3MgZXh0ZW5kcyBldmVudGVtaXR0ZXJfZGVmYXVsdCB7XG4gIGNvbnN0cnVjdG9yKHByZXNlbmNlLCBtZW1iZXJLZXkpIHtcbiAgICBzdXBlcihwcmVzZW5jZS5sb2dnZXIpO1xuICAgIHRoaXMucHJlc2VuY2UgPSBwcmVzZW5jZTtcbiAgICB0aGlzLm1hcCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuc3luY0luUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICB0aGlzLnJlc2lkdWFsTWVtYmVycyA9IG51bGw7XG4gICAgdGhpcy5tZW1iZXJLZXkgPSBtZW1iZXJLZXk7XG4gIH1cbiAgZ2V0KGtleSkge1xuICAgIHJldHVybiB0aGlzLm1hcFtrZXldO1xuICB9XG4gIGdldENsaWVudChjbGllbnRJZCkge1xuICAgIGNvbnN0IG1hcCA9IHRoaXMubWFwLCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBtYXApIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBtYXBba2V5XTtcbiAgICAgIGlmIChpdGVtLmNsaWVudElkID09IGNsaWVudElkICYmIGl0ZW0uYWN0aW9uICE9IFwiYWJzZW50XCIpXG4gICAgICAgIHJlc3VsdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGxpc3QocGFyYW1zKSB7XG4gICAgY29uc3QgbWFwID0gdGhpcy5tYXAsIGNsaWVudElkID0gcGFyYW1zICYmIHBhcmFtcy5jbGllbnRJZCwgY29ubmVjdGlvbklkID0gcGFyYW1zICYmIHBhcmFtcy5jb25uZWN0aW9uSWQsIHJlc3VsdCA9IFtdO1xuICAgIGZvciAoY29uc3Qga2V5IGluIG1hcCkge1xuICAgICAgY29uc3QgaXRlbSA9IG1hcFtrZXldO1xuICAgICAgaWYgKGl0ZW0uYWN0aW9uID09PSBcImFic2VudFwiKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGlmIChjbGllbnRJZCAmJiBjbGllbnRJZCAhPSBpdGVtLmNsaWVudElkKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGlmIChjb25uZWN0aW9uSWQgJiYgY29ubmVjdGlvbklkICE9IGl0ZW0uY29ubmVjdGlvbklkKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIHJlc3VsdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIHB1dChpdGVtKSB7XG4gICAgaWYgKGl0ZW0uYWN0aW9uID09PSBcImVudGVyXCIgfHwgaXRlbS5hY3Rpb24gPT09IFwidXBkYXRlXCIpIHtcbiAgICAgIGl0ZW0gPSBmcm9tVmFsdWVzMihpdGVtKTtcbiAgICAgIGl0ZW0uYWN0aW9uID0gXCJwcmVzZW50XCI7XG4gICAgfVxuICAgIGNvbnN0IG1hcCA9IHRoaXMubWFwLCBrZXkgPSB0aGlzLm1lbWJlcktleShpdGVtKTtcbiAgICBpZiAodGhpcy5yZXNpZHVhbE1lbWJlcnMpXG4gICAgICBkZWxldGUgdGhpcy5yZXNpZHVhbE1lbWJlcnNba2V5XTtcbiAgICBjb25zdCBleGlzdGluZ0l0ZW0gPSBtYXBba2V5XTtcbiAgICBpZiAoZXhpc3RpbmdJdGVtICYmICFuZXdlclRoYW4oaXRlbSwgZXhpc3RpbmdJdGVtKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBtYXBba2V5XSA9IGl0ZW07XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFsdWVzKCkge1xuICAgIGNvbnN0IG1hcCA9IHRoaXMubWFwLCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBtYXApIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBtYXBba2V5XTtcbiAgICAgIGlmIChpdGVtLmFjdGlvbiAhPSBcImFic2VudFwiKVxuICAgICAgICByZXN1bHQucHVzaChpdGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICByZW1vdmUoaXRlbSkge1xuICAgIGNvbnN0IG1hcCA9IHRoaXMubWFwLCBrZXkgPSB0aGlzLm1lbWJlcktleShpdGVtKTtcbiAgICBjb25zdCBleGlzdGluZ0l0ZW0gPSBtYXBba2V5XTtcbiAgICBpZiAoZXhpc3RpbmdJdGVtICYmICFuZXdlclRoYW4oaXRlbSwgZXhpc3RpbmdJdGVtKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGhpcy5zeW5jSW5Qcm9ncmVzcykge1xuICAgICAgaXRlbSA9IGZyb21WYWx1ZXMyKGl0ZW0pO1xuICAgICAgaXRlbS5hY3Rpb24gPSBcImFic2VudFwiO1xuICAgICAgbWFwW2tleV0gPSBpdGVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgbWFwW2tleV07XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHN0YXJ0U3luYygpIHtcbiAgICBjb25zdCBtYXAgPSB0aGlzLm1hcCwgc3luY0luUHJvZ3Jlc3MgPSB0aGlzLnN5bmNJblByb2dyZXNzO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJQcmVzZW5jZU1hcC5zdGFydFN5bmMoKVwiLFxuICAgICAgXCJjaGFubmVsID0gXCIgKyB0aGlzLnByZXNlbmNlLmNoYW5uZWwubmFtZSArIFwiOyBzeW5jSW5Qcm9ncmVzcyA9IFwiICsgc3luY0luUHJvZ3Jlc3NcbiAgICApO1xuICAgIGlmICghdGhpcy5zeW5jSW5Qcm9ncmVzcykge1xuICAgICAgdGhpcy5yZXNpZHVhbE1lbWJlcnMgPSBjb3B5KG1hcCk7XG4gICAgICB0aGlzLnNldEluUHJvZ3Jlc3ModHJ1ZSk7XG4gICAgfVxuICB9XG4gIGVuZFN5bmMoKSB7XG4gICAgY29uc3QgbWFwID0gdGhpcy5tYXAsIHN5bmNJblByb2dyZXNzID0gdGhpcy5zeW5jSW5Qcm9ncmVzcztcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgIFwiUHJlc2VuY2VNYXAuZW5kU3luYygpXCIsXG4gICAgICBcImNoYW5uZWwgPSBcIiArIHRoaXMucHJlc2VuY2UuY2hhbm5lbC5uYW1lICsgXCI7IHN5bmNJblByb2dyZXNzID0gXCIgKyBzeW5jSW5Qcm9ncmVzc1xuICAgICk7XG4gICAgaWYgKHN5bmNJblByb2dyZXNzKSB7XG4gICAgICBmb3IgKGNvbnN0IG1lbWJlcktleSBpbiBtYXApIHtcbiAgICAgICAgY29uc3QgZW50cnkgPSBtYXBbbWVtYmVyS2V5XTtcbiAgICAgICAgaWYgKGVudHJ5LmFjdGlvbiA9PT0gXCJhYnNlbnRcIikge1xuICAgICAgICAgIGRlbGV0ZSBtYXBbbWVtYmVyS2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5wcmVzZW5jZS5fc3ludGhlc2l6ZUxlYXZlcyh2YWx1ZXNBcnJheSh0aGlzLnJlc2lkdWFsTWVtYmVycykpO1xuICAgICAgZm9yIChjb25zdCBtZW1iZXJLZXkgaW4gdGhpcy5yZXNpZHVhbE1lbWJlcnMpIHtcbiAgICAgICAgZGVsZXRlIG1hcFttZW1iZXJLZXldO1xuICAgICAgfVxuICAgICAgdGhpcy5yZXNpZHVhbE1lbWJlcnMgPSBudWxsO1xuICAgICAgdGhpcy5zZXRJblByb2dyZXNzKGZhbHNlKTtcbiAgICB9XG4gICAgdGhpcy5lbWl0KFwic3luY1wiKTtcbiAgfVxuICB3YWl0U3luYyhjYWxsYmFjaykge1xuICAgIGNvbnN0IHN5bmNJblByb2dyZXNzID0gdGhpcy5zeW5jSW5Qcm9ncmVzcztcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUixcbiAgICAgIFwiUHJlc2VuY2VNYXAud2FpdFN5bmMoKVwiLFxuICAgICAgXCJjaGFubmVsID0gXCIgKyB0aGlzLnByZXNlbmNlLmNoYW5uZWwubmFtZSArIFwiOyBzeW5jSW5Qcm9ncmVzcyA9IFwiICsgc3luY0luUHJvZ3Jlc3NcbiAgICApO1xuICAgIGlmICghc3luY0luUHJvZ3Jlc3MpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMub25jZShcInN5bmNcIiwgY2FsbGJhY2spO1xuICB9XG4gIGNsZWFyKCkge1xuICAgIHRoaXMubWFwID0ge307XG4gICAgdGhpcy5zZXRJblByb2dyZXNzKGZhbHNlKTtcbiAgICB0aGlzLnJlc2lkdWFsTWVtYmVycyA9IG51bGw7XG4gIH1cbiAgc2V0SW5Qcm9ncmVzcyhpblByb2dyZXNzKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sIFwiUHJlc2VuY2VNYXAuc2V0SW5Qcm9ncmVzcygpXCIsIFwiaW5Qcm9ncmVzcyA9IFwiICsgaW5Qcm9ncmVzcyk7XG4gICAgdGhpcy5zeW5jSW5Qcm9ncmVzcyA9IGluUHJvZ3Jlc3M7XG4gICAgdGhpcy5wcmVzZW5jZS5zeW5jQ29tcGxldGUgPSAhaW5Qcm9ncmVzcztcbiAgfVxufTtcbnZhciByZWFsdGltZXByZXNlbmNlX2RlZmF1bHQgPSBSZWFsdGltZVByZXNlbmNlO1xuXG4vLyBzcmMvY29tbW9uL2xpYi90cmFuc3BvcnQvd2Vic29ja2V0dHJhbnNwb3J0LnRzXG52YXIgc2hvcnROYW1lID0gVHJhbnNwb3J0TmFtZXMuV2ViU29ja2V0O1xuZnVuY3Rpb24gaXNOb2RlV2ViU29ja2V0KHdzKSB7XG4gIHJldHVybiAhIXdzLm9uO1xufVxudmFyIFdlYlNvY2tldFRyYW5zcG9ydCA9IGNsYXNzIGV4dGVuZHMgdHJhbnNwb3J0X2RlZmF1bHQge1xuICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uTWFuYWdlciwgYXV0aCwgcGFyYW1zKSB7XG4gICAgc3VwZXIoY29ubmVjdGlvbk1hbmFnZXIsIGF1dGgsIHBhcmFtcyk7XG4gICAgdGhpcy5zaG9ydE5hbWUgPSBzaG9ydE5hbWU7XG4gICAgcGFyYW1zLmhlYXJ0YmVhdHMgPSBQbGF0Zm9ybS5Db25maWcudXNlUHJvdG9jb2xIZWFydGJlYXRzO1xuICAgIHRoaXMud3NIb3N0ID0gcGFyYW1zLmhvc3Q7XG4gIH1cbiAgc3RhdGljIGlzQXZhaWxhYmxlKCkge1xuICAgIHJldHVybiAhIVBsYXRmb3JtLkNvbmZpZy5XZWJTb2NrZXQ7XG4gIH1cbiAgY3JlYXRlV2ViU29ja2V0KHVyaSwgY29ubmVjdFBhcmFtcykge1xuICAgIHRoaXMudXJpID0gdXJpICsgdG9RdWVyeVN0cmluZyhjb25uZWN0UGFyYW1zKTtcbiAgICByZXR1cm4gbmV3IFBsYXRmb3JtLkNvbmZpZy5XZWJTb2NrZXQodGhpcy51cmkpO1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBcIldlYlNvY2tldFRyYW5zcG9ydDsgdXJpPVwiICsgdGhpcy51cmk7XG4gIH1cbiAgY29ubmVjdCgpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJXZWJTb2NrZXRUcmFuc3BvcnQuY29ubmVjdCgpXCIsIFwic3RhcnRpbmdcIik7XG4gICAgdHJhbnNwb3J0X2RlZmF1bHQucHJvdG90eXBlLmNvbm5lY3QuY2FsbCh0aGlzKTtcbiAgICBjb25zdCBzZWxmMiA9IHRoaXMsIHBhcmFtcyA9IHRoaXMucGFyYW1zLCBvcHRpb25zID0gcGFyYW1zLm9wdGlvbnM7XG4gICAgY29uc3Qgd3NTY2hlbWUgPSBvcHRpb25zLnRscyA/IFwid3NzOi8vXCIgOiBcIndzOi8vXCI7XG4gICAgY29uc3Qgd3NVcmkgPSB3c1NjaGVtZSArIHRoaXMud3NIb3N0ICsgXCI6XCIgKyBkZWZhdWx0c19kZWZhdWx0LmdldFBvcnQob3B0aW9ucykgKyBcIi9cIjtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJXZWJTb2NrZXRUcmFuc3BvcnQuY29ubmVjdCgpXCIsIFwidXJpOiBcIiArIHdzVXJpKTtcbiAgICB3aGVuUHJvbWlzZVNldHRsZXMoXG4gICAgICB0aGlzLmF1dGguZ2V0QXV0aFBhcmFtcygpLFxuICAgICAgZnVuY3Rpb24oZXJyLCBhdXRoUGFyYW1zKSB7XG4gICAgICAgIGlmIChzZWxmMi5pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwYXJhbVN0ciA9IFwiXCI7XG4gICAgICAgIGZvciAoY29uc3QgcGFyYW0gaW4gYXV0aFBhcmFtcylcbiAgICAgICAgICBwYXJhbVN0ciArPSBcIiBcIiArIHBhcmFtICsgXCI6IFwiICsgYXV0aFBhcmFtc1twYXJhbV0gKyBcIjtcIjtcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgIHNlbGYyLmxvZ2dlcixcbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsXG4gICAgICAgICAgXCJXZWJTb2NrZXRUcmFuc3BvcnQuY29ubmVjdCgpXCIsXG4gICAgICAgICAgXCJhdXRoUGFyYW1zOlwiICsgcGFyYW1TdHIgKyBcIiBlcnI6IFwiICsgZXJyXG4gICAgICAgICk7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBzZWxmMi5kaXNjb25uZWN0KGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbm5lY3RQYXJhbXMgPSBwYXJhbXMuZ2V0Q29ubmVjdFBhcmFtcyhhdXRoUGFyYW1zKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCB3c0Nvbm5lY3Rpb24gPSBzZWxmMi53c0Nvbm5lY3Rpb24gPSBzZWxmMi5jcmVhdGVXZWJTb2NrZXQod3NVcmksIGNvbm5lY3RQYXJhbXMpO1xuICAgICAgICAgIHdzQ29ubmVjdGlvbi5iaW5hcnlUeXBlID0gUGxhdGZvcm0uQ29uZmlnLmJpbmFyeVR5cGU7XG4gICAgICAgICAgd3NDb25uZWN0aW9uLm9ub3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZjIub25Xc09wZW4oKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHdzQ29ubmVjdGlvbi5vbmNsb3NlID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIHNlbGYyLm9uV3NDbG9zZShldik7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB3c0Nvbm5lY3Rpb24ub25tZXNzYWdlID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIHNlbGYyLm9uV3NEYXRhKGV2LmRhdGEpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgd3NDb25uZWN0aW9uLm9uZXJyb3IgPSBmdW5jdGlvbihldikge1xuICAgICAgICAgICAgc2VsZjIub25Xc0Vycm9yKGV2KTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChpc05vZGVXZWJTb2NrZXQod3NDb25uZWN0aW9uKSkge1xuICAgICAgICAgICAgd3NDb25uZWN0aW9uLm9uKFwicGluZ1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgc2VsZjIub25BY3Rpdml0eSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICAgICAgc2VsZjIubG9nZ2VyLFxuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICAgICAgXCJXZWJTb2NrZXRUcmFuc3BvcnQuY29ubmVjdCgpXCIsXG4gICAgICAgICAgICBcIlVuZXhwZWN0ZWQgZXhjZXB0aW9uIGNyZWF0aW5nIHdlYnNvY2tldDogZXJyID0gXCIgKyAoZS5zdGFjayB8fCBlLm1lc3NhZ2UpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBzZWxmMi5kaXNjb25uZWN0KGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfVxuICBzZW5kKG1lc3NhZ2UpIHtcbiAgICBjb25zdCB3c0Nvbm5lY3Rpb24gPSB0aGlzLndzQ29ubmVjdGlvbjtcbiAgICBpZiAoIXdzQ29ubmVjdGlvbikge1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsIFwiV2ViU29ja2V0VHJhbnNwb3J0LnNlbmQoKVwiLCBcIk5vIHNvY2tldCBjb25uZWN0aW9uXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgd3NDb25uZWN0aW9uLnNlbmQoXG4gICAgICAgIHNlcmlhbGl6ZTIobWVzc2FnZSwgdGhpcy5jb25uZWN0aW9uTWFuYWdlci5yZWFsdGltZS5fTXNnUGFjaywgdGhpcy5wYXJhbXMuZm9ybWF0KVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBtc2cgPSBcIkV4Y2VwdGlvbiBmcm9tIHdzIGNvbm5lY3Rpb24gd2hlbiB0cnlpbmcgdG8gc2VuZDogXCIgKyBpbnNwZWN0RXJyb3IoZSk7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19FUlJPUiwgXCJXZWJTb2NrZXRUcmFuc3BvcnQuc2VuZCgpXCIsIG1zZyk7XG4gICAgICB0aGlzLmZpbmlzaChcImRpc2Nvbm5lY3RlZFwiLCBuZXcgRXJyb3JJbmZvKG1zZywgNWU0LCA1MDApKTtcbiAgICB9XG4gIH1cbiAgb25Xc0RhdGEoZGF0YSkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgXCJXZWJTb2NrZXRUcmFuc3BvcnQub25Xc0RhdGEoKVwiLFxuICAgICAgXCJkYXRhIHJlY2VpdmVkOyBsZW5ndGggPSBcIiArIGRhdGEubGVuZ3RoICsgXCI7IHR5cGUgPSBcIiArIHR5cGVvZiBkYXRhXG4gICAgKTtcbiAgICB0cnkge1xuICAgICAgdGhpcy5vblByb3RvY29sTWVzc2FnZShcbiAgICAgICAgZGVzZXJpYWxpemUoXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25NYW5hZ2VyLnJlYWx0aW1lLl9Nc2dQYWNrLFxuICAgICAgICAgIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIucmVhbHRpbWUuX1JlYWx0aW1lUHJlc2VuY2UsXG4gICAgICAgICAgdGhpcy5mb3JtYXRcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgIFwiV2ViU29ja2V0VHJhbnNwb3J0Lm9uV3NEYXRhKClcIixcbiAgICAgICAgXCJVbmV4cGVjdGVkIGV4Y2VwdGlvbiBoYW5kaW5nIGNoYW5uZWwgbWVzc2FnZTogXCIgKyBlLnN0YWNrXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBvbldzT3BlbigpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJXZWJTb2NrZXRUcmFuc3BvcnQub25Xc09wZW4oKVwiLCBcIm9wZW5lZCBXZWJTb2NrZXRcIik7XG4gICAgdGhpcy5lbWl0KFwicHJlY29ubmVjdFwiKTtcbiAgfVxuICBvbldzQ2xvc2UoZXYpIHtcbiAgICBsZXQgd2FzQ2xlYW4sIGNvZGU7XG4gICAgaWYgKHR5cGVvZiBldiA9PSBcIm9iamVjdFwiKSB7XG4gICAgICBjb2RlID0gZXYuY29kZTtcbiAgICAgIHdhc0NsZWFuID0gZXYud2FzQ2xlYW4gfHwgY29kZSA9PT0gMWUzO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb2RlID0gZXY7XG4gICAgICB3YXNDbGVhbiA9IGNvZGUgPT0gMWUzO1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy53c0Nvbm5lY3Rpb247XG4gICAgaWYgKHdhc0NsZWFuKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJXZWJTb2NrZXRUcmFuc3BvcnQub25Xc0Nsb3NlKClcIiwgXCJDbGVhbmx5IGNsb3NlZCBXZWJTb2NrZXRcIik7XG4gICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3JJbmZvKFwiV2Vic29ja2V0IGNsb3NlZFwiLCA4MDAwMywgNDAwKTtcbiAgICAgIHRoaXMuZmluaXNoKFwiZGlzY29ubmVjdGVkXCIsIGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG1zZyA9IFwiVW5jbGVhbiBkaXNjb25uZWN0aW9uIG9mIFdlYlNvY2tldCA7IGNvZGUgPSBcIiArIGNvZGUsIGVyciA9IG5ldyBFcnJvckluZm8obXNnLCA4MDAwMywgNDAwKTtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIldlYlNvY2tldFRyYW5zcG9ydC5vbldzQ2xvc2UoKVwiLCBtc2cpO1xuICAgICAgdGhpcy5maW5pc2goXCJkaXNjb25uZWN0ZWRcIiwgZXJyKTtcbiAgICB9XG4gICAgdGhpcy5lbWl0KFwiZGlzcG9zZWRcIik7XG4gIH1cbiAgb25Xc0Vycm9yKGVycikge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgXCJXZWJTb2NrZXRUcmFuc3BvcnQub25FcnJvcigpXCIsXG4gICAgICBcIkVycm9yIGZyb20gV2ViU29ja2V0OiBcIiArIGVyci5tZXNzYWdlXG4gICAgKTtcbiAgICBQbGF0Zm9ybS5Db25maWcubmV4dFRpY2soKCkgPT4ge1xuICAgICAgdGhpcy5kaXNjb25uZWN0KEVycm9yKGVyci5tZXNzYWdlKSk7XG4gICAgfSk7XG4gIH1cbiAgZGlzcG9zZSgpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJXZWJTb2NrZXRUcmFuc3BvcnQuZGlzcG9zZSgpXCIsIFwiXCIpO1xuICAgIHRoaXMuaXNEaXNwb3NlZCA9IHRydWU7XG4gICAgY29uc3Qgd3NDb25uZWN0aW9uID0gdGhpcy53c0Nvbm5lY3Rpb247XG4gICAgaWYgKHdzQ29ubmVjdGlvbikge1xuICAgICAgd3NDb25uZWN0aW9uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgfTtcbiAgICAgIGRlbGV0ZSB0aGlzLndzQ29ubmVjdGlvbjtcbiAgICAgIFBsYXRmb3JtLkNvbmZpZy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIldlYlNvY2tldFRyYW5zcG9ydC5kaXNwb3NlKClcIiwgXCJjbG9zaW5nIHdlYnNvY2tldFwiKTtcbiAgICAgICAgaWYgKCF3c0Nvbm5lY3Rpb24pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXZWJTb2NrZXRUcmFuc3BvcnQuZGlzcG9zZSgpOiB3c0Nvbm5lY3Rpb24gaXMgbm90IGRlZmluZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgd3NDb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn07XG52YXIgd2Vic29ja2V0dHJhbnNwb3J0X2RlZmF1bHQgPSBXZWJTb2NrZXRUcmFuc3BvcnQ7XG5cbi8vIHNyYy9jb21tb24vbGliL2NsaWVudC9maWx0ZXJlZHN1YnNjcmlwdGlvbnMudHNcbnZhciBGaWx0ZXJlZFN1YnNjcmlwdGlvbnMgPSBjbGFzcyB7XG4gIHN0YXRpYyBzdWJzY3JpYmVGaWx0ZXIoY2hhbm5lbCwgZmlsdGVyLCBsaXN0ZW5lcikge1xuICAgIGNvbnN0IGZpbHRlcmVkTGlzdGVuZXIgPSAobSkgPT4ge1xuICAgICAgdmFyIF9hMiwgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICAgICAgY29uc3QgbWFwcGluZyA9IHtcbiAgICAgICAgbmFtZTogbS5uYW1lLFxuICAgICAgICByZWZUaW1lc2VyaWFsOiAoX2IgPSAoX2EyID0gbS5leHRyYXMpID09IG51bGwgPyB2b2lkIDAgOiBfYTIucmVmKSA9PSBudWxsID8gdm9pZCAwIDogX2IudGltZXNlcmlhbCxcbiAgICAgICAgcmVmVHlwZTogKF9kID0gKF9jID0gbS5leHRyYXMpID09IG51bGwgPyB2b2lkIDAgOiBfYy5yZWYpID09IG51bGwgPyB2b2lkIDAgOiBfZC50eXBlLFxuICAgICAgICBpc1JlZjogISEoKF9mID0gKF9lID0gbS5leHRyYXMpID09IG51bGwgPyB2b2lkIDAgOiBfZS5yZWYpID09IG51bGwgPyB2b2lkIDAgOiBfZi50aW1lc2VyaWFsKSxcbiAgICAgICAgY2xpZW50SWQ6IG0uY2xpZW50SWRcbiAgICAgIH07XG4gICAgICBpZiAoT2JqZWN0LmVudHJpZXMoZmlsdGVyKS5maW5kKFxuICAgICAgICAoW2tleSwgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdm9pZCAwID8gbWFwcGluZ1trZXldICE9PSB2YWx1ZSA6IGZhbHNlXG4gICAgICApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxpc3RlbmVyKG0pO1xuICAgIH07XG4gICAgdGhpcy5hZGRGaWx0ZXJlZFN1YnNjcmlwdGlvbihjaGFubmVsLCBmaWx0ZXIsIGxpc3RlbmVyLCBmaWx0ZXJlZExpc3RlbmVyKTtcbiAgICBjaGFubmVsLnN1YnNjcmlwdGlvbnMub24oZmlsdGVyZWRMaXN0ZW5lcik7XG4gIH1cbiAgLy8gQWRkcyBhIG5ldyBmaWx0ZXJlZCBzdWJzY3JpcHRpb25cbiAgc3RhdGljIGFkZEZpbHRlcmVkU3Vic2NyaXB0aW9uKGNoYW5uZWwsIGZpbHRlciwgcmVhbExpc3RlbmVyLCBmaWx0ZXJlZExpc3RlbmVyKSB7XG4gICAgdmFyIF9hMjtcbiAgICBpZiAoIWNoYW5uZWwuZmlsdGVyZWRTdWJzY3JpcHRpb25zKSB7XG4gICAgICBjaGFubmVsLmZpbHRlcmVkU3Vic2NyaXB0aW9ucyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGlmIChjaGFubmVsLmZpbHRlcmVkU3Vic2NyaXB0aW9ucy5oYXMocmVhbExpc3RlbmVyKSkge1xuICAgICAgY29uc3QgcmVhbExpc3RlbmVyTWFwID0gY2hhbm5lbC5maWx0ZXJlZFN1YnNjcmlwdGlvbnMuZ2V0KHJlYWxMaXN0ZW5lcik7XG4gICAgICByZWFsTGlzdGVuZXJNYXAuc2V0KGZpbHRlciwgKChfYTIgPSByZWFsTGlzdGVuZXJNYXAgPT0gbnVsbCA/IHZvaWQgMCA6IHJlYWxMaXN0ZW5lck1hcC5nZXQoZmlsdGVyKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5jb25jYXQoZmlsdGVyZWRMaXN0ZW5lcikpIHx8IFtmaWx0ZXJlZExpc3RlbmVyXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoYW5uZWwuZmlsdGVyZWRTdWJzY3JpcHRpb25zLnNldChcbiAgICAgICAgcmVhbExpc3RlbmVyLFxuICAgICAgICAvKiBAX19QVVJFX18gKi8gbmV3IE1hcChbW2ZpbHRlciwgW2ZpbHRlcmVkTGlzdGVuZXJdXV0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgZ2V0QW5kRGVsZXRlRmlsdGVyZWRTdWJzY3JpcHRpb25zKGNoYW5uZWwsIGZpbHRlciwgcmVhbExpc3RlbmVyKSB7XG4gICAgaWYgKCFjaGFubmVsLmZpbHRlcmVkU3Vic2NyaXB0aW9ucykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBpZiAoIXJlYWxMaXN0ZW5lciAmJiBmaWx0ZXIpIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKGNoYW5uZWwuZmlsdGVyZWRTdWJzY3JpcHRpb25zLmVudHJpZXMoKSkubWFwKChba2V5LCBmaWx0ZXJNYXBzXSkgPT4ge1xuICAgICAgICB2YXIgX2EyO1xuICAgICAgICBsZXQgbGlzdGVuZXJNYXBzID0gZmlsdGVyTWFwcy5nZXQoZmlsdGVyKTtcbiAgICAgICAgZmlsdGVyTWFwcy5kZWxldGUoZmlsdGVyKTtcbiAgICAgICAgaWYgKGZpbHRlck1hcHMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgIChfYTIgPSBjaGFubmVsLmZpbHRlcmVkU3Vic2NyaXB0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5kZWxldGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdGVuZXJNYXBzO1xuICAgICAgfSkucmVkdWNlKFxuICAgICAgICAocHJldiwgY3VyKSA9PiBjdXIgPyBwcmV2LmNvbmNhdCguLi5jdXIpIDogcHJldixcbiAgICAgICAgW11cbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghcmVhbExpc3RlbmVyIHx8ICFjaGFubmVsLmZpbHRlcmVkU3Vic2NyaXB0aW9ucy5oYXMocmVhbExpc3RlbmVyKSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBjb25zdCByZWFsTGlzdGVuZXJNYXAgPSBjaGFubmVsLmZpbHRlcmVkU3Vic2NyaXB0aW9ucy5nZXQocmVhbExpc3RlbmVyKTtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgY29uc3QgbGlzdGVuZXJzMiA9IEFycmF5LmZyb20ocmVhbExpc3RlbmVyTWFwLnZhbHVlcygpKS5yZWR1Y2UoKHByZXYsIGN1cikgPT4gcHJldi5jb25jYXQoLi4uY3VyKSwgW10pO1xuICAgICAgY2hhbm5lbC5maWx0ZXJlZFN1YnNjcmlwdGlvbnMuZGVsZXRlKHJlYWxMaXN0ZW5lcik7XG4gICAgICByZXR1cm4gbGlzdGVuZXJzMjtcbiAgICB9XG4gICAgbGV0IGxpc3RlbmVycyA9IHJlYWxMaXN0ZW5lck1hcC5nZXQoZmlsdGVyKTtcbiAgICByZWFsTGlzdGVuZXJNYXAuZGVsZXRlKGZpbHRlcik7XG4gICAgcmV0dXJuIGxpc3RlbmVycyB8fCBbXTtcbiAgfVxufTtcblxuLy8gc3JjL2NvbW1vbi9saWIvY2xpZW50L2RlZmF1bHRyZWFsdGltZS50c1xudmFyIF9EZWZhdWx0UmVhbHRpbWUgPSBjbGFzcyBfRGVmYXVsdFJlYWx0aW1lIGV4dGVuZHMgYmFzZXJlYWx0aW1lX2RlZmF1bHQge1xuICAvLyBUaGUgcHVibGljIHR5cGluZ3MgZGVjbGFyZSB0aGF0IHRoaXMgcmVxdWlyZXMgYW4gYXJndW1lbnQgdG8gYmUgcGFzc2VkLCBidXQgc2luY2Ugd2Ugd2FudCB0byBlbWl0IGEgZ29vZCBlcnJvciBtZXNzYWdlIGluIHRoZSBjYXNlIHdoZXJlIGEgbm9uLVR5cGVTY3JpcHQgdXNlciBkb2VzIG5vdCBwYXNzIGFuIGFyZ3VtZW50LCB0ZWxsIHRoZSBjb21waWxlciB0aGF0IHRoaXMgaXMgcG9zc2libGUgc28gdGhhdCBpdCBmb3JjZXMgdXMgdG8gaGFuZGxlIGl0LlxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdmFyIF9hMjtcbiAgICBjb25zdCBNc2dQYWNrID0gX0RlZmF1bHRSZWFsdGltZS5fTXNnUGFjaztcbiAgICBpZiAoIU1zZ1BhY2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIERlZmF1bHRSZWFsdGltZS5fTXNnUGFjayB0byBoYXZlIGJlZW4gc2V0XCIpO1xuICAgIH1cbiAgICBzdXBlcihcbiAgICAgIGRlZmF1bHRzX2RlZmF1bHQub2JqZWN0aWZ5T3B0aW9ucyhvcHRpb25zLCB0cnVlLCBcIlJlYWx0aW1lXCIsIGxvZ2dlcl9kZWZhdWx0LmRlZmF1bHRMb2dnZXIsIF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIGFsbENvbW1vbk1vZHVsYXJQbHVnaW5zKSwge1xuICAgICAgICBDcnlwdG86IChfYTIgPSBfRGVmYXVsdFJlYWx0aW1lLkNyeXB0bykgIT0gbnVsbCA/IF9hMiA6IHZvaWQgMCxcbiAgICAgICAgTXNnUGFjayxcbiAgICAgICAgUmVhbHRpbWVQcmVzZW5jZToge1xuICAgICAgICAgIFJlYWx0aW1lUHJlc2VuY2U6IHJlYWx0aW1lcHJlc2VuY2VfZGVmYXVsdCxcbiAgICAgICAgICBwcmVzZW5jZU1lc3NhZ2VGcm9tVmFsdWVzOiBmcm9tVmFsdWVzMixcbiAgICAgICAgICBwcmVzZW5jZU1lc3NhZ2VzRnJvbVZhbHVlc0FycmF5OiBmcm9tVmFsdWVzQXJyYXkyXG4gICAgICAgIH0sXG4gICAgICAgIFdlYlNvY2tldFRyYW5zcG9ydDogd2Vic29ja2V0dHJhbnNwb3J0X2RlZmF1bHQsXG4gICAgICAgIE1lc3NhZ2VJbnRlcmFjdGlvbnM6IEZpbHRlcmVkU3Vic2NyaXB0aW9uc1xuICAgICAgfSkpXG4gICAgKTtcbiAgfVxuICBzdGF0aWMgZ2V0IENyeXB0bygpIHtcbiAgICBpZiAodGhpcy5fQ3J5cHRvID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbmNyeXB0aW9uIG5vdCBlbmFibGVkOyB1c2UgYWJseS5lbmNyeXB0aW9uLmpzIGluc3RlYWRcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9DcnlwdG87XG4gIH1cbiAgc3RhdGljIHNldCBDcnlwdG8obmV3VmFsdWUpIHtcbiAgICB0aGlzLl9DcnlwdG8gPSBuZXdWYWx1ZTtcbiAgfVxufTtcbl9EZWZhdWx0UmVhbHRpbWUuVXRpbHMgPSB1dGlsc19leHBvcnRzO1xuX0RlZmF1bHRSZWFsdGltZS5Db25uZWN0aW9uTWFuYWdlciA9IGNvbm5lY3Rpb25tYW5hZ2VyX2RlZmF1bHQ7XG5fRGVmYXVsdFJlYWx0aW1lLlByb3RvY29sTWVzc2FnZSA9IHByb3RvY29sbWVzc2FnZV9kZWZhdWx0O1xuX0RlZmF1bHRSZWFsdGltZS5fQ3J5cHRvID0gbnVsbDtcbl9EZWZhdWx0UmVhbHRpbWUuTWVzc2FnZSA9IERlZmF1bHRNZXNzYWdlO1xuX0RlZmF1bHRSZWFsdGltZS5QcmVzZW5jZU1lc3NhZ2UgPSBEZWZhdWx0UHJlc2VuY2VNZXNzYWdlO1xuX0RlZmF1bHRSZWFsdGltZS5fTXNnUGFjayA9IG51bGw7XG4vLyBVc2VkIGJ5IHRlc3RzXG5fRGVmYXVsdFJlYWx0aW1lLl9IdHRwID0gSHR0cDtcbnZhciBEZWZhdWx0UmVhbHRpbWUgPSBfRGVmYXVsdFJlYWx0aW1lO1xuXG4vLyBzcmMvcGxhdGZvcm0vd2ViL2xpYi91dGlsL2htYWMtc2hhMjU2LnRzXG52YXIgdWludDhBcnJheSA9IFVpbnQ4QXJyYXk7XG52YXIgdWludDMyQXJyYXkgPSBVaW50MzJBcnJheTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBERUZBVUxUX1NUQVRFID0gbmV3IHVpbnQzMkFycmF5KDgpO1xudmFyIFJPVU5EX0NPTlNUQU5UUyA9IFtdO1xudmFyIE0gPSBuZXcgdWludDMyQXJyYXkoNjQpO1xuZnVuY3Rpb24gZ2V0RnJhY3Rpb25hbEJpdHMobjIpIHtcbiAgcmV0dXJuIChuMiAtIChuMiB8IDApKSAqIHBvdygyLCAzMikgfCAwO1xufVxudmFyIG4gPSAyO1xudmFyIG5QcmltZSA9IDA7XG53aGlsZSAoblByaW1lIDwgNjQpIHtcbiAgaXNQcmltZSA9IHRydWU7XG4gIGZvciAoZmFjdG9yID0gMjsgZmFjdG9yIDw9IG4gLyAyOyBmYWN0b3IrKykge1xuICAgIGlmIChuICUgZmFjdG9yID09PSAwKSB7XG4gICAgICBpc1ByaW1lID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChpc1ByaW1lKSB7XG4gICAgaWYgKG5QcmltZSA8IDgpIHtcbiAgICAgIERFRkFVTFRfU1RBVEVbblByaW1lXSA9IGdldEZyYWN0aW9uYWxCaXRzKHBvdyhuLCAxIC8gMikpO1xuICAgIH1cbiAgICBST1VORF9DT05TVEFOVFNbblByaW1lXSA9IGdldEZyYWN0aW9uYWxCaXRzKHBvdyhuLCAxIC8gMykpO1xuICAgIG5QcmltZSsrO1xuICB9XG4gIG4rKztcbn1cbnZhciBpc1ByaW1lO1xudmFyIGZhY3RvcjtcbnZhciBMaXR0bGVFbmRpYW4gPSAhIW5ldyB1aW50OEFycmF5KG5ldyB1aW50MzJBcnJheShbMV0pLmJ1ZmZlcilbMF07XG5mdW5jdGlvbiBjb252ZXJ0RW5kaWFuKHdvcmQpIHtcbiAgaWYgKExpdHRsZUVuZGlhbikge1xuICAgIHJldHVybiAoXG4gICAgICAvLyBieXRlIDEgLT4gYnl0ZSA0XG4gICAgICB3b3JkID4+PiAyNCB8IC8vIGJ5dGUgMiAtPiBieXRlIDNcbiAgICAgICh3b3JkID4+PiAxNiAmIDI1NSkgPDwgOCB8IC8vIGJ5dGUgMyAtPiBieXRlIDJcbiAgICAgICh3b3JkICYgNjUyODApIDw8IDggfCAvLyBieXRlIDQgLT4gYnl0ZSAxXG4gICAgICB3b3JkIDw8IDI0XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gd29yZDtcbiAgfVxufVxuZnVuY3Rpb24gcmlnaHRSb3RhdGUod29yZCwgYml0cykge1xuICByZXR1cm4gd29yZCA+Pj4gYml0cyB8IHdvcmQgPDwgMzIgLSBiaXRzO1xufVxuZnVuY3Rpb24gc2hhMjU2KGRhdGEpIHtcbiAgdmFyIFNUQVRFID0gREVGQVVMVF9TVEFURS5zbGljZSgpO1xuICB2YXIgbGVndGggPSBkYXRhLmxlbmd0aDtcbiAgdmFyIGJpdExlbmd0aCA9IGxlZ3RoICogODtcbiAgdmFyIG5ld0JpdExlbmd0aCA9IDUxMiAtIChiaXRMZW5ndGggKyA2NCkgJSA1MTIgLSAxICsgYml0TGVuZ3RoICsgNjU7XG4gIHZhciBieXRlcyA9IG5ldyB1aW50OEFycmF5KG5ld0JpdExlbmd0aCAvIDgpO1xuICB2YXIgd29yZHMgPSBuZXcgdWludDMyQXJyYXkoYnl0ZXMuYnVmZmVyKTtcbiAgYnl0ZXMuc2V0KGRhdGEsIDApO1xuICBieXRlc1tsZWd0aF0gPSAxMjg7XG4gIHdvcmRzW3dvcmRzLmxlbmd0aCAtIDFdID0gY29udmVydEVuZGlhbihiaXRMZW5ndGgpO1xuICB2YXIgcm91bmQ7XG4gIGZvciAodmFyIGJsb2NrID0gMDsgYmxvY2sgPCBuZXdCaXRMZW5ndGggLyAzMjsgYmxvY2sgKz0gMTYpIHtcbiAgICB2YXIgd29ya2luZ1N0YXRlID0gU1RBVEUuc2xpY2UoKTtcbiAgICBmb3IgKHJvdW5kID0gMDsgcm91bmQgPCA2NDsgcm91bmQrKykge1xuICAgICAgdmFyIE1Sb3VuZDtcbiAgICAgIGlmIChyb3VuZCA8IDE2KSB7XG4gICAgICAgIE1Sb3VuZCA9IGNvbnZlcnRFbmRpYW4od29yZHNbYmxvY2sgKyByb3VuZF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGdhbW1hMHggPSBNW3JvdW5kIC0gMTVdO1xuICAgICAgICB2YXIgZ2FtbWExeCA9IE1bcm91bmQgLSAyXTtcbiAgICAgICAgTVJvdW5kID0gTVtyb3VuZCAtIDddICsgTVtyb3VuZCAtIDE2XSArIChyaWdodFJvdGF0ZShnYW1tYTB4LCA3KSBeIHJpZ2h0Um90YXRlKGdhbW1hMHgsIDE4KSBeIGdhbW1hMHggPj4+IDMpICsgKHJpZ2h0Um90YXRlKGdhbW1hMXgsIDE3KSBeIHJpZ2h0Um90YXRlKGdhbW1hMXgsIDE5KSBeIGdhbW1hMXggPj4+IDEwKTtcbiAgICAgIH1cbiAgICAgIE1bcm91bmRdID0gTVJvdW5kIHw9IDA7XG4gICAgICB2YXIgdDEgPSAocmlnaHRSb3RhdGUod29ya2luZ1N0YXRlWzRdLCA2KSBeIHJpZ2h0Um90YXRlKHdvcmtpbmdTdGF0ZVs0XSwgMTEpIF4gcmlnaHRSb3RhdGUod29ya2luZ1N0YXRlWzRdLCAyNSkpICsgKHdvcmtpbmdTdGF0ZVs0XSAmIHdvcmtpbmdTdGF0ZVs1XSBeIH53b3JraW5nU3RhdGVbNF0gJiB3b3JraW5nU3RhdGVbNl0pICsgd29ya2luZ1N0YXRlWzddICsgTVJvdW5kICsgUk9VTkRfQ09OU1RBTlRTW3JvdW5kXTtcbiAgICAgIHZhciB0MiA9IChyaWdodFJvdGF0ZSh3b3JraW5nU3RhdGVbMF0sIDIpIF4gcmlnaHRSb3RhdGUod29ya2luZ1N0YXRlWzBdLCAxMykgXiByaWdodFJvdGF0ZSh3b3JraW5nU3RhdGVbMF0sIDIyKSkgKyAod29ya2luZ1N0YXRlWzBdICYgd29ya2luZ1N0YXRlWzFdIF4gd29ya2luZ1N0YXRlWzJdICYgKHdvcmtpbmdTdGF0ZVswXSBeIHdvcmtpbmdTdGF0ZVsxXSkpO1xuICAgICAgZm9yICh2YXIgaSA9IDc7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgd29ya2luZ1N0YXRlW2ldID0gd29ya2luZ1N0YXRlW2kgLSAxXTtcbiAgICAgIH1cbiAgICAgIHdvcmtpbmdTdGF0ZVswXSA9IHQxICsgdDIgfCAwO1xuICAgICAgd29ya2luZ1N0YXRlWzRdID0gd29ya2luZ1N0YXRlWzRdICsgdDEgfCAwO1xuICAgIH1cbiAgICBmb3IgKHJvdW5kID0gMDsgcm91bmQgPCA4OyByb3VuZCsrKSB7XG4gICAgICBTVEFURVtyb3VuZF0gPSBTVEFURVtyb3VuZF0gKyB3b3JraW5nU3RhdGVbcm91bmRdIHwgMDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyB1aW50OEFycmF5KFxuICAgIG5ldyB1aW50MzJBcnJheShcbiAgICAgIFNUQVRFLm1hcChmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnRFbmRpYW4odmFsKTtcbiAgICAgIH0pXG4gICAgKS5idWZmZXJcbiAgKTtcbn1cbmZ1bmN0aW9uIGhtYWMyKGtleSwgZGF0YSkge1xuICBpZiAoa2V5Lmxlbmd0aCA+IDY0KVxuICAgIGtleSA9IHNoYTI1NihrZXkpO1xuICBpZiAoa2V5Lmxlbmd0aCA8IDY0KSB7XG4gICAgY29uc3QgdG1wID0gbmV3IFVpbnQ4QXJyYXkoNjQpO1xuICAgIHRtcC5zZXQoa2V5LCAwKTtcbiAgICBrZXkgPSB0bXA7XG4gIH1cbiAgdmFyIGlubmVyS2V5ID0gbmV3IFVpbnQ4QXJyYXkoNjQpO1xuICB2YXIgb3V0ZXJLZXkgPSBuZXcgVWludDhBcnJheSg2NCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNjQ7IGkrKykge1xuICAgIGlubmVyS2V5W2ldID0gNTQgXiBrZXlbaV07XG4gICAgb3V0ZXJLZXlbaV0gPSA5MiBeIGtleVtpXTtcbiAgfVxuICB2YXIgbXNnID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5sZW5ndGggKyA2NCk7XG4gIG1zZy5zZXQoaW5uZXJLZXksIDApO1xuICBtc2cuc2V0KGRhdGEsIDY0KTtcbiAgdmFyIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KDY0ICsgMzIpO1xuICByZXN1bHQuc2V0KG91dGVyS2V5LCAwKTtcbiAgcmVzdWx0LnNldChzaGEyNTYobXNnKSwgNjQpO1xuICByZXR1cm4gc2hhMjU2KHJlc3VsdCk7XG59XG5cbi8vIHNyYy9wbGF0Zm9ybS93ZWIvbGliL3V0aWwvYnVmZmVydXRpbHMudHNcbnZhciBCdWZmZXJVdGlscyA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5iYXNlNjRDaGFyU2V0ID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG4gICAgdGhpcy5oZXhDaGFyU2V0ID0gXCIwMTIzNDU2Nzg5YWJjZGVmXCI7XG4gIH1cbiAgLy8gaHR0cHM6Ly9naXN0LmdpdGh1YnVzZXJjb250ZW50LmNvbS9qb25sZWlnaHRvbi85NTg4NDEvcmF3L2YyMDBlMzBkZmU5NTIxMmMwMTY1Y2NmMWFlMDAwY2E1MWU5ZGU4MDMvZ2lzdGZpbGUxLmpzXG4gIHVpbnQ4Vmlld1RvQmFzZTY0KGJ5dGVzKSB7XG4gICAgbGV0IGJhc2U2NCA9IFwiXCI7XG4gICAgY29uc3QgZW5jb2RpbmdzID0gdGhpcy5iYXNlNjRDaGFyU2V0O1xuICAgIGNvbnN0IGJ5dGVMZW5ndGggPSBieXRlcy5ieXRlTGVuZ3RoO1xuICAgIGNvbnN0IGJ5dGVSZW1haW5kZXIgPSBieXRlTGVuZ3RoICUgMztcbiAgICBjb25zdCBtYWluTGVuZ3RoID0gYnl0ZUxlbmd0aCAtIGJ5dGVSZW1haW5kZXI7XG4gICAgbGV0IGEsIGIsIGMsIGQ7XG4gICAgbGV0IGNodW5rO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFpbkxlbmd0aDsgaSA9IGkgKyAzKSB7XG4gICAgICBjaHVuayA9IGJ5dGVzW2ldIDw8IDE2IHwgYnl0ZXNbaSArIDFdIDw8IDggfCBieXRlc1tpICsgMl07XG4gICAgICBhID0gKGNodW5rICYgMTY1MTUwNzIpID4+IDE4O1xuICAgICAgYiA9IChjaHVuayAmIDI1ODA0OCkgPj4gMTI7XG4gICAgICBjID0gKGNodW5rICYgNDAzMikgPj4gNjtcbiAgICAgIGQgPSBjaHVuayAmIDYzO1xuICAgICAgYmFzZTY0ICs9IGVuY29kaW5nc1thXSArIGVuY29kaW5nc1tiXSArIGVuY29kaW5nc1tjXSArIGVuY29kaW5nc1tkXTtcbiAgICB9XG4gICAgaWYgKGJ5dGVSZW1haW5kZXIgPT0gMSkge1xuICAgICAgY2h1bmsgPSBieXRlc1ttYWluTGVuZ3RoXTtcbiAgICAgIGEgPSAoY2h1bmsgJiAyNTIpID4+IDI7XG4gICAgICBiID0gKGNodW5rICYgMykgPDwgNDtcbiAgICAgIGJhc2U2NCArPSBlbmNvZGluZ3NbYV0gKyBlbmNvZGluZ3NbYl0gKyBcIj09XCI7XG4gICAgfSBlbHNlIGlmIChieXRlUmVtYWluZGVyID09IDIpIHtcbiAgICAgIGNodW5rID0gYnl0ZXNbbWFpbkxlbmd0aF0gPDwgOCB8IGJ5dGVzW21haW5MZW5ndGggKyAxXTtcbiAgICAgIGEgPSAoY2h1bmsgJiA2NDUxMikgPj4gMTA7XG4gICAgICBiID0gKGNodW5rICYgMTAwOCkgPj4gNDtcbiAgICAgIGMgPSAoY2h1bmsgJiAxNSkgPDwgMjtcbiAgICAgIGJhc2U2NCArPSBlbmNvZGluZ3NbYV0gKyBlbmNvZGluZ3NbYl0gKyBlbmNvZGluZ3NbY10gKyBcIj1cIjtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2U2NDtcbiAgfVxuICBiYXNlNjRUb0FycmF5QnVmZmVyKGJhc2U2NCkge1xuICAgIGNvbnN0IGJpbmFyeV9zdHJpbmcgPSBhdG9iID09IG51bGwgPyB2b2lkIDAgOiBhdG9iKGJhc2U2NCk7XG4gICAgY29uc3QgbGVuID0gYmluYXJ5X3N0cmluZy5sZW5ndGg7XG4gICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW4pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGFzY2lpID0gYmluYXJ5X3N0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgYnl0ZXNbaV0gPSBhc2NpaTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUJ1ZmZlcihieXRlcyk7XG4gIH1cbiAgaXNCdWZmZXIoYnVmZmVyKSB7XG4gICAgcmV0dXJuIGJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IEFycmF5QnVmZmVyLmlzVmlldyhidWZmZXIpO1xuICB9XG4gIHRvQnVmZmVyKGJ1ZmZlcikge1xuICAgIGlmICghQXJyYXlCdWZmZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGNvbnZlcnQgdG8gQnVmZmVyOiBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIG5lY2Vzc2FyeSB0eXBlc1wiKTtcbiAgICB9XG4gICAgaWYgKGJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICB9XG4gICAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhidWZmZXIpKSB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkodGhpcy50b0FycmF5QnVmZmVyKGJ1ZmZlcikpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJCdWZmZXJVdGlscy50b0J1ZmZlciBleHBlY3RlZCBhbiBBcnJheUJ1ZmZlciBvciBhIHZpZXcgb250byBvbmVcIik7XG4gIH1cbiAgdG9BcnJheUJ1ZmZlcihidWZmZXIpIHtcbiAgICBpZiAoIUFycmF5QnVmZmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBjb252ZXJ0IHRvIEFycmF5QnVmZmVyOiBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIG5lY2Vzc2FyeSB0eXBlc1wiKTtcbiAgICB9XG4gICAgaWYgKGJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH1cbiAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGJ1ZmZlcikpIHtcbiAgICAgIHJldHVybiBidWZmZXIuYnVmZmVyLnNsaWNlKGJ1ZmZlci5ieXRlT2Zmc2V0LCBidWZmZXIuYnl0ZU9mZnNldCArIGJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQnVmZmVyVXRpbHMudG9BcnJheUJ1ZmZlciBleHBlY3RlZCBhbiBBcnJheUJ1ZmZlciBvciBhIHZpZXcgb250byBvbmVcIik7XG4gIH1cbiAgYmFzZTY0RW5jb2RlKGJ1ZmZlcikge1xuICAgIHJldHVybiB0aGlzLnVpbnQ4Vmlld1RvQmFzZTY0KHRoaXMudG9CdWZmZXIoYnVmZmVyKSk7XG4gIH1cbiAgYmFzZTY0RGVjb2RlKHN0cikge1xuICAgIGlmIChBcnJheUJ1ZmZlciAmJiBQbGF0Zm9ybS5Db25maWcuYXRvYikge1xuICAgICAgcmV0dXJuIHRoaXMuYmFzZTY0VG9BcnJheUJ1ZmZlcihzdHIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBBcnJheUJ1ZmZlciB0byBleGlzdCBhbmQgUGxhdGZvcm0uQ29uZmlnLmF0b2IgdG8gYmUgY29uZmlndXJlZFwiKTtcbiAgICB9XG4gIH1cbiAgaGV4RW5jb2RlKGJ1ZmZlcikge1xuICAgIGNvbnN0IHVpbnQ4QXJyYXkyID0gdGhpcy50b0J1ZmZlcihidWZmZXIpO1xuICAgIHJldHVybiB1aW50OEFycmF5Mi5yZWR1Y2UoKGFjY3VtLCBieXRlKSA9PiBhY2N1bSArIGJ5dGUudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSwgXCJcIik7XG4gIH1cbiAgaGV4RGVjb2RlKGhleEVuY29kZWRCeXRlcykge1xuICAgIGlmIChoZXhFbmNvZGVkQnl0ZXMubGVuZ3RoICUgMiAhPT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgY3JlYXRlIGEgYnl0ZSBhcnJheSBmcm9tIGEgaGV4IHN0cmluZyBvZiBvZGQgbGVuZ3RoXCIpO1xuICAgIH1cbiAgICBjb25zdCB1aW50OEFycmF5MiA9IG5ldyBVaW50OEFycmF5KGhleEVuY29kZWRCeXRlcy5sZW5ndGggLyAyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVpbnQ4QXJyYXkyLmxlbmd0aDsgaSsrKSB7XG4gICAgICB1aW50OEFycmF5MltpXSA9IHBhcnNlSW50KGhleEVuY29kZWRCeXRlcy5zbGljZSgyICogaSwgMiAqIChpICsgMSkpLCAxNik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRvQXJyYXlCdWZmZXIodWludDhBcnJheTIpO1xuICB9XG4gIHV0ZjhFbmNvZGUoc3RyaW5nKSB7XG4gICAgaWYgKFBsYXRmb3JtLkNvbmZpZy5UZXh0RW5jb2Rlcikge1xuICAgICAgY29uc3QgZW5jb2RlZEJ5dGVBcnJheSA9IG5ldyBQbGF0Zm9ybS5Db25maWcuVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyaW5nKTtcbiAgICAgIHJldHVybiB0aGlzLnRvQXJyYXlCdWZmZXIoZW5jb2RlZEJ5dGVBcnJheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIFRleHRFbmNvZGVyIHRvIGJlIGNvbmZpZ3VyZWRcIik7XG4gICAgfVxuICB9XG4gIC8qIEZvciB1dGY4IGRlY29kaW5nIHdlIGFwcGx5IHNsaWdodGx5IHN0cmljdGVyIGlucHV0IHZhbGlkYXRpb24gdGhhbiB0b1xuICAgKiBoZXhFbmNvZGUvYmFzZTY0RW5jb2RlL2V0YzogaW4gdGhvc2Ugd2UgYWNjZXB0IGFueXRoaW5nIHRoYXQgQnVmZmVyLmZyb21cbiAgICogY2FuIHRha2UgKGluIHBhcnRpY3VsYXIgYWxsb3dpbmcgc3RyaW5ncywgd2hpY2ggYXJlIGp1c3QgaW50ZXJwcmV0ZWQgYXNcbiAgICogYmluYXJ5KTsgaGVyZSB3ZSBlbnN1cmUgdGhhdCB0aGUgaW5wdXQgaXMgYWN0dWFsbHkgYSBidWZmZXIgc2luY2UgdHJ5aW5nXG4gICAqIHRvIHV0ZjgtZGVjb2RlIGEgc3RyaW5nIHRvIGFub3RoZXIgc3RyaW5nIGlzIGFsbW9zdCBjZXJ0YWlubHkgYSBtaXN0YWtlICovXG4gIHV0ZjhEZWNvZGUoYnVmZmVyKSB7XG4gICAgaWYgKCF0aGlzLmlzQnVmZmVyKGJ1ZmZlcikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIGlucHV0IG9mIHV0ZjhkZWNvZGUgdG8gYmUgYW4gYXJyYXlidWZmZXIgb3IgdHlwZWQgYXJyYXlcIik7XG4gICAgfVxuICAgIGlmIChUZXh0RGVjb2Rlcikge1xuICAgICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShidWZmZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBUZXh0RGVjb2RlciB0byBiZSBjb25maWd1cmVkXCIpO1xuICAgIH1cbiAgfVxuICBhcmVCdWZmZXJzRXF1YWwoYnVmZmVyMSwgYnVmZmVyMikge1xuICAgIGlmICghYnVmZmVyMSB8fCAhYnVmZmVyMilcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBhcnJheUJ1ZmZlcjEgPSB0aGlzLnRvQXJyYXlCdWZmZXIoYnVmZmVyMSk7XG4gICAgY29uc3QgYXJyYXlCdWZmZXIyID0gdGhpcy50b0FycmF5QnVmZmVyKGJ1ZmZlcjIpO1xuICAgIGlmIChhcnJheUJ1ZmZlcjEuYnl0ZUxlbmd0aCAhPSBhcnJheUJ1ZmZlcjIuYnl0ZUxlbmd0aClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBieXRlczEgPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcjEpO1xuICAgIGNvbnN0IGJ5dGVzMiA9IG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyMik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChieXRlczFbaV0gIT0gYnl0ZXMyW2ldKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGJ5dGVMZW5ndGgoYnVmZmVyKSB7XG4gICAgaWYgKGJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IEFycmF5QnVmZmVyLmlzVmlldyhidWZmZXIpKSB7XG4gICAgICByZXR1cm4gYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuICBhcnJheUJ1ZmZlclZpZXdUb0J1ZmZlcihhcnJheUJ1ZmZlclZpZXcpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5QnVmZmVyKGFycmF5QnVmZmVyVmlldyk7XG4gIH1cbiAgaG1hY1NoYTI1NihtZXNzYWdlLCBrZXkpIHtcbiAgICBjb25zdCBoYXNoID0gaG1hYzIodGhpcy50b0J1ZmZlcihrZXkpLCB0aGlzLnRvQnVmZmVyKG1lc3NhZ2UpKTtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5QnVmZmVyKGhhc2gpO1xuICB9XG59O1xudmFyIGJ1ZmZlcnV0aWxzX2RlZmF1bHQgPSBuZXcgQnVmZmVyVXRpbHMoKTtcblxuLy8gc3JjL3BsYXRmb3JtL3dlYi9saWIvdXRpbC9jcnlwdG8udHNcbnZhciBjcmVhdGVDcnlwdG9DbGFzcyA9IGZ1bmN0aW9uKGNvbmZpZywgYnVmZmVyVXRpbHMpIHtcbiAgdmFyIERFRkFVTFRfQUxHT1JJVEhNID0gXCJhZXNcIjtcbiAgdmFyIERFRkFVTFRfS0VZTEVOR1RIID0gMjU2O1xuICB2YXIgREVGQVVMVF9NT0RFID0gXCJjYmNcIjtcbiAgdmFyIERFRkFVTFRfQkxPQ0tMRU5HVEggPSAxNjtcbiAgZnVuY3Rpb24gdmFsaWRhdGVDaXBoZXJQYXJhbXMocGFyYW1zKSB7XG4gICAgaWYgKHBhcmFtcy5hbGdvcml0aG0gPT09IFwiYWVzXCIgJiYgcGFyYW1zLm1vZGUgPT09IFwiY2JjXCIpIHtcbiAgICAgIGlmIChwYXJhbXMua2V5TGVuZ3RoID09PSAxMjggfHwgcGFyYW1zLmtleUxlbmd0aCA9PT0gMjU2KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJVbnN1cHBvcnRlZCBrZXkgbGVuZ3RoIFwiICsgcGFyYW1zLmtleUxlbmd0aCArIFwiIGZvciBhZXMtY2JjIGVuY3J5cHRpb24uIEVuY3J5cHRpb24ga2V5IG11c3QgYmUgMTI4IG9yIDI1NiBiaXRzICgxNiBvciAzMiBBU0NJSSBjaGFyYWN0ZXJzKVwiXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBub3JtYWxpc2VCYXNlNjQoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKFwiX1wiLCBcIi9cIikucmVwbGFjZShcIi1cIiwgXCIrXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGlzQ2lwaGVyUGFyYW1zKHBhcmFtcykge1xuICAgIHJldHVybiBwYXJhbXMgaW5zdGFuY2VvZiBDaXBoZXJQYXJhbXM7XG4gIH1cbiAgY2xhc3MgQ2lwaGVyUGFyYW1zIHtcbiAgICBjb25zdHJ1Y3RvcihhbGdvcml0aG0sIGtleUxlbmd0aCwgbW9kZSwga2V5KSB7XG4gICAgICB0aGlzLmFsZ29yaXRobSA9IGFsZ29yaXRobTtcbiAgICAgIHRoaXMua2V5TGVuZ3RoID0ga2V5TGVuZ3RoO1xuICAgICAgdGhpcy5tb2RlID0gbW9kZTtcbiAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIH1cbiAgfVxuICBjbGFzcyBDcnlwdG8yIHtcbiAgICAvKipcbiAgICAgKiBPYnRhaW4gYSBjb21wbGV0ZSBDaXBoZXJQYXJhbXMgaW5zdGFuY2UgZnJvbSB0aGUgcHJvdmlkZWQgcGFyYW1zLCBmaWxsaW5nXG4gICAgICogaW4gYW55IG5vdCBwcm92aWRlZCB3aXRoIGRlZmF1bHQgdmFsdWVzLCBjYWxjdWxhdGluZyBhIGtleUxlbmd0aCBmcm9tXG4gICAgICogdGhlIHN1cHBsaWVkIGtleSwgYW5kIHZhbGlkYXRpbmcgdGhlIHJlc3VsdC5cbiAgICAgKiBAcGFyYW0gcGFyYW1zIGFuIG9iamVjdCBjb250YWluaW5nIGF0IGEgbWluaW11bSBhIGBrZXlgIGtleSB3aXRoIHZhbHVlIHRoZVxuICAgICAqIGtleSwgYXMgZWl0aGVyIGEgYmluYXJ5IG9yIGEgYmFzZTY0LWVuY29kZWQgc3RyaW5nLlxuICAgICAqIE1heSBvcHRpb25hbGx5IGFsc28gY29udGFpbjogYWxnb3JpdGhtIChkZWZhdWx0cyB0byBBRVMpLFxuICAgICAqIG1vZGUgKGRlZmF1bHRzIHRvICdjYmMnKVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXREZWZhdWx0UGFyYW1zKHBhcmFtcykge1xuICAgICAgdmFyIGtleTtcbiAgICAgIGlmICghcGFyYW1zLmtleSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDcnlwdG8uZ2V0RGVmYXVsdFBhcmFtczogYSBrZXkgaXMgcmVxdWlyZWRcIik7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHBhcmFtcy5rZXkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAga2V5ID0gYnVmZmVyVXRpbHMudG9BcnJheUJ1ZmZlcihidWZmZXJVdGlscy5iYXNlNjREZWNvZGUobm9ybWFsaXNlQmFzZTY0KHBhcmFtcy5rZXkpKSk7XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5rZXkgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICBrZXkgPSBwYXJhbXMua2V5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga2V5ID0gYnVmZmVyVXRpbHMudG9BcnJheUJ1ZmZlcihwYXJhbXMua2V5KTtcbiAgICAgIH1cbiAgICAgIHZhciBhbGdvcml0aG0gPSBwYXJhbXMuYWxnb3JpdGhtIHx8IERFRkFVTFRfQUxHT1JJVEhNO1xuICAgICAgdmFyIGtleUxlbmd0aCA9IGtleS5ieXRlTGVuZ3RoICogODtcbiAgICAgIHZhciBtb2RlID0gcGFyYW1zLm1vZGUgfHwgREVGQVVMVF9NT0RFO1xuICAgICAgdmFyIGNpcGhlclBhcmFtcyA9IG5ldyBDaXBoZXJQYXJhbXMoYWxnb3JpdGhtLCBrZXlMZW5ndGgsIG1vZGUsIGtleSk7XG4gICAgICBpZiAocGFyYW1zLmtleUxlbmd0aCAmJiBwYXJhbXMua2V5TGVuZ3RoICE9PSBjaXBoZXJQYXJhbXMua2V5TGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBcIkNyeXB0by5nZXREZWZhdWx0UGFyYW1zOiBhIGtleUxlbmd0aCBvZiBcIiArIHBhcmFtcy5rZXlMZW5ndGggKyBcIiB3YXMgc3BlY2lmaWVkLCBidXQgdGhlIGtleSBhY3R1YWxseSBoYXMgbGVuZ3RoIFwiICsgY2lwaGVyUGFyYW1zLmtleUxlbmd0aFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdmFsaWRhdGVDaXBoZXJQYXJhbXMoY2lwaGVyUGFyYW1zKTtcbiAgICAgIHJldHVybiBjaXBoZXJQYXJhbXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIGEgcmFuZG9tIGVuY3J5cHRpb24ga2V5IGZyb20gdGhlIHN1cHBsaWVkIGtleWxlbmd0aCAob3IgdGhlXG4gICAgICogZGVmYXVsdCBrZXlMZW5ndGggaWYgbm9uZSBzdXBwbGllZCkgYXMgYW4gQXJyYXlCdWZmZXJcbiAgICAgKiBAcGFyYW0ga2V5TGVuZ3RoIChvcHRpb25hbCkgdGhlIHJlcXVpcmVkIGtleUxlbmd0aCBpbiBiaXRzXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGdlbmVyYXRlUmFuZG9tS2V5KGtleUxlbmd0aCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5nZXRSYW5kb21BcnJheUJ1ZmZlcigoa2V5TGVuZ3RoIHx8IERFRkFVTFRfS0VZTEVOR1RIKSAvIDgpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvckluZm8oXCJGYWlsZWQgdG8gZ2VuZXJhdGUgcmFuZG9tIGtleTogXCIgKyBlcnIubWVzc2FnZSwgNDAwLCA1ZTQsIGVycik7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludGVybmFsOyBnZXQgYSBDaGFubmVsQ2lwaGVyIGluc3RhbmNlIGJhc2VkIG9uIHRoZSBnaXZlbiBjaXBoZXJQYXJhbXNcbiAgICAgKiBAcGFyYW0gcGFyYW1zIGVpdGhlciBhIENpcGhlclBhcmFtcyBpbnN0YW5jZSBvciBzb21lIHN1YnNldCBvZiBpdHNcbiAgICAgKiBmaWVsZHMgdGhhdCBpbmNsdWRlcyBhIGtleVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRDaXBoZXIocGFyYW1zLCBsb2dnZXIpIHtcbiAgICAgIHZhciBfYTI7XG4gICAgICB2YXIgY2lwaGVyUGFyYW1zID0gaXNDaXBoZXJQYXJhbXMocGFyYW1zKSA/IHBhcmFtcyA6IHRoaXMuZ2V0RGVmYXVsdFBhcmFtcyhwYXJhbXMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2lwaGVyUGFyYW1zLFxuICAgICAgICBjaXBoZXI6IG5ldyBDQkNDaXBoZXIoY2lwaGVyUGFyYW1zLCAoX2EyID0gcGFyYW1zLml2KSAhPSBudWxsID8gX2EyIDogbnVsbCwgbG9nZ2VyKVxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgQ3J5cHRvMi5DaXBoZXJQYXJhbXMgPSBDaXBoZXJQYXJhbXM7XG4gIENyeXB0bzI7XG4gIGNsYXNzIENCQ0NpcGhlciB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zLCBpdiwgbG9nZ2VyKSB7XG4gICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICAgIGlmICghY3J5cHRvLnN1YnRsZSkge1xuICAgICAgICBpZiAoaXNTZWN1cmVDb250ZXh0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgXCJDcnlwdG8gb3BlcmF0aW9ucyBhcmUgbm90IHBvc3NpYmxlIHNpbmNlIHRoZSBicm93c2VyXFx1MjAxOXMgU3VidGxlQ3J5cHRvIGNsYXNzIGlzIHVuYXZhaWxhYmxlIChyZWFzb24gdW5rbm93bikuXCJcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIFwiQ3J5cHRvIG9wZXJhdGlvbnMgYXJlIGlzIG5vdCBwb3NzaWJsZSBzaW5jZSB0aGUgY3VycmVudCBlbnZpcm9ubWVudCBpcyBhIG5vbi1zZWN1cmUgY29udGV4dCBhbmQgaGVuY2UgdGhlIGJyb3dzZXJcXHUyMDE5cyBTdWJ0bGVDcnlwdG8gY2xhc3MgaXMgbm90IGF2YWlsYWJsZS5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuYWxnb3JpdGhtID0gcGFyYW1zLmFsZ29yaXRobSArIFwiLVwiICsgU3RyaW5nKHBhcmFtcy5rZXlMZW5ndGgpICsgXCItXCIgKyBwYXJhbXMubW9kZTtcbiAgICAgIHRoaXMud2ViQ3J5cHRvQWxnb3JpdGhtID0gcGFyYW1zLmFsZ29yaXRobSArIFwiLVwiICsgcGFyYW1zLm1vZGU7XG4gICAgICB0aGlzLmtleSA9IGJ1ZmZlclV0aWxzLnRvQXJyYXlCdWZmZXIocGFyYW1zLmtleSk7XG4gICAgICB0aGlzLml2ID0gaXYgPyBidWZmZXJVdGlscy50b0FycmF5QnVmZmVyKGl2KSA6IG51bGw7XG4gICAgfVxuICAgIGNvbmNhdChidWZmZXIxLCBidWZmZXIyKSB7XG4gICAgICBjb25zdCBvdXRwdXQgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyMS5ieXRlTGVuZ3RoICsgYnVmZmVyMi5ieXRlTGVuZ3RoKTtcbiAgICAgIGNvbnN0IG91dHB1dFZpZXcgPSBuZXcgRGF0YVZpZXcob3V0cHV0KTtcbiAgICAgIGNvbnN0IGJ1ZmZlcjFWaWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlclV0aWxzLnRvQXJyYXlCdWZmZXIoYnVmZmVyMSkpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXIxVmlldy5ieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgb3V0cHV0Vmlldy5zZXRJbnQ4KGksIGJ1ZmZlcjFWaWV3LmdldEludDgoaSkpO1xuICAgICAgfVxuICAgICAgY29uc3QgYnVmZmVyMlZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyVXRpbHMudG9BcnJheUJ1ZmZlcihidWZmZXIyKSk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlcjJWaWV3LmJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICBvdXRwdXRWaWV3LnNldEludDgoYnVmZmVyMVZpZXcuYnl0ZUxlbmd0aCArIGksIGJ1ZmZlcjJWaWV3LmdldEludDgoaSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG4gICAgYXN5bmMgZW5jcnlwdChwbGFpbnRleHQpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIkNCQ0NpcGhlci5lbmNyeXB0KClcIiwgXCJcIik7XG4gICAgICBjb25zdCBpdiA9IGF3YWl0IHRoaXMuZ2V0SXYoKTtcbiAgICAgIGNvbnN0IGNyeXB0b0tleSA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFwicmF3XCIsIHRoaXMua2V5LCB0aGlzLndlYkNyeXB0b0FsZ29yaXRobSwgZmFsc2UsIFtcImVuY3J5cHRcIl0pO1xuICAgICAgY29uc3QgY2lwaGVydGV4dCA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuZW5jcnlwdCh7IG5hbWU6IHRoaXMud2ViQ3J5cHRvQWxnb3JpdGhtLCBpdiB9LCBjcnlwdG9LZXksIHBsYWludGV4dCk7XG4gICAgICByZXR1cm4gdGhpcy5jb25jYXQoaXYsIGNpcGhlcnRleHQpO1xuICAgIH1cbiAgICBhc3luYyBkZWNyeXB0KGNpcGhlcnRleHQpIHtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLCBcIkNCQ0NpcGhlci5kZWNyeXB0KClcIiwgXCJcIik7XG4gICAgICBjb25zdCBjaXBoZXJ0ZXh0QXJyYXlCdWZmZXIgPSBidWZmZXJVdGlscy50b0FycmF5QnVmZmVyKGNpcGhlcnRleHQpO1xuICAgICAgY29uc3QgaXYgPSBjaXBoZXJ0ZXh0QXJyYXlCdWZmZXIuc2xpY2UoMCwgREVGQVVMVF9CTE9DS0xFTkdUSCk7XG4gICAgICBjb25zdCBjaXBoZXJ0ZXh0Qm9keSA9IGNpcGhlcnRleHRBcnJheUJ1ZmZlci5zbGljZShERUZBVUxUX0JMT0NLTEVOR1RIKTtcbiAgICAgIGNvbnN0IGNyeXB0b0tleSA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFwicmF3XCIsIHRoaXMua2V5LCB0aGlzLndlYkNyeXB0b0FsZ29yaXRobSwgZmFsc2UsIFtcImRlY3J5cHRcIl0pO1xuICAgICAgcmV0dXJuIGNyeXB0by5zdWJ0bGUuZGVjcnlwdCh7IG5hbWU6IHRoaXMud2ViQ3J5cHRvQWxnb3JpdGhtLCBpdiB9LCBjcnlwdG9LZXksIGNpcGhlcnRleHRCb2R5KTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0SXYoKSB7XG4gICAgICBpZiAodGhpcy5pdikge1xuICAgICAgICB2YXIgaXYgPSB0aGlzLml2O1xuICAgICAgICB0aGlzLml2ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGl2O1xuICAgICAgfVxuICAgICAgY29uc3QgcmFuZG9tQmxvY2sgPSBhd2FpdCBjb25maWcuZ2V0UmFuZG9tQXJyYXlCdWZmZXIoREVGQVVMVF9CTE9DS0xFTkdUSCk7XG4gICAgICByZXR1cm4gYnVmZmVyVXRpbHMudG9BcnJheUJ1ZmZlcihyYW5kb21CbG9jayk7XG4gICAgfVxuICB9XG4gIHJldHVybiBDcnlwdG8yO1xufTtcblxuLy8gc3JjL2NvbW1vbi9jb25zdGFudHMvWEhSU3RhdGVzLnRzXG52YXIgWEhSU3RhdGVzID0gLyogQF9fUFVSRV9fICovICgoWEhSU3RhdGVzMikgPT4ge1xuICBYSFJTdGF0ZXMyW1hIUlN0YXRlczJbXCJSRVFfU0VORFwiXSA9IDBdID0gXCJSRVFfU0VORFwiO1xuICBYSFJTdGF0ZXMyW1hIUlN0YXRlczJbXCJSRVFfUkVDVlwiXSA9IDFdID0gXCJSRVFfUkVDVlwiO1xuICBYSFJTdGF0ZXMyW1hIUlN0YXRlczJbXCJSRVFfUkVDVl9QT0xMXCJdID0gMl0gPSBcIlJFUV9SRUNWX1BPTExcIjtcbiAgWEhSU3RhdGVzMltYSFJTdGF0ZXMyW1wiUkVRX1JFQ1ZfU1RSRUFNXCJdID0gM10gPSBcIlJFUV9SRUNWX1NUUkVBTVwiO1xuICByZXR1cm4gWEhSU3RhdGVzMjtcbn0pKFhIUlN0YXRlcyB8fCB7fSk7XG52YXIgWEhSU3RhdGVzX2RlZmF1bHQgPSBYSFJTdGF0ZXM7XG5cbi8vIHNyYy9wbGF0Zm9ybS93ZWIvbGliL2h0dHAvaHR0cC50c1xuZnVuY3Rpb24gY3JlYXRlTWlzc2luZ0ltcGxlbWVudGF0aW9uRXJyb3IoKSB7XG4gIHJldHVybiBuZXcgRXJyb3JJbmZvKFxuICAgIFwiTm8gSFRUUCByZXF1ZXN0IHBsdWdpbiBwcm92aWRlZC4gUHJvdmlkZSBhdCBsZWFzdCBvbmUgb2YgdGhlIEZldGNoUmVxdWVzdCBvciBYSFJSZXF1ZXN0IHBsdWdpbnMuXCIsXG4gICAgNDAwLFxuICAgIDRlNFxuICApO1xufVxudmFyIF9hO1xudmFyIEh0dHAyID0gKF9hID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNoZWNrc0luUHJvZ3Jlc3MgPSBudWxsO1xuICAgIHRoaXMuY2hlY2tDb25uZWN0aXZpdHkgPSB2b2lkIDA7XG4gICAgdGhpcy5zdXBwb3J0c0F1dGhIZWFkZXJzID0gZmFsc2U7XG4gICAgdGhpcy5zdXBwb3J0c0xpbmtIZWFkZXJzID0gZmFsc2U7XG4gICAgdmFyIF9hMjtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudCAhPSBudWxsID8gY2xpZW50IDogbnVsbDtcbiAgICBjb25zdCBjb25uZWN0aXZpdHlDaGVja1VybCA9IChjbGllbnQgPT0gbnVsbCA/IHZvaWQgMCA6IGNsaWVudC5vcHRpb25zLmNvbm5lY3Rpdml0eUNoZWNrVXJsKSB8fCBkZWZhdWx0c19kZWZhdWx0LmNvbm5lY3Rpdml0eUNoZWNrVXJsO1xuICAgIGNvbnN0IGNvbm5lY3Rpdml0eUNoZWNrUGFyYW1zID0gKF9hMiA9IGNsaWVudCA9PSBudWxsID8gdm9pZCAwIDogY2xpZW50Lm9wdGlvbnMuY29ubmVjdGl2aXR5Q2hlY2tQYXJhbXMpICE9IG51bGwgPyBfYTIgOiBudWxsO1xuICAgIGNvbnN0IGNvbm5lY3Rpdml0eVVybElzRGVmYXVsdCA9ICEoY2xpZW50ID09IG51bGwgPyB2b2lkIDAgOiBjbGllbnQub3B0aW9ucy5jb25uZWN0aXZpdHlDaGVja1VybCk7XG4gICAgY29uc3QgcmVxdWVzdEltcGxlbWVudGF0aW9ucyA9IF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHt9LCBIdHRwMi5idW5kbGVkUmVxdWVzdEltcGxlbWVudGF0aW9ucyksIGNsaWVudCA9PSBudWxsID8gdm9pZCAwIDogY2xpZW50Ll9hZGRpdGlvbmFsSFRUUFJlcXVlc3RJbXBsZW1lbnRhdGlvbnMpO1xuICAgIGNvbnN0IHhoclJlcXVlc3RJbXBsZW1lbnRhdGlvbiA9IHJlcXVlc3RJbXBsZW1lbnRhdGlvbnMuWEhSUmVxdWVzdDtcbiAgICBjb25zdCBmZXRjaFJlcXVlc3RJbXBsZW1lbnRhdGlvbiA9IHJlcXVlc3RJbXBsZW1lbnRhdGlvbnMuRmV0Y2hSZXF1ZXN0O1xuICAgIGNvbnN0IGhhc0ltcGxlbWVudGF0aW9uID0gISEoeGhyUmVxdWVzdEltcGxlbWVudGF0aW9uIHx8IGZldGNoUmVxdWVzdEltcGxlbWVudGF0aW9uKTtcbiAgICBpZiAoIWhhc0ltcGxlbWVudGF0aW9uKSB7XG4gICAgICB0aHJvdyBjcmVhdGVNaXNzaW5nSW1wbGVtZW50YXRpb25FcnJvcigpO1xuICAgIH1cbiAgICBpZiAoUGxhdGZvcm0uQ29uZmlnLnhoclN1cHBvcnRlZCAmJiB4aHJSZXF1ZXN0SW1wbGVtZW50YXRpb24pIHtcbiAgICAgIHRoaXMuc3VwcG9ydHNBdXRoSGVhZGVycyA9IHRydWU7XG4gICAgICB0aGlzLlJlcXVlc3QgPSBhc3luYyBmdW5jdGlvbihtZXRob2QsIHVyaSwgaGVhZGVycywgcGFyYW1zLCBib2R5KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgIHZhciBfYTM7XG4gICAgICAgICAgY29uc3QgcmVxID0geGhyUmVxdWVzdEltcGxlbWVudGF0aW9uLmNyZWF0ZVJlcXVlc3QoXG4gICAgICAgICAgICB1cmksXG4gICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIFhIUlN0YXRlc19kZWZhdWx0LlJFUV9TRU5ELFxuICAgICAgICAgICAgKF9hMyA9IGNsaWVudCAmJiBjbGllbnQub3B0aW9ucy50aW1lb3V0cykgIT0gbnVsbCA/IF9hMyA6IG51bGwsXG4gICAgICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgICAgIG1ldGhvZFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmVxLm9uY2UoXG4gICAgICAgICAgICBcImNvbXBsZXRlXCIsXG4gICAgICAgICAgICAoZXJyb3IsIGJvZHkyLCBoZWFkZXJzMiwgdW5wYWNrZWQsIHN0YXR1c0NvZGUpID0+IHJlc29sdmUoeyBlcnJvciwgYm9keTogYm9keTIsIGhlYWRlcnM6IGhlYWRlcnMyLCB1bnBhY2tlZCwgc3RhdHVzQ29kZSB9KVxuICAgICAgICAgICk7XG4gICAgICAgICAgcmVxLmV4ZWMoKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgaWYgKGNsaWVudCA9PSBudWxsID8gdm9pZCAwIDogY2xpZW50Lm9wdGlvbnMuZGlzYWJsZUNvbm5lY3Rpdml0eUNoZWNrKSB7XG4gICAgICAgIHRoaXMuY2hlY2tDb25uZWN0aXZpdHkgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2hlY2tDb25uZWN0aXZpdHkgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgX2EzO1xuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICAgICAgXCIoWEhSUmVxdWVzdClIdHRwLmNoZWNrQ29ubmVjdGl2aXR5KClcIixcbiAgICAgICAgICAgIFwiU2VuZGluZzsgXCIgKyBjb25uZWN0aXZpdHlDaGVja1VybFxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgcmVxdWVzdFJlc3VsdCA9IGF3YWl0IHRoaXMuZG9VcmkoXG4gICAgICAgICAgICBIdHRwTWV0aG9kc19kZWZhdWx0LkdldCxcbiAgICAgICAgICAgIGNvbm5lY3Rpdml0eUNoZWNrVXJsLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBjb25uZWN0aXZpdHlDaGVja1BhcmFtc1xuICAgICAgICAgICk7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGlmICghY29ubmVjdGl2aXR5VXJsSXNEZWZhdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQgPSAhcmVxdWVzdFJlc3VsdC5lcnJvciAmJiBpc1N1Y2Nlc3NDb2RlKHJlcXVlc3RSZXN1bHQuc3RhdHVzQ29kZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9ICFyZXF1ZXN0UmVzdWx0LmVycm9yICYmICgoX2EzID0gcmVxdWVzdFJlc3VsdC5ib2R5KSA9PSBudWxsID8gdm9pZCAwIDogX2EzLnJlcGxhY2UoL1xcbi8sIFwiXCIpKSA9PSBcInllc1wiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTywgXCIoWEhSUmVxdWVzdClIdHRwLmNoZWNrQ29ubmVjdGl2aXR5KClcIiwgXCJSZXN1bHQ6IFwiICsgcmVzdWx0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoUGxhdGZvcm0uQ29uZmlnLmZldGNoU3VwcG9ydGVkICYmIGZldGNoUmVxdWVzdEltcGxlbWVudGF0aW9uKSB7XG4gICAgICB0aGlzLnN1cHBvcnRzQXV0aEhlYWRlcnMgPSB0cnVlO1xuICAgICAgdGhpcy5SZXF1ZXN0ID0gYXN5bmMgKG1ldGhvZCwgdXJpLCBoZWFkZXJzLCBwYXJhbXMsIGJvZHkpID0+IHtcbiAgICAgICAgcmV0dXJuIGZldGNoUmVxdWVzdEltcGxlbWVudGF0aW9uKG1ldGhvZCwgY2xpZW50ICE9IG51bGwgPyBjbGllbnQgOiBudWxsLCB1cmksIGhlYWRlcnMsIHBhcmFtcywgYm9keSk7XG4gICAgICB9O1xuICAgICAgdGhpcy5jaGVja0Nvbm5lY3Rpdml0eSA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX2EzO1xuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JQ1JPLFxuICAgICAgICAgIFwiKEZldGNoKUh0dHAuY2hlY2tDb25uZWN0aXZpdHkoKVwiLFxuICAgICAgICAgIFwiU2VuZGluZzsgXCIgKyBjb25uZWN0aXZpdHlDaGVja1VybFxuICAgICAgICApO1xuICAgICAgICBjb25zdCByZXF1ZXN0UmVzdWx0ID0gYXdhaXQgdGhpcy5kb1VyaShIdHRwTWV0aG9kc19kZWZhdWx0LkdldCwgY29ubmVjdGl2aXR5Q2hlY2tVcmwsIG51bGwsIG51bGwsIG51bGwpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSAhcmVxdWVzdFJlc3VsdC5lcnJvciAmJiAoKF9hMyA9IHJlcXVlc3RSZXN1bHQuYm9keSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMy5yZXBsYWNlKC9cXG4vLCBcIlwiKSkgPT0gXCJ5ZXNcIjtcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlDUk8sIFwiKEZldGNoKUh0dHAuY2hlY2tDb25uZWN0aXZpdHkoKVwiLCBcIlJlc3VsdDogXCIgKyByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5SZXF1ZXN0ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBlcnJvciA9IGhhc0ltcGxlbWVudGF0aW9uID8gbmV3IFBhcnRpYWxFcnJvckluZm8oXCJubyBzdXBwb3J0ZWQgSFRUUCB0cmFuc3BvcnRzIGF2YWlsYWJsZVwiLCBudWxsLCA0MDApIDogY3JlYXRlTWlzc2luZ0ltcGxlbWVudGF0aW9uRXJyb3IoKTtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3IgfTtcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIGdldCBsb2dnZXIoKSB7XG4gICAgdmFyIF9hMiwgX2I7XG4gICAgcmV0dXJuIChfYiA9IChfYTIgPSB0aGlzLmNsaWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5sb2dnZXIpICE9IG51bGwgPyBfYiA6IGxvZ2dlcl9kZWZhdWx0LmRlZmF1bHRMb2dnZXI7XG4gIH1cbiAgYXN5bmMgZG9VcmkobWV0aG9kLCB1cmksIGhlYWRlcnMsIGJvZHksIHBhcmFtcykge1xuICAgIGlmICghdGhpcy5SZXF1ZXN0KSB7XG4gICAgICByZXR1cm4geyBlcnJvcjogbmV3IFBhcnRpYWxFcnJvckluZm8oXCJSZXF1ZXN0IGludm9rZWQgYmVmb3JlIGFzc2lnbmVkIHRvXCIsIG51bGwsIDUwMCkgfTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuUmVxdWVzdChtZXRob2QsIHVyaSwgaGVhZGVycywgcGFyYW1zLCBib2R5KTtcbiAgfVxuICBzaG91bGRGYWxsYmFjayhlcnJvckluZm8pIHtcbiAgICBjb25zdCBzdGF0dXNDb2RlID0gZXJyb3JJbmZvLnN0YXR1c0NvZGU7XG4gICAgcmV0dXJuIHN0YXR1c0NvZGUgPT09IDQwOCAmJiAhZXJyb3JJbmZvLmNvZGUgfHwgc3RhdHVzQ29kZSA9PT0gNDAwICYmICFlcnJvckluZm8uY29kZSB8fCBzdGF0dXNDb2RlID49IDUwMCAmJiBzdGF0dXNDb2RlIDw9IDUwNDtcbiAgfVxufSwgX2EubWV0aG9kcyA9IFtIdHRwTWV0aG9kc19kZWZhdWx0LkdldCwgSHR0cE1ldGhvZHNfZGVmYXVsdC5EZWxldGUsIEh0dHBNZXRob2RzX2RlZmF1bHQuUG9zdCwgSHR0cE1ldGhvZHNfZGVmYXVsdC5QdXQsIEh0dHBNZXRob2RzX2RlZmF1bHQuUGF0Y2hdLCBfYS5tZXRob2RzV2l0aG91dEJvZHkgPSBbSHR0cE1ldGhvZHNfZGVmYXVsdC5HZXQsIEh0dHBNZXRob2RzX2RlZmF1bHQuRGVsZXRlXSwgX2EubWV0aG9kc1dpdGhCb2R5ID0gW0h0dHBNZXRob2RzX2RlZmF1bHQuUG9zdCwgSHR0cE1ldGhvZHNfZGVmYXVsdC5QdXQsIEh0dHBNZXRob2RzX2RlZmF1bHQuUGF0Y2hdLCBfYSk7XG52YXIgaHR0cF9kZWZhdWx0ID0gSHR0cDI7XG5cbi8vIHNyYy9wbGF0Zm9ybS93ZWIvbGliL3V0aWwvd2Vic3RvcmFnZS50c1xudmFyIHRlc3QgPSBcImFibHlqcy1zdG9yYWdlLXRlc3RcIjtcbnZhciBnbG9iYWxPYmplY3QzID0gdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBzZWxmO1xudmFyIFdlYnN0b3JhZ2UgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRyeSB7XG4gICAgICBnbG9iYWxPYmplY3QzLnNlc3Npb25TdG9yYWdlLnNldEl0ZW0odGVzdCwgdGVzdCk7XG4gICAgICBnbG9iYWxPYmplY3QzLnNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0odGVzdCk7XG4gICAgICB0aGlzLnNlc3Npb25TdXBwb3J0ZWQgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMuc2Vzc2lvblN1cHBvcnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgZ2xvYmFsT2JqZWN0My5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0ZXN0LCB0ZXN0KTtcbiAgICAgIGdsb2JhbE9iamVjdDMubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGVzdCk7XG4gICAgICB0aGlzLmxvY2FsU3VwcG9ydGVkID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmxvY2FsU3VwcG9ydGVkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGdldChuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldChuYW1lLCBmYWxzZSk7XG4gIH1cbiAgZ2V0U2Vzc2lvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldChuYW1lLCB0cnVlKTtcbiAgfVxuICByZW1vdmUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9yZW1vdmUobmFtZSwgZmFsc2UpO1xuICB9XG4gIHJlbW92ZVNlc3Npb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9yZW1vdmUobmFtZSwgdHJ1ZSk7XG4gIH1cbiAgc2V0KG5hbWUsIHZhbHVlLCB0dGwpIHtcbiAgICByZXR1cm4gdGhpcy5fc2V0KG5hbWUsIHZhbHVlLCB0dGwsIGZhbHNlKTtcbiAgfVxuICBzZXRTZXNzaW9uKG5hbWUsIHZhbHVlLCB0dGwpIHtcbiAgICByZXR1cm4gdGhpcy5fc2V0KG5hbWUsIHZhbHVlLCB0dGwsIHRydWUpO1xuICB9XG4gIF9zZXQobmFtZSwgdmFsdWUsIHR0bCwgc2Vzc2lvbikge1xuICAgIGNvbnN0IHdyYXBwZWRWYWx1ZSA9IHsgdmFsdWUgfTtcbiAgICBpZiAodHRsKSB7XG4gICAgICB3cmFwcGVkVmFsdWUuZXhwaXJlcyA9IERhdGUubm93KCkgKyB0dGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0b3JhZ2VJbnRlcmZhY2Uoc2Vzc2lvbikuc2V0SXRlbShuYW1lLCBKU09OLnN0cmluZ2lmeSh3cmFwcGVkVmFsdWUpKTtcbiAgfVxuICBfZ2V0KG5hbWUsIHNlc3Npb24pIHtcbiAgICBpZiAoc2Vzc2lvbiAmJiAhdGhpcy5zZXNzaW9uU3VwcG9ydGVkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2Vzc2lvbiBTdG9yYWdlIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgaWYgKCFzZXNzaW9uICYmICF0aGlzLmxvY2FsU3VwcG9ydGVkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTG9jYWwgU3RvcmFnZSBub3Qgc3VwcG9ydGVkXCIpO1xuICAgIGNvbnN0IHJhd0l0ZW0gPSB0aGlzLnN0b3JhZ2VJbnRlcmZhY2Uoc2Vzc2lvbikuZ2V0SXRlbShuYW1lKTtcbiAgICBpZiAoIXJhd0l0ZW0pXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjb25zdCB3cmFwcGVkVmFsdWUgPSBKU09OLnBhcnNlKHJhd0l0ZW0pO1xuICAgIGlmICh3cmFwcGVkVmFsdWUuZXhwaXJlcyAmJiB3cmFwcGVkVmFsdWUuZXhwaXJlcyA8IERhdGUubm93KCkpIHtcbiAgICAgIHRoaXMuc3RvcmFnZUludGVyZmFjZShzZXNzaW9uKS5yZW1vdmVJdGVtKG5hbWUpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB3cmFwcGVkVmFsdWUudmFsdWU7XG4gIH1cbiAgX3JlbW92ZShuYW1lLCBzZXNzaW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmFnZUludGVyZmFjZShzZXNzaW9uKS5yZW1vdmVJdGVtKG5hbWUpO1xuICB9XG4gIHN0b3JhZ2VJbnRlcmZhY2Uoc2Vzc2lvbikge1xuICAgIHJldHVybiBzZXNzaW9uID8gZ2xvYmFsT2JqZWN0My5zZXNzaW9uU3RvcmFnZSA6IGdsb2JhbE9iamVjdDMubG9jYWxTdG9yYWdlO1xuICB9XG59O1xudmFyIHdlYnN0b3JhZ2VfZGVmYXVsdCA9IG5ldyBXZWJzdG9yYWdlKCk7XG5cbi8vIHNyYy9wbGF0Zm9ybS93ZWIvY29uZmlnLnRzXG52YXIgZ2xvYmFsT2JqZWN0NCA9IGdldEdsb2JhbE9iamVjdCgpO1xudmFyIGlzVmVyY2VsRWRnZVJ1bnRpbWUgPSB0eXBlb2YgRWRnZVJ1bnRpbWUgPT09IFwic3RyaW5nXCI7XG5pZiAodHlwZW9mIFdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgPT09IFwidW5kZWZpbmVkXCIgJiYgIWlzVmVyY2VsRWRnZVJ1bnRpbWUpIHtcbiAgY29uc29sZS5sb2coXG4gICAgXCJXYXJuaW5nOiB0aGlzIGRpc3RyaWJ1dGlvbiBvZiBBYmx5IGlzIGludGVuZGVkIGZvciBicm93c2Vycy4gT24gbm9kZWpzLCBwbGVhc2UgdXNlIHRoZSAnYWJseScgcGFja2FnZSBvbiBucG1cIlxuICApO1xufVxuZnVuY3Rpb24gYWxsb3dDb21ldCgpIHtcbiAgY29uc3QgbG9jID0gZ2xvYmFsT2JqZWN0NC5sb2NhdGlvbjtcbiAgcmV0dXJuICFnbG9iYWxPYmplY3Q0LldlYlNvY2tldCB8fCAhbG9jIHx8ICFsb2Mub3JpZ2luIHx8IGxvYy5vcmlnaW4uaW5kZXhPZihcImh0dHBcIikgPiAtMTtcbn1cbmZ1bmN0aW9uIGlzV2ViV29ya2VyQ29udGV4dCgpIHtcbiAgaWYgKHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbnZhciB1c2VyQWdlbnQgPSBnbG9iYWxPYmplY3Q0Lm5hdmlnYXRvciAmJiBnbG9iYWxPYmplY3Q0Lm5hdmlnYXRvci51c2VyQWdlbnQudG9TdHJpbmcoKTtcbnZhciBjdXJyZW50VXJsID0gZ2xvYmFsT2JqZWN0NC5sb2NhdGlvbiAmJiBnbG9iYWxPYmplY3Q0LmxvY2F0aW9uLmhyZWY7XG52YXIgQ29uZmlnID0ge1xuICBhZ2VudDogXCJicm93c2VyXCIsXG4gIGxvZ1RpbWVzdGFtcHM6IHRydWUsXG4gIHVzZXJBZ2VudCxcbiAgY3VycmVudFVybCxcbiAgYmluYXJ5VHlwZTogXCJhcnJheWJ1ZmZlclwiLFxuICBXZWJTb2NrZXQ6IGdsb2JhbE9iamVjdDQuV2ViU29ja2V0LFxuICBmZXRjaFN1cHBvcnRlZDogISFnbG9iYWxPYmplY3Q0LmZldGNoLFxuICB4aHJTdXBwb3J0ZWQ6IGdsb2JhbE9iamVjdDQuWE1MSHR0cFJlcXVlc3QgJiYgXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgYWxsb3dDb21ldDogYWxsb3dDb21ldCgpLFxuICB1c2VQcm90b2NvbEhlYXJ0YmVhdHM6IHRydWUsXG4gIHN1cHBvcnRzQmluYXJ5OiAhIWdsb2JhbE9iamVjdDQuVGV4dERlY29kZXIsXG4gIC8qIFBlciBQYWRkeSAoaHR0cHM6Ly9hYmx5LXJlYWwtdGltZS5zbGFjay5jb20vYXJjaGl2ZXMvQ1VSTDRVMkZQL3AxNzA1Njc0NTM3NzYzNDc5KSB3ZWIgaW50ZW50aW9uYWxseSBwcmVmZXJzIEpTT04gdG8gTWVzc2FnZVBhY2s6XG4gICAqXG4gICAqID4gYnJvd3NlcnMnIHN1cHBvcnQgZm9yIGJpbmFyeSB0eXBlcyBpbiBnZW5lcmFsIHdhcyBoaXN0b3JpY2FsbHkgcG9vciwgYW5kIEpTT04gdHJhbnNwb3J0IHBlcmZvcm1hbmNlIGlzIHNpZ25pZmljYW50bHkgYmV0dGVyIGluIGEgYnJvd3NlciB0aGFuIG1zZ3BhY2suIEluIG1vZGVybiBicm93c2VycyB0aGVuIGJpbmFyeSBpcyBzdXBwb3J0ZWQgY29uc2lzdGVudGx5LCBidXQgSSdkIHN0aWxsIGV4cGVjdCB0aGF0IEpTT04gZW5jb2RlL2RlY29kZSBwZXJmb3JtYW5jZSBpcyBkcmFtYXRpY2FsbHkgYmV0dGVyIHRoYW4gbXNncGFjayBpbiBhIGJyb3dzZXIuXG4gICAqL1xuICBwcmVmZXJCaW5hcnk6IGZhbHNlLFxuICBBcnJheUJ1ZmZlcjogZ2xvYmFsT2JqZWN0NC5BcnJheUJ1ZmZlcixcbiAgYXRvYjogZ2xvYmFsT2JqZWN0NC5hdG9iLFxuICBuZXh0VGljazogdHlwZW9mIGdsb2JhbE9iamVjdDQuc2V0SW1tZWRpYXRlICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsT2JqZWN0NC5zZXRJbW1lZGlhdGUuYmluZChnbG9iYWxPYmplY3Q0KSA6IGZ1bmN0aW9uKGYpIHtcbiAgICBzZXRUaW1lb3V0KGYsIDApO1xuICB9LFxuICBhZGRFdmVudExpc3RlbmVyOiBnbG9iYWxPYmplY3Q0LmFkZEV2ZW50TGlzdGVuZXIsXG4gIGluc3BlY3Q6IEpTT04uc3RyaW5naWZ5LFxuICBzdHJpbmdCeXRlU2l6ZTogZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIGdsb2JhbE9iamVjdDQuVGV4dERlY29kZXIgJiYgbmV3IGdsb2JhbE9iamVjdDQuVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKS5sZW5ndGggfHwgc3RyLmxlbmd0aDtcbiAgfSxcbiAgVGV4dEVuY29kZXI6IGdsb2JhbE9iamVjdDQuVGV4dEVuY29kZXIsXG4gIFRleHREZWNvZGVyOiBnbG9iYWxPYmplY3Q0LlRleHREZWNvZGVyLFxuICBnZXRSYW5kb21BcnJheUJ1ZmZlcjogYXN5bmMgZnVuY3Rpb24oYnl0ZUxlbmd0aCkge1xuICAgIGNvbnN0IGJ5dGVBcnJheSA9IG5ldyBVaW50OEFycmF5KGJ5dGVMZW5ndGgpO1xuICAgIGdsb2JhbE9iamVjdDQuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhieXRlQXJyYXkpO1xuICAgIHJldHVybiBieXRlQXJyYXkuYnVmZmVyO1xuICB9LFxuICBpc1dlYndvcmtlcjogaXNXZWJXb3JrZXJDb250ZXh0KCksXG4gIHB1c2g6IHtcbiAgICBwbGF0Zm9ybTogXCJicm93c2VyXCIgLyogQnJvd3NlciAqLyxcbiAgICBmb3JtRmFjdG9yOiBcImRlc2t0b3BcIiAvKiBEZXNrdG9wICovLFxuICAgIHN0b3JhZ2U6IHdlYnN0b3JhZ2VfZGVmYXVsdFxuICB9XG59O1xudmFyIGNvbmZpZ19kZWZhdWx0ID0gQ29uZmlnO1xuXG4vLyBzcmMvY29tbW9uL2xpYi90cmFuc3BvcnQvY29tZXR0cmFuc3BvcnQudHNcbmZ1bmN0aW9uIHNob3VsZEJlRXJyb3JBY3Rpb24oZXJyKSB7XG4gIGNvbnN0IFVOUkVTT0xWQUJMRV9FUlJPUl9DT0RFUyA9IFs4MDAxNSwgODAwMTcsIDgwMDMwXTtcbiAgaWYgKGVyci5jb2RlKSB7XG4gICAgaWYgKGF1dGhfZGVmYXVsdC5pc1Rva2VuRXJyKGVycikpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKFVOUkVTT0xWQUJMRV9FUlJPUl9DT0RFUy5pbmNsdWRlcyhlcnIuY29kZSkpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZXJyLmNvZGUgPj0gNGU0ICYmIGVyci5jb2RlIDwgNWU0O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuZnVuY3Rpb24gcHJvdG9jb2xNZXNzYWdlRnJvbVJhd0Vycm9yKGVycikge1xuICBpZiAoc2hvdWxkQmVFcnJvckFjdGlvbihlcnIpKSB7XG4gICAgcmV0dXJuIFtmcm9tVmFsdWVzMyh7IGFjdGlvbjogYWN0aW9uczIuRVJST1IsIGVycm9yOiBlcnIgfSldO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbZnJvbVZhbHVlczMoeyBhY3Rpb246IGFjdGlvbnMyLkRJU0NPTk5FQ1RFRCwgZXJyb3I6IGVyciB9KV07XG4gIH1cbn1cbnZhciBDb21ldFRyYW5zcG9ydCA9IGNsYXNzIGV4dGVuZHMgdHJhbnNwb3J0X2RlZmF1bHQge1xuICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uTWFuYWdlciwgYXV0aCwgcGFyYW1zKSB7XG4gICAgc3VwZXIoXG4gICAgICBjb25uZWN0aW9uTWFuYWdlcixcbiAgICAgIGF1dGgsXG4gICAgICBwYXJhbXMsXG4gICAgICAvKiBiaW5hcnkgbm90IHN1cHBvcnRlZCBmb3IgY29tZXQgc28gZm9yY2UgSlNPTiBwcm90b2NvbCAqL1xuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgLyogSGlzdG9yaWNhbCBjb21tZW50LCBiYWNrIGZyb20gd2hlbiB3ZSBzdXBwb3J0ZWQgSlNPTlA6XG4gICAgICpcbiAgICAgKiA+IEZvciBjb21ldCwgd2UgY291bGQgZG8gdGhlIGF1dGggdXBkYXRlIGJ5IGFib3J0aW5nIHRoZSBjdXJyZW50IHJlY3YgYW5kXG4gICAgICogPiBzdGFydGluZyBhIG5ldyBvbmUgd2l0aCB0aGUgbmV3IHRva2VuLCB0aGF0J2QgYmUgc3VmZmljaWVudCBmb3IgcmVhbHRpbWUuXG4gICAgICogPiBQcm9ibGVtIGlzIEpTT05QIC0geW91IGNhbid0IGNhbmNlbCB0cnVseSBhYm9ydCBhIHJlY3Ygb25jZSBzdGFydGVkLiBTb1xuICAgICAqID4gd2UgbmVlZCB0byBzZW5kIGFuIEFVVEggZm9yIGpzb25wLiBJbiB3aGljaCBjYXNlIGl0J3Mgc2ltcGxlciB0byBrZWVwIGFsbFxuICAgICAqID4gY29tZXQgdHJhbnNwb3J0cyB0aGUgc2FtZSBhbmQgZG8gaXQgZm9yIGFsbCBvZiB0aGVtLiBTbyB3ZSBzZW5kIHRoZSBBVVRIXG4gICAgICogPiBpbnN0ZWFkLCBhbmQgZG9uJ3QgbmVlZCB0byBhYm9ydCB0aGUgcmVjdlxuICAgICAqXG4gICAgICogTm93IHRoYXQgd2XigJl2ZSBkcm9wcGVkIEpTT05QIHN1cHBvcnQsIHdlIG1heSBiZSBhYmxlIHRvIHJldmlzaXQgdGhlIGFib3ZlO1xuICAgICAqIHNlZSBodHRwczovL2dpdGh1Yi5jb20vYWJseS9hYmx5LWpzL2lzc3Vlcy8xMjE0LlxuICAgICAqL1xuICAgIHRoaXMub25BdXRoVXBkYXRlZCA9ICh0b2tlbkRldGFpbHMpID0+IHtcbiAgICAgIHRoaXMuYXV0aFBhcmFtcyA9IHsgYWNjZXNzX3Rva2VuOiB0b2tlbkRldGFpbHMudG9rZW4gfTtcbiAgICB9O1xuICAgIHRoaXMuc3RyZWFtID0gXCJzdHJlYW1cIiBpbiBwYXJhbXMgPyBwYXJhbXMuc3RyZWFtIDogdHJ1ZTtcbiAgICB0aGlzLnNlbmRSZXF1ZXN0ID0gbnVsbDtcbiAgICB0aGlzLnJlY3ZSZXF1ZXN0ID0gbnVsbDtcbiAgICB0aGlzLnBlbmRpbmdDYWxsYmFjayA9IG51bGw7XG4gICAgdGhpcy5wZW5kaW5nSXRlbXMgPSBudWxsO1xuICB9XG4gIGNvbm5lY3QoKSB7XG4gICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKHRoaXMubG9nZ2VyLCBsb2dnZXJfZGVmYXVsdC5MT0dfTUlOT1IsIFwiQ29tZXRUcmFuc3BvcnQuY29ubmVjdCgpXCIsIFwic3RhcnRpbmdcIik7XG4gICAgdHJhbnNwb3J0X2RlZmF1bHQucHJvdG90eXBlLmNvbm5lY3QuY2FsbCh0aGlzKTtcbiAgICBjb25zdCBwYXJhbXMgPSB0aGlzLnBhcmFtcztcbiAgICBjb25zdCBvcHRpb25zID0gcGFyYW1zLm9wdGlvbnM7XG4gICAgY29uc3QgaG9zdCA9IGRlZmF1bHRzX2RlZmF1bHQuZ2V0SG9zdChvcHRpb25zLCBwYXJhbXMuaG9zdCk7XG4gICAgY29uc3QgcG9ydCA9IGRlZmF1bHRzX2RlZmF1bHQuZ2V0UG9ydChvcHRpb25zKTtcbiAgICBjb25zdCBjb21ldFNjaGVtZSA9IG9wdGlvbnMudGxzID8gXCJodHRwczovL1wiIDogXCJodHRwOi8vXCI7XG4gICAgdGhpcy5iYXNlVXJpID0gY29tZXRTY2hlbWUgKyBob3N0ICsgXCI6XCIgKyBwb3J0ICsgXCIvY29tZXQvXCI7XG4gICAgY29uc3QgY29ubmVjdFVyaSA9IHRoaXMuYmFzZVVyaSArIFwiY29ubmVjdFwiO1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIkNvbWV0VHJhbnNwb3J0LmNvbm5lY3QoKVwiLCBcInVyaTogXCIgKyBjb25uZWN0VXJpKTtcbiAgICB3aGVuUHJvbWlzZVNldHRsZXModGhpcy5hdXRoLmdldEF1dGhQYXJhbXMoKSwgKGVyciwgYXV0aFBhcmFtcykgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNEaXNwb3NlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmF1dGhQYXJhbXMgPSBhdXRoUGFyYW1zO1xuICAgICAgY29uc3QgY29ubmVjdFBhcmFtcyA9IHRoaXMucGFyYW1zLmdldENvbm5lY3RQYXJhbXMoYXV0aFBhcmFtcyk7XG4gICAgICBpZiAoXCJzdHJlYW1cIiBpbiBjb25uZWN0UGFyYW1zKVxuICAgICAgICB0aGlzLnN0cmVhbSA9IGNvbm5lY3RQYXJhbXMuc3RyZWFtO1xuICAgICAgbG9nZ2VyX2RlZmF1bHQubG9nQWN0aW9uKFxuICAgICAgICB0aGlzLmxvZ2dlcixcbiAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLFxuICAgICAgICBcIkNvbWV0VHJhbnNwb3J0LmNvbm5lY3QoKVwiLFxuICAgICAgICBcImNvbm5lY3RQYXJhbXM6XCIgKyB0b1F1ZXJ5U3RyaW5nKGNvbm5lY3RQYXJhbXMpXG4gICAgICApO1xuICAgICAgbGV0IHByZWNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgY29uc3QgY29ubmVjdFJlcXVlc3QgPSB0aGlzLnJlY3ZSZXF1ZXN0ID0gdGhpcy5jcmVhdGVSZXF1ZXN0KFxuICAgICAgICBjb25uZWN0VXJpLFxuICAgICAgICBudWxsLFxuICAgICAgICBjb25uZWN0UGFyYW1zLFxuICAgICAgICBudWxsLFxuICAgICAgICB0aGlzLnN0cmVhbSA/IFhIUlN0YXRlc19kZWZhdWx0LlJFUV9SRUNWX1NUUkVBTSA6IFhIUlN0YXRlc19kZWZhdWx0LlJFUV9SRUNWXG4gICAgICApO1xuICAgICAgY29ubmVjdFJlcXVlc3Qub24oXCJkYXRhXCIsIChkYXRhKSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5yZWN2UmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXByZWNvbm5lY3RlZCkge1xuICAgICAgICAgIHByZWNvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgICAgdGhpcy5lbWl0KFwicHJlY29ubmVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9uRGF0YShkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgY29ubmVjdFJlcXVlc3Qub24oXCJjb21wbGV0ZVwiLCAoZXJyMikgPT4ge1xuICAgICAgICBpZiAoIXRoaXMucmVjdlJlcXVlc3QpIHtcbiAgICAgICAgICBlcnIyID0gZXJyMiB8fCBuZXcgRXJyb3JJbmZvKFwiUmVxdWVzdCBjYW5jZWxsZWRcIiwgODAwMDMsIDQwMCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWN2UmVxdWVzdCA9IG51bGw7XG4gICAgICAgIGlmICghcHJlY29ubmVjdGVkICYmICFlcnIyKSB7XG4gICAgICAgICAgcHJlY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJwcmVjb25uZWN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25BY3Rpdml0eSgpO1xuICAgICAgICBpZiAoZXJyMikge1xuICAgICAgICAgIGlmIChlcnIyLmNvZGUpIHtcbiAgICAgICAgICAgIHRoaXMub25EYXRhKHByb3RvY29sTWVzc2FnZUZyb21SYXdFcnJvcihlcnIyKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdChlcnIyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFBsYXRmb3JtLkNvbmZpZy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgdGhpcy5yZWN2KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBjb25uZWN0UmVxdWVzdC5leGVjKCk7XG4gICAgfSk7XG4gIH1cbiAgcmVxdWVzdENsb3NlKCkge1xuICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX01JTk9SLCBcIkNvbWV0VHJhbnNwb3J0LnJlcXVlc3RDbG9zZSgpXCIpO1xuICAgIHRoaXMuX3JlcXVlc3RDbG9zZU9yRGlzY29ubmVjdCh0cnVlKTtcbiAgfVxuICByZXF1ZXN0RGlzY29ubmVjdCgpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJDb21ldFRyYW5zcG9ydC5yZXF1ZXN0RGlzY29ubmVjdCgpXCIpO1xuICAgIHRoaXMuX3JlcXVlc3RDbG9zZU9yRGlzY29ubmVjdChmYWxzZSk7XG4gIH1cbiAgX3JlcXVlc3RDbG9zZU9yRGlzY29ubmVjdChjbG9zaW5nKSB7XG4gICAgY29uc3QgY2xvc2VPckRpc2Nvbm5lY3RVcmkgPSBjbG9zaW5nID8gdGhpcy5jbG9zZVVyaSA6IHRoaXMuZGlzY29ubmVjdFVyaTtcbiAgICBpZiAoY2xvc2VPckRpc2Nvbm5lY3RVcmkpIHtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLmNyZWF0ZVJlcXVlc3QoY2xvc2VPckRpc2Nvbm5lY3RVcmksIG51bGwsIHRoaXMuYXV0aFBhcmFtcywgbnVsbCwgWEhSU3RhdGVzX2RlZmF1bHQuUkVRX1NFTkQpO1xuICAgICAgcmVxdWVzdC5vbihcImNvbXBsZXRlXCIsIChlcnIpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbihcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICAgICAgXCJDb21ldFRyYW5zcG9ydC5yZXF1ZXN0XCIgKyAoY2xvc2luZyA/IFwiQ2xvc2UoKVwiIDogXCJEaXNjb25uZWN0KClcIiksXG4gICAgICAgICAgICBcInJlcXVlc3QgcmV0dXJuZWQgZXJyID0gXCIgKyBpbnNwZWN0RXJyb3IoZXJyKVxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5maW5pc2goXCJkaXNjb25uZWN0ZWRcIiwgZXJyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXF1ZXN0LmV4ZWMoKTtcbiAgICB9XG4gIH1cbiAgZGlzcG9zZSgpIHtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJDb21ldFRyYW5zcG9ydC5kaXNwb3NlKClcIiwgXCJcIik7XG4gICAgaWYgKCF0aGlzLmlzRGlzcG9zZWQpIHtcbiAgICAgIHRoaXMuaXNEaXNwb3NlZCA9IHRydWU7XG4gICAgICBpZiAodGhpcy5yZWN2UmVxdWVzdCkge1xuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSU5PUiwgXCJDb21ldFRyYW5zcG9ydC5kaXNwb3NlKClcIiwgXCJhYm9ydGluZyByZWN2IHJlcXVlc3RcIik7XG4gICAgICAgIHRoaXMucmVjdlJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgdGhpcy5yZWN2UmVxdWVzdCA9IG51bGw7XG4gICAgICB9XG4gICAgICB0aGlzLmZpbmlzaChcImRpc2Nvbm5lY3RlZFwiLCBjb25uZWN0aW9uZXJyb3JzX2RlZmF1bHQuZGlzY29ubmVjdGVkKCkpO1xuICAgICAgUGxhdGZvcm0uQ29uZmlnLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgdGhpcy5lbWl0KFwiZGlzcG9zZWRcIik7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgb25Db25uZWN0KG1lc3NhZ2UpIHtcbiAgICB2YXIgX2EyO1xuICAgIGlmICh0aGlzLmlzRGlzcG9zZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY29ubmVjdGlvblN0ciA9IChfYTIgPSBtZXNzYWdlLmNvbm5lY3Rpb25EZXRhaWxzKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmNvbm5lY3Rpb25LZXk7XG4gICAgdHJhbnNwb3J0X2RlZmF1bHQucHJvdG90eXBlLm9uQ29ubmVjdC5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuICAgIGNvbnN0IGJhc2VDb25uZWN0aW9uVXJpID0gdGhpcy5iYXNlVXJpICsgY29ubmVjdGlvblN0cjtcbiAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24odGhpcy5sb2dnZXIsIGxvZ2dlcl9kZWZhdWx0LkxPR19NSUNSTywgXCJDb21ldFRyYW5zcG9ydC5vbkNvbm5lY3QoKVwiLCBcImJhc2VVcmkgPSBcIiArIGJhc2VDb25uZWN0aW9uVXJpKTtcbiAgICB0aGlzLnNlbmRVcmkgPSBiYXNlQ29ubmVjdGlvblVyaSArIFwiL3NlbmRcIjtcbiAgICB0aGlzLnJlY3ZVcmkgPSBiYXNlQ29ubmVjdGlvblVyaSArIFwiL3JlY3ZcIjtcbiAgICB0aGlzLmNsb3NlVXJpID0gYmFzZUNvbm5lY3Rpb25VcmkgKyBcIi9jbG9zZVwiO1xuICAgIHRoaXMuZGlzY29ubmVjdFVyaSA9IGJhc2VDb25uZWN0aW9uVXJpICsgXCIvZGlzY29ubmVjdFwiO1xuICB9XG4gIHNlbmQobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLnNlbmRSZXF1ZXN0KSB7XG4gICAgICB0aGlzLnBlbmRpbmdJdGVtcyA9IHRoaXMucGVuZGluZ0l0ZW1zIHx8IFtdO1xuICAgICAgdGhpcy5wZW5kaW5nSXRlbXMucHVzaChtZXNzYWdlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcGVuZGluZ0l0ZW1zID0gdGhpcy5wZW5kaW5nSXRlbXMgfHwgW107XG4gICAgcGVuZGluZ0l0ZW1zLnB1c2gobWVzc2FnZSk7XG4gICAgdGhpcy5wZW5kaW5nSXRlbXMgPSBudWxsO1xuICAgIHRoaXMuc2VuZEl0ZW1zKHBlbmRpbmdJdGVtcyk7XG4gIH1cbiAgc2VuZEFueVBlbmRpbmcoKSB7XG4gICAgY29uc3QgcGVuZGluZ0l0ZW1zID0gdGhpcy5wZW5kaW5nSXRlbXM7XG4gICAgaWYgKCFwZW5kaW5nSXRlbXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wZW5kaW5nSXRlbXMgPSBudWxsO1xuICAgIHRoaXMuc2VuZEl0ZW1zKHBlbmRpbmdJdGVtcyk7XG4gIH1cbiAgc2VuZEl0ZW1zKGl0ZW1zKSB7XG4gICAgY29uc3Qgc2VuZFJlcXVlc3QgPSB0aGlzLnNlbmRSZXF1ZXN0ID0gdGhpcy5jcmVhdGVSZXF1ZXN0KFxuICAgICAgdGhpcy5zZW5kVXJpLFxuICAgICAgbnVsbCxcbiAgICAgIHRoaXMuYXV0aFBhcmFtcyxcbiAgICAgIHRoaXMuZW5jb2RlUmVxdWVzdChpdGVtcyksXG4gICAgICBYSFJTdGF0ZXNfZGVmYXVsdC5SRVFfU0VORFxuICAgICk7XG4gICAgc2VuZFJlcXVlc3Qub24oXCJjb21wbGV0ZVwiLCAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICBpZiAoZXJyKVxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgICAgdGhpcy5sb2dnZXIsXG4gICAgICAgICAgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLFxuICAgICAgICAgIFwiQ29tZXRUcmFuc3BvcnQuc2VuZEl0ZW1zKClcIixcbiAgICAgICAgICBcIm9uIGNvbXBsZXRlOiBlcnIgPSBcIiArIGluc3BlY3RFcnJvcihlcnIpXG4gICAgICAgICk7XG4gICAgICB0aGlzLnNlbmRSZXF1ZXN0ID0gbnVsbDtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgaWYgKGVyci5jb2RlKSB7XG4gICAgICAgICAgdGhpcy5vbkRhdGEocHJvdG9jb2xNZXNzYWdlRnJvbVJhd0Vycm9yKGVycikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZGlzY29ubmVjdChlcnIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIHRoaXMub25EYXRhKGRhdGEpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucGVuZGluZ0l0ZW1zKSB7XG4gICAgICAgIFBsYXRmb3JtLkNvbmZpZy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgaWYgKCF0aGlzLnNlbmRSZXF1ZXN0KSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRBbnlQZW5kaW5nKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzZW5kUmVxdWVzdC5leGVjKCk7XG4gIH1cbiAgcmVjdigpIHtcbiAgICBpZiAodGhpcy5yZWN2UmVxdWVzdClcbiAgICAgIHJldHVybjtcbiAgICBpZiAoIXRoaXMuaXNDb25uZWN0ZWQpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgcmVjdlJlcXVlc3QgPSB0aGlzLnJlY3ZSZXF1ZXN0ID0gdGhpcy5jcmVhdGVSZXF1ZXN0KFxuICAgICAgdGhpcy5yZWN2VXJpLFxuICAgICAgbnVsbCxcbiAgICAgIHRoaXMuYXV0aFBhcmFtcyxcbiAgICAgIG51bGwsXG4gICAgICB0aGlzLnN0cmVhbSA/IFhIUlN0YXRlc19kZWZhdWx0LlJFUV9SRUNWX1NUUkVBTSA6IFhIUlN0YXRlc19kZWZhdWx0LlJFUV9SRUNWX1BPTExcbiAgICApO1xuICAgIHJlY3ZSZXF1ZXN0Lm9uKFwiZGF0YVwiLCAoZGF0YSkgPT4ge1xuICAgICAgdGhpcy5vbkRhdGEoZGF0YSk7XG4gICAgfSk7XG4gICAgcmVjdlJlcXVlc3Qub24oXCJjb21wbGV0ZVwiLCAoZXJyKSA9PiB7XG4gICAgICB0aGlzLnJlY3ZSZXF1ZXN0ID0gbnVsbDtcbiAgICAgIHRoaXMub25BY3Rpdml0eSgpO1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBpZiAoZXJyLmNvZGUpIHtcbiAgICAgICAgICB0aGlzLm9uRGF0YShwcm90b2NvbE1lc3NhZ2VGcm9tUmF3RXJyb3IoZXJyKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kaXNjb25uZWN0KGVycik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgUGxhdGZvcm0uQ29uZmlnLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgdGhpcy5yZWN2KCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZWN2UmVxdWVzdC5leGVjKCk7XG4gIH1cbiAgb25EYXRhKHJlc3BvbnNlRGF0YSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBpdGVtcyA9IHRoaXMuZGVjb2RlUmVzcG9uc2UocmVzcG9uc2VEYXRhKTtcbiAgICAgIGlmIChpdGVtcyAmJiBpdGVtcy5sZW5ndGgpXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgdGhpcy5vblByb3RvY29sTWVzc2FnZShcbiAgICAgICAgICAgIGZyb21EZXNlcmlhbGl6ZWQoaXRlbXNbaV0sIHRoaXMuY29ubmVjdGlvbk1hbmFnZXIucmVhbHRpbWUuX1JlYWx0aW1lUHJlc2VuY2UpXG4gICAgICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dnZXJfZGVmYXVsdC5sb2dBY3Rpb24oXG4gICAgICAgIHRoaXMubG9nZ2VyLFxuICAgICAgICBsb2dnZXJfZGVmYXVsdC5MT0dfRVJST1IsXG4gICAgICAgIFwiQ29tZXRUcmFuc3BvcnQub25EYXRhKClcIixcbiAgICAgICAgXCJVbmV4cGVjdGVkIGV4Y2VwdGlvbiBoYW5kaW5nIGNoYW5uZWwgZXZlbnQ6IFwiICsgZS5zdGFja1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgZW5jb2RlUmVxdWVzdChyZXF1ZXN0SXRlbXMpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVxdWVzdEl0ZW1zKTtcbiAgfVxuICBkZWNvZGVSZXNwb25zZShyZXNwb25zZURhdGEpIHtcbiAgICBpZiAodHlwZW9mIHJlc3BvbnNlRGF0YSA9PSBcInN0cmluZ1wiKVxuICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzcG9uc2VEYXRhKTtcbiAgICByZXR1cm4gcmVzcG9uc2VEYXRhO1xuICB9XG59O1xudmFyIGNvbWV0dHJhbnNwb3J0X2RlZmF1bHQgPSBDb21ldFRyYW5zcG9ydDtcblxuLy8gc3JjL3BsYXRmb3JtL3dlYi9saWIvaHR0cC9yZXF1ZXN0L3hocnJlcXVlc3QudHNcbmZ1bmN0aW9uIGlzQWJseUVycm9yKHJlc3BvbnNlQm9keSwgaGVhZGVycykge1xuICByZXR1cm4gYWxsVG9Mb3dlckNhc2Uoa2V5c0FycmF5KGhlYWRlcnMpKS5pbmNsdWRlcyhcIngtYWJseS1lcnJvcmNvZGVcIik7XG59XG5mdW5jdGlvbiBnZXRBYmx5RXJyb3IocmVzcG9uc2VCb2R5LCBoZWFkZXJzKSB7XG4gIGlmIChpc0FibHlFcnJvcihyZXNwb25zZUJvZHksIGhlYWRlcnMpKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlQm9keS5lcnJvciAmJiBFcnJvckluZm8uZnJvbVZhbHVlcyhyZXNwb25zZUJvZHkuZXJyb3IpO1xuICB9XG59XG52YXIgbm9vcDMgPSBmdW5jdGlvbigpIHtcbn07XG52YXIgaWRDb3VudGVyID0gMDtcbnZhciBwZW5kaW5nUmVxdWVzdHMgPSB7fTtcbmZ1bmN0aW9uIGdldEhlYWRlcih4aHIsIGhlYWRlcikge1xuICByZXR1cm4geGhyLmdldFJlc3BvbnNlSGVhZGVyICYmIHhoci5nZXRSZXNwb25zZUhlYWRlcihoZWFkZXIpO1xufVxuZnVuY3Rpb24gaXNFbmNvZGluZ0NodW5rZWQoeGhyKSB7XG4gIHJldHVybiB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIgJiYgKHhoci5nZXRSZXNwb25zZUhlYWRlcihcInRyYW5zZmVyLWVuY29kaW5nXCIpIHx8ICF4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJjb250ZW50LWxlbmd0aFwiKSk7XG59XG5mdW5jdGlvbiBnZXRIZWFkZXJzQXNPYmplY3QoeGhyKSB7XG4gIGNvbnN0IGhlYWRlclBhaXJzID0geGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpLnRyaW0oKS5zcGxpdChcIlxcclxcblwiKTtcbiAgY29uc3QgaGVhZGVycyA9IHt9O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGhlYWRlclBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcGFydHMgPSBoZWFkZXJQYWlyc1tpXS5zcGxpdChcIjpcIikubWFwKCh4KSA9PiB4LnRyaW0oKSk7XG4gICAgaGVhZGVyc1twYXJ0c1swXS50b0xvd2VyQ2FzZSgpXSA9IHBhcnRzWzFdO1xuICB9XG4gIHJldHVybiBoZWFkZXJzO1xufVxudmFyIFhIUlJlcXVlc3QgPSBjbGFzcyBfWEhSUmVxdWVzdCBleHRlbmRzIGV2ZW50ZW1pdHRlcl9kZWZhdWx0IHtcbiAgY29uc3RydWN0b3IodXJpLCBoZWFkZXJzLCBwYXJhbXMsIGJvZHksIHJlcXVlc3RNb2RlLCB0aW1lb3V0cywgbG9nZ2VyLCBtZXRob2QpIHtcbiAgICBzdXBlcihsb2dnZXIpO1xuICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcbiAgICBwYXJhbXMucm5kID0gY2hlYXBSYW5kU3RyKCk7XG4gICAgdGhpcy51cmkgPSB1cmkgKyB0b1F1ZXJ5U3RyaW5nKHBhcmFtcyk7XG4gICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycyB8fCB7fTtcbiAgICB0aGlzLmJvZHkgPSBib2R5O1xuICAgIHRoaXMubWV0aG9kID0gbWV0aG9kID8gbWV0aG9kLnRvVXBwZXJDYXNlKCkgOiBpc05pbChib2R5KSA/IFwiR0VUXCIgOiBcIlBPU1RcIjtcbiAgICB0aGlzLnJlcXVlc3RNb2RlID0gcmVxdWVzdE1vZGU7XG4gICAgdGhpcy50aW1lb3V0cyA9IHRpbWVvdXRzO1xuICAgIHRoaXMudGltZWRPdXQgPSBmYWxzZTtcbiAgICB0aGlzLnJlcXVlc3RDb21wbGV0ZSA9IGZhbHNlO1xuICAgIHRoaXMuaWQgPSBTdHJpbmcoKytpZENvdW50ZXIpO1xuICAgIHBlbmRpbmdSZXF1ZXN0c1t0aGlzLmlkXSA9IHRoaXM7XG4gIH1cbiAgc3RhdGljIGNyZWF0ZVJlcXVlc3QodXJpLCBoZWFkZXJzLCBwYXJhbXMsIGJvZHksIHJlcXVlc3RNb2RlLCB0aW1lb3V0cywgbG9nZ2VyLCBtZXRob2QpIHtcbiAgICBjb25zdCBfdGltZW91dHMgPSB0aW1lb3V0cyB8fCBkZWZhdWx0c19kZWZhdWx0LlRJTUVPVVRTO1xuICAgIHJldHVybiBuZXcgX1hIUlJlcXVlc3QoXG4gICAgICB1cmksXG4gICAgICBoZWFkZXJzLFxuICAgICAgY29weShwYXJhbXMpLFxuICAgICAgYm9keSxcbiAgICAgIHJlcXVlc3RNb2RlLFxuICAgICAgX3RpbWVvdXRzLFxuICAgICAgbG9nZ2VyLFxuICAgICAgbWV0aG9kXG4gICAgKTtcbiAgfVxuICBjb21wbGV0ZShlcnIsIGJvZHksIGhlYWRlcnMsIHVucGFja2VkLCBzdGF0dXNDb2RlKSB7XG4gICAgaWYgKCF0aGlzLnJlcXVlc3RDb21wbGV0ZSkge1xuICAgICAgdGhpcy5yZXF1ZXN0Q29tcGxldGUgPSB0cnVlO1xuICAgICAgaWYgKCFlcnIgJiYgYm9keSkge1xuICAgICAgICB0aGlzLmVtaXQoXCJkYXRhXCIsIGJvZHkpO1xuICAgICAgfVxuICAgICAgdGhpcy5lbWl0KFwiY29tcGxldGVcIiwgZXJyLCBib2R5LCBoZWFkZXJzLCB1bnBhY2tlZCwgc3RhdHVzQ29kZSk7XG4gICAgICB0aGlzLmRpc3Bvc2UoKTtcbiAgICB9XG4gIH1cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy5kaXNwb3NlKCk7XG4gIH1cbiAgZXhlYygpIHtcbiAgICBsZXQgaGVhZGVycyA9IHRoaXMuaGVhZGVycztcbiAgICBjb25zdCB0aW1lb3V0ID0gdGhpcy5yZXF1ZXN0TW9kZSA9PSBYSFJTdGF0ZXNfZGVmYXVsdC5SRVFfU0VORCA/IHRoaXMudGltZW91dHMuaHR0cFJlcXVlc3RUaW1lb3V0IDogdGhpcy50aW1lb3V0cy5yZWN2VGltZW91dCwgdGltZXIgPSB0aGlzLnRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnRpbWVkT3V0ID0gdHJ1ZTtcbiAgICAgIHhoci5hYm9ydCgpO1xuICAgIH0sIHRpbWVvdXQpLCBtZXRob2QgPSB0aGlzLm1ldGhvZCwgeGhyID0gdGhpcy54aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSwgYWNjZXB0ID0gaGVhZGVyc1tcImFjY2VwdFwiXTtcbiAgICBsZXQgYm9keSA9IHRoaXMuYm9keTtcbiAgICBsZXQgcmVzcG9uc2VUeXBlID0gXCJ0ZXh0XCI7XG4gICAgaWYgKCFhY2NlcHQpIHtcbiAgICAgIGhlYWRlcnNbXCJhY2NlcHRcIl0gPSBcImFwcGxpY2F0aW9uL2pzb25cIjtcbiAgICB9IGVsc2UgaWYgKGFjY2VwdC5pbmRleE9mKFwiYXBwbGljYXRpb24veC1tc2dwYWNrXCIpID09PSAwKSB7XG4gICAgICByZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgfVxuICAgIGlmIChib2R5KSB7XG4gICAgICBjb25zdCBjb250ZW50VHlwZSA9IGhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl0gfHwgKGhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl0gPSBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgICBpZiAoY29udGVudFR5cGUuaW5kZXhPZihcImFwcGxpY2F0aW9uL2pzb25cIikgPiAtMSAmJiB0eXBlb2YgYm9keSAhPSBcInN0cmluZ1wiKVxuICAgICAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoYm9keSk7XG4gICAgfVxuICAgIHhoci5vcGVuKG1ldGhvZCwgdGhpcy51cmksIHRydWUpO1xuICAgIHhoci5yZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGU7XG4gICAgaWYgKFwiYXV0aG9yaXphdGlvblwiIGluIGhlYWRlcnMpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGggaW4gaGVhZGVycylcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGgsIGhlYWRlcnNbaF0pO1xuICAgIGNvbnN0IGVycm9ySGFuZGxlciA9IChlcnJvckV2ZW50LCBtZXNzYWdlLCBjb2RlLCBzdGF0dXNDb2RlMikgPT4ge1xuICAgICAgdmFyIF9hMjtcbiAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBtZXNzYWdlICsgXCIgKGV2ZW50IHR5cGU6IFwiICsgZXJyb3JFdmVudC50eXBlICsgXCIpXCI7XG4gICAgICBpZiAoKF9hMiA9IHRoaXMgPT0gbnVsbCA/IHZvaWQgMCA6IHRoaXMueGhyKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLnN0YXR1c1RleHQpXG4gICAgICAgIGVycm9yTWVzc2FnZSArPSBcIiwgY3VycmVudCBzdGF0dXNUZXh0IGlzIFwiICsgdGhpcy54aHIuc3RhdHVzVGV4dDtcbiAgICAgIGxvZ2dlcl9kZWZhdWx0LmxvZ0FjdGlvbih0aGlzLmxvZ2dlciwgbG9nZ2VyX2RlZmF1bHQuTE9HX0VSUk9SLCBcIlJlcXVlc3Qub25cIiArIGVycm9yRXZlbnQudHlwZSArIFwiKClcIiwgZXJyb3JNZXNzYWdlKTtcbiAgICAgIHRoaXMuY29tcGxldGUobmV3IFBhcnRpYWxFcnJvckluZm8oZXJyb3JNZXNzYWdlLCBjb2RlLCBzdGF0dXNDb2RlMikpO1xuICAgIH07XG4gICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbihlcnJvckV2ZW50KSB7XG4gICAgICBlcnJvckhhbmRsZXIoZXJyb3JFdmVudCwgXCJYSFIgZXJyb3Igb2NjdXJyZWRcIiwgbnVsbCwgNDAwKTtcbiAgICB9O1xuICAgIHhoci5vbmFib3J0ID0gKGVycm9yRXZlbnQpID0+IHtcbiAgICAgIGlmICh0aGlzLnRpbWVkT3V0KSB7XG4gICAgICAgIGVycm9ySGFuZGxlcihlcnJvckV2ZW50LCBcIlJlcXVlc3QgYWJvcnRlZCBkdWUgdG8gcmVxdWVzdCB0aW1lb3V0IGV4cGlyaW5nXCIsIG51bGwsIDQwOCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvckhhbmRsZXIoZXJyb3JFdmVudCwgXCJSZXF1ZXN0IGNhbmNlbGxlZFwiLCBudWxsLCA0MDApO1xuICAgICAgfVxuICAgIH07XG4gICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKGVycm9yRXZlbnQpIHtcbiAgICAgIGVycm9ySGFuZGxlcihlcnJvckV2ZW50LCBcIlJlcXVlc3QgdGltZWQgb3V0XCIsIG51bGwsIDQwOCk7XG4gICAgfTtcbiAgICBsZXQgc3RyZWFtaW5nO1xuICAgIGxldCBzdGF0dXNDb2RlO1xuICAgIGxldCBzdWNjZXNzUmVzcG9uc2U7XG4gICAgbGV0IHN0cmVhbVBvcyA9IDA7XG4gICAgbGV0IHVucGFja2VkID0gZmFsc2U7XG4gICAgY29uc3Qgb25SZXNwb25zZSA9ICgpID0+IHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICBzdWNjZXNzUmVzcG9uc2UgPSBzdGF0dXNDb2RlIDwgNDAwO1xuICAgICAgaWYgKHN0YXR1c0NvZGUgPT0gMjA0KSB7XG4gICAgICAgIHRoaXMuY29tcGxldGUobnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgc3RhdHVzQ29kZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHN0cmVhbWluZyA9IHRoaXMucmVxdWVzdE1vZGUgPT0gWEhSU3RhdGVzX2RlZmF1bHQuUkVRX1JFQ1ZfU1RSRUFNICYmIHN1Y2Nlc3NSZXNwb25zZSAmJiBpc0VuY29kaW5nQ2h1bmtlZCh4aHIpO1xuICAgIH07XG4gICAgY29uc3Qgb25FbmQgPSAoKSA9PiB7XG4gICAgICBsZXQgcGFyc2VkUmVzcG9uc2U7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBjb250ZW50VHlwZSA9IGdldEhlYWRlcih4aHIsIFwiY29udGVudC10eXBlXCIpO1xuICAgICAgICBjb25zdCBqc29uID0gY29udGVudFR5cGUgPyBjb250ZW50VHlwZS5pbmRleE9mKFwiYXBwbGljYXRpb24vanNvblwiKSA+PSAwIDogeGhyLnJlc3BvbnNlVHlwZSA9PSBcInRleHRcIjtcbiAgICAgICAgaWYgKGpzb24pIHtcbiAgICAgICAgICBjb25zdCBqc29uUmVzcG9uc2VCb2R5ID0geGhyLnJlc3BvbnNlVHlwZSA9PT0gXCJhcnJheWJ1ZmZlclwiID8gUGxhdGZvcm0uQnVmZmVyVXRpbHMudXRmOERlY29kZSh4aHIucmVzcG9uc2UpIDogU3RyaW5nKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgIGlmIChqc29uUmVzcG9uc2VCb2R5Lmxlbmd0aCkge1xuICAgICAgICAgICAgcGFyc2VkUmVzcG9uc2UgPSBKU09OLnBhcnNlKGpzb25SZXNwb25zZUJvZHkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZWRSZXNwb25zZSA9IGpzb25SZXNwb25zZUJvZHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHVucGFja2VkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJzZWRSZXNwb25zZSA9IHhoci5yZXNwb25zZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyc2VkUmVzcG9uc2UucmVzcG9uc2UgIT09IHZvaWQgMCkge1xuICAgICAgICAgIHN0YXR1c0NvZGUgPSBwYXJzZWRSZXNwb25zZS5zdGF0dXNDb2RlO1xuICAgICAgICAgIHN1Y2Nlc3NSZXNwb25zZSA9IHN0YXR1c0NvZGUgPCA0MDA7XG4gICAgICAgICAgaGVhZGVycyA9IHBhcnNlZFJlc3BvbnNlLmhlYWRlcnM7XG4gICAgICAgICAgcGFyc2VkUmVzcG9uc2UgPSBwYXJzZWRSZXNwb25zZS5yZXNwb25zZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoZWFkZXJzID0gZ2V0SGVhZGVyc0FzT2JqZWN0KHhocik7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhpcy5jb21wbGV0ZShuZXcgUGFydGlhbEVycm9ySW5mbyhcIk1hbGZvcm1lZCByZXNwb25zZSBib2R5IGZyb20gc2VydmVyOiBcIiArIGUubWVzc2FnZSwgbnVsbCwgNDAwKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChzdWNjZXNzUmVzcG9uc2UgfHwgQXJyYXkuaXNBcnJheShwYXJzZWRSZXNwb25zZSkpIHtcbiAgICAgICAgdGhpcy5jb21wbGV0ZShudWxsLCBwYXJzZWRSZXNwb25zZSwgaGVhZGVycywgdW5wYWNrZWQsIHN0YXR1c0NvZGUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgZXJyID0gZ2V0QWJseUVycm9yKHBhcnNlZFJlc3BvbnNlLCBoZWFkZXJzKTtcbiAgICAgIGlmICghZXJyKSB7XG4gICAgICAgIGVyciA9IG5ldyBQYXJ0aWFsRXJyb3JJbmZvKFxuICAgICAgICAgIFwiRXJyb3IgcmVzcG9uc2UgcmVjZWl2ZWQgZnJvbSBzZXJ2ZXI6IFwiICsgc3RhdHVzQ29kZSArIFwiIGJvZHkgd2FzOiBcIiArIFBsYXRmb3JtLkNvbmZpZy5pbnNwZWN0KHBhcnNlZFJlc3BvbnNlKSxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHN0YXR1c0NvZGVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY29tcGxldGUoZXJyLCBwYXJzZWRSZXNwb25zZSwgaGVhZGVycywgdW5wYWNrZWQsIHN0YXR1c0NvZGUpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gb25Qcm9ncmVzcygpIHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlVGV4dCA9IHhoci5yZXNwb25zZVRleHQ7XG4gICAgICBjb25zdCBib2R5RW5kID0gcmVzcG9uc2VUZXh0Lmxlbmd0aCAtIDE7XG4gICAgICBsZXQgaWR4LCBjaHVuaztcbiAgICAgIHdoaWxlIChzdHJlYW1Qb3MgPCBib2R5RW5kICYmIChpZHggPSByZXNwb25zZVRleHQuaW5kZXhPZihcIlxcblwiLCBzdHJlYW1Qb3MpKSA+IC0xKSB7XG4gICAgICAgIGNodW5rID0gcmVzcG9uc2VUZXh0LnNsaWNlKHN0cmVhbVBvcywgaWR4KTtcbiAgICAgICAgc3RyZWFtUG9zID0gaWR4ICsgMTtcbiAgICAgICAgb25DaHVuayhjaHVuayk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG9uQ2h1bmsgPSAoY2h1bmspID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNodW5rID0gSlNPTi5wYXJzZShjaHVuayk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRoaXMuY29tcGxldGUobmV3IFBhcnRpYWxFcnJvckluZm8oXCJNYWxmb3JtZWQgcmVzcG9uc2UgYm9keSBmcm9tIHNlcnZlcjogXCIgKyBlLm1lc3NhZ2UsIG51bGwsIDQwMCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmVtaXQoXCJkYXRhXCIsIGNodW5rKTtcbiAgICB9O1xuICAgIGNvbnN0IG9uU3RyZWFtRW5kID0gKCkgPT4ge1xuICAgICAgb25Qcm9ncmVzcygpO1xuICAgICAgdGhpcy5zdHJlYW1Db21wbGV0ZSA9IHRydWU7XG4gICAgICBQbGF0Zm9ybS5Db25maWcubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IHJlYWR5U3RhdGUgPSB4aHIucmVhZHlTdGF0ZTtcbiAgICAgIGlmIChyZWFkeVN0YXRlIDwgMylcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKHhoci5zdGF0dXMgIT09IDApIHtcbiAgICAgICAgaWYgKHN0YXR1c0NvZGUgPT09IHZvaWQgMCkge1xuICAgICAgICAgIHN0YXR1c0NvZGUgPSB4aHIuc3RhdHVzO1xuICAgICAgICAgIG9uUmVzcG9uc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVhZHlTdGF0ZSA9PSAzICYmIHN0cmVhbWluZykge1xuICAgICAgICAgIG9uUHJvZ3Jlc3MoKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZWFkeVN0YXRlID09IDQpIHtcbiAgICAgICAgICBpZiAoc3RyZWFtaW5nKVxuICAgICAgICAgICAgb25TdHJlYW1FbmQoKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBvbkVuZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB4aHIuc2VuZChib2R5KTtcbiAgfVxuICBkaXNwb3NlKCkge1xuICAgIGNvbnN0IHhociA9IHRoaXMueGhyO1xuICAgIGlmICh4aHIpIHtcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSB4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9IG5vb3AzO1xuICAgICAgdGhpcy54aHIgPSBudWxsO1xuICAgICAgY29uc3QgdGltZXIgPSB0aGlzLnRpbWVyO1xuICAgICAgaWYgKHRpbWVyKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIHRoaXMudGltZXIgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLnJlcXVlc3RDb21wbGV0ZSlcbiAgICAgICAgeGhyLmFib3J0KCk7XG4gICAgfVxuICAgIGRlbGV0ZSBwZW5kaW5nUmVxdWVzdHNbdGhpcy5pZF07XG4gIH1cbn07XG52YXIgeGhycmVxdWVzdF9kZWZhdWx0ID0gWEhSUmVxdWVzdDtcblxuLy8gc3JjL3BsYXRmb3JtL3dlYi9saWIvdHJhbnNwb3J0L3hocnBvbGxpbmd0cmFuc3BvcnQudHNcbnZhciBzaG9ydE5hbWUyID0gVHJhbnNwb3J0TmFtZXMuWGhyUG9sbGluZztcbnZhciBYSFJQb2xsaW5nVHJhbnNwb3J0ID0gY2xhc3MgZXh0ZW5kcyBjb21ldHRyYW5zcG9ydF9kZWZhdWx0IHtcbiAgY29uc3RydWN0b3IoY29ubmVjdGlvbk1hbmFnZXIsIGF1dGgsIHBhcmFtcykge1xuICAgIHN1cGVyKGNvbm5lY3Rpb25NYW5hZ2VyLCBhdXRoLCBwYXJhbXMpO1xuICAgIHRoaXMuc2hvcnROYW1lID0gc2hvcnROYW1lMjtcbiAgICBwYXJhbXMuc3RyZWFtID0gZmFsc2U7XG4gICAgdGhpcy5zaG9ydE5hbWUgPSBzaG9ydE5hbWUyO1xuICB9XG4gIHN0YXRpYyBpc0F2YWlsYWJsZSgpIHtcbiAgICByZXR1cm4gISEoUGxhdGZvcm0uQ29uZmlnLnhoclN1cHBvcnRlZCAmJiBQbGF0Zm9ybS5Db25maWcuYWxsb3dDb21ldCk7XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIFwiWEhSUG9sbGluZ1RyYW5zcG9ydDsgdXJpPVwiICsgdGhpcy5iYXNlVXJpICsgXCI7IGlzQ29ubmVjdGVkPVwiICsgdGhpcy5pc0Nvbm5lY3RlZDtcbiAgfVxuICBjcmVhdGVSZXF1ZXN0KHVyaSwgaGVhZGVycywgcGFyYW1zLCBib2R5LCByZXF1ZXN0TW9kZSkge1xuICAgIHJldHVybiB4aHJyZXF1ZXN0X2RlZmF1bHQuY3JlYXRlUmVxdWVzdCh1cmksIGhlYWRlcnMsIHBhcmFtcywgYm9keSwgcmVxdWVzdE1vZGUsIHRoaXMudGltZW91dHMsIHRoaXMubG9nZ2VyKTtcbiAgfVxufTtcbnZhciB4aHJwb2xsaW5ndHJhbnNwb3J0X2RlZmF1bHQgPSBYSFJQb2xsaW5nVHJhbnNwb3J0O1xuXG4vLyBzcmMvcGxhdGZvcm0vd2ViL2xpYi90cmFuc3BvcnQvaW5kZXgudHNcbnZhciBvcmRlciA9IFtcInhocl9wb2xsaW5nXCJdO1xudmFyIGRlZmF1bHRUcmFuc3BvcnRzID0ge1xuICBvcmRlcixcbiAgYnVuZGxlZEltcGxlbWVudGF0aW9uczoge1xuICAgIHdlYl9zb2NrZXQ6IHdlYnNvY2tldHRyYW5zcG9ydF9kZWZhdWx0LFxuICAgIHhocl9wb2xsaW5nOiB4aHJwb2xsaW5ndHJhbnNwb3J0X2RlZmF1bHRcbiAgfVxufTtcbnZhciB0cmFuc3BvcnRfZGVmYXVsdDIgPSBkZWZhdWx0VHJhbnNwb3J0cztcblxuLy8gc3JjL3BsYXRmb3JtL3dlYi9saWIvdXRpbC9kZWZhdWx0cy50c1xudmFyIERlZmF1bHRzMiA9IHtcbiAgY29ubmVjdGl2aXR5Q2hlY2tVcmw6IFwiaHR0cHM6Ly9pbnRlcm5ldC11cC5hYmx5LXJlYWx0aW1lLmNvbS9pcy10aGUtaW50ZXJuZXQtdXAudHh0XCIsXG4gIHdzQ29ubmVjdGl2aXR5VXJsOiBcIndzczovL3dzLXVwLmFibHktcmVhbHRpbWUuY29tXCIsXG4gIC8qIE9yZGVyIG1hdHRlcnMgaGVyZTogdGhlIGJhc2UgdHJhbnNwb3J0IGlzIHRoZSBsZWZ0bW9zdCBvbmUgaW4gdGhlXG4gICAqIGludGVyc2VjdGlvbiBvZiBiYXNlVHJhbnNwb3J0T3JkZXIgYW5kIHRoZSB0cmFuc3BvcnRzIGNsaWVudE9wdGlvbiB0aGF0J3NcbiAgICogc3VwcG9ydGVkLiAqL1xuICBkZWZhdWx0VHJhbnNwb3J0czogW1RyYW5zcG9ydE5hbWVzLlhoclBvbGxpbmcsIFRyYW5zcG9ydE5hbWVzLldlYlNvY2tldF1cbn07XG52YXIgZGVmYXVsdHNfZGVmYXVsdDIgPSBEZWZhdWx0czI7XG5cbi8vIHNyYy9wbGF0Zm9ybS93ZWIvbGliL3V0aWwvbXNncGFjay50c1xuZnVuY3Rpb24gaW5zcGVjdChidWZmZXIpIHtcbiAgaWYgKGJ1ZmZlciA9PT0gdm9pZCAwKVxuICAgIHJldHVybiBcInVuZGVmaW5lZFwiO1xuICBsZXQgdmlldztcbiAgbGV0IHR5cGU7XG4gIGlmIChidWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHR5cGUgPSBcIkFycmF5QnVmZmVyXCI7XG4gICAgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICB9IGVsc2UgaWYgKGJ1ZmZlciBpbnN0YW5jZW9mIERhdGFWaWV3KSB7XG4gICAgdHlwZSA9IFwiRGF0YVZpZXdcIjtcbiAgICB2aWV3ID0gYnVmZmVyO1xuICB9XG4gIGlmICghdmlldylcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYnVmZmVyKTtcbiAgY29uc3QgYnl0ZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXIuYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGkgPiAyMCkge1xuICAgICAgYnl0ZXMucHVzaChcIi4uLlwiKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBsZXQgYnl0ZV8gPSB2aWV3LmdldFVpbnQ4KGkpLnRvU3RyaW5nKDE2KTtcbiAgICBpZiAoYnl0ZV8ubGVuZ3RoID09PSAxKVxuICAgICAgYnl0ZV8gPSBcIjBcIiArIGJ5dGVfO1xuICAgIGJ5dGVzLnB1c2goYnl0ZV8pO1xuICB9XG4gIHJldHVybiBcIjxcIiArIHR5cGUgKyBcIiBcIiArIGJ5dGVzLmpvaW4oXCIgXCIpICsgXCI+XCI7XG59XG5mdW5jdGlvbiB1dGY4V3JpdGUodmlldywgb2Zmc2V0LCBzdHJpbmcpIHtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBzdHJpbmcubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgY29uc3QgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNvZGVQb2ludCA8IDEyOCkge1xuICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgY29kZVBvaW50ID4+PiAwICYgMTI3IHwgMCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGNvZGVQb2ludCA8IDIwNDgpIHtcbiAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNvZGVQb2ludCA+Pj4gNiAmIDMxIHwgMTkyKTtcbiAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNvZGVQb2ludCA+Pj4gMCAmIDYzIHwgMTI4KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoY29kZVBvaW50IDwgNjU1MzYpIHtcbiAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNvZGVQb2ludCA+Pj4gMTIgJiAxNSB8IDIyNCk7XG4gICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBjb2RlUG9pbnQgPj4+IDYgJiA2MyB8IDEyOCk7XG4gICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBjb2RlUG9pbnQgPj4+IDAgJiA2MyB8IDEyOCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGNvZGVQb2ludCA8IDExMTQxMTIpIHtcbiAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNvZGVQb2ludCA+Pj4gMTggJiA3IHwgMjQwKTtcbiAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNvZGVQb2ludCA+Pj4gMTIgJiA2MyB8IDEyOCk7XG4gICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBjb2RlUG9pbnQgPj4+IDYgJiA2MyB8IDEyOCk7XG4gICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBjb2RlUG9pbnQgPj4+IDAgJiA2MyB8IDEyOCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmFkIGNvZGVwb2ludCBcIiArIGNvZGVQb2ludCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHV0ZjhSZWFkKHZpZXcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGxldCBzdHJpbmcgPSBcIlwiO1xuICBmb3IgKGxldCBpID0gb2Zmc2V0LCBlbmQgPSBvZmZzZXQgKyBsZW5ndGg7IGkgPCBlbmQ7IGkrKykge1xuICAgIGNvbnN0IGJ5dGVfID0gdmlldy5nZXRVaW50OChpKTtcbiAgICBpZiAoKGJ5dGVfICYgMTI4KSA9PT0gMCkge1xuICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZV8pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICgoYnl0ZV8gJiAyMjQpID09PSAxOTIpIHtcbiAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChieXRlXyAmIDE1KSA8PCA2IHwgdmlldy5nZXRVaW50OCgrK2kpICYgNjMpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICgoYnl0ZV8gJiAyNDApID09PSAyMjQpIHtcbiAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFxuICAgICAgICAoYnl0ZV8gJiAxNSkgPDwgMTIgfCAodmlldy5nZXRVaW50OCgrK2kpICYgNjMpIDw8IDYgfCAodmlldy5nZXRVaW50OCgrK2kpICYgNjMpIDw8IDBcbiAgICAgICk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKChieXRlXyAmIDI0OCkgPT09IDI0MCkge1xuICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgICAgIChieXRlXyAmIDcpIDw8IDE4IHwgKHZpZXcuZ2V0VWludDgoKytpKSAmIDYzKSA8PCAxMiB8ICh2aWV3LmdldFVpbnQ4KCsraSkgJiA2MykgPDwgNiB8ICh2aWV3LmdldFVpbnQ4KCsraSkgJiA2MykgPDwgMFxuICAgICAgKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJ5dGUgXCIgKyBieXRlXy50b1N0cmluZygxNikpO1xuICB9XG4gIHJldHVybiBzdHJpbmc7XG59XG5mdW5jdGlvbiB1dGY4Qnl0ZUNvdW50KHN0cmluZykge1xuICBsZXQgY291bnQgPSAwO1xuICBmb3IgKGxldCBpID0gMCwgbCA9IHN0cmluZy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBjb25zdCBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoY29kZVBvaW50IDwgMTI4KSB7XG4gICAgICBjb3VudCArPSAxO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChjb2RlUG9pbnQgPCAyMDQ4KSB7XG4gICAgICBjb3VudCArPSAyO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChjb2RlUG9pbnQgPCA2NTUzNikge1xuICAgICAgY291bnQgKz0gMztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoY29kZVBvaW50IDwgMTExNDExMikge1xuICAgICAgY291bnQgKz0gNDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiYWQgY29kZXBvaW50IFwiICsgY29kZVBvaW50KTtcbiAgfVxuICByZXR1cm4gY291bnQ7XG59XG5mdW5jdGlvbiBlbmNvZGUyKHZhbHVlLCBzcGFyc2UpIHtcbiAgY29uc3Qgc2l6ZSA9IHNpemVvZih2YWx1ZSwgc3BhcnNlKTtcbiAgaWYgKHNpemUgPT09IDApXG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHNpemUpO1xuICBjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XG4gIF9lbmNvZGUodmFsdWUsIHZpZXcsIDAsIHNwYXJzZSk7XG4gIHJldHVybiBidWZmZXI7XG59XG52YXIgU0hfTF8zMiA9ICgxIDw8IDE2KSAqICgxIDw8IDE2KTtcbnZhciBTSF9SXzMyID0gMSAvIFNIX0xfMzI7XG5mdW5jdGlvbiBnZXRJbnQ2NCh2aWV3LCBvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG4gIHJldHVybiB2aWV3LmdldEludDMyKG9mZnNldCkgKiBTSF9MXzMyICsgdmlldy5nZXRVaW50MzIob2Zmc2V0ICsgNCk7XG59XG5mdW5jdGlvbiBnZXRVaW50NjQodmlldywgb2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICByZXR1cm4gdmlldy5nZXRVaW50MzIob2Zmc2V0KSAqIFNIX0xfMzIgKyB2aWV3LmdldFVpbnQzMihvZmZzZXQgKyA0KTtcbn1cbmZ1bmN0aW9uIHNldEludDY0KHZpZXcsIG9mZnNldCwgdmFsKSB7XG4gIGlmICh2YWwgPCA5MjIzMzcyMDM2ODU0Nzc2ZTMpIHtcbiAgICB2aWV3LnNldEludDMyKG9mZnNldCwgTWF0aC5mbG9vcih2YWwgKiBTSF9SXzMyKSk7XG4gICAgdmlldy5zZXRJbnQzMihvZmZzZXQgKyA0LCB2YWwgJiAtMSk7XG4gIH0gZWxzZSB7XG4gICAgdmlldy5zZXRVaW50MzIob2Zmc2V0LCAyMTQ3NDgzNjQ3KTtcbiAgICB2aWV3LnNldFVpbnQzMihvZmZzZXQgKyA0LCAyMTQ3NDgzNjQ3KTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0VWludDY0KHZpZXcsIG9mZnNldCwgdmFsKSB7XG4gIGlmICh2YWwgPCAxODQ0Njc0NDA3MzcwOTU1MmUzKSB7XG4gICAgdmlldy5zZXRVaW50MzIob2Zmc2V0LCBNYXRoLmZsb29yKHZhbCAqIFNIX1JfMzIpKTtcbiAgICB2aWV3LnNldEludDMyKG9mZnNldCArIDQsIHZhbCAmIC0xKTtcbiAgfSBlbHNlIHtcbiAgICB2aWV3LnNldFVpbnQzMihvZmZzZXQsIDQyOTQ5NjcyOTUpO1xuICAgIHZpZXcuc2V0VWludDMyKG9mZnNldCArIDQsIDQyOTQ5NjcyOTUpO1xuICB9XG59XG52YXIgRGVjb2RlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Iodmlldywgb2Zmc2V0KSB7XG4gICAgdGhpcy5tYXAgPSAobGVuZ3RoKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHt9O1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLnBhcnNlKCk7XG4gICAgICAgIHZhbHVlW2tleV0gPSB0aGlzLnBhcnNlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICB0aGlzLmJpbiA9IChsZW5ndGgpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gbmV3IEFycmF5QnVmZmVyKGxlbmd0aCk7XG4gICAgICBuZXcgVWludDhBcnJheSh2YWx1ZSkuc2V0KG5ldyBVaW50OEFycmF5KHRoaXMudmlldy5idWZmZXIsIHRoaXMub2Zmc2V0LCBsZW5ndGgpLCAwKTtcbiAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aDtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIHRoaXMuYnVmID0gdGhpcy5iaW47XG4gICAgdGhpcy5zdHIgPSAobGVuZ3RoKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHV0ZjhSZWFkKHRoaXMudmlldywgdGhpcy5vZmZzZXQsIGxlbmd0aCk7XG4gICAgICB0aGlzLm9mZnNldCArPSBsZW5ndGg7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICB0aGlzLmFycmF5ID0gKGxlbmd0aCkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWVbaV0gPSB0aGlzLnBhcnNlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICB0aGlzLmV4dCA9IChsZW5ndGgpID0+IHtcbiAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHRoaXMudmlldy5nZXRJbnQ4KHRoaXMub2Zmc2V0KSxcbiAgICAgICAgZGF0YTogdGhpcy5idWYobGVuZ3RoKVxuICAgICAgfTtcbiAgICB9O1xuICAgIHRoaXMucGFyc2UgPSAoKSA9PiB7XG4gICAgICBjb25zdCB0eXBlID0gdGhpcy52aWV3LmdldFVpbnQ4KHRoaXMub2Zmc2V0KTtcbiAgICAgIGxldCB2YWx1ZSwgbGVuZ3RoO1xuICAgICAgaWYgKCh0eXBlICYgMTI4KSA9PT0gMCkge1xuICAgICAgICB0aGlzLm9mZnNldCsrO1xuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgIH1cbiAgICAgIGlmICgodHlwZSAmIDI0MCkgPT09IDEyOCkge1xuICAgICAgICBsZW5ndGggPSB0eXBlICYgMTU7XG4gICAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcChsZW5ndGgpO1xuICAgICAgfVxuICAgICAgaWYgKCh0eXBlICYgMjQwKSA9PT0gMTQ0KSB7XG4gICAgICAgIGxlbmd0aCA9IHR5cGUgJiAxNTtcbiAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJyYXkobGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIGlmICgodHlwZSAmIDIyNCkgPT09IDE2MCkge1xuICAgICAgICBsZW5ndGggPSB0eXBlICYgMzE7XG4gICAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cihsZW5ndGgpO1xuICAgICAgfVxuICAgICAgaWYgKCh0eXBlICYgMjI0KSA9PT0gMjI0KSB7XG4gICAgICAgIHZhbHVlID0gdGhpcy52aWV3LmdldEludDgodGhpcy5vZmZzZXQpO1xuICAgICAgICB0aGlzLm9mZnNldCsrO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAxOTI6XG4gICAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgY2FzZSAxOTM6XG4gICAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICBjYXNlIDE5NDpcbiAgICAgICAgICB0aGlzLm9mZnNldCsrO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY2FzZSAxOTU6XG4gICAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgY2FzZSAxOTY6XG4gICAgICAgICAgbGVuZ3RoID0gdGhpcy52aWV3LmdldFVpbnQ4KHRoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgdGhpcy5vZmZzZXQgKz0gMjtcbiAgICAgICAgICByZXR1cm4gdGhpcy5iaW4obGVuZ3RoKTtcbiAgICAgICAgY2FzZSAxOTc6XG4gICAgICAgICAgbGVuZ3RoID0gdGhpcy52aWV3LmdldFVpbnQxNih0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDM7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYmluKGxlbmd0aCk7XG4gICAgICAgIGNhc2UgMTk4OlxuICAgICAgICAgIGxlbmd0aCA9IHRoaXMudmlldy5nZXRVaW50MzIodGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSA1O1xuICAgICAgICAgIHJldHVybiB0aGlzLmJpbihsZW5ndGgpO1xuICAgICAgICBjYXNlIDE5OTpcbiAgICAgICAgICBsZW5ndGggPSB0aGlzLnZpZXcuZ2V0VWludDgodGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICAgIHJldHVybiB0aGlzLmV4dChsZW5ndGgpO1xuICAgICAgICBjYXNlIDIwMDpcbiAgICAgICAgICBsZW5ndGggPSB0aGlzLnZpZXcuZ2V0VWludDE2KHRoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgdGhpcy5vZmZzZXQgKz0gMztcbiAgICAgICAgICByZXR1cm4gdGhpcy5leHQobGVuZ3RoKTtcbiAgICAgICAgY2FzZSAyMDE6XG4gICAgICAgICAgbGVuZ3RoID0gdGhpcy52aWV3LmdldFVpbnQzMih0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDU7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZXh0KGxlbmd0aCk7XG4gICAgICAgIGNhc2UgMjAyOlxuICAgICAgICAgIHZhbHVlID0gdGhpcy52aWV3LmdldEZsb2F0MzIodGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSA1O1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgY2FzZSAyMDM6XG4gICAgICAgICAgdmFsdWUgPSB0aGlzLnZpZXcuZ2V0RmxvYXQ2NCh0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDk7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICBjYXNlIDIwNDpcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMudmlldy5nZXRVaW50OCh0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDI7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICBjYXNlIDIwNTpcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMudmlldy5nZXRVaW50MTYodGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSAzO1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgY2FzZSAyMDY6XG4gICAgICAgICAgdmFsdWUgPSB0aGlzLnZpZXcuZ2V0VWludDMyKHRoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgdGhpcy5vZmZzZXQgKz0gNTtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIGNhc2UgMjA3OlxuICAgICAgICAgIHZhbHVlID0gZ2V0VWludDY0KHRoaXMudmlldywgdGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSA5O1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgY2FzZSAyMDg6XG4gICAgICAgICAgdmFsdWUgPSB0aGlzLnZpZXcuZ2V0SW50OCh0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDI7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICBjYXNlIDIwOTpcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMudmlldy5nZXRJbnQxNih0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDM7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICBjYXNlIDIxMDpcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMudmlldy5nZXRJbnQzMih0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDU7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICBjYXNlIDIxMTpcbiAgICAgICAgICB2YWx1ZSA9IGdldEludDY0KHRoaXMudmlldywgdGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSA5O1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgY2FzZSAyMTI6XG4gICAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgICB0aGlzLm9mZnNldCsrO1xuICAgICAgICAgIHJldHVybiB0aGlzLmV4dChsZW5ndGgpO1xuICAgICAgICBjYXNlIDIxMzpcbiAgICAgICAgICBsZW5ndGggPSAyO1xuICAgICAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZXh0KGxlbmd0aCk7XG4gICAgICAgIGNhc2UgMjE0OlxuICAgICAgICAgIGxlbmd0aCA9IDQ7XG4gICAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgICByZXR1cm4gdGhpcy5leHQobGVuZ3RoKTtcbiAgICAgICAgY2FzZSAyMTU6XG4gICAgICAgICAgbGVuZ3RoID0gODtcbiAgICAgICAgICB0aGlzLm9mZnNldCsrO1xuICAgICAgICAgIHJldHVybiB0aGlzLmV4dChsZW5ndGgpO1xuICAgICAgICBjYXNlIDIxNjpcbiAgICAgICAgICBsZW5ndGggPSAxNjtcbiAgICAgICAgICB0aGlzLm9mZnNldCsrO1xuICAgICAgICAgIHJldHVybiB0aGlzLmV4dChsZW5ndGgpO1xuICAgICAgICBjYXNlIDIxNzpcbiAgICAgICAgICBsZW5ndGggPSB0aGlzLnZpZXcuZ2V0VWludDgodGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICAgIHJldHVybiB0aGlzLnN0cihsZW5ndGgpO1xuICAgICAgICBjYXNlIDIxODpcbiAgICAgICAgICBsZW5ndGggPSB0aGlzLnZpZXcuZ2V0VWludDE2KHRoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgdGhpcy5vZmZzZXQgKz0gMztcbiAgICAgICAgICByZXR1cm4gdGhpcy5zdHIobGVuZ3RoKTtcbiAgICAgICAgY2FzZSAyMTk6XG4gICAgICAgICAgbGVuZ3RoID0gdGhpcy52aWV3LmdldFVpbnQzMih0aGlzLm9mZnNldCArIDEpO1xuICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDU7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3RyKGxlbmd0aCk7XG4gICAgICAgIGNhc2UgMjIwOlxuICAgICAgICAgIGxlbmd0aCA9IHRoaXMudmlldy5nZXRVaW50MTYodGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSAzO1xuICAgICAgICAgIHJldHVybiB0aGlzLmFycmF5KGxlbmd0aCk7XG4gICAgICAgIGNhc2UgMjIxOlxuICAgICAgICAgIGxlbmd0aCA9IHRoaXMudmlldy5nZXRVaW50MzIodGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSA1O1xuICAgICAgICAgIHJldHVybiB0aGlzLmFycmF5KGxlbmd0aCk7XG4gICAgICAgIGNhc2UgMjIyOlxuICAgICAgICAgIGxlbmd0aCA9IHRoaXMudmlldy5nZXRVaW50MTYodGhpcy5vZmZzZXQgKyAxKTtcbiAgICAgICAgICB0aGlzLm9mZnNldCArPSAzO1xuICAgICAgICAgIHJldHVybiB0aGlzLm1hcChsZW5ndGgpO1xuICAgICAgICBjYXNlIDIyMzpcbiAgICAgICAgICBsZW5ndGggPSB0aGlzLnZpZXcuZ2V0VWludDMyKHRoaXMub2Zmc2V0ICsgMSk7XG4gICAgICAgICAgdGhpcy5vZmZzZXQgKz0gNTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5tYXAobGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gdHlwZSAweFwiICsgdHlwZS50b1N0cmluZygxNikpO1xuICAgIH07XG4gICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICB9XG59O1xuZnVuY3Rpb24gZGVjb2RlMyhidWZmZXIpIHtcbiAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICBjb25zdCBkZWNvZGVyID0gbmV3IERlY29kZXIodmlldyk7XG4gIGNvbnN0IHZhbHVlID0gZGVjb2Rlci5wYXJzZSgpO1xuICBpZiAoZGVjb2Rlci5vZmZzZXQgIT09IGJ1ZmZlci5ieXRlTGVuZ3RoKVxuICAgIHRocm93IG5ldyBFcnJvcihidWZmZXIuYnl0ZUxlbmd0aCAtIGRlY29kZXIub2Zmc2V0ICsgXCIgdHJhaWxpbmcgYnl0ZXNcIik7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGVuY29kZWFibGVLZXlzKHZhbHVlLCBzcGFyc2UpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHZhbHVlKS5maWx0ZXIoZnVuY3Rpb24oZSkge1xuICAgIGNvbnN0IHZhbCA9IHZhbHVlW2VdLCB0eXBlID0gdHlwZW9mIHZhbDtcbiAgICByZXR1cm4gKCFzcGFyc2UgfHwgdmFsICE9PSB2b2lkIDAgJiYgdmFsICE9PSBudWxsKSAmJiAoXCJmdW5jdGlvblwiICE9PSB0eXBlIHx8ICEhdmFsLnRvSlNPTik7XG4gIH0pO1xufVxuZnVuY3Rpb24gX2VuY29kZSh2YWx1ZSwgdmlldywgb2Zmc2V0LCBzcGFyc2UpIHtcbiAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIGNvbnN0IGxlbmd0aCA9IHV0ZjhCeXRlQ291bnQodmFsdWUpO1xuICAgIGlmIChsZW5ndGggPCAzMikge1xuICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQsIGxlbmd0aCB8IDE2MCk7XG4gICAgICB1dGY4V3JpdGUodmlldywgb2Zmc2V0ICsgMSwgdmFsdWUpO1xuICAgICAgcmV0dXJuIDEgKyBsZW5ndGg7XG4gICAgfVxuICAgIGlmIChsZW5ndGggPCAyNTYpIHtcbiAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCAyMTcpO1xuICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQgKyAxLCBsZW5ndGgpO1xuICAgICAgdXRmOFdyaXRlKHZpZXcsIG9mZnNldCArIDIsIHZhbHVlKTtcbiAgICAgIHJldHVybiAyICsgbGVuZ3RoO1xuICAgIH1cbiAgICBpZiAobGVuZ3RoIDwgNjU1MzYpIHtcbiAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCAyMTgpO1xuICAgICAgdmlldy5zZXRVaW50MTYob2Zmc2V0ICsgMSwgbGVuZ3RoKTtcbiAgICAgIHV0ZjhXcml0ZSh2aWV3LCBvZmZzZXQgKyAzLCB2YWx1ZSk7XG4gICAgICByZXR1cm4gMyArIGxlbmd0aDtcbiAgICB9XG4gICAgaWYgKGxlbmd0aCA8IDQyOTQ5NjcyOTYpIHtcbiAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCAyMTkpO1xuICAgICAgdmlldy5zZXRVaW50MzIob2Zmc2V0ICsgMSwgbGVuZ3RoKTtcbiAgICAgIHV0ZjhXcml0ZSh2aWV3LCBvZmZzZXQgKyA1LCB2YWx1ZSk7XG4gICAgICByZXR1cm4gNSArIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5idWZmZXI7XG4gIH1cbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICBjb25zdCBsZW5ndGggPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgIGlmIChsZW5ndGggPCAyNTYpIHtcbiAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCAxOTYpO1xuICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQgKyAxLCBsZW5ndGgpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkodmlldy5idWZmZXIpLnNldChuZXcgVWludDhBcnJheSh2YWx1ZSksIG9mZnNldCArIDIpO1xuICAgICAgcmV0dXJuIDIgKyBsZW5ndGg7XG4gICAgfVxuICAgIGlmIChsZW5ndGggPCA2NTUzNikge1xuICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQsIDE5Nyk7XG4gICAgICB2aWV3LnNldFVpbnQxNihvZmZzZXQgKyAxLCBsZW5ndGgpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkodmlldy5idWZmZXIpLnNldChuZXcgVWludDhBcnJheSh2YWx1ZSksIG9mZnNldCArIDMpO1xuICAgICAgcmV0dXJuIDMgKyBsZW5ndGg7XG4gICAgfVxuICAgIGlmIChsZW5ndGggPCA0Mjk0OTY3Mjk2KSB7XG4gICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCwgMTk4KTtcbiAgICAgIHZpZXcuc2V0VWludDMyKG9mZnNldCArIDEsIGxlbmd0aCk7XG4gICAgICBuZXcgVWludDhBcnJheSh2aWV3LmJ1ZmZlcikuc2V0KG5ldyBVaW50OEFycmF5KHZhbHVlKSwgb2Zmc2V0ICsgNSk7XG4gICAgICByZXR1cm4gNSArIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmIChNYXRoLmZsb29yKHZhbHVlKSAhPT0gdmFsdWUpIHtcbiAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCAyMDMpO1xuICAgICAgdmlldy5zZXRGbG9hdDY0KG9mZnNldCArIDEsIHZhbHVlKTtcbiAgICAgIHJldHVybiA5O1xuICAgIH1cbiAgICBpZiAodmFsdWUgPj0gMCkge1xuICAgICAgaWYgKHZhbHVlIDwgMTI4KSB7XG4gICAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlIDwgMjU2KSB7XG4gICAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCAyMDQpO1xuICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCArIDEsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPCA2NTUzNikge1xuICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCwgMjA1KTtcbiAgICAgICAgdmlldy5zZXRVaW50MTYob2Zmc2V0ICsgMSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gMztcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA8IDQyOTQ5NjcyOTYpIHtcbiAgICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQsIDIwNik7XG4gICAgICAgIHZpZXcuc2V0VWludDMyKG9mZnNldCArIDEsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIDU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPCAxODQ0Njc0NDA3MzcwOTU1MmUzKSB7XG4gICAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCAyMDcpO1xuICAgICAgICBzZXRVaW50NjQodmlldywgb2Zmc2V0ICsgMSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gOTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk51bWJlciB0b28gYmlnIDB4XCIgKyB2YWx1ZS50b1N0cmluZygxNikpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPj0gLTMyKSB7XG4gICAgICB2aWV3LnNldEludDgob2Zmc2V0LCB2YWx1ZSk7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKHZhbHVlID49IC0xMjgpIHtcbiAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCAyMDgpO1xuICAgICAgdmlldy5zZXRJbnQ4KG9mZnNldCArIDEsIHZhbHVlKTtcbiAgICAgIHJldHVybiAyO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPj0gLTMyNzY4KSB7XG4gICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCwgMjA5KTtcbiAgICAgIHZpZXcuc2V0SW50MTYob2Zmc2V0ICsgMSwgdmFsdWUpO1xuICAgICAgcmV0dXJuIDM7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA+PSAtMjE0NzQ4MzY0OCkge1xuICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQsIDIxMCk7XG4gICAgICB2aWV3LnNldEludDMyKG9mZnNldCArIDEsIHZhbHVlKTtcbiAgICAgIHJldHVybiA1O1xuICAgIH1cbiAgICBpZiAodmFsdWUgPj0gLTkyMjMzNzIwMzY4NTQ3NzZlMykge1xuICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQsIDIxMSk7XG4gICAgICBzZXRJbnQ2NCh2aWV3LCBvZmZzZXQgKyAxLCB2YWx1ZSk7XG4gICAgICByZXR1cm4gOTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTnVtYmVyIHRvbyBzbWFsbCAtMHhcIiArICgtdmFsdWUpLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSkpO1xuICB9XG4gIGlmICh0eXBlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgaWYgKHNwYXJzZSlcbiAgICAgIHJldHVybiAwO1xuICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCAyMTIpO1xuICAgIHZpZXcuc2V0VWludDgob2Zmc2V0ICsgMSwgMCk7XG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQgKyAyLCAwKTtcbiAgICByZXR1cm4gMztcbiAgfVxuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICBpZiAoc3BhcnNlKVxuICAgICAgcmV0dXJuIDA7XG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQsIDE5Mik7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgaWYgKHR5cGUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQsIHZhbHVlID8gMTk1IDogMTk0KTtcbiAgICByZXR1cm4gMTtcbiAgfVxuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUudG9KU09OKVxuICAgIHJldHVybiBfZW5jb2RlKHZhbHVlLnRvSlNPTigpLCB2aWV3LCBvZmZzZXQsIHNwYXJzZSk7XG4gIGlmICh0eXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgbGV0IGxlbmd0aCwgc2l6ZSA9IDA7XG4gICAgbGV0IGtleXM7XG4gICAgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICAgIGlmIChpc0FycmF5KSB7XG4gICAgICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBlbmNvZGVhYmxlS2V5cyh2YWx1ZSwgc3BhcnNlKTtcbiAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAobGVuZ3RoIDwgMTYpIHtcbiAgICAgIHZpZXcuc2V0VWludDgob2Zmc2V0LCBsZW5ndGggfCAoaXNBcnJheSA/IDE0NCA6IDEyOCkpO1xuICAgICAgc2l6ZSA9IDE7XG4gICAgfSBlbHNlIGlmIChsZW5ndGggPCA2NTUzNikge1xuICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQsIGlzQXJyYXkgPyAyMjAgOiAyMjIpO1xuICAgICAgdmlldy5zZXRVaW50MTYob2Zmc2V0ICsgMSwgbGVuZ3RoKTtcbiAgICAgIHNpemUgPSAzO1xuICAgIH0gZWxzZSBpZiAobGVuZ3RoIDwgNDI5NDk2NzI5Nikge1xuICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQsIGlzQXJyYXkgPyAyMjEgOiAyMjMpO1xuICAgICAgdmlldy5zZXRVaW50MzIob2Zmc2V0ICsgMSwgbGVuZ3RoKTtcbiAgICAgIHNpemUgPSA1O1xuICAgIH1cbiAgICBpZiAoaXNBcnJheSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBzaXplICs9IF9lbmNvZGUodmFsdWVbaV0sIHZpZXcsIG9mZnNldCArIHNpemUsIHNwYXJzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChrZXlzKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICAgIHNpemUgKz0gX2VuY29kZShrZXksIHZpZXcsIG9mZnNldCArIHNpemUpO1xuICAgICAgICBzaXplICs9IF9lbmNvZGUodmFsdWVba2V5XSwgdmlldywgb2Zmc2V0ICsgc2l6ZSwgc3BhcnNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNpemU7XG4gIH1cbiAgaWYgKHR5cGUgPT09IFwiZnVuY3Rpb25cIilcbiAgICByZXR1cm4gMDtcbiAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biB0eXBlIFwiICsgdHlwZSk7XG59XG5mdW5jdGlvbiBzaXplb2YodmFsdWUsIHNwYXJzZSkge1xuICBjb25zdCB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIGNvbnN0IGxlbmd0aCA9IHV0ZjhCeXRlQ291bnQodmFsdWUpO1xuICAgIGlmIChsZW5ndGggPCAzMikge1xuICAgICAgcmV0dXJuIDEgKyBsZW5ndGg7XG4gICAgfVxuICAgIGlmIChsZW5ndGggPCAyNTYpIHtcbiAgICAgIHJldHVybiAyICsgbGVuZ3RoO1xuICAgIH1cbiAgICBpZiAobGVuZ3RoIDwgNjU1MzYpIHtcbiAgICAgIHJldHVybiAzICsgbGVuZ3RoO1xuICAgIH1cbiAgICBpZiAobGVuZ3RoIDwgNDI5NDk2NzI5Nikge1xuICAgICAgcmV0dXJuIDUgKyBsZW5ndGg7XG4gICAgfVxuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkge1xuICAgIHZhbHVlID0gdmFsdWUuYnVmZmVyO1xuICB9XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICBpZiAobGVuZ3RoIDwgMjU2KSB7XG4gICAgICByZXR1cm4gMiArIGxlbmd0aDtcbiAgICB9XG4gICAgaWYgKGxlbmd0aCA8IDY1NTM2KSB7XG4gICAgICByZXR1cm4gMyArIGxlbmd0aDtcbiAgICB9XG4gICAgaWYgKGxlbmd0aCA8IDQyOTQ5NjcyOTYpIHtcbiAgICAgIHJldHVybiA1ICsgbGVuZ3RoO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKE1hdGguZmxvb3IodmFsdWUpICE9PSB2YWx1ZSlcbiAgICAgIHJldHVybiA5O1xuICAgIGlmICh2YWx1ZSA+PSAwKSB7XG4gICAgICBpZiAodmFsdWUgPCAxMjgpXG4gICAgICAgIHJldHVybiAxO1xuICAgICAgaWYgKHZhbHVlIDwgMjU2KVxuICAgICAgICByZXR1cm4gMjtcbiAgICAgIGlmICh2YWx1ZSA8IDY1NTM2KVxuICAgICAgICByZXR1cm4gMztcbiAgICAgIGlmICh2YWx1ZSA8IDQyOTQ5NjcyOTYpXG4gICAgICAgIHJldHVybiA1O1xuICAgICAgaWYgKHZhbHVlIDwgMTg0NDY3NDQwNzM3MDk1NTJlMylcbiAgICAgICAgcmV0dXJuIDk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOdW1iZXIgdG9vIGJpZyAweFwiICsgdmFsdWUudG9TdHJpbmcoMTYpKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlID49IC0zMilcbiAgICAgIHJldHVybiAxO1xuICAgIGlmICh2YWx1ZSA+PSAtMTI4KVxuICAgICAgcmV0dXJuIDI7XG4gICAgaWYgKHZhbHVlID49IC0zMjc2OClcbiAgICAgIHJldHVybiAzO1xuICAgIGlmICh2YWx1ZSA+PSAtMjE0NzQ4MzY0OClcbiAgICAgIHJldHVybiA1O1xuICAgIGlmICh2YWx1ZSA+PSAtOTIyMzM3MjAzNjg1NDc3NmUzKVxuICAgICAgcmV0dXJuIDk7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTnVtYmVyIHRvbyBzbWFsbCAtMHhcIiArIHZhbHVlLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSkpO1xuICB9XG4gIGlmICh0eXBlID09PSBcImJvb2xlYW5cIilcbiAgICByZXR1cm4gMTtcbiAgaWYgKHZhbHVlID09PSBudWxsKVxuICAgIHJldHVybiBzcGFyc2UgPyAwIDogMTtcbiAgaWYgKHZhbHVlID09PSB2b2lkIDApXG4gICAgcmV0dXJuIHNwYXJzZSA/IDAgOiAzO1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUudG9KU09OKVxuICAgIHJldHVybiBzaXplb2YodmFsdWUudG9KU09OKCksIHNwYXJzZSk7XG4gIGlmICh0eXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgbGV0IGxlbmd0aCwgc2l6ZSA9IDA7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNpemUgKz0gc2l6ZW9mKHZhbHVlW2ldLCBzcGFyc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBrZXlzID0gZW5jb2RlYWJsZUtleXModmFsdWUsIHNwYXJzZSk7XG4gICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgc2l6ZSArPSBzaXplb2Yoa2V5KSArIHNpemVvZih2YWx1ZVtrZXldLCBzcGFyc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobGVuZ3RoIDwgMTYpIHtcbiAgICAgIHJldHVybiAxICsgc2l6ZTtcbiAgICB9XG4gICAgaWYgKGxlbmd0aCA8IDY1NTM2KSB7XG4gICAgICByZXR1cm4gMyArIHNpemU7XG4gICAgfVxuICAgIGlmIChsZW5ndGggPCA0Mjk0OTY3Mjk2KSB7XG4gICAgICByZXR1cm4gNSArIHNpemU7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIkFycmF5IG9yIG9iamVjdCB0b28gbG9uZyAweFwiICsgbGVuZ3RoLnRvU3RyaW5nKDE2KSk7XG4gIH1cbiAgaWYgKHR5cGUgPT09IFwiZnVuY3Rpb25cIilcbiAgICByZXR1cm4gMDtcbiAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biB0eXBlIFwiICsgdHlwZSk7XG59XG52YXIgbXNncGFja19kZWZhdWx0ID0ge1xuICBlbmNvZGU6IGVuY29kZTIsXG4gIGRlY29kZTogZGVjb2RlMyxcbiAgaW5zcGVjdCxcbiAgdXRmOFdyaXRlLFxuICB1dGY4UmVhZCxcbiAgdXRmOEJ5dGVDb3VudFxufTtcblxuLy8gc3JjL3BsYXRmb3JtL3dlYi9saWIvaHR0cC9yZXF1ZXN0L2ZldGNocmVxdWVzdC50c1xuZnVuY3Rpb24gaXNBYmx5RXJyb3IyKHJlc3BvbnNlQm9keSwgaGVhZGVycykge1xuICByZXR1cm4gISFoZWFkZXJzLmdldChcIngtYWJseS1lcnJvcmNvZGVcIik7XG59XG5mdW5jdGlvbiBnZXRBYmx5RXJyb3IyKHJlc3BvbnNlQm9keSwgaGVhZGVycykge1xuICBpZiAoaXNBYmx5RXJyb3IyKHJlc3BvbnNlQm9keSwgaGVhZGVycykpIHtcbiAgICByZXR1cm4gcmVzcG9uc2VCb2R5LmVycm9yICYmIEVycm9ySW5mby5mcm9tVmFsdWVzKHJlc3BvbnNlQm9keS5lcnJvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbnZlcnRIZWFkZXJzKGhlYWRlcnMpIHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGhlYWRlcnMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hSZXF1ZXN0KG1ldGhvZCwgY2xpZW50LCB1cmksIGhlYWRlcnMsIHBhcmFtcywgYm9keSkge1xuICBjb25zdCBmZXRjaEhlYWRlcnMgPSBuZXcgSGVhZGVycyhoZWFkZXJzIHx8IHt9KTtcbiAgY29uc3QgX21ldGhvZCA9IG1ldGhvZCA/IG1ldGhvZC50b1VwcGVyQ2FzZSgpIDogaXNOaWwoYm9keSkgPyBcIkdFVFwiIDogXCJQT1NUXCI7XG4gIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gIGxldCB0aW1lb3V0O1xuICBjb25zdCB0aW1lb3V0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoXG4gICAgICAoKSA9PiB7XG4gICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgcmVzb2x2ZSh7IGVycm9yOiBuZXcgUGFydGlhbEVycm9ySW5mbyhcIlJlcXVlc3QgdGltZWQgb3V0XCIsIG51bGwsIDQwOCkgfSk7XG4gICAgICB9LFxuICAgICAgY2xpZW50ID8gY2xpZW50Lm9wdGlvbnMudGltZW91dHMuaHR0cFJlcXVlc3RUaW1lb3V0IDogZGVmYXVsdHNfZGVmYXVsdC5USU1FT1VUUy5odHRwUmVxdWVzdFRpbWVvdXRcbiAgICApO1xuICB9KTtcbiAgY29uc3QgcmVxdWVzdEluaXQgPSB7XG4gICAgbWV0aG9kOiBfbWV0aG9kLFxuICAgIGhlYWRlcnM6IGZldGNoSGVhZGVycyxcbiAgICBib2R5LFxuICAgIHNpZ25hbDogY29udHJvbGxlci5zaWduYWxcbiAgfTtcbiAgaWYgKCFQbGF0Zm9ybS5Db25maWcuaXNXZWJ3b3JrZXIpIHtcbiAgICByZXF1ZXN0SW5pdC5jcmVkZW50aWFscyA9IGZldGNoSGVhZGVycy5oYXMoXCJhdXRob3JpemF0aW9uXCIpID8gXCJpbmNsdWRlXCIgOiBcInNhbWUtb3JpZ2luXCI7XG4gIH1cbiAgY29uc3QgcmVzdWx0UHJvbWlzZSA9IChhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGdldEdsb2JhbE9iamVjdCgpLmZldGNoKHVyaSArIFwiP1wiICsgbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXJhbXMgfHwge30pLCByZXF1ZXN0SW5pdCk7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICBpZiAocmVzLnN0YXR1cyA9PSAyMDQpIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IG51bGwsIHN0YXR1c0NvZGU6IHJlcy5zdGF0dXMgfTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gcmVzLmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpO1xuICAgICAgbGV0IGJvZHkyO1xuICAgICAgaWYgKGNvbnRlbnRUeXBlICYmIGNvbnRlbnRUeXBlLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LW1zZ3BhY2tcIikgPiAtMSkge1xuICAgICAgICBib2R5MiA9IGF3YWl0IHJlcy5hcnJheUJ1ZmZlcigpO1xuICAgICAgfSBlbHNlIGlmIChjb250ZW50VHlwZSAmJiBjb250ZW50VHlwZS5pbmRleE9mKFwiYXBwbGljYXRpb24vanNvblwiKSA+IC0xKSB7XG4gICAgICAgIGJvZHkyID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJvZHkyID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHVucGFja2VkID0gISFjb250ZW50VHlwZSAmJiBjb250ZW50VHlwZS5pbmRleE9mKFwiYXBwbGljYXRpb24veC1tc2dwYWNrXCIpID09PSAtMTtcbiAgICAgIGNvbnN0IGhlYWRlcnMyID0gY29udmVydEhlYWRlcnMocmVzLmhlYWRlcnMpO1xuICAgICAgaWYgKCFyZXMub2spIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBnZXRBYmx5RXJyb3IyKGJvZHkyLCByZXMuaGVhZGVycykgfHwgbmV3IFBhcnRpYWxFcnJvckluZm8oXG4gICAgICAgICAgXCJFcnJvciByZXNwb25zZSByZWNlaXZlZCBmcm9tIHNlcnZlcjogXCIgKyByZXMuc3RhdHVzICsgXCIgYm9keSB3YXM6IFwiICsgUGxhdGZvcm0uQ29uZmlnLmluc3BlY3QoYm9keTIpLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcmVzLnN0YXR1c1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4geyBlcnJvciwgYm9keTogYm9keTIsIGhlYWRlcnM6IGhlYWRlcnMyLCB1bnBhY2tlZCwgc3RhdHVzQ29kZTogcmVzLnN0YXR1cyB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IG51bGwsIGJvZHk6IGJvZHkyLCBoZWFkZXJzOiBoZWFkZXJzMiwgdW5wYWNrZWQsIHN0YXR1c0NvZGU6IHJlcy5zdGF0dXMgfTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgcmV0dXJuIHsgZXJyb3IgfTtcbiAgICB9XG4gIH0pKCk7XG4gIHJldHVybiBQcm9taXNlLnJhY2UoW3RpbWVvdXRQcm9taXNlLCByZXN1bHRQcm9taXNlXSk7XG59XG5cbi8vIHNyYy9wbGF0Zm9ybS93ZWIvbGliL2h0dHAvcmVxdWVzdC9pbmRleC50c1xudmFyIGRlZmF1bHRCdW5kbGVkUmVxdWVzdEltcGxlbWVudGF0aW9ucyA9IHtcbiAgWEhSUmVxdWVzdDogeGhycmVxdWVzdF9kZWZhdWx0LFxuICBGZXRjaFJlcXVlc3Q6IGZldGNoUmVxdWVzdFxufTtcblxuLy8gc3JjL3BsYXRmb3JtL3dlYi9pbmRleC50c1xudmFyIENyeXB0byA9IGNyZWF0ZUNyeXB0b0NsYXNzKGNvbmZpZ19kZWZhdWx0LCBidWZmZXJ1dGlsc19kZWZhdWx0KTtcblBsYXRmb3JtLkNyeXB0byA9IENyeXB0bztcblBsYXRmb3JtLkJ1ZmZlclV0aWxzID0gYnVmZmVydXRpbHNfZGVmYXVsdDtcblBsYXRmb3JtLkh0dHAgPSBodHRwX2RlZmF1bHQ7XG5QbGF0Zm9ybS5Db25maWcgPSBjb25maWdfZGVmYXVsdDtcblBsYXRmb3JtLlRyYW5zcG9ydHMgPSB0cmFuc3BvcnRfZGVmYXVsdDI7XG5QbGF0Zm9ybS5XZWJTdG9yYWdlID0gd2Vic3RvcmFnZV9kZWZhdWx0O1xuZm9yIChjb25zdCBjbGllbnRDbGFzcyBvZiBbRGVmYXVsdFJlc3QsIERlZmF1bHRSZWFsdGltZV0pIHtcbiAgY2xpZW50Q2xhc3MuQ3J5cHRvID0gQ3J5cHRvO1xuICBjbGllbnRDbGFzcy5fTXNnUGFjayA9IG1zZ3BhY2tfZGVmYXVsdDtcbn1cbmh0dHBfZGVmYXVsdC5idW5kbGVkUmVxdWVzdEltcGxlbWVudGF0aW9ucyA9IGRlZmF1bHRCdW5kbGVkUmVxdWVzdEltcGxlbWVudGF0aW9ucztcbmxvZ2dlcl9kZWZhdWx0LmluaXRMb2dIYW5kbGVycygpO1xuUGxhdGZvcm0uRGVmYXVsdHMgPSBnZXREZWZhdWx0cyhkZWZhdWx0c19kZWZhdWx0Mik7XG5pZiAoUGxhdGZvcm0uQ29uZmlnLmFnZW50KSB7XG4gIFBsYXRmb3JtLkRlZmF1bHRzLmFnZW50ICs9IFwiIFwiICsgUGxhdGZvcm0uQ29uZmlnLmFnZW50O1xufVxudmFyIHdlYl9kZWZhdWx0ID0ge1xuICBFcnJvckluZm8sXG4gIFJlc3Q6IERlZmF1bHRSZXN0LFxuICBSZWFsdGltZTogRGVmYXVsdFJlYWx0aW1lLFxuICBtc2dwYWNrOiBtc2dwYWNrX2RlZmF1bHRcbn07XG5pZiAodHlwZW9mIG1vZHVsZS5leHBvcnRzID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGV4cG9ydHMgPT0gXCJvYmplY3RcIikge1xuICB2YXIgX19jcCA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gICAgaWYgKChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiKSB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZnJvbSkpIHtcbiAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0bywga2V5LCB7XG4gICAgICAgICAgZ2V0OiAoKSA9PiBmcm9tW2tleV0sXG4gICAgICAgICAgZW51bWVyYWJsZTogIShkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG87XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gX19jcChtb2R1bGUuZXhwb3J0cywgZXhwb3J0cyk7XG59XG5yZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFibHkuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/ably@2.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/ably/build/ably.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/message/chat-box.jsx":
/*!**************************************!*\
  !*** ./src/app/message/chat-box.jsx ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {



;
    // Wrapped in an IIFE to avoid polluting the global scope
    ;
    (function () {
        var _a, _b;
        // Legacy CSS implementations will `eval` browser code in a Node.js context
        // to extract CSS. For backwards compatibility, we need to check we're in a
        // browser context before continuing.
        if (typeof self !== 'undefined' &&
            // AMP / No-JS mode does not inject these helpers:
            '$RefreshHelpers$' in self) {
            // @ts-ignore __webpack_module__ is global
            var currentExports = module.exports;
            // @ts-ignore __webpack_module__ is global
            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;
            // This cannot happen in MainTemplate because the exports mismatch between
            // templating and execution.
            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
            // A module can be accepted automatically based on its exports, e.g. when
            // it is a Refresh Boundary.
            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
                // Save the previous exports signature on update so we can compare the boundary
                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)
                module.hot.dispose(function (data) {
                    data.prevSignature =
                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);
                });
                // Unconditionally accept an update to this module, we'll check if it's
                // still a Refresh Boundary later.
                // @ts-ignore importMeta is replaced in the loader
                module.hot.accept();
                // This field is set when the previous version of this module was a
                // Refresh Boundary, letting us know we need to check for invalidation or
                // enqueue an update.
                if (prevSignature !== null) {
                    // A boundary can become ineligible if its exports are incompatible
                    // with the previous exports.
                    //
                    // For example, if you add/remove/change exports, we'll want to
                    // re-execute the importing modules, and force those components to
                    // re-render. Similarly, if you convert a class component to a
                    // function, we want to invalidate the boundary.
                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {
                        module.hot.invalidate();
                    }
                    else {
                        self.$RefreshHelpers$.scheduleUpdate();
                    }
                }
            }
            else {
                // Since we just executed the code for the module, it's possible that the
                // new exports made it ineligible for being a boundary.
                // We only care about the case when we were _previously_ a boundary,
                // because we already accepted this update (accidental side effect).
                var isNoLongerABoundary = prevSignature !== null;
                if (isNoLongerABoundary) {
                    module.hot.invalidate();
                }
            }
        }
    })();


/***/ }),

/***/ "(app-pages-browser)/./src/app/message/chat.jsx":
/*!**********************************!*\
  !*** ./src/app/message/chat.jsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Chat; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.7_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var ably__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ably */ \"(app-pages-browser)/./node_modules/.pnpm/ably@2.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/ably/build/ably.js\");\n/* harmony import */ var ably__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ably__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _chat_box__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chat-box */ \"(app-pages-browser)/./src/app/message/chat-box.jsx\");\n/* harmony import */ var _chat_box__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_chat_box__WEBPACK_IMPORTED_MODULE_2__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\nfunction Chat() {\n    const client = new ably__WEBPACK_IMPORTED_MODULE_1__.Realtime({\n        key: \"VpPesA.e058xw:HltRuWqP4MBNSxON5IERYcR4ODsj96dUmpcwC84keGk\"\n    });\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((_chat_box__WEBPACK_IMPORTED_MODULE_2___default()), {}, void 0, false, {\n        fileName: \"C:\\\\Users\\\\ADMIN\\\\OneDrive\\\\Hình ảnh\\\\Tài li\\xeạu\\\\GitHub\\\\Protein_bind\\\\protein-bind-website\\\\src\\\\app\\\\message\\\\chat.jsx\",\n        lineNumber: 8,\n        columnNumber: 10\n    }, this);\n}\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvbWVzc2FnZS9jaGF0LmpzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQzZCO0FBQ0k7QUFDbEIsU0FBU0U7SUFDdEIsTUFBTUMsU0FBUyxJQUFJSCwwQ0FBYSxDQUFDO1FBQy9CSyxLQUFLO0lBQ1A7SUFDQSxxQkFBTyw4REFBQ0osa0RBQU9BOzs7OztBQUNqQjtLQUx3QkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2FwcC9tZXNzYWdlL2NoYXQuanN4P2I0MDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XHJcbmltcG9ydCAqIGFzIEFibHkgZnJvbSBcImFibHlcIjtcclxuaW1wb3J0IENoYXRCb3ggZnJvbSBcIi4vY2hhdC1ib3hcIjtcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ2hhdCgpIHtcclxuICBjb25zdCBjbGllbnQgPSBuZXcgQWJseS5SZWFsdGltZSh7XHJcbiAgICBrZXk6IFwiVnBQZXNBLmUwNTh4dzpIbHRSdVdxUDRNQk5TeE9ONUlFUlljUjRPRHNqOTZkVW1wY3dDODRrZUdrXCIsXHJcbiAgfSk7XHJcbiAgcmV0dXJuIDxDaGF0Qm94IC8+O1xyXG59XHJcbiJdLCJuYW1lcyI6WyJBYmx5IiwiQ2hhdEJveCIsIkNoYXQiLCJjbGllbnQiLCJSZWFsdGltZSIsImtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/message/chat.jsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.2.7_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.2.7_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*******************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.7_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nvar REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\nvar enableRenderableContext = false;\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false;\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nvar REACT_CLIENT_REFERENCE$2 = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  if (typeof type === 'function') {\n    if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    {\n      if (typeof type.tag === 'number') {\n        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n      }\n    }\n\n    switch (type.$$typeof) {\n      case REACT_PROVIDER_TYPE:\n        {\n          var provider = type;\n          return getContextName(provider._context) + '.Provider';\n        }\n\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n\n        {\n          return getContextName(context) + '.Consumer';\n        }\n\n      case REACT_CONSUMER_TYPE:\n        {\n          return null;\n        }\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar assign = Object.assign;\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || enableRenderableContext  || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    {\n      var warnAboutAccessingRef = function () {\n        if (!specialPropRefWarningShown) {\n          specialPropRefWarningShown = true;\n\n          error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n        }\n      };\n\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, _ref, self, source, owner, props) {\n  var ref;\n\n  {\n    ref = _ref;\n  }\n\n  var element;\n\n  {\n    // In prod, `ref` is a regular property. It will be removed in a\n    // future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n      // Built-in properties that belong on the element\n      type: type,\n      key: key,\n      ref: ref,\n      props: props,\n      // Record the component responsible for creating this element.\n      _owner: owner\n    };\n  }\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // debugInfo contains Server Component debug information.\n\n    Object.defineProperty(element, '_debugInfo', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: null\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\nvar didWarnAboutKeySpread = {};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, isStaticChildren, source, self) {\n  {\n    if (!isValidElementType(type)) {\n      // This is an invalid element type.\n      //\n      // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    } else {\n      // This is a valid element type.\n      // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing\n      // errors. We don't want exception behavior to differ between dev and\n      // prod. (Rendering will throw with a helpful message and as soon as the\n      // type is fixed, the key warnings will appear.)\n      var children = config.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    } // Warn about key spread regardless of whether the type is valid.\n\n\n    if (hasOwnProperty.call(config, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(config).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      {\n        ref = config.ref;\n      }\n\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n      propName !== 'key' && (propName !== 'ref')) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    var element = ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    }\n\n    return element;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nvar ownerHasKeyUseWarning = {};\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = getComponentNameFromType(parentType);\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  // TODO: Move this to render phase instead of at element creation.\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar jsxDEV = jsxDEV$1 ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.2.7_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.2.7_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.2.7_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \*********************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.7_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjIuN19yZWFjdC1kb21AMTguMy4xX3JlYWN0QDE4LjMuMV9fcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSx5UUFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTQuMi43X3JlYWN0LWRvbUAxOC4zLjFfcmVhY3RAMTguMy4xX19yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanM/MzVjYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.2.7_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ })

});